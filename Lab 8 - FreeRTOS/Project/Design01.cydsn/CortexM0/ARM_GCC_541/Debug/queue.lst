ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"queue.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.prvGetDisinheritPriorityAfterTimeout,"ax",%progbits
  20              		.align	2
  21              		.code	16
  22              		.thumb_func
  23              		.type	prvGetDisinheritPriorityAfterTimeout, %function
  24              	prvGetDisinheritPriorityAfterTimeout:
  25              	.LFB54:
  26              		.file 1 "FreeRTOS\\Source\\queue.c"
   1:FreeRTOS\Source/queue.c **** /*
   2:FreeRTOS\Source/queue.c ****  * FreeRTOS Kernel V10.5.1
   3:FreeRTOS\Source/queue.c ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS\Source/queue.c ****  *
   5:FreeRTOS\Source/queue.c ****  * SPDX-License-Identifier: MIT
   6:FreeRTOS\Source/queue.c ****  *
   7:FreeRTOS\Source/queue.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:FreeRTOS\Source/queue.c ****  * this software and associated documentation files (the "Software"), to deal in
   9:FreeRTOS\Source/queue.c ****  * the Software without restriction, including without limitation the rights to
  10:FreeRTOS\Source/queue.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:FreeRTOS\Source/queue.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:FreeRTOS\Source/queue.c ****  * subject to the following conditions:
  13:FreeRTOS\Source/queue.c ****  *
  14:FreeRTOS\Source/queue.c ****  * The above copyright notice and this permission notice shall be included in all
  15:FreeRTOS\Source/queue.c ****  * copies or substantial portions of the Software.
  16:FreeRTOS\Source/queue.c ****  *
  17:FreeRTOS\Source/queue.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:FreeRTOS\Source/queue.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:FreeRTOS\Source/queue.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:FreeRTOS\Source/queue.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:FreeRTOS\Source/queue.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:FreeRTOS\Source/queue.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:FreeRTOS\Source/queue.c ****  *
  24:FreeRTOS\Source/queue.c ****  * https://www.FreeRTOS.org
  25:FreeRTOS\Source/queue.c ****  * https://github.com/FreeRTOS
  26:FreeRTOS\Source/queue.c ****  *
  27:FreeRTOS\Source/queue.c ****  */
  28:FreeRTOS\Source/queue.c **** 
  29:FreeRTOS\Source/queue.c **** #include <stdlib.h>
  30:FreeRTOS\Source/queue.c **** #include <string.h>
  31:FreeRTOS\Source/queue.c **** 
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 2


  32:FreeRTOS\Source/queue.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:FreeRTOS\Source/queue.c ****  * all the API functions to use the MPU wrappers.  That should only be done when
  34:FreeRTOS\Source/queue.c ****  * task.h is included from an application file. */
  35:FreeRTOS\Source/queue.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:FreeRTOS\Source/queue.c **** 
  37:FreeRTOS\Source/queue.c **** #include "FreeRTOS.h"
  38:FreeRTOS\Source/queue.c **** #include "task.h"
  39:FreeRTOS\Source/queue.c **** #include "queue.h"
  40:FreeRTOS\Source/queue.c **** 
  41:FreeRTOS\Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
  42:FreeRTOS\Source/queue.c ****     #include "croutine.h"
  43:FreeRTOS\Source/queue.c **** #endif
  44:FreeRTOS\Source/queue.c **** 
  45:FreeRTOS\Source/queue.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  46:FreeRTOS\Source/queue.c ****  * because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  47:FreeRTOS\Source/queue.c ****  * for the header files above, but not in this file, in order to generate the
  48:FreeRTOS\Source/queue.c ****  * correct privileged Vs unprivileged linkage and placement. */
  49:FreeRTOS\Source/queue.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  50:FreeRTOS\Source/queue.c **** 
  51:FreeRTOS\Source/queue.c **** 
  52:FreeRTOS\Source/queue.c **** /* Constants used with the cRxLock and cTxLock structure members. */
  53:FreeRTOS\Source/queue.c **** #define queueUNLOCKED             ( ( int8_t ) -1 )
  54:FreeRTOS\Source/queue.c **** #define queueLOCKED_UNMODIFIED    ( ( int8_t ) 0 )
  55:FreeRTOS\Source/queue.c **** #define queueINT8_MAX             ( ( int8_t ) 127 )
  56:FreeRTOS\Source/queue.c **** 
  57:FreeRTOS\Source/queue.c **** /* When the Queue_t structure is used to represent a base queue its pcHead and
  58:FreeRTOS\Source/queue.c ****  * pcTail members are used as pointers into the queue storage area.  When the
  59:FreeRTOS\Source/queue.c ****  * Queue_t structure is used to represent a mutex pcHead and pcTail pointers are
  60:FreeRTOS\Source/queue.c ****  * not necessary, and the pcHead pointer is set to NULL to indicate that the
  61:FreeRTOS\Source/queue.c ****  * structure instead holds a pointer to the mutex holder (if any).  Map alternative
  62:FreeRTOS\Source/queue.c ****  * names to the pcHead and structure member to ensure the readability of the code
  63:FreeRTOS\Source/queue.c ****  * is maintained.  The QueuePointers_t and SemaphoreData_t types are used to form
  64:FreeRTOS\Source/queue.c ****  * a union as their usage is mutually exclusive dependent on what the queue is
  65:FreeRTOS\Source/queue.c ****  * being used for. */
  66:FreeRTOS\Source/queue.c **** #define uxQueueType               pcHead
  67:FreeRTOS\Source/queue.c **** #define queueQUEUE_IS_MUTEX       NULL
  68:FreeRTOS\Source/queue.c **** 
  69:FreeRTOS\Source/queue.c **** typedef struct QueuePointers
  70:FreeRTOS\Source/queue.c **** {
  71:FreeRTOS\Source/queue.c ****     int8_t * pcTail;     /*< Points to the byte at the end of the queue storage area.  Once more by
  72:FreeRTOS\Source/queue.c ****     int8_t * pcReadFrom; /*< Points to the last place that a queued item was read from when the str
  73:FreeRTOS\Source/queue.c **** } QueuePointers_t;
  74:FreeRTOS\Source/queue.c **** 
  75:FreeRTOS\Source/queue.c **** typedef struct SemaphoreData
  76:FreeRTOS\Source/queue.c **** {
  77:FreeRTOS\Source/queue.c ****     TaskHandle_t xMutexHolder;        /*< The handle of the task that holds the mutex. */
  78:FreeRTOS\Source/queue.c ****     UBaseType_t uxRecursiveCallCount; /*< Maintains a count of the number of times a recursive mute
  79:FreeRTOS\Source/queue.c **** } SemaphoreData_t;
  80:FreeRTOS\Source/queue.c **** 
  81:FreeRTOS\Source/queue.c **** /* Semaphores do not actually store or copy data, so have an item size of
  82:FreeRTOS\Source/queue.c ****  * zero. */
  83:FreeRTOS\Source/queue.c **** #define queueSEMAPHORE_QUEUE_ITEM_LENGTH    ( ( UBaseType_t ) 0 )
  84:FreeRTOS\Source/queue.c **** #define queueMUTEX_GIVE_BLOCK_TIME          ( ( TickType_t ) 0U )
  85:FreeRTOS\Source/queue.c **** 
  86:FreeRTOS\Source/queue.c **** #if ( configUSE_PREEMPTION == 0 )
  87:FreeRTOS\Source/queue.c **** 
  88:FreeRTOS\Source/queue.c **** /* If the cooperative scheduler is being used then a yield should not be
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 3


  89:FreeRTOS\Source/queue.c ****  * performed just because a higher priority task has been woken. */
  90:FreeRTOS\Source/queue.c ****     #define queueYIELD_IF_USING_PREEMPTION()
  91:FreeRTOS\Source/queue.c **** #else
  92:FreeRTOS\Source/queue.c ****     #define queueYIELD_IF_USING_PREEMPTION()    portYIELD_WITHIN_API()
  93:FreeRTOS\Source/queue.c **** #endif
  94:FreeRTOS\Source/queue.c **** 
  95:FreeRTOS\Source/queue.c **** /*
  96:FreeRTOS\Source/queue.c ****  * Definition of the queue used by the scheduler.
  97:FreeRTOS\Source/queue.c ****  * Items are queued by copy, not reference.  See the following link for the
  98:FreeRTOS\Source/queue.c ****  * rationale: https://www.FreeRTOS.org/Embedded-RTOS-Queues.html
  99:FreeRTOS\Source/queue.c ****  */
 100:FreeRTOS\Source/queue.c **** typedef struct QueueDefinition /* The old naming convention is used to prevent breaking kernel awar
 101:FreeRTOS\Source/queue.c **** {
 102:FreeRTOS\Source/queue.c ****     int8_t * pcHead;           /*< Points to the beginning of the queue storage area. */
 103:FreeRTOS\Source/queue.c ****     int8_t * pcWriteTo;        /*< Points to the free next place in the storage area. */
 104:FreeRTOS\Source/queue.c **** 
 105:FreeRTOS\Source/queue.c ****     union
 106:FreeRTOS\Source/queue.c ****     {
 107:FreeRTOS\Source/queue.c ****         QueuePointers_t xQueue;     /*< Data required exclusively when this structure is used as a 
 108:FreeRTOS\Source/queue.c ****         SemaphoreData_t xSemaphore; /*< Data required exclusively when this structure is used as a 
 109:FreeRTOS\Source/queue.c ****     } u;
 110:FreeRTOS\Source/queue.c **** 
 111:FreeRTOS\Source/queue.c ****     List_t xTasksWaitingToSend;             /*< List of tasks that are blocked waiting to post onto
 112:FreeRTOS\Source/queue.c ****     List_t xTasksWaitingToReceive;          /*< List of tasks that are blocked waiting to read from
 113:FreeRTOS\Source/queue.c **** 
 114:FreeRTOS\Source/queue.c ****     volatile UBaseType_t uxMessagesWaiting; /*< The number of items currently in the queue. */
 115:FreeRTOS\Source/queue.c ****     UBaseType_t uxLength;                   /*< The length of the queue defined as the number of it
 116:FreeRTOS\Source/queue.c ****     UBaseType_t uxItemSize;                 /*< The size of each items that the queue will hold. */
 117:FreeRTOS\Source/queue.c **** 
 118:FreeRTOS\Source/queue.c ****     volatile int8_t cRxLock;                /*< Stores the number of items received from the queue 
 119:FreeRTOS\Source/queue.c ****     volatile int8_t cTxLock;                /*< Stores the number of items transmitted to the queue
 120:FreeRTOS\Source/queue.c **** 
 121:FreeRTOS\Source/queue.c ****     #if ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 122:FreeRTOS\Source/queue.c ****         uint8_t ucStaticallyAllocated; /*< Set to pdTRUE if the memory used by the queue was static
 123:FreeRTOS\Source/queue.c ****     #endif
 124:FreeRTOS\Source/queue.c **** 
 125:FreeRTOS\Source/queue.c ****     #if ( configUSE_QUEUE_SETS == 1 )
 126:FreeRTOS\Source/queue.c ****         struct QueueDefinition * pxQueueSetContainer;
 127:FreeRTOS\Source/queue.c ****     #endif
 128:FreeRTOS\Source/queue.c **** 
 129:FreeRTOS\Source/queue.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
 130:FreeRTOS\Source/queue.c ****         UBaseType_t uxQueueNumber;
 131:FreeRTOS\Source/queue.c ****         uint8_t ucQueueType;
 132:FreeRTOS\Source/queue.c ****     #endif
 133:FreeRTOS\Source/queue.c **** } xQUEUE;
 134:FreeRTOS\Source/queue.c **** 
 135:FreeRTOS\Source/queue.c **** /* The old xQUEUE name is maintained above then typedefed to the new Queue_t
 136:FreeRTOS\Source/queue.c ****  * name below to enable the use of older kernel aware debuggers. */
 137:FreeRTOS\Source/queue.c **** typedef xQUEUE Queue_t;
 138:FreeRTOS\Source/queue.c **** 
 139:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 140:FreeRTOS\Source/queue.c **** 
 141:FreeRTOS\Source/queue.c **** /*
 142:FreeRTOS\Source/queue.c ****  * The queue registry is just a means for kernel aware debuggers to locate
 143:FreeRTOS\Source/queue.c ****  * queue structures.  It has no other purpose so is an optional component.
 144:FreeRTOS\Source/queue.c ****  */
 145:FreeRTOS\Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 4


 146:FreeRTOS\Source/queue.c **** 
 147:FreeRTOS\Source/queue.c **** /* The type stored within the queue registry array.  This allows a name
 148:FreeRTOS\Source/queue.c ****  * to be assigned to each queue making kernel aware debugging a little
 149:FreeRTOS\Source/queue.c ****  * more user friendly. */
 150:FreeRTOS\Source/queue.c ****     typedef struct QUEUE_REGISTRY_ITEM
 151:FreeRTOS\Source/queue.c ****     {
 152:FreeRTOS\Source/queue.c ****         const char * pcQueueName; /*lint !e971 Unqualified char types are allowed for strings and s
 153:FreeRTOS\Source/queue.c ****         QueueHandle_t xHandle;
 154:FreeRTOS\Source/queue.c ****     } xQueueRegistryItem;
 155:FreeRTOS\Source/queue.c **** 
 156:FreeRTOS\Source/queue.c **** /* The old xQueueRegistryItem name is maintained above then typedefed to the
 157:FreeRTOS\Source/queue.c ****  * new xQueueRegistryItem name below to enable the use of older kernel aware
 158:FreeRTOS\Source/queue.c ****  * debuggers. */
 159:FreeRTOS\Source/queue.c ****     typedef xQueueRegistryItem QueueRegistryItem_t;
 160:FreeRTOS\Source/queue.c **** 
 161:FreeRTOS\Source/queue.c **** /* The queue registry is simply an array of QueueRegistryItem_t structures.
 162:FreeRTOS\Source/queue.c ****  * The pcQueueName member of a structure being NULL is indicative of the
 163:FreeRTOS\Source/queue.c ****  * array position being vacant. */
 164:FreeRTOS\Source/queue.c ****     PRIVILEGED_DATA QueueRegistryItem_t xQueueRegistry[ configQUEUE_REGISTRY_SIZE ];
 165:FreeRTOS\Source/queue.c **** 
 166:FreeRTOS\Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
 167:FreeRTOS\Source/queue.c **** 
 168:FreeRTOS\Source/queue.c **** /*
 169:FreeRTOS\Source/queue.c ****  * Unlocks a queue locked by a call to prvLockQueue.  Locking a queue does not
 170:FreeRTOS\Source/queue.c ****  * prevent an ISR from adding or removing items to the queue, but does prevent
 171:FreeRTOS\Source/queue.c ****  * an ISR from removing tasks from the queue event lists.  If an ISR finds a
 172:FreeRTOS\Source/queue.c ****  * queue is locked it will instead increment the appropriate queue lock count
 173:FreeRTOS\Source/queue.c ****  * to indicate that a task may require unblocking.  When the queue in unlocked
 174:FreeRTOS\Source/queue.c ****  * these lock counts are inspected, and the appropriate action taken.
 175:FreeRTOS\Source/queue.c ****  */
 176:FreeRTOS\Source/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue ) PRIVILEGED_FUNCTION;
 177:FreeRTOS\Source/queue.c **** 
 178:FreeRTOS\Source/queue.c **** /*
 179:FreeRTOS\Source/queue.c ****  * Uses a critical section to determine if there is any data in a queue.
 180:FreeRTOS\Source/queue.c ****  *
 181:FreeRTOS\Source/queue.c ****  * @return pdTRUE if the queue contains no items, otherwise pdFALSE.
 182:FreeRTOS\Source/queue.c ****  */
 183:FreeRTOS\Source/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue ) PRIVILEGED_FUNCTION;
 184:FreeRTOS\Source/queue.c **** 
 185:FreeRTOS\Source/queue.c **** /*
 186:FreeRTOS\Source/queue.c ****  * Uses a critical section to determine if there is any space in a queue.
 187:FreeRTOS\Source/queue.c ****  *
 188:FreeRTOS\Source/queue.c ****  * @return pdTRUE if there is no space, otherwise pdFALSE;
 189:FreeRTOS\Source/queue.c ****  */
 190:FreeRTOS\Source/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t * pxQueue ) PRIVILEGED_FUNCTION;
 191:FreeRTOS\Source/queue.c **** 
 192:FreeRTOS\Source/queue.c **** /*
 193:FreeRTOS\Source/queue.c ****  * Copies an item into the queue, either at the front of the queue or the
 194:FreeRTOS\Source/queue.c ****  * back of the queue.
 195:FreeRTOS\Source/queue.c ****  */
 196:FreeRTOS\Source/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
 197:FreeRTOS\Source/queue.c ****                                       const void * pvItemToQueue,
 198:FreeRTOS\Source/queue.c ****                                       const BaseType_t xPosition ) PRIVILEGED_FUNCTION;
 199:FreeRTOS\Source/queue.c **** 
 200:FreeRTOS\Source/queue.c **** /*
 201:FreeRTOS\Source/queue.c ****  * Copies an item out of a queue.
 202:FreeRTOS\Source/queue.c ****  */
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 5


 203:FreeRTOS\Source/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue,
 204:FreeRTOS\Source/queue.c ****                                   void * const pvBuffer ) PRIVILEGED_FUNCTION;
 205:FreeRTOS\Source/queue.c **** 
 206:FreeRTOS\Source/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
 207:FreeRTOS\Source/queue.c **** 
 208:FreeRTOS\Source/queue.c **** /*
 209:FreeRTOS\Source/queue.c ****  * Checks to see if a queue is a member of a queue set, and if so, notifies
 210:FreeRTOS\Source/queue.c ****  * the queue set that the queue contains data.
 211:FreeRTOS\Source/queue.c ****  */
 212:FreeRTOS\Source/queue.c ****     static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue ) PRIVILEGED_FUNCTI
 213:FreeRTOS\Source/queue.c **** #endif
 214:FreeRTOS\Source/queue.c **** 
 215:FreeRTOS\Source/queue.c **** /*
 216:FreeRTOS\Source/queue.c ****  * Called after a Queue_t structure has been allocated either statically or
 217:FreeRTOS\Source/queue.c ****  * dynamically to fill in the structure's members.
 218:FreeRTOS\Source/queue.c ****  */
 219:FreeRTOS\Source/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
 220:FreeRTOS\Source/queue.c ****                                    const UBaseType_t uxItemSize,
 221:FreeRTOS\Source/queue.c ****                                    uint8_t * pucQueueStorage,
 222:FreeRTOS\Source/queue.c ****                                    const uint8_t ucQueueType,
 223:FreeRTOS\Source/queue.c ****                                    Queue_t * pxNewQueue ) PRIVILEGED_FUNCTION;
 224:FreeRTOS\Source/queue.c **** 
 225:FreeRTOS\Source/queue.c **** /*
 226:FreeRTOS\Source/queue.c ****  * Mutexes are a special type of queue.  When a mutex is created, first the
 227:FreeRTOS\Source/queue.c ****  * queue is created, then prvInitialiseMutex() is called to configure the queue
 228:FreeRTOS\Source/queue.c ****  * as a mutex.
 229:FreeRTOS\Source/queue.c ****  */
 230:FreeRTOS\Source/queue.c **** #if ( configUSE_MUTEXES == 1 )
 231:FreeRTOS\Source/queue.c ****     static void prvInitialiseMutex( Queue_t * pxNewQueue ) PRIVILEGED_FUNCTION;
 232:FreeRTOS\Source/queue.c **** #endif
 233:FreeRTOS\Source/queue.c **** 
 234:FreeRTOS\Source/queue.c **** #if ( configUSE_MUTEXES == 1 )
 235:FreeRTOS\Source/queue.c **** 
 236:FreeRTOS\Source/queue.c **** /*
 237:FreeRTOS\Source/queue.c ****  * If a task waiting for a mutex causes the mutex holder to inherit a
 238:FreeRTOS\Source/queue.c ****  * priority, but the waiting task times out, then the holder should
 239:FreeRTOS\Source/queue.c ****  * disinherit the priority - but only down to the highest priority of any
 240:FreeRTOS\Source/queue.c ****  * other tasks that are waiting for the same mutex.  This function returns
 241:FreeRTOS\Source/queue.c ****  * that priority.
 242:FreeRTOS\Source/queue.c ****  */
 243:FreeRTOS\Source/queue.c ****     static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue ) PRIVIL
 244:FreeRTOS\Source/queue.c **** #endif
 245:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 246:FreeRTOS\Source/queue.c **** 
 247:FreeRTOS\Source/queue.c **** /*
 248:FreeRTOS\Source/queue.c ****  * Macro to mark a queue as locked.  Locking a queue prevents an ISR from
 249:FreeRTOS\Source/queue.c ****  * accessing the queue event lists.
 250:FreeRTOS\Source/queue.c ****  */
 251:FreeRTOS\Source/queue.c **** #define prvLockQueue( pxQueue )                            \
 252:FreeRTOS\Source/queue.c ****     taskENTER_CRITICAL();                                  \
 253:FreeRTOS\Source/queue.c ****     {                                                      \
 254:FreeRTOS\Source/queue.c ****         if( ( pxQueue )->cRxLock == queueUNLOCKED )        \
 255:FreeRTOS\Source/queue.c ****         {                                                  \
 256:FreeRTOS\Source/queue.c ****             ( pxQueue )->cRxLock = queueLOCKED_UNMODIFIED; \
 257:FreeRTOS\Source/queue.c ****         }                                                  \
 258:FreeRTOS\Source/queue.c ****         if( ( pxQueue )->cTxLock == queueUNLOCKED )        \
 259:FreeRTOS\Source/queue.c ****         {                                                  \
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 6


 260:FreeRTOS\Source/queue.c ****             ( pxQueue )->cTxLock = queueLOCKED_UNMODIFIED; \
 261:FreeRTOS\Source/queue.c ****         }                                                  \
 262:FreeRTOS\Source/queue.c ****     }                                                      \
 263:FreeRTOS\Source/queue.c ****     taskEXIT_CRITICAL()
 264:FreeRTOS\Source/queue.c **** 
 265:FreeRTOS\Source/queue.c **** /*
 266:FreeRTOS\Source/queue.c ****  * Macro to increment cTxLock member of the queue data structure. It is
 267:FreeRTOS\Source/queue.c ****  * capped at the number of tasks in the system as we cannot unblock more
 268:FreeRTOS\Source/queue.c ****  * tasks than the number of tasks in the system.
 269:FreeRTOS\Source/queue.c ****  */
 270:FreeRTOS\Source/queue.c **** #define prvIncrementQueueTxLock( pxQueue, cTxLock )                           \
 271:FreeRTOS\Source/queue.c ****     {                                                                         \
 272:FreeRTOS\Source/queue.c ****         const UBaseType_t uxNumberOfTasks = uxTaskGetNumberOfTasks();         \
 273:FreeRTOS\Source/queue.c ****         if( ( UBaseType_t ) ( cTxLock ) < uxNumberOfTasks )                   \
 274:FreeRTOS\Source/queue.c ****         {                                                                     \
 275:FreeRTOS\Source/queue.c ****             configASSERT( ( cTxLock ) != queueINT8_MAX );                     \
 276:FreeRTOS\Source/queue.c ****             ( pxQueue )->cTxLock = ( int8_t ) ( ( cTxLock ) + ( int8_t ) 1 ); \
 277:FreeRTOS\Source/queue.c ****         }                                                                     \
 278:FreeRTOS\Source/queue.c ****     }
 279:FreeRTOS\Source/queue.c **** 
 280:FreeRTOS\Source/queue.c **** /*
 281:FreeRTOS\Source/queue.c ****  * Macro to increment cRxLock member of the queue data structure. It is
 282:FreeRTOS\Source/queue.c ****  * capped at the number of tasks in the system as we cannot unblock more
 283:FreeRTOS\Source/queue.c ****  * tasks than the number of tasks in the system.
 284:FreeRTOS\Source/queue.c ****  */
 285:FreeRTOS\Source/queue.c **** #define prvIncrementQueueRxLock( pxQueue, cRxLock )                           \
 286:FreeRTOS\Source/queue.c ****     {                                                                         \
 287:FreeRTOS\Source/queue.c ****         const UBaseType_t uxNumberOfTasks = uxTaskGetNumberOfTasks();         \
 288:FreeRTOS\Source/queue.c ****         if( ( UBaseType_t ) ( cRxLock ) < uxNumberOfTasks )                   \
 289:FreeRTOS\Source/queue.c ****         {                                                                     \
 290:FreeRTOS\Source/queue.c ****             configASSERT( ( cRxLock ) != queueINT8_MAX );                     \
 291:FreeRTOS\Source/queue.c ****             ( pxQueue )->cRxLock = ( int8_t ) ( ( cRxLock ) + ( int8_t ) 1 ); \
 292:FreeRTOS\Source/queue.c ****         }                                                                     \
 293:FreeRTOS\Source/queue.c ****     }
 294:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 295:FreeRTOS\Source/queue.c **** 
 296:FreeRTOS\Source/queue.c **** BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
 297:FreeRTOS\Source/queue.c ****                                BaseType_t xNewQueue )
 298:FreeRTOS\Source/queue.c **** {
 299:FreeRTOS\Source/queue.c ****     BaseType_t xReturn = pdPASS;
 300:FreeRTOS\Source/queue.c ****     Queue_t * const pxQueue = xQueue;
 301:FreeRTOS\Source/queue.c **** 
 302:FreeRTOS\Source/queue.c ****     configASSERT( pxQueue );
 303:FreeRTOS\Source/queue.c **** 
 304:FreeRTOS\Source/queue.c ****     if( ( pxQueue != NULL ) &&
 305:FreeRTOS\Source/queue.c ****         ( pxQueue->uxLength >= 1U ) &&
 306:FreeRTOS\Source/queue.c ****         /* Check for multiplication overflow. */
 307:FreeRTOS\Source/queue.c ****         ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 308:FreeRTOS\Source/queue.c ****     {
 309:FreeRTOS\Source/queue.c ****         taskENTER_CRITICAL();
 310:FreeRTOS\Source/queue.c ****         {
 311:FreeRTOS\Source/queue.c ****             pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize 
 312:FreeRTOS\Source/queue.c ****             pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 313:FreeRTOS\Source/queue.c ****             pxQueue->pcWriteTo = pxQueue->pcHead;
 314:FreeRTOS\Source/queue.c ****             pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue
 315:FreeRTOS\Source/queue.c ****             pxQueue->cRxLock = queueUNLOCKED;
 316:FreeRTOS\Source/queue.c ****             pxQueue->cTxLock = queueUNLOCKED;
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 7


 317:FreeRTOS\Source/queue.c **** 
 318:FreeRTOS\Source/queue.c ****             if( xNewQueue == pdFALSE )
 319:FreeRTOS\Source/queue.c ****             {
 320:FreeRTOS\Source/queue.c ****                 /* If there are tasks blocked waiting to read from the queue, then
 321:FreeRTOS\Source/queue.c ****                  * the tasks will remain blocked as after this function exits the queue
 322:FreeRTOS\Source/queue.c ****                  * will still be empty.  If there are tasks blocked waiting to write to
 323:FreeRTOS\Source/queue.c ****                  * the queue, then one should be unblocked as after this function exits
 324:FreeRTOS\Source/queue.c ****                  * it will be possible to write to it. */
 325:FreeRTOS\Source/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 326:FreeRTOS\Source/queue.c ****                 {
 327:FreeRTOS\Source/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 328:FreeRTOS\Source/queue.c ****                     {
 329:FreeRTOS\Source/queue.c ****                         queueYIELD_IF_USING_PREEMPTION();
 330:FreeRTOS\Source/queue.c ****                     }
 331:FreeRTOS\Source/queue.c ****                     else
 332:FreeRTOS\Source/queue.c ****                     {
 333:FreeRTOS\Source/queue.c ****                         mtCOVERAGE_TEST_MARKER();
 334:FreeRTOS\Source/queue.c ****                     }
 335:FreeRTOS\Source/queue.c ****                 }
 336:FreeRTOS\Source/queue.c ****                 else
 337:FreeRTOS\Source/queue.c ****                 {
 338:FreeRTOS\Source/queue.c ****                     mtCOVERAGE_TEST_MARKER();
 339:FreeRTOS\Source/queue.c ****                 }
 340:FreeRTOS\Source/queue.c ****             }
 341:FreeRTOS\Source/queue.c ****             else
 342:FreeRTOS\Source/queue.c ****             {
 343:FreeRTOS\Source/queue.c ****                 /* Ensure the event queues start in the correct state. */
 344:FreeRTOS\Source/queue.c ****                 vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 345:FreeRTOS\Source/queue.c ****                 vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 346:FreeRTOS\Source/queue.c ****             }
 347:FreeRTOS\Source/queue.c ****         }
 348:FreeRTOS\Source/queue.c ****         taskEXIT_CRITICAL();
 349:FreeRTOS\Source/queue.c ****     }
 350:FreeRTOS\Source/queue.c ****     else
 351:FreeRTOS\Source/queue.c ****     {
 352:FreeRTOS\Source/queue.c ****         xReturn = pdFAIL;
 353:FreeRTOS\Source/queue.c ****     }
 354:FreeRTOS\Source/queue.c **** 
 355:FreeRTOS\Source/queue.c ****     configASSERT( xReturn != pdFAIL );
 356:FreeRTOS\Source/queue.c **** 
 357:FreeRTOS\Source/queue.c ****     /* A value is returned for calling semantic consistency with previous
 358:FreeRTOS\Source/queue.c ****      * versions. */
 359:FreeRTOS\Source/queue.c ****     return xReturn;
 360:FreeRTOS\Source/queue.c **** }
 361:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 362:FreeRTOS\Source/queue.c **** 
 363:FreeRTOS\Source/queue.c **** #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 364:FreeRTOS\Source/queue.c **** 
 365:FreeRTOS\Source/queue.c ****     QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
 366:FreeRTOS\Source/queue.c ****                                              const UBaseType_t uxItemSize,
 367:FreeRTOS\Source/queue.c ****                                              uint8_t * pucQueueStorage,
 368:FreeRTOS\Source/queue.c ****                                              StaticQueue_t * pxStaticQueue,
 369:FreeRTOS\Source/queue.c ****                                              const uint8_t ucQueueType )
 370:FreeRTOS\Source/queue.c ****     {
 371:FreeRTOS\Source/queue.c ****         Queue_t * pxNewQueue = NULL;
 372:FreeRTOS\Source/queue.c **** 
 373:FreeRTOS\Source/queue.c ****         /* The StaticQueue_t structure and the queue storage area must be
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 8


 374:FreeRTOS\Source/queue.c ****          * supplied. */
 375:FreeRTOS\Source/queue.c ****         configASSERT( pxStaticQueue );
 376:FreeRTOS\Source/queue.c **** 
 377:FreeRTOS\Source/queue.c ****         if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 378:FreeRTOS\Source/queue.c ****             ( pxStaticQueue != NULL ) &&
 379:FreeRTOS\Source/queue.c **** 
 380:FreeRTOS\Source/queue.c ****             /* A queue storage area should be provided if the item size is not 0, and
 381:FreeRTOS\Source/queue.c ****              * should not be provided if the item size is 0. */
 382:FreeRTOS\Source/queue.c ****             ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 383:FreeRTOS\Source/queue.c ****             ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 384:FreeRTOS\Source/queue.c ****         {
 385:FreeRTOS\Source/queue.c ****             #if ( configASSERT_DEFINED == 1 )
 386:FreeRTOS\Source/queue.c ****             {
 387:FreeRTOS\Source/queue.c ****                 /* Sanity check that the size of the structure used to declare a
 388:FreeRTOS\Source/queue.c ****                  * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
 389:FreeRTOS\Source/queue.c ****                  * the real queue and semaphore structures. */
 390:FreeRTOS\Source/queue.c ****                 volatile size_t xSize = sizeof( StaticQueue_t );
 391:FreeRTOS\Source/queue.c **** 
 392:FreeRTOS\Source/queue.c ****                 /* This assertion cannot be branch covered in unit tests */
 393:FreeRTOS\Source/queue.c ****                 configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 394:FreeRTOS\Source/queue.c ****                 ( void ) xSize;                             /* Keeps lint quiet when configASSERT()
 395:FreeRTOS\Source/queue.c ****             }
 396:FreeRTOS\Source/queue.c ****             #endif /* configASSERT_DEFINED */
 397:FreeRTOS\Source/queue.c **** 
 398:FreeRTOS\Source/queue.c ****             /* The address of a statically allocated queue was passed in, use it.
 399:FreeRTOS\Source/queue.c ****              * The address of a statically allocated storage area was also passed in
 400:FreeRTOS\Source/queue.c ****              * but is already set. */
 401:FreeRTOS\Source/queue.c ****             pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the
 402:FreeRTOS\Source/queue.c **** 
 403:FreeRTOS\Source/queue.c ****             #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 404:FreeRTOS\Source/queue.c ****             {
 405:FreeRTOS\Source/queue.c ****                 /* Queues can be allocated wither statically or dynamically, so
 406:FreeRTOS\Source/queue.c ****                  * note this queue was allocated statically in case the queue is
 407:FreeRTOS\Source/queue.c ****                  * later deleted. */
 408:FreeRTOS\Source/queue.c ****                 pxNewQueue->ucStaticallyAllocated = pdTRUE;
 409:FreeRTOS\Source/queue.c ****             }
 410:FreeRTOS\Source/queue.c ****             #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 411:FreeRTOS\Source/queue.c **** 
 412:FreeRTOS\Source/queue.c ****             prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQu
 413:FreeRTOS\Source/queue.c ****         }
 414:FreeRTOS\Source/queue.c ****         else
 415:FreeRTOS\Source/queue.c ****         {
 416:FreeRTOS\Source/queue.c ****             configASSERT( pxNewQueue );
 417:FreeRTOS\Source/queue.c ****             mtCOVERAGE_TEST_MARKER();
 418:FreeRTOS\Source/queue.c ****         }
 419:FreeRTOS\Source/queue.c **** 
 420:FreeRTOS\Source/queue.c ****         return pxNewQueue;
 421:FreeRTOS\Source/queue.c ****     }
 422:FreeRTOS\Source/queue.c **** 
 423:FreeRTOS\Source/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 424:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 425:FreeRTOS\Source/queue.c **** 
 426:FreeRTOS\Source/queue.c **** #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 427:FreeRTOS\Source/queue.c **** 
 428:FreeRTOS\Source/queue.c ****     QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
 429:FreeRTOS\Source/queue.c ****                                        const UBaseType_t uxItemSize,
 430:FreeRTOS\Source/queue.c ****                                        const uint8_t ucQueueType )
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 9


 431:FreeRTOS\Source/queue.c ****     {
 432:FreeRTOS\Source/queue.c ****         Queue_t * pxNewQueue = NULL;
 433:FreeRTOS\Source/queue.c ****         size_t xQueueSizeInBytes;
 434:FreeRTOS\Source/queue.c ****         uint8_t * pucQueueStorage;
 435:FreeRTOS\Source/queue.c **** 
 436:FreeRTOS\Source/queue.c ****         if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 437:FreeRTOS\Source/queue.c ****             /* Check for multiplication overflow. */
 438:FreeRTOS\Source/queue.c ****             ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 439:FreeRTOS\Source/queue.c ****             /* Check for addition overflow. */
 440:FreeRTOS\Source/queue.c ****             ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 441:FreeRTOS\Source/queue.c ****         {
 442:FreeRTOS\Source/queue.c ****             /* Allocate enough space to hold the maximum number of items that
 443:FreeRTOS\Source/queue.c ****              * can be in the queue at any time.  It is valid for uxItemSize to be
 444:FreeRTOS\Source/queue.c ****              * zero in the case the queue is used as a semaphore. */
 445:FreeRTOS\Source/queue.c ****             xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA excep
 446:FreeRTOS\Source/queue.c **** 
 447:FreeRTOS\Source/queue.c ****             /* Allocate the queue and storage area.  Justification for MISRA
 448:FreeRTOS\Source/queue.c ****              * deviation as follows:  pvPortMalloc() always ensures returned memory
 449:FreeRTOS\Source/queue.c ****              * blocks are aligned per the requirements of the MCU stack.  In this case
 450:FreeRTOS\Source/queue.c ****              * pvPortMalloc() must return a pointer that is guaranteed to meet the
 451:FreeRTOS\Source/queue.c ****              * alignment requirements of the Queue_t structure - which in this case
 452:FreeRTOS\Source/queue.c ****              * is an int8_t *.  Therefore, whenever the stack alignment requirements
 453:FreeRTOS\Source/queue.c ****              * are greater than or equal to the pointer to char requirements the cast
 454:FreeRTOS\Source/queue.c ****              * is safe.  In other cases alignment requirements are not strict (one or
 455:FreeRTOS\Source/queue.c ****              * two bytes). */
 456:FreeRTOS\Source/queue.c ****             pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lin
 457:FreeRTOS\Source/queue.c **** 
 458:FreeRTOS\Source/queue.c ****             if( pxNewQueue != NULL )
 459:FreeRTOS\Source/queue.c ****             {
 460:FreeRTOS\Source/queue.c ****                 /* Jump past the queue structure to find the location of the queue
 461:FreeRTOS\Source/queue.c ****                  * storage area. */
 462:FreeRTOS\Source/queue.c ****                 pucQueueStorage = ( uint8_t * ) pxNewQueue;
 463:FreeRTOS\Source/queue.c ****                 pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on c
 464:FreeRTOS\Source/queue.c **** 
 465:FreeRTOS\Source/queue.c ****                 #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 466:FreeRTOS\Source/queue.c ****                 {
 467:FreeRTOS\Source/queue.c ****                     /* Queues can be created either statically or dynamically, so
 468:FreeRTOS\Source/queue.c ****                      * note this task was created dynamically in case it is later
 469:FreeRTOS\Source/queue.c ****                      * deleted. */
 470:FreeRTOS\Source/queue.c ****                     pxNewQueue->ucStaticallyAllocated = pdFALSE;
 471:FreeRTOS\Source/queue.c ****                 }
 472:FreeRTOS\Source/queue.c ****                 #endif /* configSUPPORT_STATIC_ALLOCATION */
 473:FreeRTOS\Source/queue.c **** 
 474:FreeRTOS\Source/queue.c ****                 prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxN
 475:FreeRTOS\Source/queue.c ****             }
 476:FreeRTOS\Source/queue.c ****             else
 477:FreeRTOS\Source/queue.c ****             {
 478:FreeRTOS\Source/queue.c ****                 traceQUEUE_CREATE_FAILED( ucQueueType );
 479:FreeRTOS\Source/queue.c ****                 mtCOVERAGE_TEST_MARKER();
 480:FreeRTOS\Source/queue.c ****             }
 481:FreeRTOS\Source/queue.c ****         }
 482:FreeRTOS\Source/queue.c ****         else
 483:FreeRTOS\Source/queue.c ****         {
 484:FreeRTOS\Source/queue.c ****             configASSERT( pxNewQueue );
 485:FreeRTOS\Source/queue.c ****             mtCOVERAGE_TEST_MARKER();
 486:FreeRTOS\Source/queue.c ****         }
 487:FreeRTOS\Source/queue.c **** 
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 10


 488:FreeRTOS\Source/queue.c ****         return pxNewQueue;
 489:FreeRTOS\Source/queue.c ****     }
 490:FreeRTOS\Source/queue.c **** 
 491:FreeRTOS\Source/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 492:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 493:FreeRTOS\Source/queue.c **** 
 494:FreeRTOS\Source/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
 495:FreeRTOS\Source/queue.c ****                                    const UBaseType_t uxItemSize,
 496:FreeRTOS\Source/queue.c ****                                    uint8_t * pucQueueStorage,
 497:FreeRTOS\Source/queue.c ****                                    const uint8_t ucQueueType,
 498:FreeRTOS\Source/queue.c ****                                    Queue_t * pxNewQueue )
 499:FreeRTOS\Source/queue.c **** {
 500:FreeRTOS\Source/queue.c ****     /* Remove compiler warnings about unused parameters should
 501:FreeRTOS\Source/queue.c ****      * configUSE_TRACE_FACILITY not be set to 1. */
 502:FreeRTOS\Source/queue.c ****     ( void ) ucQueueType;
 503:FreeRTOS\Source/queue.c **** 
 504:FreeRTOS\Source/queue.c ****     if( uxItemSize == ( UBaseType_t ) 0 )
 505:FreeRTOS\Source/queue.c ****     {
 506:FreeRTOS\Source/queue.c ****         /* No RAM was allocated for the queue storage area, but PC head cannot
 507:FreeRTOS\Source/queue.c ****          * be set to NULL because NULL is used as a key to say the queue is used as
 508:FreeRTOS\Source/queue.c ****          * a mutex.  Therefore just set pcHead to point to the queue as a benign
 509:FreeRTOS\Source/queue.c ****          * value that is known to be within the memory map. */
 510:FreeRTOS\Source/queue.c ****         pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 511:FreeRTOS\Source/queue.c ****     }
 512:FreeRTOS\Source/queue.c ****     else
 513:FreeRTOS\Source/queue.c ****     {
 514:FreeRTOS\Source/queue.c ****         /* Set the head to the start of the queue storage area. */
 515:FreeRTOS\Source/queue.c ****         pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 516:FreeRTOS\Source/queue.c ****     }
 517:FreeRTOS\Source/queue.c **** 
 518:FreeRTOS\Source/queue.c ****     /* Initialise the queue members as described where the queue type is
 519:FreeRTOS\Source/queue.c ****      * defined. */
 520:FreeRTOS\Source/queue.c ****     pxNewQueue->uxLength = uxQueueLength;
 521:FreeRTOS\Source/queue.c ****     pxNewQueue->uxItemSize = uxItemSize;
 522:FreeRTOS\Source/queue.c ****     ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 523:FreeRTOS\Source/queue.c **** 
 524:FreeRTOS\Source/queue.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
 525:FreeRTOS\Source/queue.c ****     {
 526:FreeRTOS\Source/queue.c ****         pxNewQueue->ucQueueType = ucQueueType;
 527:FreeRTOS\Source/queue.c ****     }
 528:FreeRTOS\Source/queue.c ****     #endif /* configUSE_TRACE_FACILITY */
 529:FreeRTOS\Source/queue.c **** 
 530:FreeRTOS\Source/queue.c ****     #if ( configUSE_QUEUE_SETS == 1 )
 531:FreeRTOS\Source/queue.c ****     {
 532:FreeRTOS\Source/queue.c ****         pxNewQueue->pxQueueSetContainer = NULL;
 533:FreeRTOS\Source/queue.c ****     }
 534:FreeRTOS\Source/queue.c ****     #endif /* configUSE_QUEUE_SETS */
 535:FreeRTOS\Source/queue.c **** 
 536:FreeRTOS\Source/queue.c ****     traceQUEUE_CREATE( pxNewQueue );
 537:FreeRTOS\Source/queue.c **** }
 538:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 539:FreeRTOS\Source/queue.c **** 
 540:FreeRTOS\Source/queue.c **** #if ( configUSE_MUTEXES == 1 )
 541:FreeRTOS\Source/queue.c **** 
 542:FreeRTOS\Source/queue.c ****     static void prvInitialiseMutex( Queue_t * pxNewQueue )
 543:FreeRTOS\Source/queue.c ****     {
 544:FreeRTOS\Source/queue.c ****         if( pxNewQueue != NULL )
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 11


 545:FreeRTOS\Source/queue.c ****         {
 546:FreeRTOS\Source/queue.c ****             /* The queue create function will set all the queue structure members
 547:FreeRTOS\Source/queue.c ****             * correctly for a generic queue, but this function is creating a
 548:FreeRTOS\Source/queue.c ****             * mutex.  Overwrite those members that need to be set differently -
 549:FreeRTOS\Source/queue.c ****             * in particular the information required for priority inheritance. */
 550:FreeRTOS\Source/queue.c ****             pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 551:FreeRTOS\Source/queue.c ****             pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 552:FreeRTOS\Source/queue.c **** 
 553:FreeRTOS\Source/queue.c ****             /* In case this is a recursive mutex. */
 554:FreeRTOS\Source/queue.c ****             pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 555:FreeRTOS\Source/queue.c **** 
 556:FreeRTOS\Source/queue.c ****             traceCREATE_MUTEX( pxNewQueue );
 557:FreeRTOS\Source/queue.c **** 
 558:FreeRTOS\Source/queue.c ****             /* Start with the semaphore in the expected state. */
 559:FreeRTOS\Source/queue.c ****             ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 560:FreeRTOS\Source/queue.c ****         }
 561:FreeRTOS\Source/queue.c ****         else
 562:FreeRTOS\Source/queue.c ****         {
 563:FreeRTOS\Source/queue.c ****             traceCREATE_MUTEX_FAILED();
 564:FreeRTOS\Source/queue.c ****         }
 565:FreeRTOS\Source/queue.c ****     }
 566:FreeRTOS\Source/queue.c **** 
 567:FreeRTOS\Source/queue.c **** #endif /* configUSE_MUTEXES */
 568:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 569:FreeRTOS\Source/queue.c **** 
 570:FreeRTOS\Source/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 571:FreeRTOS\Source/queue.c **** 
 572:FreeRTOS\Source/queue.c ****     QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
 573:FreeRTOS\Source/queue.c ****     {
 574:FreeRTOS\Source/queue.c ****         QueueHandle_t xNewQueue;
 575:FreeRTOS\Source/queue.c ****         const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 576:FreeRTOS\Source/queue.c **** 
 577:FreeRTOS\Source/queue.c ****         xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 578:FreeRTOS\Source/queue.c ****         prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 579:FreeRTOS\Source/queue.c **** 
 580:FreeRTOS\Source/queue.c ****         return xNewQueue;
 581:FreeRTOS\Source/queue.c ****     }
 582:FreeRTOS\Source/queue.c **** 
 583:FreeRTOS\Source/queue.c **** #endif /* configUSE_MUTEXES */
 584:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 585:FreeRTOS\Source/queue.c **** 
 586:FreeRTOS\Source/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 587:FreeRTOS\Source/queue.c **** 
 588:FreeRTOS\Source/queue.c ****     QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType,
 589:FreeRTOS\Source/queue.c ****                                            StaticQueue_t * pxStaticQueue )
 590:FreeRTOS\Source/queue.c ****     {
 591:FreeRTOS\Source/queue.c ****         QueueHandle_t xNewQueue;
 592:FreeRTOS\Source/queue.c ****         const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 593:FreeRTOS\Source/queue.c **** 
 594:FreeRTOS\Source/queue.c ****         /* Prevent compiler warnings about unused parameters if
 595:FreeRTOS\Source/queue.c ****          * configUSE_TRACE_FACILITY does not equal 1. */
 596:FreeRTOS\Source/queue.c ****         ( void ) ucQueueType;
 597:FreeRTOS\Source/queue.c **** 
 598:FreeRTOS\Source/queue.c ****         xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQ
 599:FreeRTOS\Source/queue.c ****         prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 600:FreeRTOS\Source/queue.c **** 
 601:FreeRTOS\Source/queue.c ****         return xNewQueue;
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 12


 602:FreeRTOS\Source/queue.c ****     }
 603:FreeRTOS\Source/queue.c **** 
 604:FreeRTOS\Source/queue.c **** #endif /* configUSE_MUTEXES */
 605:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 606:FreeRTOS\Source/queue.c **** 
 607:FreeRTOS\Source/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 608:FreeRTOS\Source/queue.c **** 
 609:FreeRTOS\Source/queue.c ****     TaskHandle_t xQueueGetMutexHolder( QueueHandle_t xSemaphore )
 610:FreeRTOS\Source/queue.c ****     {
 611:FreeRTOS\Source/queue.c ****         TaskHandle_t pxReturn;
 612:FreeRTOS\Source/queue.c ****         Queue_t * const pxSemaphore = ( Queue_t * ) xSemaphore;
 613:FreeRTOS\Source/queue.c **** 
 614:FreeRTOS\Source/queue.c ****         configASSERT( xSemaphore );
 615:FreeRTOS\Source/queue.c **** 
 616:FreeRTOS\Source/queue.c ****         /* This function is called by xSemaphoreGetMutexHolder(), and should not
 617:FreeRTOS\Source/queue.c ****          * be called directly.  Note:  This is a good way of determining if the
 618:FreeRTOS\Source/queue.c ****          * calling task is the mutex holder, but not a good way of determining the
 619:FreeRTOS\Source/queue.c ****          * identity of the mutex holder, as the holder may change between the
 620:FreeRTOS\Source/queue.c ****          * following critical section exiting and the function returning. */
 621:FreeRTOS\Source/queue.c ****         taskENTER_CRITICAL();
 622:FreeRTOS\Source/queue.c ****         {
 623:FreeRTOS\Source/queue.c ****             if( pxSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
 624:FreeRTOS\Source/queue.c ****             {
 625:FreeRTOS\Source/queue.c ****                 pxReturn = pxSemaphore->u.xSemaphore.xMutexHolder;
 626:FreeRTOS\Source/queue.c ****             }
 627:FreeRTOS\Source/queue.c ****             else
 628:FreeRTOS\Source/queue.c ****             {
 629:FreeRTOS\Source/queue.c ****                 pxReturn = NULL;
 630:FreeRTOS\Source/queue.c ****             }
 631:FreeRTOS\Source/queue.c ****         }
 632:FreeRTOS\Source/queue.c ****         taskEXIT_CRITICAL();
 633:FreeRTOS\Source/queue.c **** 
 634:FreeRTOS\Source/queue.c ****         return pxReturn;
 635:FreeRTOS\Source/queue.c ****     } /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 636:FreeRTOS\Source/queue.c **** 
 637:FreeRTOS\Source/queue.c **** #endif /* if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) ) */
 638:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 639:FreeRTOS\Source/queue.c **** 
 640:FreeRTOS\Source/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 641:FreeRTOS\Source/queue.c **** 
 642:FreeRTOS\Source/queue.c ****     TaskHandle_t xQueueGetMutexHolderFromISR( QueueHandle_t xSemaphore )
 643:FreeRTOS\Source/queue.c ****     {
 644:FreeRTOS\Source/queue.c ****         TaskHandle_t pxReturn;
 645:FreeRTOS\Source/queue.c **** 
 646:FreeRTOS\Source/queue.c ****         configASSERT( xSemaphore );
 647:FreeRTOS\Source/queue.c **** 
 648:FreeRTOS\Source/queue.c ****         /* Mutexes cannot be used in interrupt service routines, so the mutex
 649:FreeRTOS\Source/queue.c ****          * holder should not change in an ISR, and therefore a critical section is
 650:FreeRTOS\Source/queue.c ****          * not required here. */
 651:FreeRTOS\Source/queue.c ****         if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 652:FreeRTOS\Source/queue.c ****         {
 653:FreeRTOS\Source/queue.c ****             pxReturn = ( ( Queue_t * ) xSemaphore )->u.xSemaphore.xMutexHolder;
 654:FreeRTOS\Source/queue.c ****         }
 655:FreeRTOS\Source/queue.c ****         else
 656:FreeRTOS\Source/queue.c ****         {
 657:FreeRTOS\Source/queue.c ****             pxReturn = NULL;
 658:FreeRTOS\Source/queue.c ****         }
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 13


 659:FreeRTOS\Source/queue.c **** 
 660:FreeRTOS\Source/queue.c ****         return pxReturn;
 661:FreeRTOS\Source/queue.c ****     } /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 662:FreeRTOS\Source/queue.c **** 
 663:FreeRTOS\Source/queue.c **** #endif /* if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) ) */
 664:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 665:FreeRTOS\Source/queue.c **** 
 666:FreeRTOS\Source/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 667:FreeRTOS\Source/queue.c **** 
 668:FreeRTOS\Source/queue.c ****     BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
 669:FreeRTOS\Source/queue.c ****     {
 670:FreeRTOS\Source/queue.c ****         BaseType_t xReturn;
 671:FreeRTOS\Source/queue.c ****         Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 672:FreeRTOS\Source/queue.c **** 
 673:FreeRTOS\Source/queue.c ****         configASSERT( pxMutex );
 674:FreeRTOS\Source/queue.c **** 
 675:FreeRTOS\Source/queue.c ****         /* If this is the task that holds the mutex then xMutexHolder will not
 676:FreeRTOS\Source/queue.c ****          * change outside of this task.  If this task does not hold the mutex then
 677:FreeRTOS\Source/queue.c ****          * pxMutexHolder can never coincidentally equal the tasks handle, and as
 678:FreeRTOS\Source/queue.c ****          * this is the only condition we are interested in it does not matter if
 679:FreeRTOS\Source/queue.c ****          * pxMutexHolder is accessed simultaneously by another task.  Therefore no
 680:FreeRTOS\Source/queue.c ****          * mutual exclusion is required to test the pxMutexHolder variable. */
 681:FreeRTOS\Source/queue.c ****         if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 682:FreeRTOS\Source/queue.c ****         {
 683:FreeRTOS\Source/queue.c ****             traceGIVE_MUTEX_RECURSIVE( pxMutex );
 684:FreeRTOS\Source/queue.c **** 
 685:FreeRTOS\Source/queue.c ****             /* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
 686:FreeRTOS\Source/queue.c ****              * the task handle, therefore no underflow check is required.  Also,
 687:FreeRTOS\Source/queue.c ****              * uxRecursiveCallCount is only modified by the mutex holder, and as
 688:FreeRTOS\Source/queue.c ****              * there can only be one, no mutual exclusion is required to modify the
 689:FreeRTOS\Source/queue.c ****              * uxRecursiveCallCount member. */
 690:FreeRTOS\Source/queue.c ****             ( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 691:FreeRTOS\Source/queue.c **** 
 692:FreeRTOS\Source/queue.c ****             /* Has the recursive call count unwound to 0? */
 693:FreeRTOS\Source/queue.c ****             if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 694:FreeRTOS\Source/queue.c ****             {
 695:FreeRTOS\Source/queue.c ****                 /* Return the mutex.  This will automatically unblock any other
 696:FreeRTOS\Source/queue.c ****                  * task that might be waiting to access the mutex. */
 697:FreeRTOS\Source/queue.c ****                 ( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO
 698:FreeRTOS\Source/queue.c ****             }
 699:FreeRTOS\Source/queue.c ****             else
 700:FreeRTOS\Source/queue.c ****             {
 701:FreeRTOS\Source/queue.c ****                 mtCOVERAGE_TEST_MARKER();
 702:FreeRTOS\Source/queue.c ****             }
 703:FreeRTOS\Source/queue.c **** 
 704:FreeRTOS\Source/queue.c ****             xReturn = pdPASS;
 705:FreeRTOS\Source/queue.c ****         }
 706:FreeRTOS\Source/queue.c ****         else
 707:FreeRTOS\Source/queue.c ****         {
 708:FreeRTOS\Source/queue.c ****             /* The mutex cannot be given because the calling task is not the
 709:FreeRTOS\Source/queue.c ****              * holder. */
 710:FreeRTOS\Source/queue.c ****             xReturn = pdFAIL;
 711:FreeRTOS\Source/queue.c **** 
 712:FreeRTOS\Source/queue.c ****             traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 713:FreeRTOS\Source/queue.c ****         }
 714:FreeRTOS\Source/queue.c **** 
 715:FreeRTOS\Source/queue.c ****         return xReturn;
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 14


 716:FreeRTOS\Source/queue.c ****     }
 717:FreeRTOS\Source/queue.c **** 
 718:FreeRTOS\Source/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 719:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 720:FreeRTOS\Source/queue.c **** 
 721:FreeRTOS\Source/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 722:FreeRTOS\Source/queue.c **** 
 723:FreeRTOS\Source/queue.c ****     BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex,
 724:FreeRTOS\Source/queue.c ****                                          TickType_t xTicksToWait )
 725:FreeRTOS\Source/queue.c ****     {
 726:FreeRTOS\Source/queue.c ****         BaseType_t xReturn;
 727:FreeRTOS\Source/queue.c ****         Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 728:FreeRTOS\Source/queue.c **** 
 729:FreeRTOS\Source/queue.c ****         configASSERT( pxMutex );
 730:FreeRTOS\Source/queue.c **** 
 731:FreeRTOS\Source/queue.c ****         /* Comments regarding mutual exclusion as per those within
 732:FreeRTOS\Source/queue.c ****          * xQueueGiveMutexRecursive(). */
 733:FreeRTOS\Source/queue.c **** 
 734:FreeRTOS\Source/queue.c ****         traceTAKE_MUTEX_RECURSIVE( pxMutex );
 735:FreeRTOS\Source/queue.c **** 
 736:FreeRTOS\Source/queue.c ****         if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 737:FreeRTOS\Source/queue.c ****         {
 738:FreeRTOS\Source/queue.c ****             ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 739:FreeRTOS\Source/queue.c ****             xReturn = pdPASS;
 740:FreeRTOS\Source/queue.c ****         }
 741:FreeRTOS\Source/queue.c ****         else
 742:FreeRTOS\Source/queue.c ****         {
 743:FreeRTOS\Source/queue.c ****             xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 744:FreeRTOS\Source/queue.c **** 
 745:FreeRTOS\Source/queue.c ****             /* pdPASS will only be returned if the mutex was successfully
 746:FreeRTOS\Source/queue.c ****              * obtained.  The calling task may have entered the Blocked state
 747:FreeRTOS\Source/queue.c ****              * before reaching here. */
 748:FreeRTOS\Source/queue.c ****             if( xReturn != pdFAIL )
 749:FreeRTOS\Source/queue.c ****             {
 750:FreeRTOS\Source/queue.c ****                 ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 751:FreeRTOS\Source/queue.c ****             }
 752:FreeRTOS\Source/queue.c ****             else
 753:FreeRTOS\Source/queue.c ****             {
 754:FreeRTOS\Source/queue.c ****                 traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
 755:FreeRTOS\Source/queue.c ****             }
 756:FreeRTOS\Source/queue.c ****         }
 757:FreeRTOS\Source/queue.c **** 
 758:FreeRTOS\Source/queue.c ****         return xReturn;
 759:FreeRTOS\Source/queue.c ****     }
 760:FreeRTOS\Source/queue.c **** 
 761:FreeRTOS\Source/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 762:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 763:FreeRTOS\Source/queue.c **** 
 764:FreeRTOS\Source/queue.c **** #if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 765:FreeRTOS\Source/queue.c **** 
 766:FreeRTOS\Source/queue.c ****     QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount,
 767:FreeRTOS\Source/queue.c ****                                                        const UBaseType_t uxInitialCount,
 768:FreeRTOS\Source/queue.c ****                                                        StaticQueue_t * pxStaticQueue )
 769:FreeRTOS\Source/queue.c ****     {
 770:FreeRTOS\Source/queue.c ****         QueueHandle_t xHandle = NULL;
 771:FreeRTOS\Source/queue.c **** 
 772:FreeRTOS\Source/queue.c ****         if( ( uxMaxCount != 0 ) &&
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 15


 773:FreeRTOS\Source/queue.c ****             ( uxInitialCount <= uxMaxCount ) )
 774:FreeRTOS\Source/queue.c ****         {
 775:FreeRTOS\Source/queue.c ****             xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL
 776:FreeRTOS\Source/queue.c **** 
 777:FreeRTOS\Source/queue.c ****             if( xHandle != NULL )
 778:FreeRTOS\Source/queue.c ****             {
 779:FreeRTOS\Source/queue.c ****                 ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 780:FreeRTOS\Source/queue.c **** 
 781:FreeRTOS\Source/queue.c ****                 traceCREATE_COUNTING_SEMAPHORE();
 782:FreeRTOS\Source/queue.c ****             }
 783:FreeRTOS\Source/queue.c ****             else
 784:FreeRTOS\Source/queue.c ****             {
 785:FreeRTOS\Source/queue.c ****                 traceCREATE_COUNTING_SEMAPHORE_FAILED();
 786:FreeRTOS\Source/queue.c ****             }
 787:FreeRTOS\Source/queue.c ****         }
 788:FreeRTOS\Source/queue.c ****         else
 789:FreeRTOS\Source/queue.c ****         {
 790:FreeRTOS\Source/queue.c ****             configASSERT( xHandle );
 791:FreeRTOS\Source/queue.c ****             mtCOVERAGE_TEST_MARKER();
 792:FreeRTOS\Source/queue.c ****         }
 793:FreeRTOS\Source/queue.c **** 
 794:FreeRTOS\Source/queue.c ****         return xHandle;
 795:FreeRTOS\Source/queue.c ****     }
 796:FreeRTOS\Source/queue.c **** 
 797:FreeRTOS\Source/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 798:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 799:FreeRTOS\Source/queue.c **** 
 800:FreeRTOS\Source/queue.c **** #if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 801:FreeRTOS\Source/queue.c **** 
 802:FreeRTOS\Source/queue.c ****     QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
 803:FreeRTOS\Source/queue.c ****                                                  const UBaseType_t uxInitialCount )
 804:FreeRTOS\Source/queue.c ****     {
 805:FreeRTOS\Source/queue.c ****         QueueHandle_t xHandle = NULL;
 806:FreeRTOS\Source/queue.c **** 
 807:FreeRTOS\Source/queue.c ****         if( ( uxMaxCount != 0 ) &&
 808:FreeRTOS\Source/queue.c ****             ( uxInitialCount <= uxMaxCount ) )
 809:FreeRTOS\Source/queue.c ****         {
 810:FreeRTOS\Source/queue.c ****             xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE
 811:FreeRTOS\Source/queue.c **** 
 812:FreeRTOS\Source/queue.c ****             if( xHandle != NULL )
 813:FreeRTOS\Source/queue.c ****             {
 814:FreeRTOS\Source/queue.c ****                 ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 815:FreeRTOS\Source/queue.c **** 
 816:FreeRTOS\Source/queue.c ****                 traceCREATE_COUNTING_SEMAPHORE();
 817:FreeRTOS\Source/queue.c ****             }
 818:FreeRTOS\Source/queue.c ****             else
 819:FreeRTOS\Source/queue.c ****             {
 820:FreeRTOS\Source/queue.c ****                 traceCREATE_COUNTING_SEMAPHORE_FAILED();
 821:FreeRTOS\Source/queue.c ****             }
 822:FreeRTOS\Source/queue.c ****         }
 823:FreeRTOS\Source/queue.c ****         else
 824:FreeRTOS\Source/queue.c ****         {
 825:FreeRTOS\Source/queue.c ****             configASSERT( xHandle );
 826:FreeRTOS\Source/queue.c ****             mtCOVERAGE_TEST_MARKER();
 827:FreeRTOS\Source/queue.c ****         }
 828:FreeRTOS\Source/queue.c **** 
 829:FreeRTOS\Source/queue.c ****         return xHandle;
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 16


 830:FreeRTOS\Source/queue.c ****     }
 831:FreeRTOS\Source/queue.c **** 
 832:FreeRTOS\Source/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 833:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 834:FreeRTOS\Source/queue.c **** 
 835:FreeRTOS\Source/queue.c **** BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
 836:FreeRTOS\Source/queue.c ****                               const void * const pvItemToQueue,
 837:FreeRTOS\Source/queue.c ****                               TickType_t xTicksToWait,
 838:FreeRTOS\Source/queue.c ****                               const BaseType_t xCopyPosition )
 839:FreeRTOS\Source/queue.c **** {
 840:FreeRTOS\Source/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 841:FreeRTOS\Source/queue.c ****     TimeOut_t xTimeOut;
 842:FreeRTOS\Source/queue.c ****     Queue_t * const pxQueue = xQueue;
 843:FreeRTOS\Source/queue.c **** 
 844:FreeRTOS\Source/queue.c ****     configASSERT( pxQueue );
 845:FreeRTOS\Source/queue.c ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
 846:FreeRTOS\Source/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 847:FreeRTOS\Source/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 848:FreeRTOS\Source/queue.c ****     {
 849:FreeRTOS\Source/queue.c ****         configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait 
 850:FreeRTOS\Source/queue.c ****     }
 851:FreeRTOS\Source/queue.c ****     #endif
 852:FreeRTOS\Source/queue.c **** 
 853:FreeRTOS\Source/queue.c ****     /*lint -save -e904 This function relaxes the coding standard somewhat to
 854:FreeRTOS\Source/queue.c ****      * allow return statements within the function itself.  This is done in the
 855:FreeRTOS\Source/queue.c ****      * interest of execution time efficiency. */
 856:FreeRTOS\Source/queue.c ****     for( ; ; )
 857:FreeRTOS\Source/queue.c ****     {
 858:FreeRTOS\Source/queue.c ****         taskENTER_CRITICAL();
 859:FreeRTOS\Source/queue.c ****         {
 860:FreeRTOS\Source/queue.c ****             /* Is there room on the queue now?  The running task must be the
 861:FreeRTOS\Source/queue.c ****              * highest priority task wanting to access the queue.  If the head item
 862:FreeRTOS\Source/queue.c ****              * in the queue is to be overwritten then it does not matter if the
 863:FreeRTOS\Source/queue.c ****              * queue is full. */
 864:FreeRTOS\Source/queue.c ****             if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERW
 865:FreeRTOS\Source/queue.c ****             {
 866:FreeRTOS\Source/queue.c ****                 traceQUEUE_SEND( pxQueue );
 867:FreeRTOS\Source/queue.c **** 
 868:FreeRTOS\Source/queue.c ****                 #if ( configUSE_QUEUE_SETS == 1 )
 869:FreeRTOS\Source/queue.c ****                 {
 870:FreeRTOS\Source/queue.c ****                     const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 871:FreeRTOS\Source/queue.c **** 
 872:FreeRTOS\Source/queue.c ****                     xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 873:FreeRTOS\Source/queue.c **** 
 874:FreeRTOS\Source/queue.c ****                     if( pxQueue->pxQueueSetContainer != NULL )
 875:FreeRTOS\Source/queue.c ****                     {
 876:FreeRTOS\Source/queue.c ****                         if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != (
 877:FreeRTOS\Source/queue.c ****                         {
 878:FreeRTOS\Source/queue.c ****                             /* Do not notify the queue set as an existing item
 879:FreeRTOS\Source/queue.c ****                              * was overwritten in the queue so the number of items
 880:FreeRTOS\Source/queue.c ****                              * in the queue has not changed. */
 881:FreeRTOS\Source/queue.c ****                             mtCOVERAGE_TEST_MARKER();
 882:FreeRTOS\Source/queue.c ****                         }
 883:FreeRTOS\Source/queue.c ****                         else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 884:FreeRTOS\Source/queue.c ****                         {
 885:FreeRTOS\Source/queue.c ****                             /* The queue is a member of a queue set, and posting
 886:FreeRTOS\Source/queue.c ****                              * to the queue set caused a higher priority task to
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 17


 887:FreeRTOS\Source/queue.c ****                              * unblock. A context switch is required. */
 888:FreeRTOS\Source/queue.c ****                             queueYIELD_IF_USING_PREEMPTION();
 889:FreeRTOS\Source/queue.c ****                         }
 890:FreeRTOS\Source/queue.c ****                         else
 891:FreeRTOS\Source/queue.c ****                         {
 892:FreeRTOS\Source/queue.c ****                             mtCOVERAGE_TEST_MARKER();
 893:FreeRTOS\Source/queue.c ****                         }
 894:FreeRTOS\Source/queue.c ****                     }
 895:FreeRTOS\Source/queue.c ****                     else
 896:FreeRTOS\Source/queue.c ****                     {
 897:FreeRTOS\Source/queue.c ****                         /* If there was a task waiting for data to arrive on the
 898:FreeRTOS\Source/queue.c ****                          * queue then unblock it now. */
 899:FreeRTOS\Source/queue.c ****                         if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 900:FreeRTOS\Source/queue.c ****                         {
 901:FreeRTOS\Source/queue.c ****                             if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) !=
 902:FreeRTOS\Source/queue.c ****                             {
 903:FreeRTOS\Source/queue.c ****                                 /* The unblocked task has a priority higher than
 904:FreeRTOS\Source/queue.c ****                                  * our own so yield immediately.  Yes it is ok to
 905:FreeRTOS\Source/queue.c ****                                  * do this from within the critical section - the
 906:FreeRTOS\Source/queue.c ****                                  * kernel takes care of that. */
 907:FreeRTOS\Source/queue.c ****                                 queueYIELD_IF_USING_PREEMPTION();
 908:FreeRTOS\Source/queue.c ****                             }
 909:FreeRTOS\Source/queue.c ****                             else
 910:FreeRTOS\Source/queue.c ****                             {
 911:FreeRTOS\Source/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
 912:FreeRTOS\Source/queue.c ****                             }
 913:FreeRTOS\Source/queue.c ****                         }
 914:FreeRTOS\Source/queue.c ****                         else if( xYieldRequired != pdFALSE )
 915:FreeRTOS\Source/queue.c ****                         {
 916:FreeRTOS\Source/queue.c ****                             /* This path is a special case that will only get
 917:FreeRTOS\Source/queue.c ****                              * executed if the task was holding multiple mutexes
 918:FreeRTOS\Source/queue.c ****                              * and the mutexes were given back in an order that is
 919:FreeRTOS\Source/queue.c ****                              * different to that in which they were taken. */
 920:FreeRTOS\Source/queue.c ****                             queueYIELD_IF_USING_PREEMPTION();
 921:FreeRTOS\Source/queue.c ****                         }
 922:FreeRTOS\Source/queue.c ****                         else
 923:FreeRTOS\Source/queue.c ****                         {
 924:FreeRTOS\Source/queue.c ****                             mtCOVERAGE_TEST_MARKER();
 925:FreeRTOS\Source/queue.c ****                         }
 926:FreeRTOS\Source/queue.c ****                     }
 927:FreeRTOS\Source/queue.c ****                 }
 928:FreeRTOS\Source/queue.c ****                 #else /* configUSE_QUEUE_SETS */
 929:FreeRTOS\Source/queue.c ****                 {
 930:FreeRTOS\Source/queue.c ****                     xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 931:FreeRTOS\Source/queue.c **** 
 932:FreeRTOS\Source/queue.c ****                     /* If there was a task waiting for data to arrive on the
 933:FreeRTOS\Source/queue.c ****                      * queue then unblock it now. */
 934:FreeRTOS\Source/queue.c ****                     if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 935:FreeRTOS\Source/queue.c ****                     {
 936:FreeRTOS\Source/queue.c ****                         if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdF
 937:FreeRTOS\Source/queue.c ****                         {
 938:FreeRTOS\Source/queue.c ****                             /* The unblocked task has a priority higher than
 939:FreeRTOS\Source/queue.c ****                              * our own so yield immediately.  Yes it is ok to do
 940:FreeRTOS\Source/queue.c ****                              * this from within the critical section - the kernel
 941:FreeRTOS\Source/queue.c ****                              * takes care of that. */
 942:FreeRTOS\Source/queue.c ****                             queueYIELD_IF_USING_PREEMPTION();
 943:FreeRTOS\Source/queue.c ****                         }
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 18


 944:FreeRTOS\Source/queue.c ****                         else
 945:FreeRTOS\Source/queue.c ****                         {
 946:FreeRTOS\Source/queue.c ****                             mtCOVERAGE_TEST_MARKER();
 947:FreeRTOS\Source/queue.c ****                         }
 948:FreeRTOS\Source/queue.c ****                     }
 949:FreeRTOS\Source/queue.c ****                     else if( xYieldRequired != pdFALSE )
 950:FreeRTOS\Source/queue.c ****                     {
 951:FreeRTOS\Source/queue.c ****                         /* This path is a special case that will only get
 952:FreeRTOS\Source/queue.c ****                          * executed if the task was holding multiple mutexes and
 953:FreeRTOS\Source/queue.c ****                          * the mutexes were given back in an order that is
 954:FreeRTOS\Source/queue.c ****                          * different to that in which they were taken. */
 955:FreeRTOS\Source/queue.c ****                         queueYIELD_IF_USING_PREEMPTION();
 956:FreeRTOS\Source/queue.c ****                     }
 957:FreeRTOS\Source/queue.c ****                     else
 958:FreeRTOS\Source/queue.c ****                     {
 959:FreeRTOS\Source/queue.c ****                         mtCOVERAGE_TEST_MARKER();
 960:FreeRTOS\Source/queue.c ****                     }
 961:FreeRTOS\Source/queue.c ****                 }
 962:FreeRTOS\Source/queue.c ****                 #endif /* configUSE_QUEUE_SETS */
 963:FreeRTOS\Source/queue.c **** 
 964:FreeRTOS\Source/queue.c ****                 taskEXIT_CRITICAL();
 965:FreeRTOS\Source/queue.c ****                 return pdPASS;
 966:FreeRTOS\Source/queue.c ****             }
 967:FreeRTOS\Source/queue.c ****             else
 968:FreeRTOS\Source/queue.c ****             {
 969:FreeRTOS\Source/queue.c ****                 if( xTicksToWait == ( TickType_t ) 0 )
 970:FreeRTOS\Source/queue.c ****                 {
 971:FreeRTOS\Source/queue.c ****                     /* The queue was full and no block time is specified (or
 972:FreeRTOS\Source/queue.c ****                      * the block time has expired) so leave now. */
 973:FreeRTOS\Source/queue.c ****                     taskEXIT_CRITICAL();
 974:FreeRTOS\Source/queue.c **** 
 975:FreeRTOS\Source/queue.c ****                     /* Return to the original privilege level before exiting
 976:FreeRTOS\Source/queue.c ****                      * the function. */
 977:FreeRTOS\Source/queue.c ****                     traceQUEUE_SEND_FAILED( pxQueue );
 978:FreeRTOS\Source/queue.c ****                     return errQUEUE_FULL;
 979:FreeRTOS\Source/queue.c ****                 }
 980:FreeRTOS\Source/queue.c ****                 else if( xEntryTimeSet == pdFALSE )
 981:FreeRTOS\Source/queue.c ****                 {
 982:FreeRTOS\Source/queue.c ****                     /* The queue was full and a block time was specified so
 983:FreeRTOS\Source/queue.c ****                      * configure the timeout structure. */
 984:FreeRTOS\Source/queue.c ****                     vTaskInternalSetTimeOutState( &xTimeOut );
 985:FreeRTOS\Source/queue.c ****                     xEntryTimeSet = pdTRUE;
 986:FreeRTOS\Source/queue.c ****                 }
 987:FreeRTOS\Source/queue.c ****                 else
 988:FreeRTOS\Source/queue.c ****                 {
 989:FreeRTOS\Source/queue.c ****                     /* Entry time was already set. */
 990:FreeRTOS\Source/queue.c ****                     mtCOVERAGE_TEST_MARKER();
 991:FreeRTOS\Source/queue.c ****                 }
 992:FreeRTOS\Source/queue.c ****             }
 993:FreeRTOS\Source/queue.c ****         }
 994:FreeRTOS\Source/queue.c ****         taskEXIT_CRITICAL();
 995:FreeRTOS\Source/queue.c **** 
 996:FreeRTOS\Source/queue.c ****         /* Interrupts and other tasks can send to and receive from the queue
 997:FreeRTOS\Source/queue.c ****          * now the critical section has been exited. */
 998:FreeRTOS\Source/queue.c **** 
 999:FreeRTOS\Source/queue.c ****         vTaskSuspendAll();
1000:FreeRTOS\Source/queue.c ****         prvLockQueue( pxQueue );
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 19


1001:FreeRTOS\Source/queue.c **** 
1002:FreeRTOS\Source/queue.c ****         /* Update the timeout state to see if it has expired yet. */
1003:FreeRTOS\Source/queue.c ****         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1004:FreeRTOS\Source/queue.c ****         {
1005:FreeRTOS\Source/queue.c ****             if( prvIsQueueFull( pxQueue ) != pdFALSE )
1006:FreeRTOS\Source/queue.c ****             {
1007:FreeRTOS\Source/queue.c ****                 traceBLOCKING_ON_QUEUE_SEND( pxQueue );
1008:FreeRTOS\Source/queue.c ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1009:FreeRTOS\Source/queue.c **** 
1010:FreeRTOS\Source/queue.c ****                 /* Unlocking the queue means queue events can effect the
1011:FreeRTOS\Source/queue.c ****                  * event list. It is possible that interrupts occurring now
1012:FreeRTOS\Source/queue.c ****                  * remove this task from the event list again - but as the
1013:FreeRTOS\Source/queue.c ****                  * scheduler is suspended the task will go onto the pending
1014:FreeRTOS\Source/queue.c ****                  * ready list instead of the actual ready list. */
1015:FreeRTOS\Source/queue.c ****                 prvUnlockQueue( pxQueue );
1016:FreeRTOS\Source/queue.c **** 
1017:FreeRTOS\Source/queue.c ****                 /* Resuming the scheduler will move tasks from the pending
1018:FreeRTOS\Source/queue.c ****                  * ready list into the ready list - so it is feasible that this
1019:FreeRTOS\Source/queue.c ****                  * task is already in the ready list before it yields - in which
1020:FreeRTOS\Source/queue.c ****                  * case the yield will not cause a context switch unless there
1021:FreeRTOS\Source/queue.c ****                  * is also a higher priority task in the pending ready list. */
1022:FreeRTOS\Source/queue.c ****                 if( xTaskResumeAll() == pdFALSE )
1023:FreeRTOS\Source/queue.c ****                 {
1024:FreeRTOS\Source/queue.c ****                     portYIELD_WITHIN_API();
1025:FreeRTOS\Source/queue.c ****                 }
1026:FreeRTOS\Source/queue.c ****             }
1027:FreeRTOS\Source/queue.c ****             else
1028:FreeRTOS\Source/queue.c ****             {
1029:FreeRTOS\Source/queue.c ****                 /* Try again. */
1030:FreeRTOS\Source/queue.c ****                 prvUnlockQueue( pxQueue );
1031:FreeRTOS\Source/queue.c ****                 ( void ) xTaskResumeAll();
1032:FreeRTOS\Source/queue.c ****             }
1033:FreeRTOS\Source/queue.c ****         }
1034:FreeRTOS\Source/queue.c ****         else
1035:FreeRTOS\Source/queue.c ****         {
1036:FreeRTOS\Source/queue.c ****             /* The timeout has expired. */
1037:FreeRTOS\Source/queue.c ****             prvUnlockQueue( pxQueue );
1038:FreeRTOS\Source/queue.c ****             ( void ) xTaskResumeAll();
1039:FreeRTOS\Source/queue.c **** 
1040:FreeRTOS\Source/queue.c ****             traceQUEUE_SEND_FAILED( pxQueue );
1041:FreeRTOS\Source/queue.c ****             return errQUEUE_FULL;
1042:FreeRTOS\Source/queue.c ****         }
1043:FreeRTOS\Source/queue.c ****     } /*lint -restore */
1044:FreeRTOS\Source/queue.c **** }
1045:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
1046:FreeRTOS\Source/queue.c **** 
1047:FreeRTOS\Source/queue.c **** BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
1048:FreeRTOS\Source/queue.c ****                                      const void * const pvItemToQueue,
1049:FreeRTOS\Source/queue.c ****                                      BaseType_t * const pxHigherPriorityTaskWoken,
1050:FreeRTOS\Source/queue.c ****                                      const BaseType_t xCopyPosition )
1051:FreeRTOS\Source/queue.c **** {
1052:FreeRTOS\Source/queue.c ****     BaseType_t xReturn;
1053:FreeRTOS\Source/queue.c ****     UBaseType_t uxSavedInterruptStatus;
1054:FreeRTOS\Source/queue.c ****     Queue_t * const pxQueue = xQueue;
1055:FreeRTOS\Source/queue.c **** 
1056:FreeRTOS\Source/queue.c ****     configASSERT( pxQueue );
1057:FreeRTOS\Source/queue.c ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 20


1058:FreeRTOS\Source/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1059:FreeRTOS\Source/queue.c **** 
1060:FreeRTOS\Source/queue.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
1061:FreeRTOS\Source/queue.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
1062:FreeRTOS\Source/queue.c ****      * above the maximum system call priority are kept permanently enabled, even
1063:FreeRTOS\Source/queue.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
1064:FreeRTOS\Source/queue.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1065:FreeRTOS\Source/queue.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1066:FreeRTOS\Source/queue.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
1067:FreeRTOS\Source/queue.c ****      * assigned a priority above the configured maximum system call priority.
1068:FreeRTOS\Source/queue.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
1069:FreeRTOS\Source/queue.c ****      * that have been assigned a priority at or (logically) below the maximum
1070:FreeRTOS\Source/queue.c ****      * system call interrupt priority.  FreeRTOS maintains a separate interrupt
1071:FreeRTOS\Source/queue.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
1072:FreeRTOS\Source/queue.c ****      * More information (albeit Cortex-M specific) is provided on the following
1073:FreeRTOS\Source/queue.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1074:FreeRTOS\Source/queue.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1075:FreeRTOS\Source/queue.c **** 
1076:FreeRTOS\Source/queue.c ****     /* Similar to xQueueGenericSend, except without blocking if there is no room
1077:FreeRTOS\Source/queue.c ****      * in the queue.  Also don't directly wake a task that was blocked on a queue
1078:FreeRTOS\Source/queue.c ****      * read, instead return a flag to say whether a context switch is required or
1079:FreeRTOS\Source/queue.c ****      * not (i.e. has a task with a higher priority than us been woken by this
1080:FreeRTOS\Source/queue.c ****      * post). */
1081:FreeRTOS\Source/queue.c ****     uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1082:FreeRTOS\Source/queue.c ****     {
1083:FreeRTOS\Source/queue.c ****         if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE
1084:FreeRTOS\Source/queue.c ****         {
1085:FreeRTOS\Source/queue.c ****             const int8_t cTxLock = pxQueue->cTxLock;
1086:FreeRTOS\Source/queue.c ****             const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
1087:FreeRTOS\Source/queue.c **** 
1088:FreeRTOS\Source/queue.c ****             traceQUEUE_SEND_FROM_ISR( pxQueue );
1089:FreeRTOS\Source/queue.c **** 
1090:FreeRTOS\Source/queue.c ****             /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
1091:FreeRTOS\Source/queue.c ****              *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
1092:FreeRTOS\Source/queue.c ****              *  in a task disinheriting a priority and prvCopyDataToQueue() can be
1093:FreeRTOS\Source/queue.c ****              *  called here even though the disinherit function does not check if
1094:FreeRTOS\Source/queue.c ****              *  the scheduler is suspended before accessing the ready lists. */
1095:FreeRTOS\Source/queue.c ****             ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1096:FreeRTOS\Source/queue.c **** 
1097:FreeRTOS\Source/queue.c ****             /* The event list is not altered if the queue is locked.  This will
1098:FreeRTOS\Source/queue.c ****              * be done when the queue is unlocked later. */
1099:FreeRTOS\Source/queue.c ****             if( cTxLock == queueUNLOCKED )
1100:FreeRTOS\Source/queue.c ****             {
1101:FreeRTOS\Source/queue.c ****                 #if ( configUSE_QUEUE_SETS == 1 )
1102:FreeRTOS\Source/queue.c ****                 {
1103:FreeRTOS\Source/queue.c ****                     if( pxQueue->pxQueueSetContainer != NULL )
1104:FreeRTOS\Source/queue.c ****                     {
1105:FreeRTOS\Source/queue.c ****                         if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != (
1106:FreeRTOS\Source/queue.c ****                         {
1107:FreeRTOS\Source/queue.c ****                             /* Do not notify the queue set as an existing item
1108:FreeRTOS\Source/queue.c ****                              * was overwritten in the queue so the number of items
1109:FreeRTOS\Source/queue.c ****                              * in the queue has not changed. */
1110:FreeRTOS\Source/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1111:FreeRTOS\Source/queue.c ****                         }
1112:FreeRTOS\Source/queue.c ****                         else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
1113:FreeRTOS\Source/queue.c ****                         {
1114:FreeRTOS\Source/queue.c ****                             /* The queue is a member of a queue set, and posting
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 21


1115:FreeRTOS\Source/queue.c ****                              * to the queue set caused a higher priority task to
1116:FreeRTOS\Source/queue.c ****                              * unblock.  A context switch is required. */
1117:FreeRTOS\Source/queue.c ****                             if( pxHigherPriorityTaskWoken != NULL )
1118:FreeRTOS\Source/queue.c ****                             {
1119:FreeRTOS\Source/queue.c ****                                 *pxHigherPriorityTaskWoken = pdTRUE;
1120:FreeRTOS\Source/queue.c ****                             }
1121:FreeRTOS\Source/queue.c ****                             else
1122:FreeRTOS\Source/queue.c ****                             {
1123:FreeRTOS\Source/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1124:FreeRTOS\Source/queue.c ****                             }
1125:FreeRTOS\Source/queue.c ****                         }
1126:FreeRTOS\Source/queue.c ****                         else
1127:FreeRTOS\Source/queue.c ****                         {
1128:FreeRTOS\Source/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1129:FreeRTOS\Source/queue.c ****                         }
1130:FreeRTOS\Source/queue.c ****                     }
1131:FreeRTOS\Source/queue.c ****                     else
1132:FreeRTOS\Source/queue.c ****                     {
1133:FreeRTOS\Source/queue.c ****                         if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1134:FreeRTOS\Source/queue.c ****                         {
1135:FreeRTOS\Source/queue.c ****                             if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) !=
1136:FreeRTOS\Source/queue.c ****                             {
1137:FreeRTOS\Source/queue.c ****                                 /* The task waiting has a higher priority so
1138:FreeRTOS\Source/queue.c ****                                  *  record that a context switch is required. */
1139:FreeRTOS\Source/queue.c ****                                 if( pxHigherPriorityTaskWoken != NULL )
1140:FreeRTOS\Source/queue.c ****                                 {
1141:FreeRTOS\Source/queue.c ****                                     *pxHigherPriorityTaskWoken = pdTRUE;
1142:FreeRTOS\Source/queue.c ****                                 }
1143:FreeRTOS\Source/queue.c ****                                 else
1144:FreeRTOS\Source/queue.c ****                                 {
1145:FreeRTOS\Source/queue.c ****                                     mtCOVERAGE_TEST_MARKER();
1146:FreeRTOS\Source/queue.c ****                                 }
1147:FreeRTOS\Source/queue.c ****                             }
1148:FreeRTOS\Source/queue.c ****                             else
1149:FreeRTOS\Source/queue.c ****                             {
1150:FreeRTOS\Source/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1151:FreeRTOS\Source/queue.c ****                             }
1152:FreeRTOS\Source/queue.c ****                         }
1153:FreeRTOS\Source/queue.c ****                         else
1154:FreeRTOS\Source/queue.c ****                         {
1155:FreeRTOS\Source/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1156:FreeRTOS\Source/queue.c ****                         }
1157:FreeRTOS\Source/queue.c ****                     }
1158:FreeRTOS\Source/queue.c ****                 }
1159:FreeRTOS\Source/queue.c ****                 #else /* configUSE_QUEUE_SETS */
1160:FreeRTOS\Source/queue.c ****                 {
1161:FreeRTOS\Source/queue.c ****                     if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1162:FreeRTOS\Source/queue.c ****                     {
1163:FreeRTOS\Source/queue.c ****                         if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdF
1164:FreeRTOS\Source/queue.c ****                         {
1165:FreeRTOS\Source/queue.c ****                             /* The task waiting has a higher priority so record that a
1166:FreeRTOS\Source/queue.c ****                              * context switch is required. */
1167:FreeRTOS\Source/queue.c ****                             if( pxHigherPriorityTaskWoken != NULL )
1168:FreeRTOS\Source/queue.c ****                             {
1169:FreeRTOS\Source/queue.c ****                                 *pxHigherPriorityTaskWoken = pdTRUE;
1170:FreeRTOS\Source/queue.c ****                             }
1171:FreeRTOS\Source/queue.c ****                             else
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 22


1172:FreeRTOS\Source/queue.c ****                             {
1173:FreeRTOS\Source/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1174:FreeRTOS\Source/queue.c ****                             }
1175:FreeRTOS\Source/queue.c ****                         }
1176:FreeRTOS\Source/queue.c ****                         else
1177:FreeRTOS\Source/queue.c ****                         {
1178:FreeRTOS\Source/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1179:FreeRTOS\Source/queue.c ****                         }
1180:FreeRTOS\Source/queue.c ****                     }
1181:FreeRTOS\Source/queue.c ****                     else
1182:FreeRTOS\Source/queue.c ****                     {
1183:FreeRTOS\Source/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1184:FreeRTOS\Source/queue.c ****                     }
1185:FreeRTOS\Source/queue.c **** 
1186:FreeRTOS\Source/queue.c ****                     /* Not used in this path. */
1187:FreeRTOS\Source/queue.c ****                     ( void ) uxPreviousMessagesWaiting;
1188:FreeRTOS\Source/queue.c ****                 }
1189:FreeRTOS\Source/queue.c ****                 #endif /* configUSE_QUEUE_SETS */
1190:FreeRTOS\Source/queue.c ****             }
1191:FreeRTOS\Source/queue.c ****             else
1192:FreeRTOS\Source/queue.c ****             {
1193:FreeRTOS\Source/queue.c ****                 /* Increment the lock count so the task that unlocks the queue
1194:FreeRTOS\Source/queue.c ****                  * knows that data was posted while it was locked. */
1195:FreeRTOS\Source/queue.c ****                 prvIncrementQueueTxLock( pxQueue, cTxLock );
1196:FreeRTOS\Source/queue.c ****             }
1197:FreeRTOS\Source/queue.c **** 
1198:FreeRTOS\Source/queue.c ****             xReturn = pdPASS;
1199:FreeRTOS\Source/queue.c ****         }
1200:FreeRTOS\Source/queue.c ****         else
1201:FreeRTOS\Source/queue.c ****         {
1202:FreeRTOS\Source/queue.c ****             traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1203:FreeRTOS\Source/queue.c ****             xReturn = errQUEUE_FULL;
1204:FreeRTOS\Source/queue.c ****         }
1205:FreeRTOS\Source/queue.c ****     }
1206:FreeRTOS\Source/queue.c ****     portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1207:FreeRTOS\Source/queue.c **** 
1208:FreeRTOS\Source/queue.c ****     return xReturn;
1209:FreeRTOS\Source/queue.c **** }
1210:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
1211:FreeRTOS\Source/queue.c **** 
1212:FreeRTOS\Source/queue.c **** BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
1213:FreeRTOS\Source/queue.c ****                               BaseType_t * const pxHigherPriorityTaskWoken )
1214:FreeRTOS\Source/queue.c **** {
1215:FreeRTOS\Source/queue.c ****     BaseType_t xReturn;
1216:FreeRTOS\Source/queue.c ****     UBaseType_t uxSavedInterruptStatus;
1217:FreeRTOS\Source/queue.c ****     Queue_t * const pxQueue = xQueue;
1218:FreeRTOS\Source/queue.c **** 
1219:FreeRTOS\Source/queue.c ****     /* Similar to xQueueGenericSendFromISR() but used with semaphores where the
1220:FreeRTOS\Source/queue.c ****      * item size is 0.  Don't directly wake a task that was blocked on a queue
1221:FreeRTOS\Source/queue.c ****      * read, instead return a flag to say whether a context switch is required or
1222:FreeRTOS\Source/queue.c ****      * not (i.e. has a task with a higher priority than us been woken by this
1223:FreeRTOS\Source/queue.c ****      * post). */
1224:FreeRTOS\Source/queue.c **** 
1225:FreeRTOS\Source/queue.c ****     configASSERT( pxQueue );
1226:FreeRTOS\Source/queue.c **** 
1227:FreeRTOS\Source/queue.c ****     /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
1228:FreeRTOS\Source/queue.c ****      * if the item size is not 0. */
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 23


1229:FreeRTOS\Source/queue.c ****     configASSERT( pxQueue->uxItemSize == 0 );
1230:FreeRTOS\Source/queue.c **** 
1231:FreeRTOS\Source/queue.c ****     /* Normally a mutex would not be given from an interrupt, especially if
1232:FreeRTOS\Source/queue.c ****      * there is a mutex holder, as priority inheritance makes no sense for an
1233:FreeRTOS\Source/queue.c ****      * interrupts, only tasks. */
1234:FreeRTOS\Source/queue.c ****     configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMu
1235:FreeRTOS\Source/queue.c **** 
1236:FreeRTOS\Source/queue.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
1237:FreeRTOS\Source/queue.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
1238:FreeRTOS\Source/queue.c ****      * above the maximum system call priority are kept permanently enabled, even
1239:FreeRTOS\Source/queue.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
1240:FreeRTOS\Source/queue.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1241:FreeRTOS\Source/queue.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1242:FreeRTOS\Source/queue.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
1243:FreeRTOS\Source/queue.c ****      * assigned a priority above the configured maximum system call priority.
1244:FreeRTOS\Source/queue.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
1245:FreeRTOS\Source/queue.c ****      * that have been assigned a priority at or (logically) below the maximum
1246:FreeRTOS\Source/queue.c ****      * system call interrupt priority.  FreeRTOS maintains a separate interrupt
1247:FreeRTOS\Source/queue.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
1248:FreeRTOS\Source/queue.c ****      * More information (albeit Cortex-M specific) is provided on the following
1249:FreeRTOS\Source/queue.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1250:FreeRTOS\Source/queue.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1251:FreeRTOS\Source/queue.c **** 
1252:FreeRTOS\Source/queue.c ****     uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1253:FreeRTOS\Source/queue.c ****     {
1254:FreeRTOS\Source/queue.c ****         const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1255:FreeRTOS\Source/queue.c **** 
1256:FreeRTOS\Source/queue.c ****         /* When the queue is used to implement a semaphore no data is ever
1257:FreeRTOS\Source/queue.c ****          * moved through the queue but it is still valid to see if the queue 'has
1258:FreeRTOS\Source/queue.c ****          * space'. */
1259:FreeRTOS\Source/queue.c ****         if( uxMessagesWaiting < pxQueue->uxLength )
1260:FreeRTOS\Source/queue.c ****         {
1261:FreeRTOS\Source/queue.c ****             const int8_t cTxLock = pxQueue->cTxLock;
1262:FreeRTOS\Source/queue.c **** 
1263:FreeRTOS\Source/queue.c ****             traceQUEUE_SEND_FROM_ISR( pxQueue );
1264:FreeRTOS\Source/queue.c **** 
1265:FreeRTOS\Source/queue.c ****             /* A task can only have an inherited priority if it is a mutex
1266:FreeRTOS\Source/queue.c ****              * holder - and if there is a mutex holder then the mutex cannot be
1267:FreeRTOS\Source/queue.c ****              * given from an ISR.  As this is the ISR version of the function it
1268:FreeRTOS\Source/queue.c ****              * can be assumed there is no mutex holder and no need to determine if
1269:FreeRTOS\Source/queue.c ****              * priority disinheritance is needed.  Simply increase the count of
1270:FreeRTOS\Source/queue.c ****              * messages (semaphores) available. */
1271:FreeRTOS\Source/queue.c ****             pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1272:FreeRTOS\Source/queue.c **** 
1273:FreeRTOS\Source/queue.c ****             /* The event list is not altered if the queue is locked.  This will
1274:FreeRTOS\Source/queue.c ****              * be done when the queue is unlocked later. */
1275:FreeRTOS\Source/queue.c ****             if( cTxLock == queueUNLOCKED )
1276:FreeRTOS\Source/queue.c ****             {
1277:FreeRTOS\Source/queue.c ****                 #if ( configUSE_QUEUE_SETS == 1 )
1278:FreeRTOS\Source/queue.c ****                 {
1279:FreeRTOS\Source/queue.c ****                     if( pxQueue->pxQueueSetContainer != NULL )
1280:FreeRTOS\Source/queue.c ****                     {
1281:FreeRTOS\Source/queue.c ****                         if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
1282:FreeRTOS\Source/queue.c ****                         {
1283:FreeRTOS\Source/queue.c ****                             /* The semaphore is a member of a queue set, and
1284:FreeRTOS\Source/queue.c ****                              * posting to the queue set caused a higher priority
1285:FreeRTOS\Source/queue.c ****                              * task to unblock.  A context switch is required. */
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 24


1286:FreeRTOS\Source/queue.c ****                             if( pxHigherPriorityTaskWoken != NULL )
1287:FreeRTOS\Source/queue.c ****                             {
1288:FreeRTOS\Source/queue.c ****                                 *pxHigherPriorityTaskWoken = pdTRUE;
1289:FreeRTOS\Source/queue.c ****                             }
1290:FreeRTOS\Source/queue.c ****                             else
1291:FreeRTOS\Source/queue.c ****                             {
1292:FreeRTOS\Source/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1293:FreeRTOS\Source/queue.c ****                             }
1294:FreeRTOS\Source/queue.c ****                         }
1295:FreeRTOS\Source/queue.c ****                         else
1296:FreeRTOS\Source/queue.c ****                         {
1297:FreeRTOS\Source/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1298:FreeRTOS\Source/queue.c ****                         }
1299:FreeRTOS\Source/queue.c ****                     }
1300:FreeRTOS\Source/queue.c ****                     else
1301:FreeRTOS\Source/queue.c ****                     {
1302:FreeRTOS\Source/queue.c ****                         if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1303:FreeRTOS\Source/queue.c ****                         {
1304:FreeRTOS\Source/queue.c ****                             if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) !=
1305:FreeRTOS\Source/queue.c ****                             {
1306:FreeRTOS\Source/queue.c ****                                 /* The task waiting has a higher priority so
1307:FreeRTOS\Source/queue.c ****                                  *  record that a context switch is required. */
1308:FreeRTOS\Source/queue.c ****                                 if( pxHigherPriorityTaskWoken != NULL )
1309:FreeRTOS\Source/queue.c ****                                 {
1310:FreeRTOS\Source/queue.c ****                                     *pxHigherPriorityTaskWoken = pdTRUE;
1311:FreeRTOS\Source/queue.c ****                                 }
1312:FreeRTOS\Source/queue.c ****                                 else
1313:FreeRTOS\Source/queue.c ****                                 {
1314:FreeRTOS\Source/queue.c ****                                     mtCOVERAGE_TEST_MARKER();
1315:FreeRTOS\Source/queue.c ****                                 }
1316:FreeRTOS\Source/queue.c ****                             }
1317:FreeRTOS\Source/queue.c ****                             else
1318:FreeRTOS\Source/queue.c ****                             {
1319:FreeRTOS\Source/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1320:FreeRTOS\Source/queue.c ****                             }
1321:FreeRTOS\Source/queue.c ****                         }
1322:FreeRTOS\Source/queue.c ****                         else
1323:FreeRTOS\Source/queue.c ****                         {
1324:FreeRTOS\Source/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1325:FreeRTOS\Source/queue.c ****                         }
1326:FreeRTOS\Source/queue.c ****                     }
1327:FreeRTOS\Source/queue.c ****                 }
1328:FreeRTOS\Source/queue.c ****                 #else /* configUSE_QUEUE_SETS */
1329:FreeRTOS\Source/queue.c ****                 {
1330:FreeRTOS\Source/queue.c ****                     if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1331:FreeRTOS\Source/queue.c ****                     {
1332:FreeRTOS\Source/queue.c ****                         if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdF
1333:FreeRTOS\Source/queue.c ****                         {
1334:FreeRTOS\Source/queue.c ****                             /* The task waiting has a higher priority so record that a
1335:FreeRTOS\Source/queue.c ****                              * context switch is required. */
1336:FreeRTOS\Source/queue.c ****                             if( pxHigherPriorityTaskWoken != NULL )
1337:FreeRTOS\Source/queue.c ****                             {
1338:FreeRTOS\Source/queue.c ****                                 *pxHigherPriorityTaskWoken = pdTRUE;
1339:FreeRTOS\Source/queue.c ****                             }
1340:FreeRTOS\Source/queue.c ****                             else
1341:FreeRTOS\Source/queue.c ****                             {
1342:FreeRTOS\Source/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 25


1343:FreeRTOS\Source/queue.c ****                             }
1344:FreeRTOS\Source/queue.c ****                         }
1345:FreeRTOS\Source/queue.c ****                         else
1346:FreeRTOS\Source/queue.c ****                         {
1347:FreeRTOS\Source/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1348:FreeRTOS\Source/queue.c ****                         }
1349:FreeRTOS\Source/queue.c ****                     }
1350:FreeRTOS\Source/queue.c ****                     else
1351:FreeRTOS\Source/queue.c ****                     {
1352:FreeRTOS\Source/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1353:FreeRTOS\Source/queue.c ****                     }
1354:FreeRTOS\Source/queue.c ****                 }
1355:FreeRTOS\Source/queue.c ****                 #endif /* configUSE_QUEUE_SETS */
1356:FreeRTOS\Source/queue.c ****             }
1357:FreeRTOS\Source/queue.c ****             else
1358:FreeRTOS\Source/queue.c ****             {
1359:FreeRTOS\Source/queue.c ****                 /* Increment the lock count so the task that unlocks the queue
1360:FreeRTOS\Source/queue.c ****                  * knows that data was posted while it was locked. */
1361:FreeRTOS\Source/queue.c ****                 prvIncrementQueueTxLock( pxQueue, cTxLock );
1362:FreeRTOS\Source/queue.c ****             }
1363:FreeRTOS\Source/queue.c **** 
1364:FreeRTOS\Source/queue.c ****             xReturn = pdPASS;
1365:FreeRTOS\Source/queue.c ****         }
1366:FreeRTOS\Source/queue.c ****         else
1367:FreeRTOS\Source/queue.c ****         {
1368:FreeRTOS\Source/queue.c ****             traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1369:FreeRTOS\Source/queue.c ****             xReturn = errQUEUE_FULL;
1370:FreeRTOS\Source/queue.c ****         }
1371:FreeRTOS\Source/queue.c ****     }
1372:FreeRTOS\Source/queue.c ****     portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1373:FreeRTOS\Source/queue.c **** 
1374:FreeRTOS\Source/queue.c ****     return xReturn;
1375:FreeRTOS\Source/queue.c **** }
1376:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
1377:FreeRTOS\Source/queue.c **** 
1378:FreeRTOS\Source/queue.c **** BaseType_t xQueueReceive( QueueHandle_t xQueue,
1379:FreeRTOS\Source/queue.c ****                           void * const pvBuffer,
1380:FreeRTOS\Source/queue.c ****                           TickType_t xTicksToWait )
1381:FreeRTOS\Source/queue.c **** {
1382:FreeRTOS\Source/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
1383:FreeRTOS\Source/queue.c ****     TimeOut_t xTimeOut;
1384:FreeRTOS\Source/queue.c ****     Queue_t * const pxQueue = xQueue;
1385:FreeRTOS\Source/queue.c **** 
1386:FreeRTOS\Source/queue.c ****     /* Check the pointer is not NULL. */
1387:FreeRTOS\Source/queue.c ****     configASSERT( ( pxQueue ) );
1388:FreeRTOS\Source/queue.c **** 
1389:FreeRTOS\Source/queue.c ****     /* The buffer into which data is received can only be NULL if the data size
1390:FreeRTOS\Source/queue.c ****      * is zero (so no data is copied into the buffer). */
1391:FreeRTOS\Source/queue.c ****     configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) 
1392:FreeRTOS\Source/queue.c **** 
1393:FreeRTOS\Source/queue.c ****     /* Cannot block if the scheduler is suspended. */
1394:FreeRTOS\Source/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1395:FreeRTOS\Source/queue.c ****     {
1396:FreeRTOS\Source/queue.c ****         configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait 
1397:FreeRTOS\Source/queue.c ****     }
1398:FreeRTOS\Source/queue.c ****     #endif
1399:FreeRTOS\Source/queue.c **** 
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 26


1400:FreeRTOS\Source/queue.c ****     /*lint -save -e904  This function relaxes the coding standard somewhat to
1401:FreeRTOS\Source/queue.c ****      * allow return statements within the function itself.  This is done in the
1402:FreeRTOS\Source/queue.c ****      * interest of execution time efficiency. */
1403:FreeRTOS\Source/queue.c ****     for( ; ; )
1404:FreeRTOS\Source/queue.c ****     {
1405:FreeRTOS\Source/queue.c ****         taskENTER_CRITICAL();
1406:FreeRTOS\Source/queue.c ****         {
1407:FreeRTOS\Source/queue.c ****             const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1408:FreeRTOS\Source/queue.c **** 
1409:FreeRTOS\Source/queue.c ****             /* Is there data in the queue now?  To be running the calling task
1410:FreeRTOS\Source/queue.c ****              * must be the highest priority task wanting to access the queue. */
1411:FreeRTOS\Source/queue.c ****             if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1412:FreeRTOS\Source/queue.c ****             {
1413:FreeRTOS\Source/queue.c ****                 /* Data available, remove one item. */
1414:FreeRTOS\Source/queue.c ****                 prvCopyDataFromQueue( pxQueue, pvBuffer );
1415:FreeRTOS\Source/queue.c ****                 traceQUEUE_RECEIVE( pxQueue );
1416:FreeRTOS\Source/queue.c ****                 pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1417:FreeRTOS\Source/queue.c **** 
1418:FreeRTOS\Source/queue.c ****                 /* There is now space in the queue, were any tasks waiting to
1419:FreeRTOS\Source/queue.c ****                  * post to the queue?  If so, unblock the highest priority waiting
1420:FreeRTOS\Source/queue.c ****                  * task. */
1421:FreeRTOS\Source/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1422:FreeRTOS\Source/queue.c ****                 {
1423:FreeRTOS\Source/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1424:FreeRTOS\Source/queue.c ****                     {
1425:FreeRTOS\Source/queue.c ****                         queueYIELD_IF_USING_PREEMPTION();
1426:FreeRTOS\Source/queue.c ****                     }
1427:FreeRTOS\Source/queue.c ****                     else
1428:FreeRTOS\Source/queue.c ****                     {
1429:FreeRTOS\Source/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1430:FreeRTOS\Source/queue.c ****                     }
1431:FreeRTOS\Source/queue.c ****                 }
1432:FreeRTOS\Source/queue.c ****                 else
1433:FreeRTOS\Source/queue.c ****                 {
1434:FreeRTOS\Source/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1435:FreeRTOS\Source/queue.c ****                 }
1436:FreeRTOS\Source/queue.c **** 
1437:FreeRTOS\Source/queue.c ****                 taskEXIT_CRITICAL();
1438:FreeRTOS\Source/queue.c ****                 return pdPASS;
1439:FreeRTOS\Source/queue.c ****             }
1440:FreeRTOS\Source/queue.c ****             else
1441:FreeRTOS\Source/queue.c ****             {
1442:FreeRTOS\Source/queue.c ****                 if( xTicksToWait == ( TickType_t ) 0 )
1443:FreeRTOS\Source/queue.c ****                 {
1444:FreeRTOS\Source/queue.c ****                     /* The queue was empty and no block time is specified (or
1445:FreeRTOS\Source/queue.c ****                      * the block time has expired) so leave now. */
1446:FreeRTOS\Source/queue.c ****                     taskEXIT_CRITICAL();
1447:FreeRTOS\Source/queue.c ****                     traceQUEUE_RECEIVE_FAILED( pxQueue );
1448:FreeRTOS\Source/queue.c ****                     return errQUEUE_EMPTY;
1449:FreeRTOS\Source/queue.c ****                 }
1450:FreeRTOS\Source/queue.c ****                 else if( xEntryTimeSet == pdFALSE )
1451:FreeRTOS\Source/queue.c ****                 {
1452:FreeRTOS\Source/queue.c ****                     /* The queue was empty and a block time was specified so
1453:FreeRTOS\Source/queue.c ****                      * configure the timeout structure. */
1454:FreeRTOS\Source/queue.c ****                     vTaskInternalSetTimeOutState( &xTimeOut );
1455:FreeRTOS\Source/queue.c ****                     xEntryTimeSet = pdTRUE;
1456:FreeRTOS\Source/queue.c ****                 }
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 27


1457:FreeRTOS\Source/queue.c ****                 else
1458:FreeRTOS\Source/queue.c ****                 {
1459:FreeRTOS\Source/queue.c ****                     /* Entry time was already set. */
1460:FreeRTOS\Source/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1461:FreeRTOS\Source/queue.c ****                 }
1462:FreeRTOS\Source/queue.c ****             }
1463:FreeRTOS\Source/queue.c ****         }
1464:FreeRTOS\Source/queue.c ****         taskEXIT_CRITICAL();
1465:FreeRTOS\Source/queue.c **** 
1466:FreeRTOS\Source/queue.c ****         /* Interrupts and other tasks can send to and receive from the queue
1467:FreeRTOS\Source/queue.c ****          * now the critical section has been exited. */
1468:FreeRTOS\Source/queue.c **** 
1469:FreeRTOS\Source/queue.c ****         vTaskSuspendAll();
1470:FreeRTOS\Source/queue.c ****         prvLockQueue( pxQueue );
1471:FreeRTOS\Source/queue.c **** 
1472:FreeRTOS\Source/queue.c ****         /* Update the timeout state to see if it has expired yet. */
1473:FreeRTOS\Source/queue.c ****         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1474:FreeRTOS\Source/queue.c ****         {
1475:FreeRTOS\Source/queue.c ****             /* The timeout has not expired.  If the queue is still empty place
1476:FreeRTOS\Source/queue.c ****              * the task on the list of tasks waiting to receive from the queue. */
1477:FreeRTOS\Source/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1478:FreeRTOS\Source/queue.c ****             {
1479:FreeRTOS\Source/queue.c ****                 traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1480:FreeRTOS\Source/queue.c ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1481:FreeRTOS\Source/queue.c ****                 prvUnlockQueue( pxQueue );
1482:FreeRTOS\Source/queue.c **** 
1483:FreeRTOS\Source/queue.c ****                 if( xTaskResumeAll() == pdFALSE )
1484:FreeRTOS\Source/queue.c ****                 {
1485:FreeRTOS\Source/queue.c ****                     portYIELD_WITHIN_API();
1486:FreeRTOS\Source/queue.c ****                 }
1487:FreeRTOS\Source/queue.c ****                 else
1488:FreeRTOS\Source/queue.c ****                 {
1489:FreeRTOS\Source/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1490:FreeRTOS\Source/queue.c ****                 }
1491:FreeRTOS\Source/queue.c ****             }
1492:FreeRTOS\Source/queue.c ****             else
1493:FreeRTOS\Source/queue.c ****             {
1494:FreeRTOS\Source/queue.c ****                 /* The queue contains data again.  Loop back to try and read the
1495:FreeRTOS\Source/queue.c ****                  * data. */
1496:FreeRTOS\Source/queue.c ****                 prvUnlockQueue( pxQueue );
1497:FreeRTOS\Source/queue.c ****                 ( void ) xTaskResumeAll();
1498:FreeRTOS\Source/queue.c ****             }
1499:FreeRTOS\Source/queue.c ****         }
1500:FreeRTOS\Source/queue.c ****         else
1501:FreeRTOS\Source/queue.c ****         {
1502:FreeRTOS\Source/queue.c ****             /* Timed out.  If there is no data in the queue exit, otherwise loop
1503:FreeRTOS\Source/queue.c ****              * back and attempt to read the data. */
1504:FreeRTOS\Source/queue.c ****             prvUnlockQueue( pxQueue );
1505:FreeRTOS\Source/queue.c ****             ( void ) xTaskResumeAll();
1506:FreeRTOS\Source/queue.c **** 
1507:FreeRTOS\Source/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1508:FreeRTOS\Source/queue.c ****             {
1509:FreeRTOS\Source/queue.c ****                 traceQUEUE_RECEIVE_FAILED( pxQueue );
1510:FreeRTOS\Source/queue.c ****                 return errQUEUE_EMPTY;
1511:FreeRTOS\Source/queue.c ****             }
1512:FreeRTOS\Source/queue.c ****             else
1513:FreeRTOS\Source/queue.c ****             {
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 28


1514:FreeRTOS\Source/queue.c ****                 mtCOVERAGE_TEST_MARKER();
1515:FreeRTOS\Source/queue.c ****             }
1516:FreeRTOS\Source/queue.c ****         }
1517:FreeRTOS\Source/queue.c ****     } /*lint -restore */
1518:FreeRTOS\Source/queue.c **** }
1519:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
1520:FreeRTOS\Source/queue.c **** 
1521:FreeRTOS\Source/queue.c **** BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
1522:FreeRTOS\Source/queue.c ****                                 TickType_t xTicksToWait )
1523:FreeRTOS\Source/queue.c **** {
1524:FreeRTOS\Source/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
1525:FreeRTOS\Source/queue.c ****     TimeOut_t xTimeOut;
1526:FreeRTOS\Source/queue.c ****     Queue_t * const pxQueue = xQueue;
1527:FreeRTOS\Source/queue.c **** 
1528:FreeRTOS\Source/queue.c ****     #if ( configUSE_MUTEXES == 1 )
1529:FreeRTOS\Source/queue.c ****         BaseType_t xInheritanceOccurred = pdFALSE;
1530:FreeRTOS\Source/queue.c ****     #endif
1531:FreeRTOS\Source/queue.c **** 
1532:FreeRTOS\Source/queue.c ****     /* Check the queue pointer is not NULL. */
1533:FreeRTOS\Source/queue.c ****     configASSERT( ( pxQueue ) );
1534:FreeRTOS\Source/queue.c **** 
1535:FreeRTOS\Source/queue.c ****     /* Check this really is a semaphore, in which case the item size will be
1536:FreeRTOS\Source/queue.c ****      * 0. */
1537:FreeRTOS\Source/queue.c ****     configASSERT( pxQueue->uxItemSize == 0 );
1538:FreeRTOS\Source/queue.c **** 
1539:FreeRTOS\Source/queue.c ****     /* Cannot block if the scheduler is suspended. */
1540:FreeRTOS\Source/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1541:FreeRTOS\Source/queue.c ****     {
1542:FreeRTOS\Source/queue.c ****         configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait 
1543:FreeRTOS\Source/queue.c ****     }
1544:FreeRTOS\Source/queue.c ****     #endif
1545:FreeRTOS\Source/queue.c **** 
1546:FreeRTOS\Source/queue.c ****     /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
1547:FreeRTOS\Source/queue.c ****      * statements within the function itself.  This is done in the interest
1548:FreeRTOS\Source/queue.c ****      * of execution time efficiency. */
1549:FreeRTOS\Source/queue.c ****     for( ; ; )
1550:FreeRTOS\Source/queue.c ****     {
1551:FreeRTOS\Source/queue.c ****         taskENTER_CRITICAL();
1552:FreeRTOS\Source/queue.c ****         {
1553:FreeRTOS\Source/queue.c ****             /* Semaphores are queues with an item size of 0, and where the
1554:FreeRTOS\Source/queue.c ****              * number of messages in the queue is the semaphore's count value. */
1555:FreeRTOS\Source/queue.c ****             const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
1556:FreeRTOS\Source/queue.c **** 
1557:FreeRTOS\Source/queue.c ****             /* Is there data in the queue now?  To be running the calling task
1558:FreeRTOS\Source/queue.c ****              * must be the highest priority task wanting to access the queue. */
1559:FreeRTOS\Source/queue.c ****             if( uxSemaphoreCount > ( UBaseType_t ) 0 )
1560:FreeRTOS\Source/queue.c ****             {
1561:FreeRTOS\Source/queue.c ****                 traceQUEUE_RECEIVE( pxQueue );
1562:FreeRTOS\Source/queue.c **** 
1563:FreeRTOS\Source/queue.c ****                 /* Semaphores are queues with a data size of zero and where the
1564:FreeRTOS\Source/queue.c ****                  * messages waiting is the semaphore's count.  Reduce the count. */
1565:FreeRTOS\Source/queue.c ****                 pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
1566:FreeRTOS\Source/queue.c **** 
1567:FreeRTOS\Source/queue.c ****                 #if ( configUSE_MUTEXES == 1 )
1568:FreeRTOS\Source/queue.c ****                 {
1569:FreeRTOS\Source/queue.c ****                     if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1570:FreeRTOS\Source/queue.c ****                     {
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 29


1571:FreeRTOS\Source/queue.c ****                         /* Record the information required to implement
1572:FreeRTOS\Source/queue.c ****                          * priority inheritance should it become necessary. */
1573:FreeRTOS\Source/queue.c ****                         pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
1574:FreeRTOS\Source/queue.c ****                     }
1575:FreeRTOS\Source/queue.c ****                     else
1576:FreeRTOS\Source/queue.c ****                     {
1577:FreeRTOS\Source/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1578:FreeRTOS\Source/queue.c ****                     }
1579:FreeRTOS\Source/queue.c ****                 }
1580:FreeRTOS\Source/queue.c ****                 #endif /* configUSE_MUTEXES */
1581:FreeRTOS\Source/queue.c **** 
1582:FreeRTOS\Source/queue.c ****                 /* Check to see if other tasks are blocked waiting to give the
1583:FreeRTOS\Source/queue.c ****                  * semaphore, and if so, unblock the highest priority such task. */
1584:FreeRTOS\Source/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1585:FreeRTOS\Source/queue.c ****                 {
1586:FreeRTOS\Source/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1587:FreeRTOS\Source/queue.c ****                     {
1588:FreeRTOS\Source/queue.c ****                         queueYIELD_IF_USING_PREEMPTION();
1589:FreeRTOS\Source/queue.c ****                     }
1590:FreeRTOS\Source/queue.c ****                     else
1591:FreeRTOS\Source/queue.c ****                     {
1592:FreeRTOS\Source/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1593:FreeRTOS\Source/queue.c ****                     }
1594:FreeRTOS\Source/queue.c ****                 }
1595:FreeRTOS\Source/queue.c ****                 else
1596:FreeRTOS\Source/queue.c ****                 {
1597:FreeRTOS\Source/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1598:FreeRTOS\Source/queue.c ****                 }
1599:FreeRTOS\Source/queue.c **** 
1600:FreeRTOS\Source/queue.c ****                 taskEXIT_CRITICAL();
1601:FreeRTOS\Source/queue.c ****                 return pdPASS;
1602:FreeRTOS\Source/queue.c ****             }
1603:FreeRTOS\Source/queue.c ****             else
1604:FreeRTOS\Source/queue.c ****             {
1605:FreeRTOS\Source/queue.c ****                 if( xTicksToWait == ( TickType_t ) 0 )
1606:FreeRTOS\Source/queue.c ****                 {
1607:FreeRTOS\Source/queue.c ****                     /* The semaphore count was 0 and no block time is specified
1608:FreeRTOS\Source/queue.c ****                      * (or the block time has expired) so exit now. */
1609:FreeRTOS\Source/queue.c ****                     taskEXIT_CRITICAL();
1610:FreeRTOS\Source/queue.c ****                     traceQUEUE_RECEIVE_FAILED( pxQueue );
1611:FreeRTOS\Source/queue.c ****                     return errQUEUE_EMPTY;
1612:FreeRTOS\Source/queue.c ****                 }
1613:FreeRTOS\Source/queue.c ****                 else if( xEntryTimeSet == pdFALSE )
1614:FreeRTOS\Source/queue.c ****                 {
1615:FreeRTOS\Source/queue.c ****                     /* The semaphore count was 0 and a block time was specified
1616:FreeRTOS\Source/queue.c ****                      * so configure the timeout structure ready to block. */
1617:FreeRTOS\Source/queue.c ****                     vTaskInternalSetTimeOutState( &xTimeOut );
1618:FreeRTOS\Source/queue.c ****                     xEntryTimeSet = pdTRUE;
1619:FreeRTOS\Source/queue.c ****                 }
1620:FreeRTOS\Source/queue.c ****                 else
1621:FreeRTOS\Source/queue.c ****                 {
1622:FreeRTOS\Source/queue.c ****                     /* Entry time was already set. */
1623:FreeRTOS\Source/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1624:FreeRTOS\Source/queue.c ****                 }
1625:FreeRTOS\Source/queue.c ****             }
1626:FreeRTOS\Source/queue.c ****         }
1627:FreeRTOS\Source/queue.c ****         taskEXIT_CRITICAL();
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 30


1628:FreeRTOS\Source/queue.c **** 
1629:FreeRTOS\Source/queue.c ****         /* Interrupts and other tasks can give to and take from the semaphore
1630:FreeRTOS\Source/queue.c ****          * now the critical section has been exited. */
1631:FreeRTOS\Source/queue.c **** 
1632:FreeRTOS\Source/queue.c ****         vTaskSuspendAll();
1633:FreeRTOS\Source/queue.c ****         prvLockQueue( pxQueue );
1634:FreeRTOS\Source/queue.c **** 
1635:FreeRTOS\Source/queue.c ****         /* Update the timeout state to see if it has expired yet. */
1636:FreeRTOS\Source/queue.c ****         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1637:FreeRTOS\Source/queue.c ****         {
1638:FreeRTOS\Source/queue.c ****             /* A block time is specified and not expired.  If the semaphore
1639:FreeRTOS\Source/queue.c ****              * count is 0 then enter the Blocked state to wait for a semaphore to
1640:FreeRTOS\Source/queue.c ****              * become available.  As semaphores are implemented with queues the
1641:FreeRTOS\Source/queue.c ****              * queue being empty is equivalent to the semaphore count being 0. */
1642:FreeRTOS\Source/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1643:FreeRTOS\Source/queue.c ****             {
1644:FreeRTOS\Source/queue.c ****                 traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1645:FreeRTOS\Source/queue.c **** 
1646:FreeRTOS\Source/queue.c ****                 #if ( configUSE_MUTEXES == 1 )
1647:FreeRTOS\Source/queue.c ****                 {
1648:FreeRTOS\Source/queue.c ****                     if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1649:FreeRTOS\Source/queue.c ****                     {
1650:FreeRTOS\Source/queue.c ****                         taskENTER_CRITICAL();
1651:FreeRTOS\Source/queue.c ****                         {
1652:FreeRTOS\Source/queue.c ****                             xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMut
1653:FreeRTOS\Source/queue.c ****                         }
1654:FreeRTOS\Source/queue.c ****                         taskEXIT_CRITICAL();
1655:FreeRTOS\Source/queue.c ****                     }
1656:FreeRTOS\Source/queue.c ****                     else
1657:FreeRTOS\Source/queue.c ****                     {
1658:FreeRTOS\Source/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1659:FreeRTOS\Source/queue.c ****                     }
1660:FreeRTOS\Source/queue.c ****                 }
1661:FreeRTOS\Source/queue.c ****                 #endif /* if ( configUSE_MUTEXES == 1 ) */
1662:FreeRTOS\Source/queue.c **** 
1663:FreeRTOS\Source/queue.c ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1664:FreeRTOS\Source/queue.c ****                 prvUnlockQueue( pxQueue );
1665:FreeRTOS\Source/queue.c **** 
1666:FreeRTOS\Source/queue.c ****                 if( xTaskResumeAll() == pdFALSE )
1667:FreeRTOS\Source/queue.c ****                 {
1668:FreeRTOS\Source/queue.c ****                     portYIELD_WITHIN_API();
1669:FreeRTOS\Source/queue.c ****                 }
1670:FreeRTOS\Source/queue.c ****                 else
1671:FreeRTOS\Source/queue.c ****                 {
1672:FreeRTOS\Source/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1673:FreeRTOS\Source/queue.c ****                 }
1674:FreeRTOS\Source/queue.c ****             }
1675:FreeRTOS\Source/queue.c ****             else
1676:FreeRTOS\Source/queue.c ****             {
1677:FreeRTOS\Source/queue.c ****                 /* There was no timeout and the semaphore count was not 0, so
1678:FreeRTOS\Source/queue.c ****                  * attempt to take the semaphore again. */
1679:FreeRTOS\Source/queue.c ****                 prvUnlockQueue( pxQueue );
1680:FreeRTOS\Source/queue.c ****                 ( void ) xTaskResumeAll();
1681:FreeRTOS\Source/queue.c ****             }
1682:FreeRTOS\Source/queue.c ****         }
1683:FreeRTOS\Source/queue.c ****         else
1684:FreeRTOS\Source/queue.c ****         {
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 31


1685:FreeRTOS\Source/queue.c ****             /* Timed out. */
1686:FreeRTOS\Source/queue.c ****             prvUnlockQueue( pxQueue );
1687:FreeRTOS\Source/queue.c ****             ( void ) xTaskResumeAll();
1688:FreeRTOS\Source/queue.c **** 
1689:FreeRTOS\Source/queue.c ****             /* If the semaphore count is 0 exit now as the timeout has
1690:FreeRTOS\Source/queue.c ****              * expired.  Otherwise return to attempt to take the semaphore that is
1691:FreeRTOS\Source/queue.c ****              * known to be available.  As semaphores are implemented by queues the
1692:FreeRTOS\Source/queue.c ****              * queue being empty is equivalent to the semaphore count being 0. */
1693:FreeRTOS\Source/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1694:FreeRTOS\Source/queue.c ****             {
1695:FreeRTOS\Source/queue.c ****                 #if ( configUSE_MUTEXES == 1 )
1696:FreeRTOS\Source/queue.c ****                 {
1697:FreeRTOS\Source/queue.c ****                     /* xInheritanceOccurred could only have be set if
1698:FreeRTOS\Source/queue.c ****                      * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
1699:FreeRTOS\Source/queue.c ****                      * test the mutex type again to check it is actually a mutex. */
1700:FreeRTOS\Source/queue.c ****                     if( xInheritanceOccurred != pdFALSE )
1701:FreeRTOS\Source/queue.c ****                     {
1702:FreeRTOS\Source/queue.c ****                         taskENTER_CRITICAL();
1703:FreeRTOS\Source/queue.c ****                         {
1704:FreeRTOS\Source/queue.c ****                             UBaseType_t uxHighestWaitingPriority;
1705:FreeRTOS\Source/queue.c **** 
1706:FreeRTOS\Source/queue.c ****                             /* This task blocking on the mutex caused another
1707:FreeRTOS\Source/queue.c ****                              * task to inherit this task's priority.  Now this task
1708:FreeRTOS\Source/queue.c ****                              * has timed out the priority should be disinherited
1709:FreeRTOS\Source/queue.c ****                              * again, but only as low as the next highest priority
1710:FreeRTOS\Source/queue.c ****                              * task that is waiting for the same mutex. */
1711:FreeRTOS\Source/queue.c ****                             uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueu
1712:FreeRTOS\Source/queue.c ****                             vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder
1713:FreeRTOS\Source/queue.c ****                         }
1714:FreeRTOS\Source/queue.c ****                         taskEXIT_CRITICAL();
1715:FreeRTOS\Source/queue.c ****                     }
1716:FreeRTOS\Source/queue.c ****                 }
1717:FreeRTOS\Source/queue.c ****                 #endif /* configUSE_MUTEXES */
1718:FreeRTOS\Source/queue.c **** 
1719:FreeRTOS\Source/queue.c ****                 traceQUEUE_RECEIVE_FAILED( pxQueue );
1720:FreeRTOS\Source/queue.c ****                 return errQUEUE_EMPTY;
1721:FreeRTOS\Source/queue.c ****             }
1722:FreeRTOS\Source/queue.c ****             else
1723:FreeRTOS\Source/queue.c ****             {
1724:FreeRTOS\Source/queue.c ****                 mtCOVERAGE_TEST_MARKER();
1725:FreeRTOS\Source/queue.c ****             }
1726:FreeRTOS\Source/queue.c ****         }
1727:FreeRTOS\Source/queue.c ****     } /*lint -restore */
1728:FreeRTOS\Source/queue.c **** }
1729:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
1730:FreeRTOS\Source/queue.c **** 
1731:FreeRTOS\Source/queue.c **** BaseType_t xQueuePeek( QueueHandle_t xQueue,
1732:FreeRTOS\Source/queue.c ****                        void * const pvBuffer,
1733:FreeRTOS\Source/queue.c ****                        TickType_t xTicksToWait )
1734:FreeRTOS\Source/queue.c **** {
1735:FreeRTOS\Source/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
1736:FreeRTOS\Source/queue.c ****     TimeOut_t xTimeOut;
1737:FreeRTOS\Source/queue.c ****     int8_t * pcOriginalReadPosition;
1738:FreeRTOS\Source/queue.c ****     Queue_t * const pxQueue = xQueue;
1739:FreeRTOS\Source/queue.c **** 
1740:FreeRTOS\Source/queue.c ****     /* Check the pointer is not NULL. */
1741:FreeRTOS\Source/queue.c ****     configASSERT( ( pxQueue ) );
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 32


1742:FreeRTOS\Source/queue.c **** 
1743:FreeRTOS\Source/queue.c ****     /* The buffer into which data is received can only be NULL if the data size
1744:FreeRTOS\Source/queue.c ****      * is zero (so no data is copied into the buffer. */
1745:FreeRTOS\Source/queue.c ****     configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) 
1746:FreeRTOS\Source/queue.c **** 
1747:FreeRTOS\Source/queue.c ****     /* Cannot block if the scheduler is suspended. */
1748:FreeRTOS\Source/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1749:FreeRTOS\Source/queue.c ****     {
1750:FreeRTOS\Source/queue.c ****         configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait 
1751:FreeRTOS\Source/queue.c ****     }
1752:FreeRTOS\Source/queue.c ****     #endif
1753:FreeRTOS\Source/queue.c **** 
1754:FreeRTOS\Source/queue.c ****     /*lint -save -e904  This function relaxes the coding standard somewhat to
1755:FreeRTOS\Source/queue.c ****      * allow return statements within the function itself.  This is done in the
1756:FreeRTOS\Source/queue.c ****      * interest of execution time efficiency. */
1757:FreeRTOS\Source/queue.c ****     for( ; ; )
1758:FreeRTOS\Source/queue.c ****     {
1759:FreeRTOS\Source/queue.c ****         taskENTER_CRITICAL();
1760:FreeRTOS\Source/queue.c ****         {
1761:FreeRTOS\Source/queue.c ****             const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1762:FreeRTOS\Source/queue.c **** 
1763:FreeRTOS\Source/queue.c ****             /* Is there data in the queue now?  To be running the calling task
1764:FreeRTOS\Source/queue.c ****              * must be the highest priority task wanting to access the queue. */
1765:FreeRTOS\Source/queue.c ****             if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1766:FreeRTOS\Source/queue.c ****             {
1767:FreeRTOS\Source/queue.c ****                 /* Remember the read position so it can be reset after the data
1768:FreeRTOS\Source/queue.c ****                  * is read from the queue as this function is only peeking the
1769:FreeRTOS\Source/queue.c ****                  * data, not removing it. */
1770:FreeRTOS\Source/queue.c ****                 pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
1771:FreeRTOS\Source/queue.c **** 
1772:FreeRTOS\Source/queue.c ****                 prvCopyDataFromQueue( pxQueue, pvBuffer );
1773:FreeRTOS\Source/queue.c ****                 traceQUEUE_PEEK( pxQueue );
1774:FreeRTOS\Source/queue.c **** 
1775:FreeRTOS\Source/queue.c ****                 /* The data is not being removed, so reset the read pointer. */
1776:FreeRTOS\Source/queue.c ****                 pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
1777:FreeRTOS\Source/queue.c **** 
1778:FreeRTOS\Source/queue.c ****                 /* The data is being left in the queue, so see if there are
1779:FreeRTOS\Source/queue.c ****                  * any other tasks waiting for the data. */
1780:FreeRTOS\Source/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1781:FreeRTOS\Source/queue.c ****                 {
1782:FreeRTOS\Source/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE
1783:FreeRTOS\Source/queue.c ****                     {
1784:FreeRTOS\Source/queue.c ****                         /* The task waiting has a higher priority than this task. */
1785:FreeRTOS\Source/queue.c ****                         queueYIELD_IF_USING_PREEMPTION();
1786:FreeRTOS\Source/queue.c ****                     }
1787:FreeRTOS\Source/queue.c ****                     else
1788:FreeRTOS\Source/queue.c ****                     {
1789:FreeRTOS\Source/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1790:FreeRTOS\Source/queue.c ****                     }
1791:FreeRTOS\Source/queue.c ****                 }
1792:FreeRTOS\Source/queue.c ****                 else
1793:FreeRTOS\Source/queue.c ****                 {
1794:FreeRTOS\Source/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1795:FreeRTOS\Source/queue.c ****                 }
1796:FreeRTOS\Source/queue.c **** 
1797:FreeRTOS\Source/queue.c ****                 taskEXIT_CRITICAL();
1798:FreeRTOS\Source/queue.c ****                 return pdPASS;
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 33


1799:FreeRTOS\Source/queue.c ****             }
1800:FreeRTOS\Source/queue.c ****             else
1801:FreeRTOS\Source/queue.c ****             {
1802:FreeRTOS\Source/queue.c ****                 if( xTicksToWait == ( TickType_t ) 0 )
1803:FreeRTOS\Source/queue.c ****                 {
1804:FreeRTOS\Source/queue.c ****                     /* The queue was empty and no block time is specified (or
1805:FreeRTOS\Source/queue.c ****                      * the block time has expired) so leave now. */
1806:FreeRTOS\Source/queue.c ****                     taskEXIT_CRITICAL();
1807:FreeRTOS\Source/queue.c ****                     traceQUEUE_PEEK_FAILED( pxQueue );
1808:FreeRTOS\Source/queue.c ****                     return errQUEUE_EMPTY;
1809:FreeRTOS\Source/queue.c ****                 }
1810:FreeRTOS\Source/queue.c ****                 else if( xEntryTimeSet == pdFALSE )
1811:FreeRTOS\Source/queue.c ****                 {
1812:FreeRTOS\Source/queue.c ****                     /* The queue was empty and a block time was specified so
1813:FreeRTOS\Source/queue.c ****                      * configure the timeout structure ready to enter the blocked
1814:FreeRTOS\Source/queue.c ****                      * state. */
1815:FreeRTOS\Source/queue.c ****                     vTaskInternalSetTimeOutState( &xTimeOut );
1816:FreeRTOS\Source/queue.c ****                     xEntryTimeSet = pdTRUE;
1817:FreeRTOS\Source/queue.c ****                 }
1818:FreeRTOS\Source/queue.c ****                 else
1819:FreeRTOS\Source/queue.c ****                 {
1820:FreeRTOS\Source/queue.c ****                     /* Entry time was already set. */
1821:FreeRTOS\Source/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1822:FreeRTOS\Source/queue.c ****                 }
1823:FreeRTOS\Source/queue.c ****             }
1824:FreeRTOS\Source/queue.c ****         }
1825:FreeRTOS\Source/queue.c ****         taskEXIT_CRITICAL();
1826:FreeRTOS\Source/queue.c **** 
1827:FreeRTOS\Source/queue.c ****         /* Interrupts and other tasks can send to and receive from the queue
1828:FreeRTOS\Source/queue.c ****          * now that the critical section has been exited. */
1829:FreeRTOS\Source/queue.c **** 
1830:FreeRTOS\Source/queue.c ****         vTaskSuspendAll();
1831:FreeRTOS\Source/queue.c ****         prvLockQueue( pxQueue );
1832:FreeRTOS\Source/queue.c **** 
1833:FreeRTOS\Source/queue.c ****         /* Update the timeout state to see if it has expired yet. */
1834:FreeRTOS\Source/queue.c ****         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1835:FreeRTOS\Source/queue.c ****         {
1836:FreeRTOS\Source/queue.c ****             /* Timeout has not expired yet, check to see if there is data in the
1837:FreeRTOS\Source/queue.c ****             * queue now, and if not enter the Blocked state to wait for data. */
1838:FreeRTOS\Source/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1839:FreeRTOS\Source/queue.c ****             {
1840:FreeRTOS\Source/queue.c ****                 traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
1841:FreeRTOS\Source/queue.c ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1842:FreeRTOS\Source/queue.c ****                 prvUnlockQueue( pxQueue );
1843:FreeRTOS\Source/queue.c **** 
1844:FreeRTOS\Source/queue.c ****                 if( xTaskResumeAll() == pdFALSE )
1845:FreeRTOS\Source/queue.c ****                 {
1846:FreeRTOS\Source/queue.c ****                     portYIELD_WITHIN_API();
1847:FreeRTOS\Source/queue.c ****                 }
1848:FreeRTOS\Source/queue.c ****                 else
1849:FreeRTOS\Source/queue.c ****                 {
1850:FreeRTOS\Source/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1851:FreeRTOS\Source/queue.c ****                 }
1852:FreeRTOS\Source/queue.c ****             }
1853:FreeRTOS\Source/queue.c ****             else
1854:FreeRTOS\Source/queue.c ****             {
1855:FreeRTOS\Source/queue.c ****                 /* There is data in the queue now, so don't enter the blocked
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 34


1856:FreeRTOS\Source/queue.c ****                  * state, instead return to try and obtain the data. */
1857:FreeRTOS\Source/queue.c ****                 prvUnlockQueue( pxQueue );
1858:FreeRTOS\Source/queue.c ****                 ( void ) xTaskResumeAll();
1859:FreeRTOS\Source/queue.c ****             }
1860:FreeRTOS\Source/queue.c ****         }
1861:FreeRTOS\Source/queue.c ****         else
1862:FreeRTOS\Source/queue.c ****         {
1863:FreeRTOS\Source/queue.c ****             /* The timeout has expired.  If there is still no data in the queue
1864:FreeRTOS\Source/queue.c ****              * exit, otherwise go back and try to read the data again. */
1865:FreeRTOS\Source/queue.c ****             prvUnlockQueue( pxQueue );
1866:FreeRTOS\Source/queue.c ****             ( void ) xTaskResumeAll();
1867:FreeRTOS\Source/queue.c **** 
1868:FreeRTOS\Source/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1869:FreeRTOS\Source/queue.c ****             {
1870:FreeRTOS\Source/queue.c ****                 traceQUEUE_PEEK_FAILED( pxQueue );
1871:FreeRTOS\Source/queue.c ****                 return errQUEUE_EMPTY;
1872:FreeRTOS\Source/queue.c ****             }
1873:FreeRTOS\Source/queue.c ****             else
1874:FreeRTOS\Source/queue.c ****             {
1875:FreeRTOS\Source/queue.c ****                 mtCOVERAGE_TEST_MARKER();
1876:FreeRTOS\Source/queue.c ****             }
1877:FreeRTOS\Source/queue.c ****         }
1878:FreeRTOS\Source/queue.c ****     } /*lint -restore */
1879:FreeRTOS\Source/queue.c **** }
1880:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
1881:FreeRTOS\Source/queue.c **** 
1882:FreeRTOS\Source/queue.c **** BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
1883:FreeRTOS\Source/queue.c ****                                  void * const pvBuffer,
1884:FreeRTOS\Source/queue.c ****                                  BaseType_t * const pxHigherPriorityTaskWoken )
1885:FreeRTOS\Source/queue.c **** {
1886:FreeRTOS\Source/queue.c ****     BaseType_t xReturn;
1887:FreeRTOS\Source/queue.c ****     UBaseType_t uxSavedInterruptStatus;
1888:FreeRTOS\Source/queue.c ****     Queue_t * const pxQueue = xQueue;
1889:FreeRTOS\Source/queue.c **** 
1890:FreeRTOS\Source/queue.c ****     configASSERT( pxQueue );
1891:FreeRTOS\Source/queue.c ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1892:FreeRTOS\Source/queue.c **** 
1893:FreeRTOS\Source/queue.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
1894:FreeRTOS\Source/queue.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
1895:FreeRTOS\Source/queue.c ****      * above the maximum system call priority are kept permanently enabled, even
1896:FreeRTOS\Source/queue.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
1897:FreeRTOS\Source/queue.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1898:FreeRTOS\Source/queue.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1899:FreeRTOS\Source/queue.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
1900:FreeRTOS\Source/queue.c ****      * assigned a priority above the configured maximum system call priority.
1901:FreeRTOS\Source/queue.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
1902:FreeRTOS\Source/queue.c ****      * that have been assigned a priority at or (logically) below the maximum
1903:FreeRTOS\Source/queue.c ****      * system call interrupt priority.  FreeRTOS maintains a separate interrupt
1904:FreeRTOS\Source/queue.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
1905:FreeRTOS\Source/queue.c ****      * More information (albeit Cortex-M specific) is provided on the following
1906:FreeRTOS\Source/queue.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1907:FreeRTOS\Source/queue.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1908:FreeRTOS\Source/queue.c **** 
1909:FreeRTOS\Source/queue.c ****     uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1910:FreeRTOS\Source/queue.c ****     {
1911:FreeRTOS\Source/queue.c ****         const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1912:FreeRTOS\Source/queue.c **** 
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 35


1913:FreeRTOS\Source/queue.c ****         /* Cannot block in an ISR, so check there is data available. */
1914:FreeRTOS\Source/queue.c ****         if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1915:FreeRTOS\Source/queue.c ****         {
1916:FreeRTOS\Source/queue.c ****             const int8_t cRxLock = pxQueue->cRxLock;
1917:FreeRTOS\Source/queue.c **** 
1918:FreeRTOS\Source/queue.c ****             traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
1919:FreeRTOS\Source/queue.c **** 
1920:FreeRTOS\Source/queue.c ****             prvCopyDataFromQueue( pxQueue, pvBuffer );
1921:FreeRTOS\Source/queue.c ****             pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1922:FreeRTOS\Source/queue.c **** 
1923:FreeRTOS\Source/queue.c ****             /* If the queue is locked the event list will not be modified.
1924:FreeRTOS\Source/queue.c ****              * Instead update the lock count so the task that unlocks the queue
1925:FreeRTOS\Source/queue.c ****              * will know that an ISR has removed data while the queue was
1926:FreeRTOS\Source/queue.c ****              * locked. */
1927:FreeRTOS\Source/queue.c ****             if( cRxLock == queueUNLOCKED )
1928:FreeRTOS\Source/queue.c ****             {
1929:FreeRTOS\Source/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1930:FreeRTOS\Source/queue.c ****                 {
1931:FreeRTOS\Source/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1932:FreeRTOS\Source/queue.c ****                     {
1933:FreeRTOS\Source/queue.c ****                         /* The task waiting has a higher priority than us so
1934:FreeRTOS\Source/queue.c ****                          * force a context switch. */
1935:FreeRTOS\Source/queue.c ****                         if( pxHigherPriorityTaskWoken != NULL )
1936:FreeRTOS\Source/queue.c ****                         {
1937:FreeRTOS\Source/queue.c ****                             *pxHigherPriorityTaskWoken = pdTRUE;
1938:FreeRTOS\Source/queue.c ****                         }
1939:FreeRTOS\Source/queue.c ****                         else
1940:FreeRTOS\Source/queue.c ****                         {
1941:FreeRTOS\Source/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1942:FreeRTOS\Source/queue.c ****                         }
1943:FreeRTOS\Source/queue.c ****                     }
1944:FreeRTOS\Source/queue.c ****                     else
1945:FreeRTOS\Source/queue.c ****                     {
1946:FreeRTOS\Source/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1947:FreeRTOS\Source/queue.c ****                     }
1948:FreeRTOS\Source/queue.c ****                 }
1949:FreeRTOS\Source/queue.c ****                 else
1950:FreeRTOS\Source/queue.c ****                 {
1951:FreeRTOS\Source/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1952:FreeRTOS\Source/queue.c ****                 }
1953:FreeRTOS\Source/queue.c ****             }
1954:FreeRTOS\Source/queue.c ****             else
1955:FreeRTOS\Source/queue.c ****             {
1956:FreeRTOS\Source/queue.c ****                 /* Increment the lock count so the task that unlocks the queue
1957:FreeRTOS\Source/queue.c ****                  * knows that data was removed while it was locked. */
1958:FreeRTOS\Source/queue.c ****                 prvIncrementQueueRxLock( pxQueue, cRxLock );
1959:FreeRTOS\Source/queue.c ****             }
1960:FreeRTOS\Source/queue.c **** 
1961:FreeRTOS\Source/queue.c ****             xReturn = pdPASS;
1962:FreeRTOS\Source/queue.c ****         }
1963:FreeRTOS\Source/queue.c ****         else
1964:FreeRTOS\Source/queue.c ****         {
1965:FreeRTOS\Source/queue.c ****             xReturn = pdFAIL;
1966:FreeRTOS\Source/queue.c ****             traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
1967:FreeRTOS\Source/queue.c ****         }
1968:FreeRTOS\Source/queue.c ****     }
1969:FreeRTOS\Source/queue.c ****     portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 36


1970:FreeRTOS\Source/queue.c **** 
1971:FreeRTOS\Source/queue.c ****     return xReturn;
1972:FreeRTOS\Source/queue.c **** }
1973:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
1974:FreeRTOS\Source/queue.c **** 
1975:FreeRTOS\Source/queue.c **** BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,
1976:FreeRTOS\Source/queue.c ****                               void * const pvBuffer )
1977:FreeRTOS\Source/queue.c **** {
1978:FreeRTOS\Source/queue.c ****     BaseType_t xReturn;
1979:FreeRTOS\Source/queue.c ****     UBaseType_t uxSavedInterruptStatus;
1980:FreeRTOS\Source/queue.c ****     int8_t * pcOriginalReadPosition;
1981:FreeRTOS\Source/queue.c ****     Queue_t * const pxQueue = xQueue;
1982:FreeRTOS\Source/queue.c **** 
1983:FreeRTOS\Source/queue.c ****     configASSERT( pxQueue );
1984:FreeRTOS\Source/queue.c ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1985:FreeRTOS\Source/queue.c ****     configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
1986:FreeRTOS\Source/queue.c **** 
1987:FreeRTOS\Source/queue.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
1988:FreeRTOS\Source/queue.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
1989:FreeRTOS\Source/queue.c ****      * above the maximum system call priority are kept permanently enabled, even
1990:FreeRTOS\Source/queue.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
1991:FreeRTOS\Source/queue.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1992:FreeRTOS\Source/queue.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1993:FreeRTOS\Source/queue.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
1994:FreeRTOS\Source/queue.c ****      * assigned a priority above the configured maximum system call priority.
1995:FreeRTOS\Source/queue.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
1996:FreeRTOS\Source/queue.c ****      * that have been assigned a priority at or (logically) below the maximum
1997:FreeRTOS\Source/queue.c ****      * system call interrupt priority.  FreeRTOS maintains a separate interrupt
1998:FreeRTOS\Source/queue.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
1999:FreeRTOS\Source/queue.c ****      * More information (albeit Cortex-M specific) is provided on the following
2000:FreeRTOS\Source/queue.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
2001:FreeRTOS\Source/queue.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2002:FreeRTOS\Source/queue.c **** 
2003:FreeRTOS\Source/queue.c ****     uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
2004:FreeRTOS\Source/queue.c ****     {
2005:FreeRTOS\Source/queue.c ****         /* Cannot block in an ISR, so check there is data available. */
2006:FreeRTOS\Source/queue.c ****         if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2007:FreeRTOS\Source/queue.c ****         {
2008:FreeRTOS\Source/queue.c ****             traceQUEUE_PEEK_FROM_ISR( pxQueue );
2009:FreeRTOS\Source/queue.c **** 
2010:FreeRTOS\Source/queue.c ****             /* Remember the read position so it can be reset as nothing is
2011:FreeRTOS\Source/queue.c ****              * actually being removed from the queue. */
2012:FreeRTOS\Source/queue.c ****             pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
2013:FreeRTOS\Source/queue.c ****             prvCopyDataFromQueue( pxQueue, pvBuffer );
2014:FreeRTOS\Source/queue.c ****             pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
2015:FreeRTOS\Source/queue.c **** 
2016:FreeRTOS\Source/queue.c ****             xReturn = pdPASS;
2017:FreeRTOS\Source/queue.c ****         }
2018:FreeRTOS\Source/queue.c ****         else
2019:FreeRTOS\Source/queue.c ****         {
2020:FreeRTOS\Source/queue.c ****             xReturn = pdFAIL;
2021:FreeRTOS\Source/queue.c ****             traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
2022:FreeRTOS\Source/queue.c ****         }
2023:FreeRTOS\Source/queue.c ****     }
2024:FreeRTOS\Source/queue.c ****     portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2025:FreeRTOS\Source/queue.c **** 
2026:FreeRTOS\Source/queue.c ****     return xReturn;
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 37


2027:FreeRTOS\Source/queue.c **** }
2028:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
2029:FreeRTOS\Source/queue.c **** 
2030:FreeRTOS\Source/queue.c **** UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
2031:FreeRTOS\Source/queue.c **** {
2032:FreeRTOS\Source/queue.c ****     UBaseType_t uxReturn;
2033:FreeRTOS\Source/queue.c **** 
2034:FreeRTOS\Source/queue.c ****     configASSERT( xQueue );
2035:FreeRTOS\Source/queue.c **** 
2036:FreeRTOS\Source/queue.c ****     taskENTER_CRITICAL();
2037:FreeRTOS\Source/queue.c ****     {
2038:FreeRTOS\Source/queue.c ****         uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
2039:FreeRTOS\Source/queue.c ****     }
2040:FreeRTOS\Source/queue.c ****     taskEXIT_CRITICAL();
2041:FreeRTOS\Source/queue.c **** 
2042:FreeRTOS\Source/queue.c ****     return uxReturn;
2043:FreeRTOS\Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
2044:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
2045:FreeRTOS\Source/queue.c **** 
2046:FreeRTOS\Source/queue.c **** UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
2047:FreeRTOS\Source/queue.c **** {
2048:FreeRTOS\Source/queue.c ****     UBaseType_t uxReturn;
2049:FreeRTOS\Source/queue.c ****     Queue_t * const pxQueue = xQueue;
2050:FreeRTOS\Source/queue.c **** 
2051:FreeRTOS\Source/queue.c ****     configASSERT( pxQueue );
2052:FreeRTOS\Source/queue.c **** 
2053:FreeRTOS\Source/queue.c ****     taskENTER_CRITICAL();
2054:FreeRTOS\Source/queue.c ****     {
2055:FreeRTOS\Source/queue.c ****         uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
2056:FreeRTOS\Source/queue.c ****     }
2057:FreeRTOS\Source/queue.c ****     taskEXIT_CRITICAL();
2058:FreeRTOS\Source/queue.c **** 
2059:FreeRTOS\Source/queue.c ****     return uxReturn;
2060:FreeRTOS\Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
2061:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
2062:FreeRTOS\Source/queue.c **** 
2063:FreeRTOS\Source/queue.c **** UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
2064:FreeRTOS\Source/queue.c **** {
2065:FreeRTOS\Source/queue.c ****     UBaseType_t uxReturn;
2066:FreeRTOS\Source/queue.c ****     Queue_t * const pxQueue = xQueue;
2067:FreeRTOS\Source/queue.c **** 
2068:FreeRTOS\Source/queue.c ****     configASSERT( pxQueue );
2069:FreeRTOS\Source/queue.c ****     uxReturn = pxQueue->uxMessagesWaiting;
2070:FreeRTOS\Source/queue.c **** 
2071:FreeRTOS\Source/queue.c ****     return uxReturn;
2072:FreeRTOS\Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
2073:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
2074:FreeRTOS\Source/queue.c **** 
2075:FreeRTOS\Source/queue.c **** void vQueueDelete( QueueHandle_t xQueue )
2076:FreeRTOS\Source/queue.c **** {
2077:FreeRTOS\Source/queue.c ****     Queue_t * const pxQueue = xQueue;
2078:FreeRTOS\Source/queue.c **** 
2079:FreeRTOS\Source/queue.c ****     configASSERT( pxQueue );
2080:FreeRTOS\Source/queue.c ****     traceQUEUE_DELETE( pxQueue );
2081:FreeRTOS\Source/queue.c **** 
2082:FreeRTOS\Source/queue.c ****     #if ( configQUEUE_REGISTRY_SIZE > 0 )
2083:FreeRTOS\Source/queue.c ****     {
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 38


2084:FreeRTOS\Source/queue.c ****         vQueueUnregisterQueue( pxQueue );
2085:FreeRTOS\Source/queue.c ****     }
2086:FreeRTOS\Source/queue.c ****     #endif
2087:FreeRTOS\Source/queue.c **** 
2088:FreeRTOS\Source/queue.c ****     #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
2089:FreeRTOS\Source/queue.c ****     {
2090:FreeRTOS\Source/queue.c ****         /* The queue can only have been allocated dynamically - free it
2091:FreeRTOS\Source/queue.c ****          * again. */
2092:FreeRTOS\Source/queue.c ****         vPortFree( pxQueue );
2093:FreeRTOS\Source/queue.c ****     }
2094:FreeRTOS\Source/queue.c ****     #elif ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
2095:FreeRTOS\Source/queue.c ****     {
2096:FreeRTOS\Source/queue.c ****         /* The queue could have been allocated statically or dynamically, so
2097:FreeRTOS\Source/queue.c ****          * check before attempting to free the memory. */
2098:FreeRTOS\Source/queue.c ****         if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
2099:FreeRTOS\Source/queue.c ****         {
2100:FreeRTOS\Source/queue.c ****             vPortFree( pxQueue );
2101:FreeRTOS\Source/queue.c ****         }
2102:FreeRTOS\Source/queue.c ****         else
2103:FreeRTOS\Source/queue.c ****         {
2104:FreeRTOS\Source/queue.c ****             mtCOVERAGE_TEST_MARKER();
2105:FreeRTOS\Source/queue.c ****         }
2106:FreeRTOS\Source/queue.c ****     }
2107:FreeRTOS\Source/queue.c ****     #else /* if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION ==
2108:FreeRTOS\Source/queue.c ****     {
2109:FreeRTOS\Source/queue.c ****         /* The queue must have been statically allocated, so is not going to be
2110:FreeRTOS\Source/queue.c ****          * deleted.  Avoid compiler warnings about the unused parameter. */
2111:FreeRTOS\Source/queue.c ****         ( void ) pxQueue;
2112:FreeRTOS\Source/queue.c ****     }
2113:FreeRTOS\Source/queue.c ****     #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
2114:FreeRTOS\Source/queue.c **** }
2115:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
2116:FreeRTOS\Source/queue.c **** 
2117:FreeRTOS\Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2118:FreeRTOS\Source/queue.c **** 
2119:FreeRTOS\Source/queue.c ****     UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
2120:FreeRTOS\Source/queue.c ****     {
2121:FreeRTOS\Source/queue.c ****         return ( ( Queue_t * ) xQueue )->uxQueueNumber;
2122:FreeRTOS\Source/queue.c ****     }
2123:FreeRTOS\Source/queue.c **** 
2124:FreeRTOS\Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2125:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
2126:FreeRTOS\Source/queue.c **** 
2127:FreeRTOS\Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2128:FreeRTOS\Source/queue.c **** 
2129:FreeRTOS\Source/queue.c ****     void vQueueSetQueueNumber( QueueHandle_t xQueue,
2130:FreeRTOS\Source/queue.c ****                                UBaseType_t uxQueueNumber )
2131:FreeRTOS\Source/queue.c ****     {
2132:FreeRTOS\Source/queue.c ****         ( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
2133:FreeRTOS\Source/queue.c ****     }
2134:FreeRTOS\Source/queue.c **** 
2135:FreeRTOS\Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2136:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
2137:FreeRTOS\Source/queue.c **** 
2138:FreeRTOS\Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2139:FreeRTOS\Source/queue.c **** 
2140:FreeRTOS\Source/queue.c ****     uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 39


2141:FreeRTOS\Source/queue.c ****     {
2142:FreeRTOS\Source/queue.c ****         return ( ( Queue_t * ) xQueue )->ucQueueType;
2143:FreeRTOS\Source/queue.c ****     }
2144:FreeRTOS\Source/queue.c **** 
2145:FreeRTOS\Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2146:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
2147:FreeRTOS\Source/queue.c **** 
2148:FreeRTOS\Source/queue.c **** #if ( configUSE_MUTEXES == 1 )
2149:FreeRTOS\Source/queue.c **** 
2150:FreeRTOS\Source/queue.c ****     static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
2151:FreeRTOS\Source/queue.c ****     {
  27              		.loc 1 2151 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
2152:FreeRTOS\Source/queue.c ****         UBaseType_t uxHighestPriorityOfWaitingTasks;
2153:FreeRTOS\Source/queue.c **** 
2154:FreeRTOS\Source/queue.c ****         /* If a task waiting for a mutex causes the mutex holder to inherit a
2155:FreeRTOS\Source/queue.c ****          * priority, but the waiting task times out, then the holder should
2156:FreeRTOS\Source/queue.c ****          * disinherit the priority - but only down to the highest priority of any
2157:FreeRTOS\Source/queue.c ****          * other tasks that are waiting for the same mutex.  For this purpose,
2158:FreeRTOS\Source/queue.c ****          * return the priority of the highest priority task that is waiting for the
2159:FreeRTOS\Source/queue.c ****          * mutex. */
2160:FreeRTOS\Source/queue.c ****         if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
  33              		.loc 1 2160 0
  34 0000 436A     		ldr	r3, [r0, #36]
  35 0002 002B     		cmp	r3, #0
  36 0004 04D0     		beq	.L3
2161:FreeRTOS\Source/queue.c ****         {
2162:FreeRTOS\Source/queue.c ****             uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t 
  37              		.loc 1 2162 0
  38 0006 036B     		ldr	r3, [r0, #48]
  39 0008 1868     		ldr	r0, [r3]
  40              	.LVL1:
  41 000a 0523     		movs	r3, #5
  42 000c 181A     		subs	r0, r3, r0
  43              	.LVL2:
  44 000e 00E0     		b	.L2
  45              	.LVL3:
  46              	.L3:
2163:FreeRTOS\Source/queue.c ****         }
2164:FreeRTOS\Source/queue.c ****         else
2165:FreeRTOS\Source/queue.c ****         {
2166:FreeRTOS\Source/queue.c ****             uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
  47              		.loc 1 2166 0
  48 0010 0020     		movs	r0, #0
  49              	.LVL4:
  50              	.L2:
2167:FreeRTOS\Source/queue.c ****         }
2168:FreeRTOS\Source/queue.c **** 
2169:FreeRTOS\Source/queue.c ****         return uxHighestPriorityOfWaitingTasks;
2170:FreeRTOS\Source/queue.c ****     }
  51              		.loc 1 2170 0
  52              		@ sp needed
  53 0012 7047     		bx	lr
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 40


  54              		.cfi_endproc
  55              	.LFE54:
  56              		.size	prvGetDisinheritPriorityAfterTimeout, .-prvGetDisinheritPriorityAfterTimeout
  57              		.section	.text.prvIsQueueFull,"ax",%progbits
  58              		.align	2
  59              		.code	16
  60              		.thumb_func
  61              		.type	prvIsQueueFull, %function
  62              	prvIsQueueFull:
  63              	.LFB60:
2171:FreeRTOS\Source/queue.c **** 
2172:FreeRTOS\Source/queue.c **** #endif /* configUSE_MUTEXES */
2173:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
2174:FreeRTOS\Source/queue.c **** 
2175:FreeRTOS\Source/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
2176:FreeRTOS\Source/queue.c ****                                       const void * pvItemToQueue,
2177:FreeRTOS\Source/queue.c ****                                       const BaseType_t xPosition )
2178:FreeRTOS\Source/queue.c **** {
2179:FreeRTOS\Source/queue.c ****     BaseType_t xReturn = pdFALSE;
2180:FreeRTOS\Source/queue.c ****     UBaseType_t uxMessagesWaiting;
2181:FreeRTOS\Source/queue.c **** 
2182:FreeRTOS\Source/queue.c ****     /* This function is called from a critical section. */
2183:FreeRTOS\Source/queue.c **** 
2184:FreeRTOS\Source/queue.c ****     uxMessagesWaiting = pxQueue->uxMessagesWaiting;
2185:FreeRTOS\Source/queue.c **** 
2186:FreeRTOS\Source/queue.c ****     if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
2187:FreeRTOS\Source/queue.c ****     {
2188:FreeRTOS\Source/queue.c ****         #if ( configUSE_MUTEXES == 1 )
2189:FreeRTOS\Source/queue.c ****         {
2190:FreeRTOS\Source/queue.c ****             if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
2191:FreeRTOS\Source/queue.c ****             {
2192:FreeRTOS\Source/queue.c ****                 /* The mutex is no longer being held. */
2193:FreeRTOS\Source/queue.c ****                 xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
2194:FreeRTOS\Source/queue.c ****                 pxQueue->u.xSemaphore.xMutexHolder = NULL;
2195:FreeRTOS\Source/queue.c ****             }
2196:FreeRTOS\Source/queue.c ****             else
2197:FreeRTOS\Source/queue.c ****             {
2198:FreeRTOS\Source/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2199:FreeRTOS\Source/queue.c ****             }
2200:FreeRTOS\Source/queue.c ****         }
2201:FreeRTOS\Source/queue.c ****         #endif /* configUSE_MUTEXES */
2202:FreeRTOS\Source/queue.c ****     }
2203:FreeRTOS\Source/queue.c ****     else if( xPosition == queueSEND_TO_BACK )
2204:FreeRTOS\Source/queue.c ****     {
2205:FreeRTOS\Source/queue.c ****         ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSi
2206:FreeRTOS\Source/queue.c ****         pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                 
2207:FreeRTOS\Source/queue.c **** 
2208:FreeRTOS\Source/queue.c ****         if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                       
2209:FreeRTOS\Source/queue.c ****         {
2210:FreeRTOS\Source/queue.c ****             pxQueue->pcWriteTo = pxQueue->pcHead;
2211:FreeRTOS\Source/queue.c ****         }
2212:FreeRTOS\Source/queue.c ****         else
2213:FreeRTOS\Source/queue.c ****         {
2214:FreeRTOS\Source/queue.c ****             mtCOVERAGE_TEST_MARKER();
2215:FreeRTOS\Source/queue.c ****         }
2216:FreeRTOS\Source/queue.c ****     }
2217:FreeRTOS\Source/queue.c ****     else
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 41


2218:FreeRTOS\Source/queue.c ****     {
2219:FreeRTOS\Source/queue.c ****         ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue
2220:FreeRTOS\Source/queue.c ****         pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
2221:FreeRTOS\Source/queue.c **** 
2222:FreeRTOS\Source/queue.c ****         if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified
2223:FreeRTOS\Source/queue.c ****         {
2224:FreeRTOS\Source/queue.c ****             pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
2225:FreeRTOS\Source/queue.c ****         }
2226:FreeRTOS\Source/queue.c ****         else
2227:FreeRTOS\Source/queue.c ****         {
2228:FreeRTOS\Source/queue.c ****             mtCOVERAGE_TEST_MARKER();
2229:FreeRTOS\Source/queue.c ****         }
2230:FreeRTOS\Source/queue.c **** 
2231:FreeRTOS\Source/queue.c ****         if( xPosition == queueOVERWRITE )
2232:FreeRTOS\Source/queue.c ****         {
2233:FreeRTOS\Source/queue.c ****             if( uxMessagesWaiting > ( UBaseType_t ) 0 )
2234:FreeRTOS\Source/queue.c ****             {
2235:FreeRTOS\Source/queue.c ****                 /* An item is not being added but overwritten, so subtract
2236:FreeRTOS\Source/queue.c ****                  * one from the recorded number of items in the queue so when
2237:FreeRTOS\Source/queue.c ****                  * one is added again below the number of recorded items remains
2238:FreeRTOS\Source/queue.c ****                  * correct. */
2239:FreeRTOS\Source/queue.c ****                 --uxMessagesWaiting;
2240:FreeRTOS\Source/queue.c ****             }
2241:FreeRTOS\Source/queue.c ****             else
2242:FreeRTOS\Source/queue.c ****             {
2243:FreeRTOS\Source/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2244:FreeRTOS\Source/queue.c ****             }
2245:FreeRTOS\Source/queue.c ****         }
2246:FreeRTOS\Source/queue.c ****         else
2247:FreeRTOS\Source/queue.c ****         {
2248:FreeRTOS\Source/queue.c ****             mtCOVERAGE_TEST_MARKER();
2249:FreeRTOS\Source/queue.c ****         }
2250:FreeRTOS\Source/queue.c ****     }
2251:FreeRTOS\Source/queue.c **** 
2252:FreeRTOS\Source/queue.c ****     pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
2253:FreeRTOS\Source/queue.c **** 
2254:FreeRTOS\Source/queue.c ****     return xReturn;
2255:FreeRTOS\Source/queue.c **** }
2256:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
2257:FreeRTOS\Source/queue.c **** 
2258:FreeRTOS\Source/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue,
2259:FreeRTOS\Source/queue.c ****                                   void * const pvBuffer )
2260:FreeRTOS\Source/queue.c **** {
2261:FreeRTOS\Source/queue.c ****     if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
2262:FreeRTOS\Source/queue.c ****     {
2263:FreeRTOS\Source/queue.c ****         pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithm
2264:FreeRTOS\Source/queue.c **** 
2265:FreeRTOS\Source/queue.c ****         if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception
2266:FreeRTOS\Source/queue.c ****         {
2267:FreeRTOS\Source/queue.c ****             pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2268:FreeRTOS\Source/queue.c ****         }
2269:FreeRTOS\Source/queue.c ****         else
2270:FreeRTOS\Source/queue.c ****         {
2271:FreeRTOS\Source/queue.c ****             mtCOVERAGE_TEST_MARKER();
2272:FreeRTOS\Source/queue.c ****         }
2273:FreeRTOS\Source/queue.c **** 
2274:FreeRTOS\Source/queue.c ****         ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) p
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 42


2275:FreeRTOS\Source/queue.c ****     }
2276:FreeRTOS\Source/queue.c **** }
2277:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
2278:FreeRTOS\Source/queue.c **** 
2279:FreeRTOS\Source/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue )
2280:FreeRTOS\Source/queue.c **** {
2281:FreeRTOS\Source/queue.c ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
2282:FreeRTOS\Source/queue.c **** 
2283:FreeRTOS\Source/queue.c ****     /* The lock counts contains the number of extra data items placed or
2284:FreeRTOS\Source/queue.c ****      * removed from the queue while the queue was locked.  When a queue is
2285:FreeRTOS\Source/queue.c ****      * locked items can be added or removed, but the event lists cannot be
2286:FreeRTOS\Source/queue.c ****      * updated. */
2287:FreeRTOS\Source/queue.c ****     taskENTER_CRITICAL();
2288:FreeRTOS\Source/queue.c ****     {
2289:FreeRTOS\Source/queue.c ****         int8_t cTxLock = pxQueue->cTxLock;
2290:FreeRTOS\Source/queue.c **** 
2291:FreeRTOS\Source/queue.c ****         /* See if data was added to the queue while it was locked. */
2292:FreeRTOS\Source/queue.c ****         while( cTxLock > queueLOCKED_UNMODIFIED )
2293:FreeRTOS\Source/queue.c ****         {
2294:FreeRTOS\Source/queue.c ****             /* Data was posted while the queue was locked.  Are any tasks
2295:FreeRTOS\Source/queue.c ****              * blocked waiting for data to become available? */
2296:FreeRTOS\Source/queue.c ****             #if ( configUSE_QUEUE_SETS == 1 )
2297:FreeRTOS\Source/queue.c ****             {
2298:FreeRTOS\Source/queue.c ****                 if( pxQueue->pxQueueSetContainer != NULL )
2299:FreeRTOS\Source/queue.c ****                 {
2300:FreeRTOS\Source/queue.c ****                     if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
2301:FreeRTOS\Source/queue.c ****                     {
2302:FreeRTOS\Source/queue.c ****                         /* The queue is a member of a queue set, and posting to
2303:FreeRTOS\Source/queue.c ****                          * the queue set caused a higher priority task to unblock.
2304:FreeRTOS\Source/queue.c ****                          * A context switch is required. */
2305:FreeRTOS\Source/queue.c ****                         vTaskMissedYield();
2306:FreeRTOS\Source/queue.c ****                     }
2307:FreeRTOS\Source/queue.c ****                     else
2308:FreeRTOS\Source/queue.c ****                     {
2309:FreeRTOS\Source/queue.c ****                         mtCOVERAGE_TEST_MARKER();
2310:FreeRTOS\Source/queue.c ****                     }
2311:FreeRTOS\Source/queue.c ****                 }
2312:FreeRTOS\Source/queue.c ****                 else
2313:FreeRTOS\Source/queue.c ****                 {
2314:FreeRTOS\Source/queue.c ****                     /* Tasks that are removed from the event list will get
2315:FreeRTOS\Source/queue.c ****                      * added to the pending ready list as the scheduler is still
2316:FreeRTOS\Source/queue.c ****                      * suspended. */
2317:FreeRTOS\Source/queue.c ****                     if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2318:FreeRTOS\Source/queue.c ****                     {
2319:FreeRTOS\Source/queue.c ****                         if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdF
2320:FreeRTOS\Source/queue.c ****                         {
2321:FreeRTOS\Source/queue.c ****                             /* The task waiting has a higher priority so record that a
2322:FreeRTOS\Source/queue.c ****                              * context switch is required. */
2323:FreeRTOS\Source/queue.c ****                             vTaskMissedYield();
2324:FreeRTOS\Source/queue.c ****                         }
2325:FreeRTOS\Source/queue.c ****                         else
2326:FreeRTOS\Source/queue.c ****                         {
2327:FreeRTOS\Source/queue.c ****                             mtCOVERAGE_TEST_MARKER();
2328:FreeRTOS\Source/queue.c ****                         }
2329:FreeRTOS\Source/queue.c ****                     }
2330:FreeRTOS\Source/queue.c ****                     else
2331:FreeRTOS\Source/queue.c ****                     {
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 43


2332:FreeRTOS\Source/queue.c ****                         break;
2333:FreeRTOS\Source/queue.c ****                     }
2334:FreeRTOS\Source/queue.c ****                 }
2335:FreeRTOS\Source/queue.c ****             }
2336:FreeRTOS\Source/queue.c ****             #else /* configUSE_QUEUE_SETS */
2337:FreeRTOS\Source/queue.c ****             {
2338:FreeRTOS\Source/queue.c ****                 /* Tasks that are removed from the event list will get added to
2339:FreeRTOS\Source/queue.c ****                  * the pending ready list as the scheduler is still suspended. */
2340:FreeRTOS\Source/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2341:FreeRTOS\Source/queue.c ****                 {
2342:FreeRTOS\Source/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE
2343:FreeRTOS\Source/queue.c ****                     {
2344:FreeRTOS\Source/queue.c ****                         /* The task waiting has a higher priority so record that
2345:FreeRTOS\Source/queue.c ****                          * a context switch is required. */
2346:FreeRTOS\Source/queue.c ****                         vTaskMissedYield();
2347:FreeRTOS\Source/queue.c ****                     }
2348:FreeRTOS\Source/queue.c ****                     else
2349:FreeRTOS\Source/queue.c ****                     {
2350:FreeRTOS\Source/queue.c ****                         mtCOVERAGE_TEST_MARKER();
2351:FreeRTOS\Source/queue.c ****                     }
2352:FreeRTOS\Source/queue.c ****                 }
2353:FreeRTOS\Source/queue.c ****                 else
2354:FreeRTOS\Source/queue.c ****                 {
2355:FreeRTOS\Source/queue.c ****                     break;
2356:FreeRTOS\Source/queue.c ****                 }
2357:FreeRTOS\Source/queue.c ****             }
2358:FreeRTOS\Source/queue.c ****             #endif /* configUSE_QUEUE_SETS */
2359:FreeRTOS\Source/queue.c **** 
2360:FreeRTOS\Source/queue.c ****             --cTxLock;
2361:FreeRTOS\Source/queue.c ****         }
2362:FreeRTOS\Source/queue.c **** 
2363:FreeRTOS\Source/queue.c ****         pxQueue->cTxLock = queueUNLOCKED;
2364:FreeRTOS\Source/queue.c ****     }
2365:FreeRTOS\Source/queue.c ****     taskEXIT_CRITICAL();
2366:FreeRTOS\Source/queue.c **** 
2367:FreeRTOS\Source/queue.c ****     /* Do the same for the Rx lock. */
2368:FreeRTOS\Source/queue.c ****     taskENTER_CRITICAL();
2369:FreeRTOS\Source/queue.c ****     {
2370:FreeRTOS\Source/queue.c ****         int8_t cRxLock = pxQueue->cRxLock;
2371:FreeRTOS\Source/queue.c **** 
2372:FreeRTOS\Source/queue.c ****         while( cRxLock > queueLOCKED_UNMODIFIED )
2373:FreeRTOS\Source/queue.c ****         {
2374:FreeRTOS\Source/queue.c ****             if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2375:FreeRTOS\Source/queue.c ****             {
2376:FreeRTOS\Source/queue.c ****                 if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2377:FreeRTOS\Source/queue.c ****                 {
2378:FreeRTOS\Source/queue.c ****                     vTaskMissedYield();
2379:FreeRTOS\Source/queue.c ****                 }
2380:FreeRTOS\Source/queue.c ****                 else
2381:FreeRTOS\Source/queue.c ****                 {
2382:FreeRTOS\Source/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2383:FreeRTOS\Source/queue.c ****                 }
2384:FreeRTOS\Source/queue.c **** 
2385:FreeRTOS\Source/queue.c ****                 --cRxLock;
2386:FreeRTOS\Source/queue.c ****             }
2387:FreeRTOS\Source/queue.c ****             else
2388:FreeRTOS\Source/queue.c ****             {
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 44


2389:FreeRTOS\Source/queue.c ****                 break;
2390:FreeRTOS\Source/queue.c ****             }
2391:FreeRTOS\Source/queue.c ****         }
2392:FreeRTOS\Source/queue.c **** 
2393:FreeRTOS\Source/queue.c ****         pxQueue->cRxLock = queueUNLOCKED;
2394:FreeRTOS\Source/queue.c ****     }
2395:FreeRTOS\Source/queue.c ****     taskEXIT_CRITICAL();
2396:FreeRTOS\Source/queue.c **** }
2397:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
2398:FreeRTOS\Source/queue.c **** 
2399:FreeRTOS\Source/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
2400:FreeRTOS\Source/queue.c **** {
2401:FreeRTOS\Source/queue.c ****     BaseType_t xReturn;
2402:FreeRTOS\Source/queue.c **** 
2403:FreeRTOS\Source/queue.c ****     taskENTER_CRITICAL();
2404:FreeRTOS\Source/queue.c ****     {
2405:FreeRTOS\Source/queue.c ****         if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2406:FreeRTOS\Source/queue.c ****         {
2407:FreeRTOS\Source/queue.c ****             xReturn = pdTRUE;
2408:FreeRTOS\Source/queue.c ****         }
2409:FreeRTOS\Source/queue.c ****         else
2410:FreeRTOS\Source/queue.c ****         {
2411:FreeRTOS\Source/queue.c ****             xReturn = pdFALSE;
2412:FreeRTOS\Source/queue.c ****         }
2413:FreeRTOS\Source/queue.c ****     }
2414:FreeRTOS\Source/queue.c ****     taskEXIT_CRITICAL();
2415:FreeRTOS\Source/queue.c **** 
2416:FreeRTOS\Source/queue.c ****     return xReturn;
2417:FreeRTOS\Source/queue.c **** }
2418:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
2419:FreeRTOS\Source/queue.c **** 
2420:FreeRTOS\Source/queue.c **** BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
2421:FreeRTOS\Source/queue.c **** {
2422:FreeRTOS\Source/queue.c ****     BaseType_t xReturn;
2423:FreeRTOS\Source/queue.c ****     Queue_t * const pxQueue = xQueue;
2424:FreeRTOS\Source/queue.c **** 
2425:FreeRTOS\Source/queue.c ****     configASSERT( pxQueue );
2426:FreeRTOS\Source/queue.c **** 
2427:FreeRTOS\Source/queue.c ****     if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2428:FreeRTOS\Source/queue.c ****     {
2429:FreeRTOS\Source/queue.c ****         xReturn = pdTRUE;
2430:FreeRTOS\Source/queue.c ****     }
2431:FreeRTOS\Source/queue.c ****     else
2432:FreeRTOS\Source/queue.c ****     {
2433:FreeRTOS\Source/queue.c ****         xReturn = pdFALSE;
2434:FreeRTOS\Source/queue.c ****     }
2435:FreeRTOS\Source/queue.c **** 
2436:FreeRTOS\Source/queue.c ****     return xReturn;
2437:FreeRTOS\Source/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
2438:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
2439:FreeRTOS\Source/queue.c **** 
2440:FreeRTOS\Source/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
2441:FreeRTOS\Source/queue.c **** {
  64              		.loc 1 2441 0
  65              		.cfi_startproc
  66              		@ args = 0, pretend = 0, frame = 0
  67              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 45


  68              	.LVL5:
  69 0000 10B5     		push	{r4, lr}
  70              		.cfi_def_cfa_offset 8
  71              		.cfi_offset 4, -8
  72              		.cfi_offset 14, -4
  73 0002 0400     		movs	r4, r0
2442:FreeRTOS\Source/queue.c ****     BaseType_t xReturn;
2443:FreeRTOS\Source/queue.c **** 
2444:FreeRTOS\Source/queue.c ****     taskENTER_CRITICAL();
  74              		.loc 1 2444 0
  75 0004 FFF7FEFF 		bl	vPortEnterCritical
  76              	.LVL6:
2445:FreeRTOS\Source/queue.c ****     {
2446:FreeRTOS\Source/queue.c ****         if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  77              		.loc 1 2446 0
  78 0008 A26B     		ldr	r2, [r4, #56]
  79 000a E36B     		ldr	r3, [r4, #60]
  80 000c 9A42     		cmp	r2, r3
  81 000e 01D1     		bne	.L6
2447:FreeRTOS\Source/queue.c ****         {
2448:FreeRTOS\Source/queue.c ****             xReturn = pdTRUE;
  82              		.loc 1 2448 0
  83 0010 0124     		movs	r4, #1
  84              	.LVL7:
  85 0012 00E0     		b	.L5
  86              	.LVL8:
  87              	.L6:
2449:FreeRTOS\Source/queue.c ****         }
2450:FreeRTOS\Source/queue.c ****         else
2451:FreeRTOS\Source/queue.c ****         {
2452:FreeRTOS\Source/queue.c ****             xReturn = pdFALSE;
  88              		.loc 1 2452 0
  89 0014 0024     		movs	r4, #0
  90              	.LVL9:
  91              	.L5:
2453:FreeRTOS\Source/queue.c ****         }
2454:FreeRTOS\Source/queue.c ****     }
2455:FreeRTOS\Source/queue.c ****     taskEXIT_CRITICAL();
  92              		.loc 1 2455 0
  93 0016 FFF7FEFF 		bl	vPortExitCritical
  94              	.LVL10:
2456:FreeRTOS\Source/queue.c **** 
2457:FreeRTOS\Source/queue.c ****     return xReturn;
2458:FreeRTOS\Source/queue.c **** }
  95              		.loc 1 2458 0
  96 001a 2000     		movs	r0, r4
  97              		@ sp needed
  98              	.LVL11:
  99 001c 10BD     		pop	{r4, pc}
 100              		.cfi_endproc
 101              	.LFE60:
 102              		.size	prvIsQueueFull, .-prvIsQueueFull
 103 001e C046     		.section	.text.prvIsQueueEmpty,"ax",%progbits
 104              		.align	2
 105              		.code	16
 106              		.thumb_func
 107              		.type	prvIsQueueEmpty, %function
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 46


 108              	prvIsQueueEmpty:
 109              	.LFB58:
2400:FreeRTOS\Source/queue.c ****     BaseType_t xReturn;
 110              		.loc 1 2400 0
 111              		.cfi_startproc
 112              		@ args = 0, pretend = 0, frame = 0
 113              		@ frame_needed = 0, uses_anonymous_args = 0
 114              	.LVL12:
 115 0000 10B5     		push	{r4, lr}
 116              		.cfi_def_cfa_offset 8
 117              		.cfi_offset 4, -8
 118              		.cfi_offset 14, -4
 119 0002 0400     		movs	r4, r0
2403:FreeRTOS\Source/queue.c ****     {
 120              		.loc 1 2403 0
 121 0004 FFF7FEFF 		bl	vPortEnterCritical
 122              	.LVL13:
2405:FreeRTOS\Source/queue.c ****         {
 123              		.loc 1 2405 0
 124 0008 A36B     		ldr	r3, [r4, #56]
 125 000a 002B     		cmp	r3, #0
 126 000c 01D1     		bne	.L9
2407:FreeRTOS\Source/queue.c ****         }
 127              		.loc 1 2407 0
 128 000e 0124     		movs	r4, #1
 129              	.LVL14:
 130 0010 00E0     		b	.L8
 131              	.LVL15:
 132              	.L9:
2411:FreeRTOS\Source/queue.c ****         }
 133              		.loc 1 2411 0
 134 0012 0024     		movs	r4, #0
 135              	.LVL16:
 136              	.L8:
2414:FreeRTOS\Source/queue.c **** 
 137              		.loc 1 2414 0
 138 0014 FFF7FEFF 		bl	vPortExitCritical
 139              	.LVL17:
2417:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 140              		.loc 1 2417 0
 141 0018 2000     		movs	r0, r4
 142              		@ sp needed
 143              	.LVL18:
 144 001a 10BD     		pop	{r4, pc}
 145              		.cfi_endproc
 146              	.LFE58:
 147              		.size	prvIsQueueEmpty, .-prvIsQueueEmpty
 148              		.section	.text.prvCopyDataToQueue,"ax",%progbits
 149              		.align	2
 150              		.code	16
 151              		.thumb_func
 152              		.type	prvCopyDataToQueue, %function
 153              	prvCopyDataToQueue:
 154              	.LFB55:
2178:FreeRTOS\Source/queue.c ****     BaseType_t xReturn = pdFALSE;
 155              		.loc 1 2178 0
 156              		.cfi_startproc
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 47


 157              		@ args = 0, pretend = 0, frame = 0
 158              		@ frame_needed = 0, uses_anonymous_args = 0
 159              	.LVL19:
 160 0000 70B5     		push	{r4, r5, r6, lr}
 161              		.cfi_def_cfa_offset 16
 162              		.cfi_offset 4, -16
 163              		.cfi_offset 5, -12
 164              		.cfi_offset 6, -8
 165              		.cfi_offset 14, -4
 166 0002 0400     		movs	r4, r0
 167 0004 1600     		movs	r6, r2
 168              	.LVL20:
2184:FreeRTOS\Source/queue.c **** 
 169              		.loc 1 2184 0
 170 0006 856B     		ldr	r5, [r0, #56]
 171              	.LVL21:
2186:FreeRTOS\Source/queue.c ****     {
 172              		.loc 1 2186 0
 173 0008 026C     		ldr	r2, [r0, #64]
 174              	.LVL22:
 175 000a 002A     		cmp	r2, #0
 176 000c 08D1     		bne	.L11
2190:FreeRTOS\Source/queue.c ****             {
 177              		.loc 1 2190 0
 178 000e 0368     		ldr	r3, [r0]
 179 0010 002B     		cmp	r3, #0
 180 0012 2CD1     		bne	.L15
2193:FreeRTOS\Source/queue.c ****                 pxQueue->u.xSemaphore.xMutexHolder = NULL;
 181              		.loc 1 2193 0
 182 0014 8068     		ldr	r0, [r0, #8]
 183              	.LVL23:
 184 0016 FFF7FEFF 		bl	xTaskPriorityDisinherit
 185              	.LVL24:
2194:FreeRTOS\Source/queue.c ****             }
 186              		.loc 1 2194 0
 187 001a 0023     		movs	r3, #0
 188 001c A360     		str	r3, [r4, #8]
 189 001e 2DE0     		b	.L12
 190              	.LVL25:
 191              	.L11:
2203:FreeRTOS\Source/queue.c ****     {
 192              		.loc 1 2203 0
 193 0020 002E     		cmp	r6, #0
 194 0022 0ED1     		bne	.L13
2205:FreeRTOS\Source/queue.c ****         pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                 
 195              		.loc 1 2205 0
 196 0024 4068     		ldr	r0, [r0, #4]
 197              	.LVL26:
 198 0026 FFF7FEFF 		bl	memcpy
 199              	.LVL27:
2206:FreeRTOS\Source/queue.c **** 
 200              		.loc 1 2206 0
 201 002a 6368     		ldr	r3, [r4, #4]
 202 002c 226C     		ldr	r2, [r4, #64]
 203 002e 9446     		mov	ip, r2
 204 0030 6344     		add	r3, r3, ip
 205 0032 6360     		str	r3, [r4, #4]
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 48


2208:FreeRTOS\Source/queue.c ****         {
 206              		.loc 1 2208 0
 207 0034 A268     		ldr	r2, [r4, #8]
 208 0036 9342     		cmp	r3, r2
 209 0038 1BD3     		bcc	.L16
2210:FreeRTOS\Source/queue.c ****         }
 210              		.loc 1 2210 0
 211 003a 2368     		ldr	r3, [r4]
 212 003c 6360     		str	r3, [r4, #4]
2179:FreeRTOS\Source/queue.c ****     UBaseType_t uxMessagesWaiting;
 213              		.loc 1 2179 0
 214 003e 0020     		movs	r0, #0
 215 0040 1CE0     		b	.L12
 216              	.LVL28:
 217              	.L13:
2219:FreeRTOS\Source/queue.c ****         pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 218              		.loc 1 2219 0
 219 0042 C068     		ldr	r0, [r0, #12]
 220              	.LVL29:
 221 0044 FFF7FEFF 		bl	memcpy
 222              	.LVL30:
2220:FreeRTOS\Source/queue.c **** 
 223              		.loc 1 2220 0
 224 0048 236C     		ldr	r3, [r4, #64]
 225 004a 5B42     		rsbs	r3, r3, #0
 226 004c E268     		ldr	r2, [r4, #12]
 227 004e D218     		adds	r2, r2, r3
 228 0050 E260     		str	r2, [r4, #12]
2222:FreeRTOS\Source/queue.c ****         {
 229              		.loc 1 2222 0
 230 0052 2168     		ldr	r1, [r4]
 231 0054 8A42     		cmp	r2, r1
 232 0056 03D2     		bcs	.L14
2224:FreeRTOS\Source/queue.c ****         }
 233              		.loc 1 2224 0
 234 0058 A268     		ldr	r2, [r4, #8]
 235 005a 9446     		mov	ip, r2
 236 005c 6344     		add	r3, r3, ip
 237 005e E360     		str	r3, [r4, #12]
 238              	.L14:
2231:FreeRTOS\Source/queue.c ****         {
 239              		.loc 1 2231 0
 240 0060 022E     		cmp	r6, #2
 241 0062 08D1     		bne	.L17
2233:FreeRTOS\Source/queue.c ****             {
 242              		.loc 1 2233 0
 243 0064 002D     		cmp	r5, #0
 244 0066 08D0     		beq	.L18
2239:FreeRTOS\Source/queue.c ****             }
 245              		.loc 1 2239 0
 246 0068 013D     		subs	r5, r5, #1
 247              	.LVL31:
2179:FreeRTOS\Source/queue.c ****     UBaseType_t uxMessagesWaiting;
 248              		.loc 1 2179 0
 249 006a 0020     		movs	r0, #0
 250 006c 06E0     		b	.L12
 251              	.LVL32:
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 49


 252              	.L15:
 253 006e 0020     		movs	r0, #0
 254              	.LVL33:
 255 0070 04E0     		b	.L12
 256              	.LVL34:
 257              	.L16:
 258 0072 0020     		movs	r0, #0
 259 0074 02E0     		b	.L12
 260              	.L17:
 261 0076 0020     		movs	r0, #0
 262 0078 00E0     		b	.L12
 263              	.L18:
 264 007a 0020     		movs	r0, #0
 265              	.LVL35:
 266              	.L12:
2252:FreeRTOS\Source/queue.c **** 
 267              		.loc 1 2252 0
 268 007c 0135     		adds	r5, r5, #1
 269              	.LVL36:
 270 007e A563     		str	r5, [r4, #56]
2255:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 271              		.loc 1 2255 0
 272              		@ sp needed
 273              	.LVL37:
 274              	.LVL38:
 275              	.LVL39:
 276 0080 70BD     		pop	{r4, r5, r6, pc}
 277              		.cfi_endproc
 278              	.LFE55:
 279              		.size	prvCopyDataToQueue, .-prvCopyDataToQueue
 280 0082 C046     		.section	.text.prvCopyDataFromQueue,"ax",%progbits
 281              		.align	2
 282              		.code	16
 283              		.thumb_func
 284              		.type	prvCopyDataFromQueue, %function
 285              	prvCopyDataFromQueue:
 286              	.LFB56:
2260:FreeRTOS\Source/queue.c ****     if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 287              		.loc 1 2260 0
 288              		.cfi_startproc
 289              		@ args = 0, pretend = 0, frame = 0
 290              		@ frame_needed = 0, uses_anonymous_args = 0
 291              	.LVL40:
 292 0000 10B5     		push	{r4, lr}
 293              		.cfi_def_cfa_offset 8
 294              		.cfi_offset 4, -8
 295              		.cfi_offset 14, -4
 296 0002 0C00     		movs	r4, r1
2261:FreeRTOS\Source/queue.c ****     {
 297              		.loc 1 2261 0
 298 0004 026C     		ldr	r2, [r0, #64]
 299 0006 002A     		cmp	r2, #0
 300 0008 0BD0     		beq	.L19
2263:FreeRTOS\Source/queue.c **** 
 301              		.loc 1 2263 0
 302 000a C368     		ldr	r3, [r0, #12]
 303 000c 9B18     		adds	r3, r3, r2
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 50


 304 000e C360     		str	r3, [r0, #12]
2265:FreeRTOS\Source/queue.c ****         {
 305              		.loc 1 2265 0
 306 0010 8168     		ldr	r1, [r0, #8]
 307              	.LVL41:
 308 0012 8B42     		cmp	r3, r1
 309 0014 01D3     		bcc	.L21
2267:FreeRTOS\Source/queue.c ****         }
 310              		.loc 1 2267 0
 311 0016 0368     		ldr	r3, [r0]
 312 0018 C360     		str	r3, [r0, #12]
 313              	.L21:
2274:FreeRTOS\Source/queue.c ****     }
 314              		.loc 1 2274 0
 315 001a C168     		ldr	r1, [r0, #12]
 316 001c 2000     		movs	r0, r4
 317              	.LVL42:
 318 001e FFF7FEFF 		bl	memcpy
 319              	.LVL43:
 320              	.L19:
2276:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 321              		.loc 1 2276 0
 322              		@ sp needed
 323              	.LVL44:
 324 0022 10BD     		pop	{r4, pc}
 325              		.cfi_endproc
 326              	.LFE56:
 327              		.size	prvCopyDataFromQueue, .-prvCopyDataFromQueue
 328              		.section	.text.prvUnlockQueue,"ax",%progbits
 329              		.align	2
 330              		.code	16
 331              		.thumb_func
 332              		.type	prvUnlockQueue, %function
 333              	prvUnlockQueue:
 334              	.LFB57:
2280:FreeRTOS\Source/queue.c ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
 335              		.loc 1 2280 0
 336              		.cfi_startproc
 337              		@ args = 0, pretend = 0, frame = 0
 338              		@ frame_needed = 0, uses_anonymous_args = 0
 339              	.LVL45:
 340 0000 70B5     		push	{r4, r5, r6, lr}
 341              		.cfi_def_cfa_offset 16
 342              		.cfi_offset 4, -16
 343              		.cfi_offset 5, -12
 344              		.cfi_offset 6, -8
 345              		.cfi_offset 14, -4
 346 0002 0500     		movs	r5, r0
2287:FreeRTOS\Source/queue.c ****     {
 347              		.loc 1 2287 0
 348 0004 FFF7FEFF 		bl	vPortEnterCritical
 349              	.LVL46:
 350              	.LBB2:
2289:FreeRTOS\Source/queue.c **** 
 351              		.loc 1 2289 0
 352 0008 4523     		movs	r3, #69
 353 000a EC5C     		ldrb	r4, [r5, r3]
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 51


 354 000c 64B2     		sxtb	r4, r4
 355              	.LVL47:
2292:FreeRTOS\Source/queue.c ****         {
 356              		.loc 1 2292 0
 357 000e 0CE0     		b	.L23
 358              	.L26:
2340:FreeRTOS\Source/queue.c ****                 {
 359              		.loc 1 2340 0
 360 0010 6B6A     		ldr	r3, [r5, #36]
 361 0012 002B     		cmp	r3, #0
 362 0014 0BD0     		beq	.L24
2342:FreeRTOS\Source/queue.c ****                     {
 363              		.loc 1 2342 0
 364 0016 2800     		movs	r0, r5
 365 0018 2430     		adds	r0, r0, #36
 366 001a FFF7FEFF 		bl	xTaskRemoveFromEventList
 367              	.LVL48:
 368 001e 0028     		cmp	r0, #0
 369 0020 01D0     		beq	.L25
2346:FreeRTOS\Source/queue.c ****                     }
 370              		.loc 1 2346 0
 371 0022 FFF7FEFF 		bl	vTaskMissedYield
 372              	.LVL49:
 373              	.L25:
2360:FreeRTOS\Source/queue.c ****         }
 374              		.loc 1 2360 0
 375 0026 013C     		subs	r4, r4, #1
 376              	.LVL50:
 377 0028 64B2     		sxtb	r4, r4
 378              	.LVL51:
 379              	.L23:
2292:FreeRTOS\Source/queue.c ****         {
 380              		.loc 1 2292 0
 381 002a 002C     		cmp	r4, #0
 382 002c F0DC     		bgt	.L26
 383              	.L24:
2363:FreeRTOS\Source/queue.c ****     }
 384              		.loc 1 2363 0
 385 002e FF22     		movs	r2, #255
 386 0030 4523     		movs	r3, #69
 387 0032 EA54     		strb	r2, [r5, r3]
 388              	.LBE2:
2365:FreeRTOS\Source/queue.c **** 
 389              		.loc 1 2365 0
 390 0034 FFF7FEFF 		bl	vPortExitCritical
 391              	.LVL52:
2368:FreeRTOS\Source/queue.c ****     {
 392              		.loc 1 2368 0
 393 0038 FFF7FEFF 		bl	vPortEnterCritical
 394              	.LVL53:
 395              	.LBB3:
2370:FreeRTOS\Source/queue.c **** 
 396              		.loc 1 2370 0
 397 003c 4423     		movs	r3, #68
 398 003e EC5C     		ldrb	r4, [r5, r3]
 399              	.LVL54:
 400 0040 64B2     		sxtb	r4, r4
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 52


 401              	.LVL55:
2372:FreeRTOS\Source/queue.c ****         {
 402              		.loc 1 2372 0
 403 0042 0CE0     		b	.L27
 404              	.L30:
2374:FreeRTOS\Source/queue.c ****             {
 405              		.loc 1 2374 0
 406 0044 2B69     		ldr	r3, [r5, #16]
 407 0046 002B     		cmp	r3, #0
 408 0048 0BD0     		beq	.L28
2376:FreeRTOS\Source/queue.c ****                 {
 409              		.loc 1 2376 0
 410 004a 2800     		movs	r0, r5
 411 004c 1030     		adds	r0, r0, #16
 412 004e FFF7FEFF 		bl	xTaskRemoveFromEventList
 413              	.LVL56:
 414 0052 0028     		cmp	r0, #0
 415 0054 01D0     		beq	.L29
2378:FreeRTOS\Source/queue.c ****                 }
 416              		.loc 1 2378 0
 417 0056 FFF7FEFF 		bl	vTaskMissedYield
 418              	.LVL57:
 419              	.L29:
2385:FreeRTOS\Source/queue.c ****             }
 420              		.loc 1 2385 0
 421 005a 013C     		subs	r4, r4, #1
 422              	.LVL58:
 423 005c 64B2     		sxtb	r4, r4
 424              	.LVL59:
 425              	.L27:
2372:FreeRTOS\Source/queue.c ****         {
 426              		.loc 1 2372 0
 427 005e 002C     		cmp	r4, #0
 428 0060 F0DC     		bgt	.L30
 429              	.L28:
2393:FreeRTOS\Source/queue.c ****     }
 430              		.loc 1 2393 0
 431 0062 FF22     		movs	r2, #255
 432 0064 4423     		movs	r3, #68
 433 0066 EA54     		strb	r2, [r5, r3]
 434              	.LBE3:
2395:FreeRTOS\Source/queue.c **** }
 435              		.loc 1 2395 0
 436 0068 FFF7FEFF 		bl	vPortExitCritical
 437              	.LVL60:
2396:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 438              		.loc 1 2396 0
 439              		@ sp needed
 440              	.LVL61:
 441              	.LVL62:
 442 006c 70BD     		pop	{r4, r5, r6, pc}
 443              		.cfi_endproc
 444              	.LFE57:
 445              		.size	prvUnlockQueue, .-prvUnlockQueue
 446              		.global	__aeabi_uidiv
 447 006e C046     		.section	.text.xQueueGenericReset,"ax",%progbits
 448              		.align	2
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 53


 449              		.global	xQueueGenericReset
 450              		.code	16
 451              		.thumb_func
 452              		.type	xQueueGenericReset, %function
 453              	xQueueGenericReset:
 454              	.LFB34:
 298:FreeRTOS\Source/queue.c ****     BaseType_t xReturn = pdPASS;
 455              		.loc 1 298 0
 456              		.cfi_startproc
 457              		@ args = 0, pretend = 0, frame = 0
 458              		@ frame_needed = 0, uses_anonymous_args = 0
 459              	.LVL63:
 460 0000 70B5     		push	{r4, r5, r6, lr}
 461              		.cfi_def_cfa_offset 16
 462              		.cfi_offset 4, -16
 463              		.cfi_offset 5, -12
 464              		.cfi_offset 6, -8
 465              		.cfi_offset 14, -4
 466 0002 0400     		movs	r4, r0
 467 0004 0D00     		movs	r5, r1
 468              	.LVL64:
 304:FreeRTOS\Source/queue.c ****         ( pxQueue->uxLength >= 1U ) &&
 469              		.loc 1 304 0
 470 0006 0028     		cmp	r0, #0
 471 0008 38D0     		beq	.L35
 305:FreeRTOS\Source/queue.c ****         /* Check for multiplication overflow. */
 472              		.loc 1 305 0 discriminator 1
 473 000a C16B     		ldr	r1, [r0, #60]
 474              	.LVL65:
 304:FreeRTOS\Source/queue.c ****         ( pxQueue->uxLength >= 1U ) &&
 475              		.loc 1 304 0 discriminator 1
 476 000c 0029     		cmp	r1, #0
 477 000e 37D0     		beq	.L36
 307:FreeRTOS\Source/queue.c ****     {
 478              		.loc 1 307 0
 479 0010 0120     		movs	r0, #1
 480              	.LVL66:
 481 0012 4042     		rsbs	r0, r0, #0
 482 0014 FFF7FEFF 		bl	__aeabi_uidiv
 483              	.LVL67:
 305:FreeRTOS\Source/queue.c ****         /* Check for multiplication overflow. */
 484              		.loc 1 305 0
 485 0018 236C     		ldr	r3, [r4, #64]
 486 001a 9842     		cmp	r0, r3
 487 001c 32D3     		bcc	.L37
 309:FreeRTOS\Source/queue.c ****         {
 488              		.loc 1 309 0
 489 001e FFF7FEFF 		bl	vPortEnterCritical
 490              	.LVL68:
 311:FreeRTOS\Source/queue.c ****             pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 491              		.loc 1 311 0
 492 0022 2268     		ldr	r2, [r4]
 493 0024 E36B     		ldr	r3, [r4, #60]
 494 0026 206C     		ldr	r0, [r4, #64]
 495 0028 0100     		movs	r1, r0
 496 002a 5943     		muls	r1, r3
 497 002c 5118     		adds	r1, r2, r1
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 54


 498 002e A160     		str	r1, [r4, #8]
 312:FreeRTOS\Source/queue.c ****             pxQueue->pcWriteTo = pxQueue->pcHead;
 499              		.loc 1 312 0
 500 0030 0021     		movs	r1, #0
 501 0032 A163     		str	r1, [r4, #56]
 313:FreeRTOS\Source/queue.c ****             pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue
 502              		.loc 1 313 0
 503 0034 6260     		str	r2, [r4, #4]
 314:FreeRTOS\Source/queue.c ****             pxQueue->cRxLock = queueUNLOCKED;
 504              		.loc 1 314 0
 505 0036 013B     		subs	r3, r3, #1
 506 0038 4343     		muls	r3, r0
 507 003a D318     		adds	r3, r2, r3
 508 003c E360     		str	r3, [r4, #12]
 315:FreeRTOS\Source/queue.c ****             pxQueue->cTxLock = queueUNLOCKED;
 509              		.loc 1 315 0
 510 003e FF23     		movs	r3, #255
 511 0040 4422     		movs	r2, #68
 512 0042 A354     		strb	r3, [r4, r2]
 316:FreeRTOS\Source/queue.c **** 
 513              		.loc 1 316 0
 514 0044 0132     		adds	r2, r2, #1
 515 0046 A354     		strb	r3, [r4, r2]
 318:FreeRTOS\Source/queue.c ****             {
 516              		.loc 1 318 0
 517 0048 002D     		cmp	r5, #0
 518 004a 0BD1     		bne	.L33
 325:FreeRTOS\Source/queue.c ****                 {
 519              		.loc 1 325 0
 520 004c 2369     		ldr	r3, [r4, #16]
 521 004e 002B     		cmp	r3, #0
 522 0050 10D0     		beq	.L34
 327:FreeRTOS\Source/queue.c ****                     {
 523              		.loc 1 327 0
 524 0052 2000     		movs	r0, r4
 525 0054 1030     		adds	r0, r0, #16
 526 0056 FFF7FEFF 		bl	xTaskRemoveFromEventList
 527              	.LVL69:
 528 005a 0028     		cmp	r0, #0
 529 005c 0AD0     		beq	.L34
 329:FreeRTOS\Source/queue.c ****                     }
 530              		.loc 1 329 0
 531 005e FFF7FEFF 		bl	vPortYield
 532              	.LVL70:
 533 0062 07E0     		b	.L34
 534              	.L33:
 344:FreeRTOS\Source/queue.c ****                 vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 535              		.loc 1 344 0
 536 0064 2000     		movs	r0, r4
 537 0066 1030     		adds	r0, r0, #16
 538 0068 FFF7FEFF 		bl	vListInitialise
 539              	.LVL71:
 345:FreeRTOS\Source/queue.c ****             }
 540              		.loc 1 345 0
 541 006c 2000     		movs	r0, r4
 542 006e 2430     		adds	r0, r0, #36
 543 0070 FFF7FEFF 		bl	vListInitialise
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 55


 544              	.LVL72:
 545              	.L34:
 348:FreeRTOS\Source/queue.c ****     }
 546              		.loc 1 348 0
 547 0074 FFF7FEFF 		bl	vPortExitCritical
 548              	.LVL73:
 299:FreeRTOS\Source/queue.c ****     Queue_t * const pxQueue = xQueue;
 549              		.loc 1 299 0
 550 0078 0120     		movs	r0, #1
 348:FreeRTOS\Source/queue.c ****     }
 551              		.loc 1 348 0
 552 007a 04E0     		b	.L32
 553              	.LVL74:
 554              	.L35:
 352:FreeRTOS\Source/queue.c ****     }
 555              		.loc 1 352 0
 556 007c 0020     		movs	r0, #0
 557              	.LVL75:
 558 007e 02E0     		b	.L32
 559              	.LVL76:
 560              	.L36:
 561 0080 0020     		movs	r0, #0
 562              	.LVL77:
 563 0082 00E0     		b	.L32
 564              	.L37:
 565 0084 0020     		movs	r0, #0
 566              	.L32:
 567              	.LVL78:
 360:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 568              		.loc 1 360 0
 569              		@ sp needed
 570              	.LVL79:
 571              	.LVL80:
 572 0086 70BD     		pop	{r4, r5, r6, pc}
 573              		.cfi_endproc
 574              	.LFE34:
 575              		.size	xQueueGenericReset, .-xQueueGenericReset
 576              		.section	.text.prvInitialiseNewQueue,"ax",%progbits
 577              		.align	2
 578              		.code	16
 579              		.thumb_func
 580              		.type	prvInitialiseNewQueue, %function
 581              	prvInitialiseNewQueue:
 582              	.LFB36:
 499:FreeRTOS\Source/queue.c ****     /* Remove compiler warnings about unused parameters should
 583              		.loc 1 499 0
 584              		.cfi_startproc
 585              		@ args = 4, pretend = 0, frame = 0
 586              		@ frame_needed = 0, uses_anonymous_args = 0
 587              	.LVL81:
 588 0000 10B5     		push	{r4, lr}
 589              		.cfi_def_cfa_offset 8
 590              		.cfi_offset 4, -8
 591              		.cfi_offset 14, -4
 592 0002 029B     		ldr	r3, [sp, #8]
 593              	.LVL82:
 504:FreeRTOS\Source/queue.c ****     {
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 56


 594              		.loc 1 504 0
 595 0004 0029     		cmp	r1, #0
 596 0006 01D1     		bne	.L39
 510:FreeRTOS\Source/queue.c ****     }
 597              		.loc 1 510 0
 598 0008 1B60     		str	r3, [r3]
 599 000a 00E0     		b	.L40
 600              	.L39:
 515:FreeRTOS\Source/queue.c ****     }
 601              		.loc 1 515 0
 602 000c 1A60     		str	r2, [r3]
 603              	.L40:
 520:FreeRTOS\Source/queue.c ****     pxNewQueue->uxItemSize = uxItemSize;
 604              		.loc 1 520 0
 605 000e D863     		str	r0, [r3, #60]
 521:FreeRTOS\Source/queue.c ****     ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 606              		.loc 1 521 0
 607 0010 1964     		str	r1, [r3, #64]
 522:FreeRTOS\Source/queue.c **** 
 608              		.loc 1 522 0
 609 0012 0121     		movs	r1, #1
 610              	.LVL83:
 611 0014 1800     		movs	r0, r3
 612              	.LVL84:
 613 0016 FFF7FEFF 		bl	xQueueGenericReset
 614              	.LVL85:
 537:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 615              		.loc 1 537 0
 616              		@ sp needed
 617 001a 10BD     		pop	{r4, pc}
 618              		.cfi_endproc
 619              	.LFE36:
 620              		.size	prvInitialiseNewQueue, .-prvInitialiseNewQueue
 621              		.section	.text.xQueueGenericCreate,"ax",%progbits
 622              		.align	2
 623              		.global	xQueueGenericCreate
 624              		.code	16
 625              		.thumb_func
 626              		.type	xQueueGenericCreate, %function
 627              	xQueueGenericCreate:
 628              	.LFB35:
 431:FreeRTOS\Source/queue.c ****         Queue_t * pxNewQueue = NULL;
 629              		.loc 1 431 0
 630              		.cfi_startproc
 631              		@ args = 0, pretend = 0, frame = 0
 632              		@ frame_needed = 0, uses_anonymous_args = 0
 633              	.LVL86:
 634 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 635              		.cfi_def_cfa_offset 20
 636              		.cfi_offset 4, -20
 637              		.cfi_offset 5, -16
 638              		.cfi_offset 6, -12
 639              		.cfi_offset 7, -8
 640              		.cfi_offset 14, -4
 641 0002 83B0     		sub	sp, sp, #12
 642              		.cfi_def_cfa_offset 32
 643 0004 0400     		movs	r4, r0
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 57


 644 0006 0F00     		movs	r7, r1
 645 0008 1600     		movs	r6, r2
 646              	.LVL87:
 436:FreeRTOS\Source/queue.c ****             /* Check for multiplication overflow. */
 647              		.loc 1 436 0
 648 000a 0028     		cmp	r0, #0
 649 000c 19D0     		beq	.L43
 438:FreeRTOS\Source/queue.c ****             /* Check for addition overflow. */
 650              		.loc 1 438 0 discriminator 1
 651 000e 0100     		movs	r1, r0
 652              	.LVL88:
 653 0010 0120     		movs	r0, #1
 654              	.LVL89:
 655 0012 4042     		rsbs	r0, r0, #0
 656 0014 FFF7FEFF 		bl	__aeabi_uidiv
 657              	.LVL90:
 436:FreeRTOS\Source/queue.c ****             /* Check for multiplication overflow. */
 658              		.loc 1 436 0 discriminator 1
 659 0018 B842     		cmp	r0, r7
 660 001a 14D3     		bcc	.L44
 440:FreeRTOS\Source/queue.c ****         {
 661              		.loc 1 440 0
 662 001c 3800     		movs	r0, r7
 663 001e 6043     		muls	r0, r4
 438:FreeRTOS\Source/queue.c ****             /* Check for addition overflow. */
 664              		.loc 1 438 0
 665 0020 0300     		movs	r3, r0
 666 0022 4933     		adds	r3, r3, #73
 667 0024 11D8     		bhi	.L45
 668              	.LVL91:
 456:FreeRTOS\Source/queue.c **** 
 669              		.loc 1 456 0
 670 0026 4830     		adds	r0, r0, #72
 671              	.LVL92:
 672 0028 FFF7FEFF 		bl	pvPortMalloc
 673              	.LVL93:
 674 002c 051E     		subs	r5, r0, #0
 675              	.LVL94:
 458:FreeRTOS\Source/queue.c ****             {
 676              		.loc 1 458 0
 677 002e 0DD0     		beq	.L42
 678              	.LVL95:
 463:FreeRTOS\Source/queue.c **** 
 679              		.loc 1 463 0
 680 0030 0200     		movs	r2, r0
 681 0032 4832     		adds	r2, r2, #72
 682              	.LVL96:
 474:FreeRTOS\Source/queue.c ****             }
 683              		.loc 1 474 0
 684 0034 0090     		str	r0, [sp]
 685 0036 3300     		movs	r3, r6
 686 0038 3900     		movs	r1, r7
 687 003a 2000     		movs	r0, r4
 688              	.LVL97:
 689 003c FFF7FEFF 		bl	prvInitialiseNewQueue
 690              	.LVL98:
 691 0040 04E0     		b	.L42
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 58


 692              	.LVL99:
 693              	.L43:
 432:FreeRTOS\Source/queue.c ****         size_t xQueueSizeInBytes;
 694              		.loc 1 432 0
 695 0042 0025     		movs	r5, #0
 696 0044 02E0     		b	.L42
 697              	.LVL100:
 698              	.L44:
 699 0046 0025     		movs	r5, #0
 700 0048 00E0     		b	.L42
 701              	.L45:
 702 004a 0025     		movs	r5, #0
 703              	.LVL101:
 704              	.L42:
 489:FreeRTOS\Source/queue.c **** 
 705              		.loc 1 489 0
 706 004c 2800     		movs	r0, r5
 707 004e 03B0     		add	sp, sp, #12
 708              		@ sp needed
 709              	.LVL102:
 710              	.LVL103:
 711              	.LVL104:
 712 0050 F0BD     		pop	{r4, r5, r6, r7, pc}
 713              		.cfi_endproc
 714              	.LFE35:
 715              		.size	xQueueGenericCreate, .-xQueueGenericCreate
 716 0052 C046     		.section	.text.xQueueCreateCountingSemaphore,"ax",%progbits
 717              		.align	2
 718              		.global	xQueueCreateCountingSemaphore
 719              		.code	16
 720              		.thumb_func
 721              		.type	xQueueCreateCountingSemaphore, %function
 722              	xQueueCreateCountingSemaphore:
 723              	.LFB41:
 804:FreeRTOS\Source/queue.c ****         QueueHandle_t xHandle = NULL;
 724              		.loc 1 804 0
 725              		.cfi_startproc
 726              		@ args = 0, pretend = 0, frame = 0
 727              		@ frame_needed = 0, uses_anonymous_args = 0
 728              	.LVL105:
 729 0000 10B5     		push	{r4, lr}
 730              		.cfi_def_cfa_offset 8
 731              		.cfi_offset 4, -8
 732              		.cfi_offset 14, -4
 733 0002 0C00     		movs	r4, r1
 734              	.LVL106:
 807:FreeRTOS\Source/queue.c ****             ( uxInitialCount <= uxMaxCount ) )
 735              		.loc 1 807 0
 736 0004 0028     		cmp	r0, #0
 737 0006 09D0     		beq	.L48
 807:FreeRTOS\Source/queue.c ****             ( uxInitialCount <= uxMaxCount ) )
 738              		.loc 1 807 0 is_stmt 0 discriminator 1
 739 0008 8842     		cmp	r0, r1
 740 000a 09D3     		bcc	.L49
 810:FreeRTOS\Source/queue.c **** 
 741              		.loc 1 810 0 is_stmt 1
 742 000c 0222     		movs	r2, #2
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 59


 743 000e 0021     		movs	r1, #0
 744              	.LVL107:
 745 0010 FFF7FEFF 		bl	xQueueGenericCreate
 746              	.LVL108:
 812:FreeRTOS\Source/queue.c ****             {
 747              		.loc 1 812 0
 748 0014 0028     		cmp	r0, #0
 749 0016 04D0     		beq	.L47
 814:FreeRTOS\Source/queue.c **** 
 750              		.loc 1 814 0
 751 0018 8463     		str	r4, [r0, #56]
 752 001a 02E0     		b	.L47
 753              	.LVL109:
 754              	.L48:
 805:FreeRTOS\Source/queue.c **** 
 755              		.loc 1 805 0
 756 001c 0020     		movs	r0, #0
 757              	.LVL110:
 758 001e 00E0     		b	.L47
 759              	.LVL111:
 760              	.L49:
 761 0020 0020     		movs	r0, #0
 762              	.LVL112:
 763              	.L47:
 830:FreeRTOS\Source/queue.c **** 
 764              		.loc 1 830 0
 765              		@ sp needed
 766              	.LVL113:
 767 0022 10BD     		pop	{r4, pc}
 768              		.cfi_endproc
 769              	.LFE41:
 770              		.size	xQueueCreateCountingSemaphore, .-xQueueCreateCountingSemaphore
 771              		.section	.text.xQueueGenericSend,"ax",%progbits
 772              		.align	2
 773              		.global	xQueueGenericSend
 774              		.code	16
 775              		.thumb_func
 776              		.type	xQueueGenericSend, %function
 777              	xQueueGenericSend:
 778              	.LFB42:
 839:FreeRTOS\Source/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 779              		.loc 1 839 0
 780              		.cfi_startproc
 781              		@ args = 0, pretend = 0, frame = 16
 782              		@ frame_needed = 0, uses_anonymous_args = 0
 783              	.LVL114:
 784 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 785              		.cfi_def_cfa_offset 20
 786              		.cfi_offset 4, -20
 787              		.cfi_offset 5, -16
 788              		.cfi_offset 6, -12
 789              		.cfi_offset 7, -8
 790              		.cfi_offset 14, -4
 791 0002 85B0     		sub	sp, sp, #20
 792              		.cfi_def_cfa_offset 40
 793 0004 0400     		movs	r4, r0
 794 0006 0D00     		movs	r5, r1
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 60


 795 0008 0192     		str	r2, [sp, #4]
 796 000a 1F00     		movs	r7, r3
 797              	.LVL115:
 840:FreeRTOS\Source/queue.c ****     TimeOut_t xTimeOut;
 798              		.loc 1 840 0
 799 000c 0026     		movs	r6, #0
 800              	.LVL116:
 801              	.L51:
 858:FreeRTOS\Source/queue.c ****         {
 802              		.loc 1 858 0
 803 000e FFF7FEFF 		bl	vPortEnterCritical
 804              	.LVL117:
 864:FreeRTOS\Source/queue.c ****             {
 805              		.loc 1 864 0
 806 0012 A36B     		ldr	r3, [r4, #56]
 807 0014 E26B     		ldr	r2, [r4, #60]
 808 0016 9342     		cmp	r3, r2
 809 0018 01D3     		bcc	.L52
 864:FreeRTOS\Source/queue.c ****             {
 810              		.loc 1 864 0 is_stmt 0 discriminator 1
 811 001a 022F     		cmp	r7, #2
 812 001c 18D1     		bne	.L53
 813              	.L52:
 930:FreeRTOS\Source/queue.c **** 
 814              		.loc 1 930 0 is_stmt 1
 815 001e 3A00     		movs	r2, r7
 816 0020 2900     		movs	r1, r5
 817 0022 2000     		movs	r0, r4
 818 0024 FFF7FEFF 		bl	prvCopyDataToQueue
 819              	.LVL118:
 934:FreeRTOS\Source/queue.c ****                     {
 820              		.loc 1 934 0
 821 0028 636A     		ldr	r3, [r4, #36]
 822 002a 002B     		cmp	r3, #0
 823 002c 08D0     		beq	.L54
 936:FreeRTOS\Source/queue.c ****                         {
 824              		.loc 1 936 0
 825 002e 2000     		movs	r0, r4
 826              	.LVL119:
 827 0030 2430     		adds	r0, r0, #36
 828 0032 FFF7FEFF 		bl	xTaskRemoveFromEventList
 829              	.LVL120:
 830 0036 0028     		cmp	r0, #0
 831 0038 06D0     		beq	.L55
 942:FreeRTOS\Source/queue.c ****                         }
 832              		.loc 1 942 0
 833 003a FFF7FEFF 		bl	vPortYield
 834              	.LVL121:
 835 003e 03E0     		b	.L55
 836              	.LVL122:
 837              	.L54:
 949:FreeRTOS\Source/queue.c ****                     {
 838              		.loc 1 949 0
 839 0040 0028     		cmp	r0, #0
 840 0042 01D0     		beq	.L55
 955:FreeRTOS\Source/queue.c ****                     }
 841              		.loc 1 955 0
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 61


 842 0044 FFF7FEFF 		bl	vPortYield
 843              	.LVL123:
 844              	.L55:
 964:FreeRTOS\Source/queue.c ****                 return pdPASS;
 845              		.loc 1 964 0
 846 0048 FFF7FEFF 		bl	vPortExitCritical
 847              	.LVL124:
 965:FreeRTOS\Source/queue.c ****             }
 848              		.loc 1 965 0
 849 004c 0120     		movs	r0, #1
 850 004e 4AE0     		b	.L56
 851              	.L53:
 969:FreeRTOS\Source/queue.c ****                 {
 852              		.loc 1 969 0
 853 0050 019B     		ldr	r3, [sp, #4]
 854 0052 002B     		cmp	r3, #0
 855 0054 03D1     		bne	.L57
 973:FreeRTOS\Source/queue.c **** 
 856              		.loc 1 973 0
 857 0056 FFF7FEFF 		bl	vPortExitCritical
 858              	.LVL125:
 978:FreeRTOS\Source/queue.c ****                 }
 859              		.loc 1 978 0
 860 005a 0020     		movs	r0, #0
 861 005c 43E0     		b	.L56
 862              	.L57:
 980:FreeRTOS\Source/queue.c ****                 {
 863              		.loc 1 980 0
 864 005e 002E     		cmp	r6, #0
 865 0060 03D1     		bne	.L58
 984:FreeRTOS\Source/queue.c ****                     xEntryTimeSet = pdTRUE;
 866              		.loc 1 984 0
 867 0062 02A8     		add	r0, sp, #8
 868 0064 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 869              	.LVL126:
 985:FreeRTOS\Source/queue.c ****                 }
 870              		.loc 1 985 0
 871 0068 0136     		adds	r6, r6, #1
 872              	.LVL127:
 873              	.L58:
 994:FreeRTOS\Source/queue.c **** 
 874              		.loc 1 994 0
 875 006a FFF7FEFF 		bl	vPortExitCritical
 876              	.LVL128:
 999:FreeRTOS\Source/queue.c ****         prvLockQueue( pxQueue );
 877              		.loc 1 999 0
 878 006e FFF7FEFF 		bl	vTaskSuspendAll
 879              	.LVL129:
1000:FreeRTOS\Source/queue.c **** 
 880              		.loc 1 1000 0
 881 0072 FFF7FEFF 		bl	vPortEnterCritical
 882              	.LVL130:
 883 0076 4423     		movs	r3, #68
 884 0078 E35C     		ldrb	r3, [r4, r3]
 885 007a 5BB2     		sxtb	r3, r3
 886 007c 0133     		adds	r3, r3, #1
 887 007e 02D1     		bne	.L59
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 62


1000:FreeRTOS\Source/queue.c **** 
 888              		.loc 1 1000 0 is_stmt 0 discriminator 1
 889 0080 0022     		movs	r2, #0
 890 0082 4423     		movs	r3, #68
 891 0084 E254     		strb	r2, [r4, r3]
 892              	.L59:
1000:FreeRTOS\Source/queue.c **** 
 893              		.loc 1 1000 0 discriminator 3
 894 0086 4523     		movs	r3, #69
 895 0088 E35C     		ldrb	r3, [r4, r3]
 896 008a 5BB2     		sxtb	r3, r3
 897 008c 0133     		adds	r3, r3, #1
 898 008e 02D1     		bne	.L60
1000:FreeRTOS\Source/queue.c **** 
 899              		.loc 1 1000 0 discriminator 4
 900 0090 0022     		movs	r2, #0
 901 0092 4523     		movs	r3, #69
 902 0094 E254     		strb	r2, [r4, r3]
 903              	.L60:
1000:FreeRTOS\Source/queue.c **** 
 904              		.loc 1 1000 0 discriminator 6
 905 0096 FFF7FEFF 		bl	vPortExitCritical
 906              	.LVL131:
1003:FreeRTOS\Source/queue.c ****         {
 907              		.loc 1 1003 0 is_stmt 1 discriminator 6
 908 009a 01A9     		add	r1, sp, #4
 909              	.LVL132:
 910 009c 02A8     		add	r0, sp, #8
 911 009e FFF7FEFF 		bl	xTaskCheckForTimeOut
 912              	.LVL133:
 913 00a2 0028     		cmp	r0, #0
 914 00a4 19D1     		bne	.L61
1005:FreeRTOS\Source/queue.c ****             {
 915              		.loc 1 1005 0
 916 00a6 2000     		movs	r0, r4
 917 00a8 FFF7FEFF 		bl	prvIsQueueFull
 918              	.LVL134:
 919 00ac 0028     		cmp	r0, #0
 920 00ae 0ED0     		beq	.L62
1008:FreeRTOS\Source/queue.c **** 
 921              		.loc 1 1008 0
 922 00b0 2000     		movs	r0, r4
 923 00b2 1030     		adds	r0, r0, #16
 924 00b4 0199     		ldr	r1, [sp, #4]
 925 00b6 FFF7FEFF 		bl	vTaskPlaceOnEventList
 926              	.LVL135:
1015:FreeRTOS\Source/queue.c **** 
 927              		.loc 1 1015 0
 928 00ba 2000     		movs	r0, r4
 929 00bc FFF7FEFF 		bl	prvUnlockQueue
 930              	.LVL136:
1022:FreeRTOS\Source/queue.c ****                 {
 931              		.loc 1 1022 0
 932 00c0 FFF7FEFF 		bl	xTaskResumeAll
 933              	.LVL137:
 934 00c4 0028     		cmp	r0, #0
 935 00c6 A2D1     		bne	.L51
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 63


1024:FreeRTOS\Source/queue.c ****                 }
 936              		.loc 1 1024 0
 937 00c8 FFF7FEFF 		bl	vPortYield
 938              	.LVL138:
 939 00cc 9FE7     		b	.L51
 940              	.L62:
1030:FreeRTOS\Source/queue.c ****                 ( void ) xTaskResumeAll();
 941              		.loc 1 1030 0
 942 00ce 2000     		movs	r0, r4
 943 00d0 FFF7FEFF 		bl	prvUnlockQueue
 944              	.LVL139:
1031:FreeRTOS\Source/queue.c ****             }
 945              		.loc 1 1031 0
 946 00d4 FFF7FEFF 		bl	xTaskResumeAll
 947              	.LVL140:
 948 00d8 99E7     		b	.L51
 949              	.L61:
1037:FreeRTOS\Source/queue.c ****             ( void ) xTaskResumeAll();
 950              		.loc 1 1037 0
 951 00da 2000     		movs	r0, r4
 952 00dc FFF7FEFF 		bl	prvUnlockQueue
 953              	.LVL141:
1038:FreeRTOS\Source/queue.c **** 
 954              		.loc 1 1038 0
 955 00e0 FFF7FEFF 		bl	xTaskResumeAll
 956              	.LVL142:
1041:FreeRTOS\Source/queue.c ****         }
 957              		.loc 1 1041 0
 958 00e4 0020     		movs	r0, #0
 959              	.L56:
1044:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 960              		.loc 1 1044 0
 961 00e6 05B0     		add	sp, sp, #20
 962              		@ sp needed
 963              	.LVL143:
 964              	.LVL144:
 965              	.LVL145:
 966              	.LVL146:
 967 00e8 F0BD     		pop	{r4, r5, r6, r7, pc}
 968              		.cfi_endproc
 969              	.LFE42:
 970              		.size	xQueueGenericSend, .-xQueueGenericSend
 971 00ea C046     		.section	.text.prvInitialiseMutex,"ax",%progbits
 972              		.align	2
 973              		.code	16
 974              		.thumb_func
 975              		.type	prvInitialiseMutex, %function
 976              	prvInitialiseMutex:
 977              	.LFB37:
 543:FreeRTOS\Source/queue.c ****         if( pxNewQueue != NULL )
 978              		.loc 1 543 0
 979              		.cfi_startproc
 980              		@ args = 0, pretend = 0, frame = 0
 981              		@ frame_needed = 0, uses_anonymous_args = 0
 982              	.LVL147:
 983 0000 10B5     		push	{r4, lr}
 984              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 64


 985              		.cfi_offset 4, -8
 986              		.cfi_offset 14, -4
 544:FreeRTOS\Source/queue.c ****         {
 987              		.loc 1 544 0
 988 0002 0028     		cmp	r0, #0
 989 0004 07D0     		beq	.L64
 550:FreeRTOS\Source/queue.c ****             pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 990              		.loc 1 550 0
 991 0006 0023     		movs	r3, #0
 992 0008 8360     		str	r3, [r0, #8]
 551:FreeRTOS\Source/queue.c **** 
 993              		.loc 1 551 0
 994 000a 0360     		str	r3, [r0]
 554:FreeRTOS\Source/queue.c **** 
 995              		.loc 1 554 0
 996 000c C360     		str	r3, [r0, #12]
 559:FreeRTOS\Source/queue.c ****         }
 997              		.loc 1 559 0
 998 000e 0022     		movs	r2, #0
 999 0010 0021     		movs	r1, #0
 1000 0012 FFF7FEFF 		bl	xQueueGenericSend
 1001              	.LVL148:
 1002              	.L64:
 565:FreeRTOS\Source/queue.c **** 
 1003              		.loc 1 565 0
 1004              		@ sp needed
 1005 0016 10BD     		pop	{r4, pc}
 1006              		.cfi_endproc
 1007              	.LFE37:
 1008              		.size	prvInitialiseMutex, .-prvInitialiseMutex
 1009              		.section	.text.xQueueCreateMutex,"ax",%progbits
 1010              		.align	2
 1011              		.global	xQueueCreateMutex
 1012              		.code	16
 1013              		.thumb_func
 1014              		.type	xQueueCreateMutex, %function
 1015              	xQueueCreateMutex:
 1016              	.LFB38:
 573:FreeRTOS\Source/queue.c ****         QueueHandle_t xNewQueue;
 1017              		.loc 1 573 0
 1018              		.cfi_startproc
 1019              		@ args = 0, pretend = 0, frame = 0
 1020              		@ frame_needed = 0, uses_anonymous_args = 0
 1021              	.LVL149:
 1022 0000 10B5     		push	{r4, lr}
 1023              		.cfi_def_cfa_offset 8
 1024              		.cfi_offset 4, -8
 1025              		.cfi_offset 14, -4
 1026 0002 0200     		movs	r2, r0
 1027              	.LVL150:
 577:FreeRTOS\Source/queue.c ****         prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 1028              		.loc 1 577 0
 1029 0004 0021     		movs	r1, #0
 1030 0006 0120     		movs	r0, #1
 1031              	.LVL151:
 1032 0008 FFF7FEFF 		bl	xQueueGenericCreate
 1033              	.LVL152:
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 65


 1034 000c 0400     		movs	r4, r0
 1035              	.LVL153:
 578:FreeRTOS\Source/queue.c **** 
 1036              		.loc 1 578 0
 1037 000e FFF7FEFF 		bl	prvInitialiseMutex
 1038              	.LVL154:
 581:FreeRTOS\Source/queue.c **** 
 1039              		.loc 1 581 0
 1040 0012 2000     		movs	r0, r4
 1041              		@ sp needed
 1042              	.LVL155:
 1043 0014 10BD     		pop	{r4, pc}
 1044              		.cfi_endproc
 1045              	.LFE38:
 1046              		.size	xQueueCreateMutex, .-xQueueCreateMutex
 1047 0016 C046     		.section	.text.xQueueGiveMutexRecursive,"ax",%progbits
 1048              		.align	2
 1049              		.global	xQueueGiveMutexRecursive
 1050              		.code	16
 1051              		.thumb_func
 1052              		.type	xQueueGiveMutexRecursive, %function
 1053              	xQueueGiveMutexRecursive:
 1054              	.LFB39:
 669:FreeRTOS\Source/queue.c ****         BaseType_t xReturn;
 1055              		.loc 1 669 0
 1056              		.cfi_startproc
 1057              		@ args = 0, pretend = 0, frame = 0
 1058              		@ frame_needed = 0, uses_anonymous_args = 0
 1059              	.LVL156:
 1060 0000 70B5     		push	{r4, r5, r6, lr}
 1061              		.cfi_def_cfa_offset 16
 1062              		.cfi_offset 4, -16
 1063              		.cfi_offset 5, -12
 1064              		.cfi_offset 6, -8
 1065              		.cfi_offset 14, -4
 1066 0002 0400     		movs	r4, r0
 1067              	.LVL157:
 681:FreeRTOS\Source/queue.c ****         {
 1068              		.loc 1 681 0
 1069 0004 8568     		ldr	r5, [r0, #8]
 1070 0006 FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 1071              	.LVL158:
 1072 000a 8542     		cmp	r5, r0
 1073 000c 0BD1     		bne	.L69
 690:FreeRTOS\Source/queue.c **** 
 1074              		.loc 1 690 0
 1075 000e E368     		ldr	r3, [r4, #12]
 1076 0010 013B     		subs	r3, r3, #1
 1077 0012 E360     		str	r3, [r4, #12]
 693:FreeRTOS\Source/queue.c ****             {
 1078              		.loc 1 693 0
 1079 0014 002B     		cmp	r3, #0
 1080 0016 08D1     		bne	.L70
 697:FreeRTOS\Source/queue.c ****             }
 1081              		.loc 1 697 0
 1082 0018 0022     		movs	r2, #0
 1083 001a 0021     		movs	r1, #0
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 66


 1084 001c 2000     		movs	r0, r4
 1085 001e FFF7FEFF 		bl	xQueueGenericSend
 1086              	.LVL159:
 704:FreeRTOS\Source/queue.c ****         }
 1087              		.loc 1 704 0
 1088 0022 0120     		movs	r0, #1
 1089 0024 02E0     		b	.L68
 1090              	.L69:
 710:FreeRTOS\Source/queue.c **** 
 1091              		.loc 1 710 0
 1092 0026 0020     		movs	r0, #0
 1093 0028 00E0     		b	.L68
 1094              	.L70:
 704:FreeRTOS\Source/queue.c ****         }
 1095              		.loc 1 704 0
 1096 002a 0120     		movs	r0, #1
 1097              	.L68:
 1098              	.LVL160:
 716:FreeRTOS\Source/queue.c **** 
 1099              		.loc 1 716 0
 1100              		@ sp needed
 1101              	.LVL161:
 1102 002c 70BD     		pop	{r4, r5, r6, pc}
 1103              		.cfi_endproc
 1104              	.LFE39:
 1105              		.size	xQueueGiveMutexRecursive, .-xQueueGiveMutexRecursive
 1106 002e C046     		.section	.text.xQueueGenericSendFromISR,"ax",%progbits
 1107              		.align	2
 1108              		.global	xQueueGenericSendFromISR
 1109              		.code	16
 1110              		.thumb_func
 1111              		.type	xQueueGenericSendFromISR, %function
 1112              	xQueueGenericSendFromISR:
 1113              	.LFB43:
1051:FreeRTOS\Source/queue.c ****     BaseType_t xReturn;
 1114              		.loc 1 1051 0
 1115              		.cfi_startproc
 1116              		@ args = 0, pretend = 0, frame = 8
 1117              		@ frame_needed = 0, uses_anonymous_args = 0
 1118              	.LVL162:
 1119 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1120              		.cfi_def_cfa_offset 20
 1121              		.cfi_offset 4, -20
 1122              		.cfi_offset 5, -16
 1123              		.cfi_offset 6, -12
 1124              		.cfi_offset 7, -8
 1125              		.cfi_offset 14, -4
 1126 0002 83B0     		sub	sp, sp, #12
 1127              		.cfi_def_cfa_offset 32
 1128 0004 0600     		movs	r6, r0
 1129 0006 0191     		str	r1, [sp, #4]
 1130 0008 1700     		movs	r7, r2
 1131 000a 1C00     		movs	r4, r3
 1132              	.LVL163:
1081:FreeRTOS\Source/queue.c ****     {
 1133              		.loc 1 1081 0
 1134 000c FFF7FEFF 		bl	ulSetInterruptMaskFromISR
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 67


 1135              	.LVL164:
 1136 0010 0090     		str	r0, [sp]
 1137              	.LVL165:
1083:FreeRTOS\Source/queue.c ****         {
 1138              		.loc 1 1083 0
 1139 0012 B36B     		ldr	r3, [r6, #56]
 1140 0014 F26B     		ldr	r2, [r6, #60]
 1141 0016 9342     		cmp	r3, r2
 1142 0018 01D3     		bcc	.L72
1083:FreeRTOS\Source/queue.c ****         {
 1143              		.loc 1 1083 0 is_stmt 0 discriminator 1
 1144 001a 022C     		cmp	r4, #2
 1145 001c 23D1     		bne	.L75
 1146              	.L72:
 1147              	.LBB4:
1085:FreeRTOS\Source/queue.c ****             const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 1148              		.loc 1 1085 0 is_stmt 1
 1149 001e 4523     		movs	r3, #69
 1150 0020 F35C     		ldrb	r3, [r6, r3]
 1151 0022 5DB2     		sxtb	r5, r3
 1152              	.LVL166:
1086:FreeRTOS\Source/queue.c **** 
 1153              		.loc 1 1086 0
 1154 0024 B36B     		ldr	r3, [r6, #56]
1095:FreeRTOS\Source/queue.c **** 
 1155              		.loc 1 1095 0
 1156 0026 2200     		movs	r2, r4
 1157 0028 0199     		ldr	r1, [sp, #4]
 1158 002a 3000     		movs	r0, r6
 1159              	.LVL167:
 1160 002c FFF7FEFF 		bl	prvCopyDataToQueue
 1161              	.LVL168:
1099:FreeRTOS\Source/queue.c ****             {
 1162              		.loc 1 1099 0
 1163 0030 6B1C     		adds	r3, r5, #1
 1164 0032 0ED1     		bne	.L74
1161:FreeRTOS\Source/queue.c ****                     {
 1165              		.loc 1 1161 0
 1166 0034 736A     		ldr	r3, [r6, #36]
 1167 0036 002B     		cmp	r3, #0
 1168 0038 17D0     		beq	.L76
1163:FreeRTOS\Source/queue.c ****                         {
 1169              		.loc 1 1163 0
 1170 003a 3000     		movs	r0, r6
 1171 003c 2430     		adds	r0, r0, #36
 1172 003e FFF7FEFF 		bl	xTaskRemoveFromEventList
 1173              	.LVL169:
 1174 0042 0028     		cmp	r0, #0
 1175 0044 13D0     		beq	.L77
1167:FreeRTOS\Source/queue.c ****                             {
 1176              		.loc 1 1167 0
 1177 0046 002F     		cmp	r7, #0
 1178 0048 13D0     		beq	.L78
1169:FreeRTOS\Source/queue.c ****                             }
 1179              		.loc 1 1169 0
 1180 004a 0123     		movs	r3, #1
 1181 004c 3B60     		str	r3, [r7]
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 68


1198:FreeRTOS\Source/queue.c ****         }
 1182              		.loc 1 1198 0
 1183 004e 0124     		movs	r4, #1
 1184              	.LVL170:
 1185 0050 12E0     		b	.L73
 1186              	.LVL171:
 1187              	.L74:
 1188              	.LBB5:
1195:FreeRTOS\Source/queue.c ****             }
 1189              		.loc 1 1195 0
 1190 0052 FFF7FEFF 		bl	uxTaskGetNumberOfTasks
 1191              	.LVL172:
 1192 0056 A842     		cmp	r0, r5
 1193 0058 0DD9     		bls	.L79
1195:FreeRTOS\Source/queue.c ****             }
 1194              		.loc 1 1195 0 is_stmt 0 discriminator 1
 1195 005a 6B1C     		adds	r3, r5, #1
 1196 005c 5BB2     		sxtb	r3, r3
 1197 005e 4522     		movs	r2, #69
 1198 0060 B354     		strb	r3, [r6, r2]
 1199              	.LBE5:
1198:FreeRTOS\Source/queue.c ****         }
 1200              		.loc 1 1198 0 is_stmt 1 discriminator 1
 1201 0062 0124     		movs	r4, #1
 1202              	.LVL173:
 1203 0064 08E0     		b	.L73
 1204              	.LVL174:
 1205              	.L75:
 1206              	.LBE4:
1203:FreeRTOS\Source/queue.c ****         }
 1207              		.loc 1 1203 0
 1208 0066 0024     		movs	r4, #0
 1209              	.LVL175:
 1210 0068 06E0     		b	.L73
 1211              	.LVL176:
 1212              	.L76:
 1213              	.LBB6:
1198:FreeRTOS\Source/queue.c ****         }
 1214              		.loc 1 1198 0
 1215 006a 0124     		movs	r4, #1
 1216              	.LVL177:
 1217 006c 04E0     		b	.L73
 1218              	.LVL178:
 1219              	.L77:
 1220 006e 0124     		movs	r4, #1
 1221              	.LVL179:
 1222 0070 02E0     		b	.L73
 1223              	.LVL180:
 1224              	.L78:
 1225 0072 0124     		movs	r4, #1
 1226              	.LVL181:
 1227 0074 00E0     		b	.L73
 1228              	.LVL182:
 1229              	.L79:
 1230 0076 0124     		movs	r4, #1
 1231              	.LVL183:
 1232              	.L73:
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 69


 1233              	.LBE6:
1206:FreeRTOS\Source/queue.c **** 
 1234              		.loc 1 1206 0
 1235 0078 0098     		ldr	r0, [sp]
 1236 007a FFF7FEFF 		bl	vClearInterruptMaskFromISR
 1237              	.LVL184:
1209:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 1238              		.loc 1 1209 0
 1239 007e 2000     		movs	r0, r4
 1240 0080 03B0     		add	sp, sp, #12
 1241              	.LVL185:
 1242              		@ sp needed
 1243              	.LVL186:
 1244              	.LVL187:
 1245              	.LVL188:
 1246 0082 F0BD     		pop	{r4, r5, r6, r7, pc}
 1247              		.cfi_endproc
 1248              	.LFE43:
 1249              		.size	xQueueGenericSendFromISR, .-xQueueGenericSendFromISR
 1250              		.section	.text.xQueueGiveFromISR,"ax",%progbits
 1251              		.align	2
 1252              		.global	xQueueGiveFromISR
 1253              		.code	16
 1254              		.thumb_func
 1255              		.type	xQueueGiveFromISR, %function
 1256              	xQueueGiveFromISR:
 1257              	.LFB44:
1214:FreeRTOS\Source/queue.c ****     BaseType_t xReturn;
 1258              		.loc 1 1214 0
 1259              		.cfi_startproc
 1260              		@ args = 0, pretend = 0, frame = 0
 1261              		@ frame_needed = 0, uses_anonymous_args = 0
 1262              	.LVL189:
 1263 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1264              		.cfi_def_cfa_offset 24
 1265              		.cfi_offset 3, -24
 1266              		.cfi_offset 4, -20
 1267              		.cfi_offset 5, -16
 1268              		.cfi_offset 6, -12
 1269              		.cfi_offset 7, -8
 1270              		.cfi_offset 14, -4
 1271 0002 0400     		movs	r4, r0
 1272 0004 0E00     		movs	r6, r1
 1273              	.LVL190:
1252:FreeRTOS\Source/queue.c ****     {
 1274              		.loc 1 1252 0
 1275 0006 FFF7FEFF 		bl	ulSetInterruptMaskFromISR
 1276              	.LVL191:
 1277 000a 0500     		movs	r5, r0
 1278              	.LVL192:
 1279              	.LBB7:
1254:FreeRTOS\Source/queue.c **** 
 1280              		.loc 1 1254 0
 1281 000c A36B     		ldr	r3, [r4, #56]
 1282              	.LVL193:
1259:FreeRTOS\Source/queue.c ****         {
 1283              		.loc 1 1259 0
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 70


 1284 000e E26B     		ldr	r2, [r4, #60]
 1285 0010 9342     		cmp	r3, r2
 1286 0012 1FD2     		bcs	.L83
 1287              	.LBB8:
1261:FreeRTOS\Source/queue.c **** 
 1288              		.loc 1 1261 0
 1289 0014 4522     		movs	r2, #69
 1290 0016 A75C     		ldrb	r7, [r4, r2]
 1291 0018 7FB2     		sxtb	r7, r7
 1292              	.LVL194:
1271:FreeRTOS\Source/queue.c **** 
 1293              		.loc 1 1271 0
 1294 001a 0133     		adds	r3, r3, #1
 1295              	.LVL195:
 1296 001c A363     		str	r3, [r4, #56]
1275:FreeRTOS\Source/queue.c ****             {
 1297              		.loc 1 1275 0
 1298 001e 7B1C     		adds	r3, r7, #1
 1299 0020 0ED1     		bne	.L82
 1300              	.LVL196:
1330:FreeRTOS\Source/queue.c ****                     {
 1301              		.loc 1 1330 0
 1302 0022 636A     		ldr	r3, [r4, #36]
 1303 0024 002B     		cmp	r3, #0
 1304 0026 17D0     		beq	.L84
1332:FreeRTOS\Source/queue.c ****                         {
 1305              		.loc 1 1332 0
 1306 0028 2000     		movs	r0, r4
 1307              	.LVL197:
 1308 002a 2430     		adds	r0, r0, #36
 1309 002c FFF7FEFF 		bl	xTaskRemoveFromEventList
 1310              	.LVL198:
 1311 0030 0028     		cmp	r0, #0
 1312 0032 13D0     		beq	.L85
1336:FreeRTOS\Source/queue.c ****                             {
 1313              		.loc 1 1336 0
 1314 0034 002E     		cmp	r6, #0
 1315 0036 13D0     		beq	.L86
1338:FreeRTOS\Source/queue.c ****                             }
 1316              		.loc 1 1338 0
 1317 0038 0123     		movs	r3, #1
 1318 003a 3360     		str	r3, [r6]
1364:FreeRTOS\Source/queue.c ****         }
 1319              		.loc 1 1364 0
 1320 003c 0124     		movs	r4, #1
 1321              	.LVL199:
 1322 003e 12E0     		b	.L81
 1323              	.LVL200:
 1324              	.L82:
 1325              	.LBB9:
1361:FreeRTOS\Source/queue.c ****             }
 1326              		.loc 1 1361 0
 1327 0040 FFF7FEFF 		bl	uxTaskGetNumberOfTasks
 1328              	.LVL201:
 1329 0044 B842     		cmp	r0, r7
 1330 0046 0DD9     		bls	.L87
1361:FreeRTOS\Source/queue.c ****             }
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 71


 1331              		.loc 1 1361 0 is_stmt 0 discriminator 1
 1332 0048 0137     		adds	r7, r7, #1
 1333              	.LVL202:
 1334 004a 7FB2     		sxtb	r7, r7
 1335              	.LVL203:
 1336 004c 4523     		movs	r3, #69
 1337 004e E754     		strb	r7, [r4, r3]
 1338              	.LBE9:
1364:FreeRTOS\Source/queue.c ****         }
 1339              		.loc 1 1364 0 is_stmt 1 discriminator 1
 1340 0050 0124     		movs	r4, #1
 1341              	.LVL204:
 1342 0052 08E0     		b	.L81
 1343              	.LVL205:
 1344              	.L83:
 1345              	.LBE8:
1369:FreeRTOS\Source/queue.c ****         }
 1346              		.loc 1 1369 0
 1347 0054 0024     		movs	r4, #0
 1348              	.LVL206:
 1349 0056 06E0     		b	.L81
 1350              	.LVL207:
 1351              	.L84:
 1352              	.LBB10:
1364:FreeRTOS\Source/queue.c ****         }
 1353              		.loc 1 1364 0
 1354 0058 0124     		movs	r4, #1
 1355              	.LVL208:
 1356 005a 04E0     		b	.L81
 1357              	.LVL209:
 1358              	.L85:
 1359 005c 0124     		movs	r4, #1
 1360              	.LVL210:
 1361 005e 02E0     		b	.L81
 1362              	.LVL211:
 1363              	.L86:
 1364 0060 0124     		movs	r4, #1
 1365              	.LVL212:
 1366 0062 00E0     		b	.L81
 1367              	.LVL213:
 1368              	.L87:
 1369 0064 0124     		movs	r4, #1
 1370              	.LVL214:
 1371              	.L81:
 1372              	.LBE10:
 1373              	.LBE7:
1372:FreeRTOS\Source/queue.c **** 
 1374              		.loc 1 1372 0
 1375 0066 2800     		movs	r0, r5
 1376 0068 FFF7FEFF 		bl	vClearInterruptMaskFromISR
 1377              	.LVL215:
1375:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 1378              		.loc 1 1375 0
 1379 006c 2000     		movs	r0, r4
 1380              		@ sp needed
 1381              	.LVL216:
 1382              	.LVL217:
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 72


 1383              	.LVL218:
 1384 006e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1385              		.cfi_endproc
 1386              	.LFE44:
 1387              		.size	xQueueGiveFromISR, .-xQueueGiveFromISR
 1388              		.section	.text.xQueueReceive,"ax",%progbits
 1389              		.align	2
 1390              		.global	xQueueReceive
 1391              		.code	16
 1392              		.thumb_func
 1393              		.type	xQueueReceive, %function
 1394              	xQueueReceive:
 1395              	.LFB45:
1381:FreeRTOS\Source/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
 1396              		.loc 1 1381 0
 1397              		.cfi_startproc
 1398              		@ args = 0, pretend = 0, frame = 16
 1399              		@ frame_needed = 0, uses_anonymous_args = 0
 1400              	.LVL219:
 1401 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1402              		.cfi_def_cfa_offset 20
 1403              		.cfi_offset 4, -20
 1404              		.cfi_offset 5, -16
 1405              		.cfi_offset 6, -12
 1406              		.cfi_offset 7, -8
 1407              		.cfi_offset 14, -4
 1408 0002 85B0     		sub	sp, sp, #20
 1409              		.cfi_def_cfa_offset 40
 1410 0004 0400     		movs	r4, r0
 1411 0006 0D00     		movs	r5, r1
 1412 0008 0192     		str	r2, [sp, #4]
 1413              	.LVL220:
1382:FreeRTOS\Source/queue.c ****     TimeOut_t xTimeOut;
 1414              		.loc 1 1382 0
 1415 000a 0027     		movs	r7, #0
 1416              	.LVL221:
 1417              	.L89:
1405:FreeRTOS\Source/queue.c ****         {
 1418              		.loc 1 1405 0
 1419 000c FFF7FEFF 		bl	vPortEnterCritical
 1420              	.LVL222:
 1421              	.LBB11:
1407:FreeRTOS\Source/queue.c **** 
 1422              		.loc 1 1407 0
 1423 0010 A66B     		ldr	r6, [r4, #56]
 1424              	.LVL223:
1411:FreeRTOS\Source/queue.c ****             {
 1425              		.loc 1 1411 0
 1426 0012 002E     		cmp	r6, #0
 1427 0014 14D0     		beq	.L90
1414:FreeRTOS\Source/queue.c ****                 traceQUEUE_RECEIVE( pxQueue );
 1428              		.loc 1 1414 0
 1429 0016 2900     		movs	r1, r5
 1430 0018 2000     		movs	r0, r4
 1431 001a FFF7FEFF 		bl	prvCopyDataFromQueue
 1432              	.LVL224:
1416:FreeRTOS\Source/queue.c **** 
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 73


 1433              		.loc 1 1416 0
 1434 001e 013E     		subs	r6, r6, #1
 1435              	.LVL225:
 1436 0020 A663     		str	r6, [r4, #56]
1421:FreeRTOS\Source/queue.c ****                 {
 1437              		.loc 1 1421 0
 1438 0022 2369     		ldr	r3, [r4, #16]
 1439 0024 002B     		cmp	r3, #0
 1440 0026 07D0     		beq	.L91
1423:FreeRTOS\Source/queue.c ****                     {
 1441              		.loc 1 1423 0
 1442 0028 2000     		movs	r0, r4
 1443 002a 1030     		adds	r0, r0, #16
 1444 002c FFF7FEFF 		bl	xTaskRemoveFromEventList
 1445              	.LVL226:
 1446 0030 0028     		cmp	r0, #0
 1447 0032 01D0     		beq	.L91
1425:FreeRTOS\Source/queue.c ****                     }
 1448              		.loc 1 1425 0
 1449 0034 FFF7FEFF 		bl	vPortYield
 1450              	.LVL227:
 1451              	.L91:
1437:FreeRTOS\Source/queue.c ****                 return pdPASS;
 1452              		.loc 1 1437 0
 1453 0038 FFF7FEFF 		bl	vPortExitCritical
 1454              	.LVL228:
1438:FreeRTOS\Source/queue.c ****             }
 1455              		.loc 1 1438 0
 1456 003c 0120     		movs	r0, #1
 1457 003e 4FE0     		b	.L92
 1458              	.LVL229:
 1459              	.L90:
1442:FreeRTOS\Source/queue.c ****                 {
 1460              		.loc 1 1442 0
 1461 0040 019B     		ldr	r3, [sp, #4]
 1462 0042 002B     		cmp	r3, #0
 1463 0044 03D1     		bne	.L93
1446:FreeRTOS\Source/queue.c ****                     traceQUEUE_RECEIVE_FAILED( pxQueue );
 1464              		.loc 1 1446 0
 1465 0046 FFF7FEFF 		bl	vPortExitCritical
 1466              	.LVL230:
1448:FreeRTOS\Source/queue.c ****                 }
 1467              		.loc 1 1448 0
 1468 004a 0020     		movs	r0, #0
 1469 004c 48E0     		b	.L92
 1470              	.L93:
1450:FreeRTOS\Source/queue.c ****                 {
 1471              		.loc 1 1450 0
 1472 004e 002F     		cmp	r7, #0
 1473 0050 03D1     		bne	.L94
1454:FreeRTOS\Source/queue.c ****                     xEntryTimeSet = pdTRUE;
 1474              		.loc 1 1454 0
 1475 0052 02A8     		add	r0, sp, #8
 1476 0054 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 1477              	.LVL231:
1455:FreeRTOS\Source/queue.c ****                 }
 1478              		.loc 1 1455 0
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 74


 1479 0058 0137     		adds	r7, r7, #1
 1480              	.LVL232:
 1481              	.L94:
 1482              	.LBE11:
1464:FreeRTOS\Source/queue.c **** 
 1483              		.loc 1 1464 0
 1484 005a FFF7FEFF 		bl	vPortExitCritical
 1485              	.LVL233:
1469:FreeRTOS\Source/queue.c ****         prvLockQueue( pxQueue );
 1486              		.loc 1 1469 0
 1487 005e FFF7FEFF 		bl	vTaskSuspendAll
 1488              	.LVL234:
1470:FreeRTOS\Source/queue.c **** 
 1489              		.loc 1 1470 0
 1490 0062 FFF7FEFF 		bl	vPortEnterCritical
 1491              	.LVL235:
 1492 0066 4423     		movs	r3, #68
 1493 0068 E35C     		ldrb	r3, [r4, r3]
 1494 006a 5BB2     		sxtb	r3, r3
 1495 006c 0133     		adds	r3, r3, #1
 1496 006e 02D1     		bne	.L95
1470:FreeRTOS\Source/queue.c **** 
 1497              		.loc 1 1470 0 is_stmt 0 discriminator 1
 1498 0070 0022     		movs	r2, #0
 1499 0072 4423     		movs	r3, #68
 1500 0074 E254     		strb	r2, [r4, r3]
 1501              	.L95:
1470:FreeRTOS\Source/queue.c **** 
 1502              		.loc 1 1470 0 discriminator 3
 1503 0076 4523     		movs	r3, #69
 1504 0078 E35C     		ldrb	r3, [r4, r3]
 1505 007a 5BB2     		sxtb	r3, r3
 1506 007c 0133     		adds	r3, r3, #1
 1507 007e 02D1     		bne	.L96
1470:FreeRTOS\Source/queue.c **** 
 1508              		.loc 1 1470 0 discriminator 4
 1509 0080 0022     		movs	r2, #0
 1510 0082 4523     		movs	r3, #69
 1511 0084 E254     		strb	r2, [r4, r3]
 1512              	.L96:
1470:FreeRTOS\Source/queue.c **** 
 1513              		.loc 1 1470 0 discriminator 6
 1514 0086 FFF7FEFF 		bl	vPortExitCritical
 1515              	.LVL236:
1473:FreeRTOS\Source/queue.c ****         {
 1516              		.loc 1 1473 0 is_stmt 1 discriminator 6
 1517 008a 01A9     		add	r1, sp, #4
 1518              	.LVL237:
 1519 008c 02A8     		add	r0, sp, #8
 1520 008e FFF7FEFF 		bl	xTaskCheckForTimeOut
 1521              	.LVL238:
 1522 0092 0028     		cmp	r0, #0
 1523 0094 19D1     		bne	.L97
1477:FreeRTOS\Source/queue.c ****             {
 1524              		.loc 1 1477 0
 1525 0096 2000     		movs	r0, r4
 1526 0098 FFF7FEFF 		bl	prvIsQueueEmpty
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 75


 1527              	.LVL239:
 1528 009c 0028     		cmp	r0, #0
 1529 009e 0ED0     		beq	.L98
1480:FreeRTOS\Source/queue.c ****                 prvUnlockQueue( pxQueue );
 1530              		.loc 1 1480 0
 1531 00a0 2000     		movs	r0, r4
 1532 00a2 2430     		adds	r0, r0, #36
 1533 00a4 0199     		ldr	r1, [sp, #4]
 1534 00a6 FFF7FEFF 		bl	vTaskPlaceOnEventList
 1535              	.LVL240:
1481:FreeRTOS\Source/queue.c **** 
 1536              		.loc 1 1481 0
 1537 00aa 2000     		movs	r0, r4
 1538 00ac FFF7FEFF 		bl	prvUnlockQueue
 1539              	.LVL241:
1483:FreeRTOS\Source/queue.c ****                 {
 1540              		.loc 1 1483 0
 1541 00b0 FFF7FEFF 		bl	xTaskResumeAll
 1542              	.LVL242:
 1543 00b4 0028     		cmp	r0, #0
 1544 00b6 A9D1     		bne	.L89
1485:FreeRTOS\Source/queue.c ****                 }
 1545              		.loc 1 1485 0
 1546 00b8 FFF7FEFF 		bl	vPortYield
 1547              	.LVL243:
 1548 00bc A6E7     		b	.L89
 1549              	.L98:
1496:FreeRTOS\Source/queue.c ****                 ( void ) xTaskResumeAll();
 1550              		.loc 1 1496 0
 1551 00be 2000     		movs	r0, r4
 1552 00c0 FFF7FEFF 		bl	prvUnlockQueue
 1553              	.LVL244:
1497:FreeRTOS\Source/queue.c ****             }
 1554              		.loc 1 1497 0
 1555 00c4 FFF7FEFF 		bl	xTaskResumeAll
 1556              	.LVL245:
 1557 00c8 A0E7     		b	.L89
 1558              	.L97:
1504:FreeRTOS\Source/queue.c ****             ( void ) xTaskResumeAll();
 1559              		.loc 1 1504 0
 1560 00ca 2000     		movs	r0, r4
 1561 00cc FFF7FEFF 		bl	prvUnlockQueue
 1562              	.LVL246:
1505:FreeRTOS\Source/queue.c **** 
 1563              		.loc 1 1505 0
 1564 00d0 FFF7FEFF 		bl	xTaskResumeAll
 1565              	.LVL247:
1507:FreeRTOS\Source/queue.c ****             {
 1566              		.loc 1 1507 0
 1567 00d4 2000     		movs	r0, r4
 1568 00d6 FFF7FEFF 		bl	prvIsQueueEmpty
 1569              	.LVL248:
 1570 00da 0028     		cmp	r0, #0
 1571 00dc 96D0     		beq	.L89
1510:FreeRTOS\Source/queue.c ****             }
 1572              		.loc 1 1510 0
 1573 00de 0020     		movs	r0, #0
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 76


 1574              	.LVL249:
 1575              	.L92:
1518:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 1576              		.loc 1 1518 0
 1577 00e0 05B0     		add	sp, sp, #20
 1578              		@ sp needed
 1579              	.LVL250:
 1580              	.LVL251:
 1581              	.LVL252:
 1582 00e2 F0BD     		pop	{r4, r5, r6, r7, pc}
 1583              		.cfi_endproc
 1584              	.LFE45:
 1585              		.size	xQueueReceive, .-xQueueReceive
 1586              		.section	.text.xQueueSemaphoreTake,"ax",%progbits
 1587              		.align	2
 1588              		.global	xQueueSemaphoreTake
 1589              		.code	16
 1590              		.thumb_func
 1591              		.type	xQueueSemaphoreTake, %function
 1592              	xQueueSemaphoreTake:
 1593              	.LFB46:
1523:FreeRTOS\Source/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
 1594              		.loc 1 1523 0
 1595              		.cfi_startproc
 1596              		@ args = 0, pretend = 0, frame = 16
 1597              		@ frame_needed = 0, uses_anonymous_args = 0
 1598              	.LVL253:
 1599 0000 70B5     		push	{r4, r5, r6, lr}
 1600              		.cfi_def_cfa_offset 16
 1601              		.cfi_offset 4, -16
 1602              		.cfi_offset 5, -12
 1603              		.cfi_offset 6, -8
 1604              		.cfi_offset 14, -4
 1605 0002 84B0     		sub	sp, sp, #16
 1606              		.cfi_def_cfa_offset 32
 1607 0004 0400     		movs	r4, r0
 1608 0006 0191     		str	r1, [sp, #4]
 1609              	.LVL254:
1529:FreeRTOS\Source/queue.c ****     #endif
 1610              		.loc 1 1529 0
 1611 0008 0026     		movs	r6, #0
1524:FreeRTOS\Source/queue.c ****     TimeOut_t xTimeOut;
 1612              		.loc 1 1524 0
 1613 000a 0025     		movs	r5, #0
 1614              	.LVL255:
 1615              	.L101:
1551:FreeRTOS\Source/queue.c ****         {
 1616              		.loc 1 1551 0
 1617 000c FFF7FEFF 		bl	vPortEnterCritical
 1618              	.LVL256:
 1619              	.LBB12:
1555:FreeRTOS\Source/queue.c **** 
 1620              		.loc 1 1555 0
 1621 0010 A36B     		ldr	r3, [r4, #56]
 1622              	.LVL257:
1559:FreeRTOS\Source/queue.c ****             {
 1623              		.loc 1 1559 0
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 77


 1624 0012 002B     		cmp	r3, #0
 1625 0014 16D0     		beq	.L102
1565:FreeRTOS\Source/queue.c **** 
 1626              		.loc 1 1565 0
 1627 0016 013B     		subs	r3, r3, #1
 1628              	.LVL258:
 1629 0018 A363     		str	r3, [r4, #56]
1569:FreeRTOS\Source/queue.c ****                     {
 1630              		.loc 1 1569 0
 1631 001a 2368     		ldr	r3, [r4]
 1632              	.LVL259:
 1633 001c 002B     		cmp	r3, #0
 1634 001e 02D1     		bne	.L103
1573:FreeRTOS\Source/queue.c ****                     }
 1635              		.loc 1 1573 0
 1636 0020 FFF7FEFF 		bl	pvTaskIncrementMutexHeldCount
 1637              	.LVL260:
 1638 0024 A060     		str	r0, [r4, #8]
 1639              	.L103:
1584:FreeRTOS\Source/queue.c ****                 {
 1640              		.loc 1 1584 0
 1641 0026 2369     		ldr	r3, [r4, #16]
 1642 0028 002B     		cmp	r3, #0
 1643 002a 07D0     		beq	.L104
1586:FreeRTOS\Source/queue.c ****                     {
 1644              		.loc 1 1586 0
 1645 002c 2000     		movs	r0, r4
 1646 002e 1030     		adds	r0, r0, #16
 1647 0030 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1648              	.LVL261:
 1649 0034 0028     		cmp	r0, #0
 1650 0036 01D0     		beq	.L104
1588:FreeRTOS\Source/queue.c ****                     }
 1651              		.loc 1 1588 0
 1652 0038 FFF7FEFF 		bl	vPortYield
 1653              	.LVL262:
 1654              	.L104:
1600:FreeRTOS\Source/queue.c ****                 return pdPASS;
 1655              		.loc 1 1600 0
 1656 003c FFF7FEFF 		bl	vPortExitCritical
 1657              	.LVL263:
1601:FreeRTOS\Source/queue.c ****             }
 1658              		.loc 1 1601 0
 1659 0040 0120     		movs	r0, #1
 1660 0042 69E0     		b	.L105
 1661              	.LVL264:
 1662              	.L102:
1605:FreeRTOS\Source/queue.c ****                 {
 1663              		.loc 1 1605 0
 1664 0044 019B     		ldr	r3, [sp, #4]
 1665              	.LVL265:
 1666 0046 002B     		cmp	r3, #0
 1667 0048 03D1     		bne	.L106
1609:FreeRTOS\Source/queue.c ****                     traceQUEUE_RECEIVE_FAILED( pxQueue );
 1668              		.loc 1 1609 0
 1669 004a FFF7FEFF 		bl	vPortExitCritical
 1670              	.LVL266:
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 78


1611:FreeRTOS\Source/queue.c ****                 }
 1671              		.loc 1 1611 0
 1672 004e 0020     		movs	r0, #0
 1673 0050 62E0     		b	.L105
 1674              	.L106:
1613:FreeRTOS\Source/queue.c ****                 {
 1675              		.loc 1 1613 0
 1676 0052 002D     		cmp	r5, #0
 1677 0054 03D1     		bne	.L107
1617:FreeRTOS\Source/queue.c ****                     xEntryTimeSet = pdTRUE;
 1678              		.loc 1 1617 0
 1679 0056 02A8     		add	r0, sp, #8
 1680 0058 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 1681              	.LVL267:
1618:FreeRTOS\Source/queue.c ****                 }
 1682              		.loc 1 1618 0
 1683 005c 0135     		adds	r5, r5, #1
 1684              	.LVL268:
 1685              	.L107:
 1686              	.LBE12:
1627:FreeRTOS\Source/queue.c **** 
 1687              		.loc 1 1627 0
 1688 005e FFF7FEFF 		bl	vPortExitCritical
 1689              	.LVL269:
1632:FreeRTOS\Source/queue.c ****         prvLockQueue( pxQueue );
 1690              		.loc 1 1632 0
 1691 0062 FFF7FEFF 		bl	vTaskSuspendAll
 1692              	.LVL270:
1633:FreeRTOS\Source/queue.c **** 
 1693              		.loc 1 1633 0
 1694 0066 FFF7FEFF 		bl	vPortEnterCritical
 1695              	.LVL271:
 1696 006a 4423     		movs	r3, #68
 1697 006c E35C     		ldrb	r3, [r4, r3]
 1698 006e 5BB2     		sxtb	r3, r3
 1699 0070 0133     		adds	r3, r3, #1
 1700 0072 02D1     		bne	.L108
1633:FreeRTOS\Source/queue.c **** 
 1701              		.loc 1 1633 0 is_stmt 0 discriminator 1
 1702 0074 0022     		movs	r2, #0
 1703 0076 4423     		movs	r3, #68
 1704 0078 E254     		strb	r2, [r4, r3]
 1705              	.L108:
1633:FreeRTOS\Source/queue.c **** 
 1706              		.loc 1 1633 0 discriminator 3
 1707 007a 4523     		movs	r3, #69
 1708 007c E35C     		ldrb	r3, [r4, r3]
 1709 007e 5BB2     		sxtb	r3, r3
 1710 0080 0133     		adds	r3, r3, #1
 1711 0082 02D1     		bne	.L109
1633:FreeRTOS\Source/queue.c **** 
 1712              		.loc 1 1633 0 discriminator 4
 1713 0084 0022     		movs	r2, #0
 1714 0086 4523     		movs	r3, #69
 1715 0088 E254     		strb	r2, [r4, r3]
 1716              	.L109:
1633:FreeRTOS\Source/queue.c **** 
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 79


 1717              		.loc 1 1633 0 discriminator 6
 1718 008a FFF7FEFF 		bl	vPortExitCritical
 1719              	.LVL272:
1636:FreeRTOS\Source/queue.c ****         {
 1720              		.loc 1 1636 0 is_stmt 1 discriminator 6
 1721 008e 01A9     		add	r1, sp, #4
 1722              	.LVL273:
 1723 0090 02A8     		add	r0, sp, #8
 1724 0092 FFF7FEFF 		bl	xTaskCheckForTimeOut
 1725              	.LVL274:
 1726 0096 0028     		cmp	r0, #0
 1727 0098 24D1     		bne	.L110
1642:FreeRTOS\Source/queue.c ****             {
 1728              		.loc 1 1642 0
 1729 009a 2000     		movs	r0, r4
 1730 009c FFF7FEFF 		bl	prvIsQueueEmpty
 1731              	.LVL275:
 1732 00a0 0028     		cmp	r0, #0
 1733 00a2 19D0     		beq	.L111
1648:FreeRTOS\Source/queue.c ****                     {
 1734              		.loc 1 1648 0
 1735 00a4 2368     		ldr	r3, [r4]
 1736 00a6 002B     		cmp	r3, #0
 1737 00a8 07D1     		bne	.L112
1650:FreeRTOS\Source/queue.c ****                         {
 1738              		.loc 1 1650 0
 1739 00aa FFF7FEFF 		bl	vPortEnterCritical
 1740              	.LVL276:
1652:FreeRTOS\Source/queue.c ****                         }
 1741              		.loc 1 1652 0
 1742 00ae A068     		ldr	r0, [r4, #8]
 1743 00b0 FFF7FEFF 		bl	xTaskPriorityInherit
 1744              	.LVL277:
 1745 00b4 0600     		movs	r6, r0
 1746              	.LVL278:
1654:FreeRTOS\Source/queue.c ****                     }
 1747              		.loc 1 1654 0
 1748 00b6 FFF7FEFF 		bl	vPortExitCritical
 1749              	.LVL279:
 1750              	.L112:
1663:FreeRTOS\Source/queue.c ****                 prvUnlockQueue( pxQueue );
 1751              		.loc 1 1663 0
 1752 00ba 2000     		movs	r0, r4
 1753 00bc 2430     		adds	r0, r0, #36
 1754 00be 0199     		ldr	r1, [sp, #4]
 1755 00c0 FFF7FEFF 		bl	vTaskPlaceOnEventList
 1756              	.LVL280:
1664:FreeRTOS\Source/queue.c **** 
 1757              		.loc 1 1664 0
 1758 00c4 2000     		movs	r0, r4
 1759 00c6 FFF7FEFF 		bl	prvUnlockQueue
 1760              	.LVL281:
1666:FreeRTOS\Source/queue.c ****                 {
 1761              		.loc 1 1666 0
 1762 00ca FFF7FEFF 		bl	xTaskResumeAll
 1763              	.LVL282:
 1764 00ce 0028     		cmp	r0, #0
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 80


 1765 00d0 9CD1     		bne	.L101
1668:FreeRTOS\Source/queue.c ****                 }
 1766              		.loc 1 1668 0
 1767 00d2 FFF7FEFF 		bl	vPortYield
 1768              	.LVL283:
 1769 00d6 99E7     		b	.L101
 1770              	.L111:
1679:FreeRTOS\Source/queue.c ****                 ( void ) xTaskResumeAll();
 1771              		.loc 1 1679 0
 1772 00d8 2000     		movs	r0, r4
 1773 00da FFF7FEFF 		bl	prvUnlockQueue
 1774              	.LVL284:
1680:FreeRTOS\Source/queue.c ****             }
 1775              		.loc 1 1680 0
 1776 00de FFF7FEFF 		bl	xTaskResumeAll
 1777              	.LVL285:
 1778 00e2 93E7     		b	.L101
 1779              	.L110:
1686:FreeRTOS\Source/queue.c ****             ( void ) xTaskResumeAll();
 1780              		.loc 1 1686 0
 1781 00e4 2000     		movs	r0, r4
 1782 00e6 FFF7FEFF 		bl	prvUnlockQueue
 1783              	.LVL286:
1687:FreeRTOS\Source/queue.c **** 
 1784              		.loc 1 1687 0
 1785 00ea FFF7FEFF 		bl	xTaskResumeAll
 1786              	.LVL287:
1693:FreeRTOS\Source/queue.c ****             {
 1787              		.loc 1 1693 0
 1788 00ee 2000     		movs	r0, r4
 1789 00f0 FFF7FEFF 		bl	prvIsQueueEmpty
 1790              	.LVL288:
 1791 00f4 0028     		cmp	r0, #0
 1792 00f6 89D0     		beq	.L101
1700:FreeRTOS\Source/queue.c ****                     {
 1793              		.loc 1 1700 0
 1794 00f8 002E     		cmp	r6, #0
 1795 00fa 0CD0     		beq	.L114
1702:FreeRTOS\Source/queue.c ****                         {
 1796              		.loc 1 1702 0
 1797 00fc FFF7FEFF 		bl	vPortEnterCritical
 1798              	.LVL289:
 1799              	.LBB13:
1711:FreeRTOS\Source/queue.c ****                             vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder
 1800              		.loc 1 1711 0
 1801 0100 2000     		movs	r0, r4
 1802 0102 FFF7FEFF 		bl	prvGetDisinheritPriorityAfterTimeout
 1803              	.LVL290:
 1804 0106 0100     		movs	r1, r0
 1805              	.LVL291:
1712:FreeRTOS\Source/queue.c ****                         }
 1806              		.loc 1 1712 0
 1807 0108 A068     		ldr	r0, [r4, #8]
 1808              	.LVL292:
 1809 010a FFF7FEFF 		bl	vTaskPriorityDisinheritAfterTimeout
 1810              	.LVL293:
 1811              	.LBE13:
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 81


1714:FreeRTOS\Source/queue.c ****                     }
 1812              		.loc 1 1714 0
 1813 010e FFF7FEFF 		bl	vPortExitCritical
 1814              	.LVL294:
1720:FreeRTOS\Source/queue.c ****             }
 1815              		.loc 1 1720 0
 1816 0112 0020     		movs	r0, #0
 1817 0114 00E0     		b	.L105
 1818              	.L114:
 1819 0116 0020     		movs	r0, #0
 1820              	.L105:
1728:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 1821              		.loc 1 1728 0
 1822 0118 04B0     		add	sp, sp, #16
 1823              		@ sp needed
 1824              	.LVL295:
 1825              	.LVL296:
 1826              	.LVL297:
 1827 011a 70BD     		pop	{r4, r5, r6, pc}
 1828              		.cfi_endproc
 1829              	.LFE46:
 1830              		.size	xQueueSemaphoreTake, .-xQueueSemaphoreTake
 1831              		.section	.text.xQueueTakeMutexRecursive,"ax",%progbits
 1832              		.align	2
 1833              		.global	xQueueTakeMutexRecursive
 1834              		.code	16
 1835              		.thumb_func
 1836              		.type	xQueueTakeMutexRecursive, %function
 1837              	xQueueTakeMutexRecursive:
 1838              	.LFB40:
 725:FreeRTOS\Source/queue.c ****         BaseType_t xReturn;
 1839              		.loc 1 725 0
 1840              		.cfi_startproc
 1841              		@ args = 0, pretend = 0, frame = 0
 1842              		@ frame_needed = 0, uses_anonymous_args = 0
 1843              	.LVL298:
 1844 0000 70B5     		push	{r4, r5, r6, lr}
 1845              		.cfi_def_cfa_offset 16
 1846              		.cfi_offset 4, -16
 1847              		.cfi_offset 5, -12
 1848              		.cfi_offset 6, -8
 1849              		.cfi_offset 14, -4
 1850 0002 0400     		movs	r4, r0
 1851 0004 0E00     		movs	r6, r1
 1852              	.LVL299:
 736:FreeRTOS\Source/queue.c ****         {
 1853              		.loc 1 736 0
 1854 0006 8568     		ldr	r5, [r0, #8]
 1855 0008 FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 1856              	.LVL300:
 1857 000c 8542     		cmp	r5, r0
 1858 000e 04D1     		bne	.L116
 738:FreeRTOS\Source/queue.c ****             xReturn = pdPASS;
 1859              		.loc 1 738 0
 1860 0010 E368     		ldr	r3, [r4, #12]
 1861 0012 0133     		adds	r3, r3, #1
 1862 0014 E360     		str	r3, [r4, #12]
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 82


 1863              	.LVL301:
 739:FreeRTOS\Source/queue.c ****         }
 1864              		.loc 1 739 0
 1865 0016 0120     		movs	r0, #1
 1866 0018 08E0     		b	.L117
 1867              	.LVL302:
 1868              	.L116:
 743:FreeRTOS\Source/queue.c **** 
 1869              		.loc 1 743 0
 1870 001a 3100     		movs	r1, r6
 1871 001c 2000     		movs	r0, r4
 1872 001e FFF7FEFF 		bl	xQueueSemaphoreTake
 1873              	.LVL303:
 748:FreeRTOS\Source/queue.c ****             {
 1874              		.loc 1 748 0
 1875 0022 0028     		cmp	r0, #0
 1876 0024 02D0     		beq	.L117
 750:FreeRTOS\Source/queue.c ****             }
 1877              		.loc 1 750 0
 1878 0026 E368     		ldr	r3, [r4, #12]
 1879 0028 0133     		adds	r3, r3, #1
 1880 002a E360     		str	r3, [r4, #12]
 1881              	.LVL304:
 1882              	.L117:
 759:FreeRTOS\Source/queue.c **** 
 1883              		.loc 1 759 0
 1884              		@ sp needed
 1885              	.LVL305:
 1886              	.LVL306:
 1887 002c 70BD     		pop	{r4, r5, r6, pc}
 1888              		.cfi_endproc
 1889              	.LFE40:
 1890              		.size	xQueueTakeMutexRecursive, .-xQueueTakeMutexRecursive
 1891 002e C046     		.section	.text.xQueuePeek,"ax",%progbits
 1892              		.align	2
 1893              		.global	xQueuePeek
 1894              		.code	16
 1895              		.thumb_func
 1896              		.type	xQueuePeek, %function
 1897              	xQueuePeek:
 1898              	.LFB47:
1734:FreeRTOS\Source/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
 1899              		.loc 1 1734 0
 1900              		.cfi_startproc
 1901              		@ args = 0, pretend = 0, frame = 16
 1902              		@ frame_needed = 0, uses_anonymous_args = 0
 1903              	.LVL307:
 1904 0000 70B5     		push	{r4, r5, r6, lr}
 1905              		.cfi_def_cfa_offset 16
 1906              		.cfi_offset 4, -16
 1907              		.cfi_offset 5, -12
 1908              		.cfi_offset 6, -8
 1909              		.cfi_offset 14, -4
 1910 0002 84B0     		sub	sp, sp, #16
 1911              		.cfi_def_cfa_offset 32
 1912 0004 0400     		movs	r4, r0
 1913 0006 0D00     		movs	r5, r1
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 83


 1914 0008 0192     		str	r2, [sp, #4]
 1915              	.LVL308:
1735:FreeRTOS\Source/queue.c ****     TimeOut_t xTimeOut;
 1916              		.loc 1 1735 0
 1917 000a 0026     		movs	r6, #0
 1918              	.LVL309:
 1919              	.L119:
1759:FreeRTOS\Source/queue.c ****         {
 1920              		.loc 1 1759 0
 1921 000c FFF7FEFF 		bl	vPortEnterCritical
 1922              	.LVL310:
 1923              	.LBB14:
1761:FreeRTOS\Source/queue.c **** 
 1924              		.loc 1 1761 0
 1925 0010 A36B     		ldr	r3, [r4, #56]
 1926              	.LVL311:
1765:FreeRTOS\Source/queue.c ****             {
 1927              		.loc 1 1765 0
 1928 0012 002B     		cmp	r3, #0
 1929 0014 14D0     		beq	.L120
1770:FreeRTOS\Source/queue.c **** 
 1930              		.loc 1 1770 0
 1931 0016 E668     		ldr	r6, [r4, #12]
 1932              	.LVL312:
1772:FreeRTOS\Source/queue.c ****                 traceQUEUE_PEEK( pxQueue );
 1933              		.loc 1 1772 0
 1934 0018 2900     		movs	r1, r5
 1935 001a 2000     		movs	r0, r4
 1936 001c FFF7FEFF 		bl	prvCopyDataFromQueue
 1937              	.LVL313:
1776:FreeRTOS\Source/queue.c **** 
 1938              		.loc 1 1776 0
 1939 0020 E660     		str	r6, [r4, #12]
1780:FreeRTOS\Source/queue.c ****                 {
 1940              		.loc 1 1780 0
 1941 0022 636A     		ldr	r3, [r4, #36]
 1942 0024 002B     		cmp	r3, #0
 1943 0026 07D0     		beq	.L121
1782:FreeRTOS\Source/queue.c ****                     {
 1944              		.loc 1 1782 0
 1945 0028 2000     		movs	r0, r4
 1946 002a 2430     		adds	r0, r0, #36
 1947 002c FFF7FEFF 		bl	xTaskRemoveFromEventList
 1948              	.LVL314:
 1949 0030 0028     		cmp	r0, #0
 1950 0032 01D0     		beq	.L121
1785:FreeRTOS\Source/queue.c ****                     }
 1951              		.loc 1 1785 0
 1952 0034 FFF7FEFF 		bl	vPortYield
 1953              	.LVL315:
 1954              	.L121:
1797:FreeRTOS\Source/queue.c ****                 return pdPASS;
 1955              		.loc 1 1797 0
 1956 0038 FFF7FEFF 		bl	vPortExitCritical
 1957              	.LVL316:
1798:FreeRTOS\Source/queue.c ****             }
 1958              		.loc 1 1798 0
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 84


 1959 003c 0120     		movs	r0, #1
 1960 003e 4FE0     		b	.L122
 1961              	.LVL317:
 1962              	.L120:
1802:FreeRTOS\Source/queue.c ****                 {
 1963              		.loc 1 1802 0
 1964 0040 019B     		ldr	r3, [sp, #4]
 1965              	.LVL318:
 1966 0042 002B     		cmp	r3, #0
 1967 0044 03D1     		bne	.L123
1806:FreeRTOS\Source/queue.c ****                     traceQUEUE_PEEK_FAILED( pxQueue );
 1968              		.loc 1 1806 0
 1969 0046 FFF7FEFF 		bl	vPortExitCritical
 1970              	.LVL319:
1808:FreeRTOS\Source/queue.c ****                 }
 1971              		.loc 1 1808 0
 1972 004a 0020     		movs	r0, #0
 1973 004c 48E0     		b	.L122
 1974              	.L123:
1810:FreeRTOS\Source/queue.c ****                 {
 1975              		.loc 1 1810 0
 1976 004e 002E     		cmp	r6, #0
 1977 0050 03D1     		bne	.L124
1815:FreeRTOS\Source/queue.c ****                     xEntryTimeSet = pdTRUE;
 1978              		.loc 1 1815 0
 1979 0052 02A8     		add	r0, sp, #8
 1980 0054 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 1981              	.LVL320:
1816:FreeRTOS\Source/queue.c ****                 }
 1982              		.loc 1 1816 0
 1983 0058 0136     		adds	r6, r6, #1
 1984              	.LVL321:
 1985              	.L124:
 1986              	.LBE14:
1825:FreeRTOS\Source/queue.c **** 
 1987              		.loc 1 1825 0
 1988 005a FFF7FEFF 		bl	vPortExitCritical
 1989              	.LVL322:
1830:FreeRTOS\Source/queue.c ****         prvLockQueue( pxQueue );
 1990              		.loc 1 1830 0
 1991 005e FFF7FEFF 		bl	vTaskSuspendAll
 1992              	.LVL323:
1831:FreeRTOS\Source/queue.c **** 
 1993              		.loc 1 1831 0
 1994 0062 FFF7FEFF 		bl	vPortEnterCritical
 1995              	.LVL324:
 1996 0066 4423     		movs	r3, #68
 1997 0068 E35C     		ldrb	r3, [r4, r3]
 1998 006a 5BB2     		sxtb	r3, r3
 1999 006c 0133     		adds	r3, r3, #1
 2000 006e 02D1     		bne	.L125
1831:FreeRTOS\Source/queue.c **** 
 2001              		.loc 1 1831 0 is_stmt 0 discriminator 1
 2002 0070 0022     		movs	r2, #0
 2003 0072 4423     		movs	r3, #68
 2004 0074 E254     		strb	r2, [r4, r3]
 2005              	.L125:
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 85


1831:FreeRTOS\Source/queue.c **** 
 2006              		.loc 1 1831 0 discriminator 3
 2007 0076 4523     		movs	r3, #69
 2008 0078 E35C     		ldrb	r3, [r4, r3]
 2009 007a 5BB2     		sxtb	r3, r3
 2010 007c 0133     		adds	r3, r3, #1
 2011 007e 02D1     		bne	.L126
1831:FreeRTOS\Source/queue.c **** 
 2012              		.loc 1 1831 0 discriminator 4
 2013 0080 0022     		movs	r2, #0
 2014 0082 4523     		movs	r3, #69
 2015 0084 E254     		strb	r2, [r4, r3]
 2016              	.L126:
1831:FreeRTOS\Source/queue.c **** 
 2017              		.loc 1 1831 0 discriminator 6
 2018 0086 FFF7FEFF 		bl	vPortExitCritical
 2019              	.LVL325:
1834:FreeRTOS\Source/queue.c ****         {
 2020              		.loc 1 1834 0 is_stmt 1 discriminator 6
 2021 008a 01A9     		add	r1, sp, #4
 2022              	.LVL326:
 2023 008c 02A8     		add	r0, sp, #8
 2024 008e FFF7FEFF 		bl	xTaskCheckForTimeOut
 2025              	.LVL327:
 2026 0092 0028     		cmp	r0, #0
 2027 0094 19D1     		bne	.L127
1838:FreeRTOS\Source/queue.c ****             {
 2028              		.loc 1 1838 0
 2029 0096 2000     		movs	r0, r4
 2030 0098 FFF7FEFF 		bl	prvIsQueueEmpty
 2031              	.LVL328:
 2032 009c 0028     		cmp	r0, #0
 2033 009e 0ED0     		beq	.L128
1841:FreeRTOS\Source/queue.c ****                 prvUnlockQueue( pxQueue );
 2034              		.loc 1 1841 0
 2035 00a0 2000     		movs	r0, r4
 2036 00a2 2430     		adds	r0, r0, #36
 2037 00a4 0199     		ldr	r1, [sp, #4]
 2038 00a6 FFF7FEFF 		bl	vTaskPlaceOnEventList
 2039              	.LVL329:
1842:FreeRTOS\Source/queue.c **** 
 2040              		.loc 1 1842 0
 2041 00aa 2000     		movs	r0, r4
 2042 00ac FFF7FEFF 		bl	prvUnlockQueue
 2043              	.LVL330:
1844:FreeRTOS\Source/queue.c ****                 {
 2044              		.loc 1 1844 0
 2045 00b0 FFF7FEFF 		bl	xTaskResumeAll
 2046              	.LVL331:
 2047 00b4 0028     		cmp	r0, #0
 2048 00b6 A9D1     		bne	.L119
1846:FreeRTOS\Source/queue.c ****                 }
 2049              		.loc 1 1846 0
 2050 00b8 FFF7FEFF 		bl	vPortYield
 2051              	.LVL332:
 2052 00bc A6E7     		b	.L119
 2053              	.L128:
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 86


1857:FreeRTOS\Source/queue.c ****                 ( void ) xTaskResumeAll();
 2054              		.loc 1 1857 0
 2055 00be 2000     		movs	r0, r4
 2056 00c0 FFF7FEFF 		bl	prvUnlockQueue
 2057              	.LVL333:
1858:FreeRTOS\Source/queue.c ****             }
 2058              		.loc 1 1858 0
 2059 00c4 FFF7FEFF 		bl	xTaskResumeAll
 2060              	.LVL334:
 2061 00c8 A0E7     		b	.L119
 2062              	.L127:
1865:FreeRTOS\Source/queue.c ****             ( void ) xTaskResumeAll();
 2063              		.loc 1 1865 0
 2064 00ca 2000     		movs	r0, r4
 2065 00cc FFF7FEFF 		bl	prvUnlockQueue
 2066              	.LVL335:
1866:FreeRTOS\Source/queue.c **** 
 2067              		.loc 1 1866 0
 2068 00d0 FFF7FEFF 		bl	xTaskResumeAll
 2069              	.LVL336:
1868:FreeRTOS\Source/queue.c ****             {
 2070              		.loc 1 1868 0
 2071 00d4 2000     		movs	r0, r4
 2072 00d6 FFF7FEFF 		bl	prvIsQueueEmpty
 2073              	.LVL337:
 2074 00da 0028     		cmp	r0, #0
 2075 00dc 96D0     		beq	.L119
1871:FreeRTOS\Source/queue.c ****             }
 2076              		.loc 1 1871 0
 2077 00de 0020     		movs	r0, #0
 2078              	.LVL338:
 2079              	.L122:
1879:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 2080              		.loc 1 1879 0
 2081 00e0 04B0     		add	sp, sp, #16
 2082              		@ sp needed
 2083              	.LVL339:
 2084              	.LVL340:
 2085 00e2 70BD     		pop	{r4, r5, r6, pc}
 2086              		.cfi_endproc
 2087              	.LFE47:
 2088              		.size	xQueuePeek, .-xQueuePeek
 2089              		.section	.text.xQueueReceiveFromISR,"ax",%progbits
 2090              		.align	2
 2091              		.global	xQueueReceiveFromISR
 2092              		.code	16
 2093              		.thumb_func
 2094              		.type	xQueueReceiveFromISR, %function
 2095              	xQueueReceiveFromISR:
 2096              	.LFB48:
1885:FreeRTOS\Source/queue.c ****     BaseType_t xReturn;
 2097              		.loc 1 1885 0
 2098              		.cfi_startproc
 2099              		@ args = 0, pretend = 0, frame = 8
 2100              		@ frame_needed = 0, uses_anonymous_args = 0
 2101              	.LVL341:
 2102 0000 F0B5     		push	{r4, r5, r6, r7, lr}
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 87


 2103              		.cfi_def_cfa_offset 20
 2104              		.cfi_offset 4, -20
 2105              		.cfi_offset 5, -16
 2106              		.cfi_offset 6, -12
 2107              		.cfi_offset 7, -8
 2108              		.cfi_offset 14, -4
 2109 0002 83B0     		sub	sp, sp, #12
 2110              		.cfi_def_cfa_offset 32
 2111 0004 0400     		movs	r4, r0
 2112 0006 0091     		str	r1, [sp]
 2113 0008 0192     		str	r2, [sp, #4]
 2114              	.LVL342:
1909:FreeRTOS\Source/queue.c ****     {
 2115              		.loc 1 1909 0
 2116 000a FFF7FEFF 		bl	ulSetInterruptMaskFromISR
 2117              	.LVL343:
 2118 000e 0500     		movs	r5, r0
 2119              	.LVL344:
 2120              	.LBB15:
1911:FreeRTOS\Source/queue.c **** 
 2121              		.loc 1 1911 0
 2122 0010 A76B     		ldr	r7, [r4, #56]
 2123              	.LVL345:
1914:FreeRTOS\Source/queue.c ****         {
 2124              		.loc 1 1914 0
 2125 0012 002F     		cmp	r7, #0
 2126 0014 24D0     		beq	.L133
 2127              	.LBB16:
1916:FreeRTOS\Source/queue.c **** 
 2128              		.loc 1 1916 0
 2129 0016 4423     		movs	r3, #68
 2130 0018 E35C     		ldrb	r3, [r4, r3]
 2131 001a 5EB2     		sxtb	r6, r3
 2132              	.LVL346:
1920:FreeRTOS\Source/queue.c ****             pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 2133              		.loc 1 1920 0
 2134 001c 0099     		ldr	r1, [sp]
 2135 001e 2000     		movs	r0, r4
 2136              	.LVL347:
 2137 0020 FFF7FEFF 		bl	prvCopyDataFromQueue
 2138              	.LVL348:
1921:FreeRTOS\Source/queue.c **** 
 2139              		.loc 1 1921 0
 2140 0024 7B1E     		subs	r3, r7, #1
 2141 0026 A363     		str	r3, [r4, #56]
1927:FreeRTOS\Source/queue.c ****             {
 2142              		.loc 1 1927 0
 2143 0028 731C     		adds	r3, r6, #1
 2144 002a 0FD1     		bne	.L132
1929:FreeRTOS\Source/queue.c ****                 {
 2145              		.loc 1 1929 0
 2146 002c 2369     		ldr	r3, [r4, #16]
 2147 002e 002B     		cmp	r3, #0
 2148 0030 18D0     		beq	.L134
1931:FreeRTOS\Source/queue.c ****                     {
 2149              		.loc 1 1931 0
 2150 0032 2000     		movs	r0, r4
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 88


 2151 0034 1030     		adds	r0, r0, #16
 2152 0036 FFF7FEFF 		bl	xTaskRemoveFromEventList
 2153              	.LVL349:
 2154 003a 0028     		cmp	r0, #0
 2155 003c 14D0     		beq	.L135
1935:FreeRTOS\Source/queue.c ****                         {
 2156              		.loc 1 1935 0
 2157 003e 019A     		ldr	r2, [sp, #4]
 2158 0040 002A     		cmp	r2, #0
 2159 0042 13D0     		beq	.L136
1937:FreeRTOS\Source/queue.c ****                         }
 2160              		.loc 1 1937 0
 2161 0044 0123     		movs	r3, #1
 2162 0046 1360     		str	r3, [r2]
1961:FreeRTOS\Source/queue.c ****         }
 2163              		.loc 1 1961 0
 2164 0048 0124     		movs	r4, #1
 2165              	.LVL350:
 2166 004a 12E0     		b	.L131
 2167              	.LVL351:
 2168              	.L132:
 2169              	.LBB17:
1958:FreeRTOS\Source/queue.c ****             }
 2170              		.loc 1 1958 0
 2171 004c FFF7FEFF 		bl	uxTaskGetNumberOfTasks
 2172              	.LVL352:
 2173 0050 B042     		cmp	r0, r6
 2174 0052 0DD9     		bls	.L137
1958:FreeRTOS\Source/queue.c ****             }
 2175              		.loc 1 1958 0 is_stmt 0 discriminator 1
 2176 0054 731C     		adds	r3, r6, #1
 2177 0056 5BB2     		sxtb	r3, r3
 2178 0058 4422     		movs	r2, #68
 2179 005a A354     		strb	r3, [r4, r2]
 2180              	.LBE17:
1961:FreeRTOS\Source/queue.c ****         }
 2181              		.loc 1 1961 0 is_stmt 1 discriminator 1
 2182 005c 0124     		movs	r4, #1
 2183              	.LVL353:
 2184 005e 08E0     		b	.L131
 2185              	.LVL354:
 2186              	.L133:
 2187              	.LBE16:
1965:FreeRTOS\Source/queue.c ****             traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 2188              		.loc 1 1965 0
 2189 0060 0024     		movs	r4, #0
 2190              	.LVL355:
 2191 0062 06E0     		b	.L131
 2192              	.LVL356:
 2193              	.L134:
 2194              	.LBB18:
1961:FreeRTOS\Source/queue.c ****         }
 2195              		.loc 1 1961 0
 2196 0064 0124     		movs	r4, #1
 2197              	.LVL357:
 2198 0066 04E0     		b	.L131
 2199              	.LVL358:
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 89


 2200              	.L135:
 2201 0068 0124     		movs	r4, #1
 2202              	.LVL359:
 2203 006a 02E0     		b	.L131
 2204              	.LVL360:
 2205              	.L136:
 2206 006c 0124     		movs	r4, #1
 2207              	.LVL361:
 2208 006e 00E0     		b	.L131
 2209              	.LVL362:
 2210              	.L137:
 2211 0070 0124     		movs	r4, #1
 2212              	.LVL363:
 2213              	.L131:
 2214              	.LBE18:
 2215              	.LBE15:
1969:FreeRTOS\Source/queue.c **** 
 2216              		.loc 1 1969 0
 2217 0072 2800     		movs	r0, r5
 2218 0074 FFF7FEFF 		bl	vClearInterruptMaskFromISR
 2219              	.LVL364:
1972:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 2220              		.loc 1 1972 0
 2221 0078 2000     		movs	r0, r4
 2222 007a 03B0     		add	sp, sp, #12
 2223              	.LVL365:
 2224              		@ sp needed
 2225              	.LVL366:
 2226              	.LVL367:
 2227              	.LVL368:
 2228 007c F0BD     		pop	{r4, r5, r6, r7, pc}
 2229              		.cfi_endproc
 2230              	.LFE48:
 2231              		.size	xQueueReceiveFromISR, .-xQueueReceiveFromISR
 2232 007e C046     		.section	.text.xQueuePeekFromISR,"ax",%progbits
 2233              		.align	2
 2234              		.global	xQueuePeekFromISR
 2235              		.code	16
 2236              		.thumb_func
 2237              		.type	xQueuePeekFromISR, %function
 2238              	xQueuePeekFromISR:
 2239              	.LFB49:
1977:FreeRTOS\Source/queue.c ****     BaseType_t xReturn;
 2240              		.loc 1 1977 0
 2241              		.cfi_startproc
 2242              		@ args = 0, pretend = 0, frame = 0
 2243              		@ frame_needed = 0, uses_anonymous_args = 0
 2244              	.LVL369:
 2245 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2246              		.cfi_def_cfa_offset 24
 2247              		.cfi_offset 3, -24
 2248              		.cfi_offset 4, -20
 2249              		.cfi_offset 5, -16
 2250              		.cfi_offset 6, -12
 2251              		.cfi_offset 7, -8
 2252              		.cfi_offset 14, -4
 2253 0002 0400     		movs	r4, r0
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 90


 2254 0004 0E00     		movs	r6, r1
 2255              	.LVL370:
2003:FreeRTOS\Source/queue.c ****     {
 2256              		.loc 1 2003 0
 2257 0006 FFF7FEFF 		bl	ulSetInterruptMaskFromISR
 2258              	.LVL371:
 2259 000a 0500     		movs	r5, r0
 2260              	.LVL372:
2006:FreeRTOS\Source/queue.c ****         {
 2261              		.loc 1 2006 0
 2262 000c A36B     		ldr	r3, [r4, #56]
 2263 000e 002B     		cmp	r3, #0
 2264 0010 07D0     		beq	.L140
2012:FreeRTOS\Source/queue.c ****             prvCopyDataFromQueue( pxQueue, pvBuffer );
 2265              		.loc 1 2012 0
 2266 0012 E768     		ldr	r7, [r4, #12]
 2267              	.LVL373:
2013:FreeRTOS\Source/queue.c ****             pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 2268              		.loc 1 2013 0
 2269 0014 3100     		movs	r1, r6
 2270 0016 2000     		movs	r0, r4
 2271              	.LVL374:
 2272 0018 FFF7FEFF 		bl	prvCopyDataFromQueue
 2273              	.LVL375:
2014:FreeRTOS\Source/queue.c **** 
 2274              		.loc 1 2014 0
 2275 001c E760     		str	r7, [r4, #12]
 2276              	.LVL376:
2016:FreeRTOS\Source/queue.c ****         }
 2277              		.loc 1 2016 0
 2278 001e 0124     		movs	r4, #1
 2279              	.LVL377:
 2280 0020 00E0     		b	.L139
 2281              	.LVL378:
 2282              	.L140:
2020:FreeRTOS\Source/queue.c ****             traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
 2283              		.loc 1 2020 0
 2284 0022 0024     		movs	r4, #0
 2285              	.LVL379:
 2286              	.L139:
2024:FreeRTOS\Source/queue.c **** 
 2287              		.loc 1 2024 0
 2288 0024 2800     		movs	r0, r5
 2289 0026 FFF7FEFF 		bl	vClearInterruptMaskFromISR
 2290              	.LVL380:
2027:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 2291              		.loc 1 2027 0
 2292 002a 2000     		movs	r0, r4
 2293              		@ sp needed
 2294              	.LVL381:
 2295              	.LVL382:
 2296              	.LVL383:
 2297 002c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2298              		.cfi_endproc
 2299              	.LFE49:
 2300              		.size	xQueuePeekFromISR, .-xQueuePeekFromISR
 2301 002e C046     		.section	.text.uxQueueMessagesWaiting,"ax",%progbits
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 91


 2302              		.align	2
 2303              		.global	uxQueueMessagesWaiting
 2304              		.code	16
 2305              		.thumb_func
 2306              		.type	uxQueueMessagesWaiting, %function
 2307              	uxQueueMessagesWaiting:
 2308              	.LFB50:
2031:FreeRTOS\Source/queue.c ****     UBaseType_t uxReturn;
 2309              		.loc 1 2031 0
 2310              		.cfi_startproc
 2311              		@ args = 0, pretend = 0, frame = 0
 2312              		@ frame_needed = 0, uses_anonymous_args = 0
 2313              	.LVL384:
 2314 0000 10B5     		push	{r4, lr}
 2315              		.cfi_def_cfa_offset 8
 2316              		.cfi_offset 4, -8
 2317              		.cfi_offset 14, -4
 2318 0002 0400     		movs	r4, r0
2036:FreeRTOS\Source/queue.c ****     {
 2319              		.loc 1 2036 0
 2320 0004 FFF7FEFF 		bl	vPortEnterCritical
 2321              	.LVL385:
2038:FreeRTOS\Source/queue.c ****     }
 2322              		.loc 1 2038 0
 2323 0008 A46B     		ldr	r4, [r4, #56]
 2324              	.LVL386:
2040:FreeRTOS\Source/queue.c **** 
 2325              		.loc 1 2040 0
 2326 000a FFF7FEFF 		bl	vPortExitCritical
 2327              	.LVL387:
2043:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 2328              		.loc 1 2043 0
 2329 000e 2000     		movs	r0, r4
 2330              		@ sp needed
 2331              	.LVL388:
 2332 0010 10BD     		pop	{r4, pc}
 2333              		.cfi_endproc
 2334              	.LFE50:
 2335              		.size	uxQueueMessagesWaiting, .-uxQueueMessagesWaiting
 2336 0012 C046     		.section	.text.uxQueueSpacesAvailable,"ax",%progbits
 2337              		.align	2
 2338              		.global	uxQueueSpacesAvailable
 2339              		.code	16
 2340              		.thumb_func
 2341              		.type	uxQueueSpacesAvailable, %function
 2342              	uxQueueSpacesAvailable:
 2343              	.LFB51:
2047:FreeRTOS\Source/queue.c ****     UBaseType_t uxReturn;
 2344              		.loc 1 2047 0
 2345              		.cfi_startproc
 2346              		@ args = 0, pretend = 0, frame = 0
 2347              		@ frame_needed = 0, uses_anonymous_args = 0
 2348              	.LVL389:
 2349 0000 10B5     		push	{r4, lr}
 2350              		.cfi_def_cfa_offset 8
 2351              		.cfi_offset 4, -8
 2352              		.cfi_offset 14, -4
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 92


 2353 0002 0400     		movs	r4, r0
 2354              	.LVL390:
2053:FreeRTOS\Source/queue.c ****     {
 2355              		.loc 1 2053 0
 2356 0004 FFF7FEFF 		bl	vPortEnterCritical
 2357              	.LVL391:
2055:FreeRTOS\Source/queue.c ****     }
 2358              		.loc 1 2055 0
 2359 0008 E36B     		ldr	r3, [r4, #60]
 2360 000a A46B     		ldr	r4, [r4, #56]
 2361              	.LVL392:
 2362 000c 1C1B     		subs	r4, r3, r4
 2363              	.LVL393:
2057:FreeRTOS\Source/queue.c **** 
 2364              		.loc 1 2057 0
 2365 000e FFF7FEFF 		bl	vPortExitCritical
 2366              	.LVL394:
2060:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 2367              		.loc 1 2060 0
 2368 0012 2000     		movs	r0, r4
 2369              		@ sp needed
 2370              	.LVL395:
 2371 0014 10BD     		pop	{r4, pc}
 2372              		.cfi_endproc
 2373              	.LFE51:
 2374              		.size	uxQueueSpacesAvailable, .-uxQueueSpacesAvailable
 2375 0016 C046     		.section	.text.uxQueueMessagesWaitingFromISR,"ax",%progbits
 2376              		.align	2
 2377              		.global	uxQueueMessagesWaitingFromISR
 2378              		.code	16
 2379              		.thumb_func
 2380              		.type	uxQueueMessagesWaitingFromISR, %function
 2381              	uxQueueMessagesWaitingFromISR:
 2382              	.LFB52:
2064:FreeRTOS\Source/queue.c ****     UBaseType_t uxReturn;
 2383              		.loc 1 2064 0
 2384              		.cfi_startproc
 2385              		@ args = 0, pretend = 0, frame = 0
 2386              		@ frame_needed = 0, uses_anonymous_args = 0
 2387              		@ link register save eliminated.
 2388              	.LVL396:
2069:FreeRTOS\Source/queue.c **** 
 2389              		.loc 1 2069 0
 2390 0000 806B     		ldr	r0, [r0, #56]
 2391              	.LVL397:
2072:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 2392              		.loc 1 2072 0
 2393              		@ sp needed
 2394 0002 7047     		bx	lr
 2395              		.cfi_endproc
 2396              	.LFE52:
 2397              		.size	uxQueueMessagesWaitingFromISR, .-uxQueueMessagesWaitingFromISR
 2398              		.section	.text.xQueueIsQueueEmptyFromISR,"ax",%progbits
 2399              		.align	2
 2400              		.global	xQueueIsQueueEmptyFromISR
 2401              		.code	16
 2402              		.thumb_func
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 93


 2403              		.type	xQueueIsQueueEmptyFromISR, %function
 2404              	xQueueIsQueueEmptyFromISR:
 2405              	.LFB59:
2421:FreeRTOS\Source/queue.c ****     BaseType_t xReturn;
 2406              		.loc 1 2421 0
 2407              		.cfi_startproc
 2408              		@ args = 0, pretend = 0, frame = 0
 2409              		@ frame_needed = 0, uses_anonymous_args = 0
 2410              		@ link register save eliminated.
 2411              	.LVL398:
2427:FreeRTOS\Source/queue.c ****     {
 2412              		.loc 1 2427 0
 2413 0000 836B     		ldr	r3, [r0, #56]
 2414 0002 002B     		cmp	r3, #0
 2415 0004 01D1     		bne	.L146
2429:FreeRTOS\Source/queue.c ****     }
 2416              		.loc 1 2429 0
 2417 0006 0120     		movs	r0, #1
 2418              	.LVL399:
 2419 0008 00E0     		b	.L145
 2420              	.LVL400:
 2421              	.L146:
2433:FreeRTOS\Source/queue.c ****     }
 2422              		.loc 1 2433 0
 2423 000a 0020     		movs	r0, #0
 2424              	.LVL401:
 2425              	.L145:
2437:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 2426              		.loc 1 2437 0
 2427              		@ sp needed
 2428 000c 7047     		bx	lr
 2429              		.cfi_endproc
 2430              	.LFE59:
 2431              		.size	xQueueIsQueueEmptyFromISR, .-xQueueIsQueueEmptyFromISR
 2432 000e C046     		.section	.text.xQueueIsQueueFullFromISR,"ax",%progbits
 2433              		.align	2
 2434              		.global	xQueueIsQueueFullFromISR
 2435              		.code	16
 2436              		.thumb_func
 2437              		.type	xQueueIsQueueFullFromISR, %function
 2438              	xQueueIsQueueFullFromISR:
 2439              	.LFB61:
2459:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
2460:FreeRTOS\Source/queue.c **** 
2461:FreeRTOS\Source/queue.c **** BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
2462:FreeRTOS\Source/queue.c **** {
 2440              		.loc 1 2462 0
 2441              		.cfi_startproc
 2442              		@ args = 0, pretend = 0, frame = 0
 2443              		@ frame_needed = 0, uses_anonymous_args = 0
 2444              		@ link register save eliminated.
 2445              	.LVL402:
2463:FreeRTOS\Source/queue.c ****     BaseType_t xReturn;
2464:FreeRTOS\Source/queue.c ****     Queue_t * const pxQueue = xQueue;
2465:FreeRTOS\Source/queue.c **** 
2466:FreeRTOS\Source/queue.c ****     configASSERT( pxQueue );
2467:FreeRTOS\Source/queue.c **** 
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 94


2468:FreeRTOS\Source/queue.c ****     if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 2446              		.loc 1 2468 0
 2447 0000 826B     		ldr	r2, [r0, #56]
 2448 0002 C36B     		ldr	r3, [r0, #60]
 2449 0004 9A42     		cmp	r2, r3
 2450 0006 01D1     		bne	.L149
2469:FreeRTOS\Source/queue.c ****     {
2470:FreeRTOS\Source/queue.c ****         xReturn = pdTRUE;
 2451              		.loc 1 2470 0
 2452 0008 0120     		movs	r0, #1
 2453              	.LVL403:
 2454 000a 00E0     		b	.L148
 2455              	.LVL404:
 2456              	.L149:
2471:FreeRTOS\Source/queue.c ****     }
2472:FreeRTOS\Source/queue.c ****     else
2473:FreeRTOS\Source/queue.c ****     {
2474:FreeRTOS\Source/queue.c ****         xReturn = pdFALSE;
 2457              		.loc 1 2474 0
 2458 000c 0020     		movs	r0, #0
 2459              	.LVL405:
 2460              	.L148:
2475:FreeRTOS\Source/queue.c ****     }
2476:FreeRTOS\Source/queue.c **** 
2477:FreeRTOS\Source/queue.c ****     return xReturn;
2478:FreeRTOS\Source/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 2461              		.loc 1 2478 0
 2462              		@ sp needed
 2463 000e 7047     		bx	lr
 2464              		.cfi_endproc
 2465              	.LFE61:
 2466              		.size	xQueueIsQueueFullFromISR, .-xQueueIsQueueFullFromISR
 2467              		.section	.text.vQueueAddToRegistry,"ax",%progbits
 2468              		.align	2
 2469              		.global	vQueueAddToRegistry
 2470              		.code	16
 2471              		.thumb_func
 2472              		.type	vQueueAddToRegistry, %function
 2473              	vQueueAddToRegistry:
 2474              	.LFB62:
2479:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
2480:FreeRTOS\Source/queue.c **** 
2481:FreeRTOS\Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2482:FreeRTOS\Source/queue.c **** 
2483:FreeRTOS\Source/queue.c ****     BaseType_t xQueueCRSend( QueueHandle_t xQueue,
2484:FreeRTOS\Source/queue.c ****                              const void * pvItemToQueue,
2485:FreeRTOS\Source/queue.c ****                              TickType_t xTicksToWait )
2486:FreeRTOS\Source/queue.c ****     {
2487:FreeRTOS\Source/queue.c ****         BaseType_t xReturn;
2488:FreeRTOS\Source/queue.c ****         Queue_t * const pxQueue = xQueue;
2489:FreeRTOS\Source/queue.c **** 
2490:FreeRTOS\Source/queue.c ****         /* If the queue is already full we may have to block.  A critical section
2491:FreeRTOS\Source/queue.c ****          * is required to prevent an interrupt removing something from the queue
2492:FreeRTOS\Source/queue.c ****          * between the check to see if the queue is full and blocking on the queue. */
2493:FreeRTOS\Source/queue.c ****         portDISABLE_INTERRUPTS();
2494:FreeRTOS\Source/queue.c ****         {
2495:FreeRTOS\Source/queue.c ****             if( prvIsQueueFull( pxQueue ) != pdFALSE )
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 95


2496:FreeRTOS\Source/queue.c ****             {
2497:FreeRTOS\Source/queue.c ****                 /* The queue is full - do we want to block or just leave without
2498:FreeRTOS\Source/queue.c ****                  * posting? */
2499:FreeRTOS\Source/queue.c ****                 if( xTicksToWait > ( TickType_t ) 0 )
2500:FreeRTOS\Source/queue.c ****                 {
2501:FreeRTOS\Source/queue.c ****                     /* As this is called from a coroutine we cannot block directly, but
2502:FreeRTOS\Source/queue.c ****                      * return indicating that we need to block. */
2503:FreeRTOS\Source/queue.c ****                     vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
2504:FreeRTOS\Source/queue.c ****                     portENABLE_INTERRUPTS();
2505:FreeRTOS\Source/queue.c ****                     return errQUEUE_BLOCKED;
2506:FreeRTOS\Source/queue.c ****                 }
2507:FreeRTOS\Source/queue.c ****                 else
2508:FreeRTOS\Source/queue.c ****                 {
2509:FreeRTOS\Source/queue.c ****                     portENABLE_INTERRUPTS();
2510:FreeRTOS\Source/queue.c ****                     return errQUEUE_FULL;
2511:FreeRTOS\Source/queue.c ****                 }
2512:FreeRTOS\Source/queue.c ****             }
2513:FreeRTOS\Source/queue.c ****         }
2514:FreeRTOS\Source/queue.c ****         portENABLE_INTERRUPTS();
2515:FreeRTOS\Source/queue.c **** 
2516:FreeRTOS\Source/queue.c ****         portDISABLE_INTERRUPTS();
2517:FreeRTOS\Source/queue.c ****         {
2518:FreeRTOS\Source/queue.c ****             if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2519:FreeRTOS\Source/queue.c ****             {
2520:FreeRTOS\Source/queue.c ****                 /* There is room in the queue, copy the data into the queue. */
2521:FreeRTOS\Source/queue.c ****                 prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2522:FreeRTOS\Source/queue.c ****                 xReturn = pdPASS;
2523:FreeRTOS\Source/queue.c **** 
2524:FreeRTOS\Source/queue.c ****                 /* Were any co-routines waiting for data to become available? */
2525:FreeRTOS\Source/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2526:FreeRTOS\Source/queue.c ****                 {
2527:FreeRTOS\Source/queue.c ****                     /* In this instance the co-routine could be placed directly
2528:FreeRTOS\Source/queue.c ****                      * into the ready list as we are within a critical section.
2529:FreeRTOS\Source/queue.c ****                      * Instead the same pending ready list mechanism is used as if
2530:FreeRTOS\Source/queue.c ****                      * the event were caused from within an interrupt. */
2531:FreeRTOS\Source/queue.c ****                     if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pd
2532:FreeRTOS\Source/queue.c ****                     {
2533:FreeRTOS\Source/queue.c ****                         /* The co-routine waiting has a higher priority so record
2534:FreeRTOS\Source/queue.c ****                          * that a yield might be appropriate. */
2535:FreeRTOS\Source/queue.c ****                         xReturn = errQUEUE_YIELD;
2536:FreeRTOS\Source/queue.c ****                     }
2537:FreeRTOS\Source/queue.c ****                     else
2538:FreeRTOS\Source/queue.c ****                     {
2539:FreeRTOS\Source/queue.c ****                         mtCOVERAGE_TEST_MARKER();
2540:FreeRTOS\Source/queue.c ****                     }
2541:FreeRTOS\Source/queue.c ****                 }
2542:FreeRTOS\Source/queue.c ****                 else
2543:FreeRTOS\Source/queue.c ****                 {
2544:FreeRTOS\Source/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2545:FreeRTOS\Source/queue.c ****                 }
2546:FreeRTOS\Source/queue.c ****             }
2547:FreeRTOS\Source/queue.c ****             else
2548:FreeRTOS\Source/queue.c ****             {
2549:FreeRTOS\Source/queue.c ****                 xReturn = errQUEUE_FULL;
2550:FreeRTOS\Source/queue.c ****             }
2551:FreeRTOS\Source/queue.c ****         }
2552:FreeRTOS\Source/queue.c ****         portENABLE_INTERRUPTS();
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 96


2553:FreeRTOS\Source/queue.c **** 
2554:FreeRTOS\Source/queue.c ****         return xReturn;
2555:FreeRTOS\Source/queue.c ****     }
2556:FreeRTOS\Source/queue.c **** 
2557:FreeRTOS\Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2558:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
2559:FreeRTOS\Source/queue.c **** 
2560:FreeRTOS\Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2561:FreeRTOS\Source/queue.c **** 
2562:FreeRTOS\Source/queue.c ****     BaseType_t xQueueCRReceive( QueueHandle_t xQueue,
2563:FreeRTOS\Source/queue.c ****                                 void * pvBuffer,
2564:FreeRTOS\Source/queue.c ****                                 TickType_t xTicksToWait )
2565:FreeRTOS\Source/queue.c ****     {
2566:FreeRTOS\Source/queue.c ****         BaseType_t xReturn;
2567:FreeRTOS\Source/queue.c ****         Queue_t * const pxQueue = xQueue;
2568:FreeRTOS\Source/queue.c **** 
2569:FreeRTOS\Source/queue.c ****         /* If the queue is already empty we may have to block.  A critical section
2570:FreeRTOS\Source/queue.c ****          * is required to prevent an interrupt adding something to the queue
2571:FreeRTOS\Source/queue.c ****          * between the check to see if the queue is empty and blocking on the queue. */
2572:FreeRTOS\Source/queue.c ****         portDISABLE_INTERRUPTS();
2573:FreeRTOS\Source/queue.c ****         {
2574:FreeRTOS\Source/queue.c ****             if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2575:FreeRTOS\Source/queue.c ****             {
2576:FreeRTOS\Source/queue.c ****                 /* There are no messages in the queue, do we want to block or just
2577:FreeRTOS\Source/queue.c ****                  * leave with nothing? */
2578:FreeRTOS\Source/queue.c ****                 if( xTicksToWait > ( TickType_t ) 0 )
2579:FreeRTOS\Source/queue.c ****                 {
2580:FreeRTOS\Source/queue.c ****                     /* As this is a co-routine we cannot block directly, but return
2581:FreeRTOS\Source/queue.c ****                      * indicating that we need to block. */
2582:FreeRTOS\Source/queue.c ****                     vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) 
2583:FreeRTOS\Source/queue.c ****                     portENABLE_INTERRUPTS();
2584:FreeRTOS\Source/queue.c ****                     return errQUEUE_BLOCKED;
2585:FreeRTOS\Source/queue.c ****                 }
2586:FreeRTOS\Source/queue.c ****                 else
2587:FreeRTOS\Source/queue.c ****                 {
2588:FreeRTOS\Source/queue.c ****                     portENABLE_INTERRUPTS();
2589:FreeRTOS\Source/queue.c ****                     return errQUEUE_FULL;
2590:FreeRTOS\Source/queue.c ****                 }
2591:FreeRTOS\Source/queue.c ****             }
2592:FreeRTOS\Source/queue.c ****             else
2593:FreeRTOS\Source/queue.c ****             {
2594:FreeRTOS\Source/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2595:FreeRTOS\Source/queue.c ****             }
2596:FreeRTOS\Source/queue.c ****         }
2597:FreeRTOS\Source/queue.c ****         portENABLE_INTERRUPTS();
2598:FreeRTOS\Source/queue.c **** 
2599:FreeRTOS\Source/queue.c ****         portDISABLE_INTERRUPTS();
2600:FreeRTOS\Source/queue.c ****         {
2601:FreeRTOS\Source/queue.c ****             if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2602:FreeRTOS\Source/queue.c ****             {
2603:FreeRTOS\Source/queue.c ****                 /* Data is available from the queue. */
2604:FreeRTOS\Source/queue.c ****                 pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
2605:FreeRTOS\Source/queue.c **** 
2606:FreeRTOS\Source/queue.c ****                 if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
2607:FreeRTOS\Source/queue.c ****                 {
2608:FreeRTOS\Source/queue.c ****                     pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2609:FreeRTOS\Source/queue.c ****                 }
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 97


2610:FreeRTOS\Source/queue.c ****                 else
2611:FreeRTOS\Source/queue.c ****                 {
2612:FreeRTOS\Source/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2613:FreeRTOS\Source/queue.c ****                 }
2614:FreeRTOS\Source/queue.c **** 
2615:FreeRTOS\Source/queue.c ****                 --( pxQueue->uxMessagesWaiting );
2616:FreeRTOS\Source/queue.c ****                 ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( un
2617:FreeRTOS\Source/queue.c **** 
2618:FreeRTOS\Source/queue.c ****                 xReturn = pdPASS;
2619:FreeRTOS\Source/queue.c **** 
2620:FreeRTOS\Source/queue.c ****                 /* Were any co-routines waiting for space to become available? */
2621:FreeRTOS\Source/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2622:FreeRTOS\Source/queue.c ****                 {
2623:FreeRTOS\Source/queue.c ****                     /* In this instance the co-routine could be placed directly
2624:FreeRTOS\Source/queue.c ****                      * into the ready list as we are within a critical section.
2625:FreeRTOS\Source/queue.c ****                      * Instead the same pending ready list mechanism is used as if
2626:FreeRTOS\Source/queue.c ****                      * the event were caused from within an interrupt. */
2627:FreeRTOS\Source/queue.c ****                     if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFAL
2628:FreeRTOS\Source/queue.c ****                     {
2629:FreeRTOS\Source/queue.c ****                         xReturn = errQUEUE_YIELD;
2630:FreeRTOS\Source/queue.c ****                     }
2631:FreeRTOS\Source/queue.c ****                     else
2632:FreeRTOS\Source/queue.c ****                     {
2633:FreeRTOS\Source/queue.c ****                         mtCOVERAGE_TEST_MARKER();
2634:FreeRTOS\Source/queue.c ****                     }
2635:FreeRTOS\Source/queue.c ****                 }
2636:FreeRTOS\Source/queue.c ****                 else
2637:FreeRTOS\Source/queue.c ****                 {
2638:FreeRTOS\Source/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2639:FreeRTOS\Source/queue.c ****                 }
2640:FreeRTOS\Source/queue.c ****             }
2641:FreeRTOS\Source/queue.c ****             else
2642:FreeRTOS\Source/queue.c ****             {
2643:FreeRTOS\Source/queue.c ****                 xReturn = pdFAIL;
2644:FreeRTOS\Source/queue.c ****             }
2645:FreeRTOS\Source/queue.c ****         }
2646:FreeRTOS\Source/queue.c ****         portENABLE_INTERRUPTS();
2647:FreeRTOS\Source/queue.c **** 
2648:FreeRTOS\Source/queue.c ****         return xReturn;
2649:FreeRTOS\Source/queue.c ****     }
2650:FreeRTOS\Source/queue.c **** 
2651:FreeRTOS\Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2652:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
2653:FreeRTOS\Source/queue.c **** 
2654:FreeRTOS\Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2655:FreeRTOS\Source/queue.c **** 
2656:FreeRTOS\Source/queue.c ****     BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue,
2657:FreeRTOS\Source/queue.c ****                                     const void * pvItemToQueue,
2658:FreeRTOS\Source/queue.c ****                                     BaseType_t xCoRoutinePreviouslyWoken )
2659:FreeRTOS\Source/queue.c ****     {
2660:FreeRTOS\Source/queue.c ****         Queue_t * const pxQueue = xQueue;
2661:FreeRTOS\Source/queue.c **** 
2662:FreeRTOS\Source/queue.c ****         /* Cannot block within an ISR so if there is no space on the queue then
2663:FreeRTOS\Source/queue.c ****          * exit without doing anything. */
2664:FreeRTOS\Source/queue.c ****         if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2665:FreeRTOS\Source/queue.c ****         {
2666:FreeRTOS\Source/queue.c ****             prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 98


2667:FreeRTOS\Source/queue.c **** 
2668:FreeRTOS\Source/queue.c ****             /* We only want to wake one co-routine per ISR, so check that a
2669:FreeRTOS\Source/queue.c ****              * co-routine has not already been woken. */
2670:FreeRTOS\Source/queue.c ****             if( xCoRoutinePreviouslyWoken == pdFALSE )
2671:FreeRTOS\Source/queue.c ****             {
2672:FreeRTOS\Source/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2673:FreeRTOS\Source/queue.c ****                 {
2674:FreeRTOS\Source/queue.c ****                     if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pd
2675:FreeRTOS\Source/queue.c ****                     {
2676:FreeRTOS\Source/queue.c ****                         return pdTRUE;
2677:FreeRTOS\Source/queue.c ****                     }
2678:FreeRTOS\Source/queue.c ****                     else
2679:FreeRTOS\Source/queue.c ****                     {
2680:FreeRTOS\Source/queue.c ****                         mtCOVERAGE_TEST_MARKER();
2681:FreeRTOS\Source/queue.c ****                     }
2682:FreeRTOS\Source/queue.c ****                 }
2683:FreeRTOS\Source/queue.c ****                 else
2684:FreeRTOS\Source/queue.c ****                 {
2685:FreeRTOS\Source/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2686:FreeRTOS\Source/queue.c ****                 }
2687:FreeRTOS\Source/queue.c ****             }
2688:FreeRTOS\Source/queue.c ****             else
2689:FreeRTOS\Source/queue.c ****             {
2690:FreeRTOS\Source/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2691:FreeRTOS\Source/queue.c ****             }
2692:FreeRTOS\Source/queue.c ****         }
2693:FreeRTOS\Source/queue.c ****         else
2694:FreeRTOS\Source/queue.c ****         {
2695:FreeRTOS\Source/queue.c ****             mtCOVERAGE_TEST_MARKER();
2696:FreeRTOS\Source/queue.c ****         }
2697:FreeRTOS\Source/queue.c **** 
2698:FreeRTOS\Source/queue.c ****         return xCoRoutinePreviouslyWoken;
2699:FreeRTOS\Source/queue.c ****     }
2700:FreeRTOS\Source/queue.c **** 
2701:FreeRTOS\Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2702:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
2703:FreeRTOS\Source/queue.c **** 
2704:FreeRTOS\Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2705:FreeRTOS\Source/queue.c **** 
2706:FreeRTOS\Source/queue.c ****     BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue,
2707:FreeRTOS\Source/queue.c ****                                        void * pvBuffer,
2708:FreeRTOS\Source/queue.c ****                                        BaseType_t * pxCoRoutineWoken )
2709:FreeRTOS\Source/queue.c ****     {
2710:FreeRTOS\Source/queue.c ****         BaseType_t xReturn;
2711:FreeRTOS\Source/queue.c ****         Queue_t * const pxQueue = xQueue;
2712:FreeRTOS\Source/queue.c **** 
2713:FreeRTOS\Source/queue.c ****         /* We cannot block from an ISR, so check there is data available. If
2714:FreeRTOS\Source/queue.c ****          * not then just leave without doing anything. */
2715:FreeRTOS\Source/queue.c ****         if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2716:FreeRTOS\Source/queue.c ****         {
2717:FreeRTOS\Source/queue.c ****             /* Copy the data from the queue. */
2718:FreeRTOS\Source/queue.c ****             pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
2719:FreeRTOS\Source/queue.c **** 
2720:FreeRTOS\Source/queue.c ****             if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
2721:FreeRTOS\Source/queue.c ****             {
2722:FreeRTOS\Source/queue.c ****                 pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2723:FreeRTOS\Source/queue.c ****             }
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 99


2724:FreeRTOS\Source/queue.c ****             else
2725:FreeRTOS\Source/queue.c ****             {
2726:FreeRTOS\Source/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2727:FreeRTOS\Source/queue.c ****             }
2728:FreeRTOS\Source/queue.c **** 
2729:FreeRTOS\Source/queue.c ****             --( pxQueue->uxMessagesWaiting );
2730:FreeRTOS\Source/queue.c ****             ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( unsign
2731:FreeRTOS\Source/queue.c **** 
2732:FreeRTOS\Source/queue.c ****             if( ( *pxCoRoutineWoken ) == pdFALSE )
2733:FreeRTOS\Source/queue.c ****             {
2734:FreeRTOS\Source/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2735:FreeRTOS\Source/queue.c ****                 {
2736:FreeRTOS\Source/queue.c ****                     if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFAL
2737:FreeRTOS\Source/queue.c ****                     {
2738:FreeRTOS\Source/queue.c ****                         *pxCoRoutineWoken = pdTRUE;
2739:FreeRTOS\Source/queue.c ****                     }
2740:FreeRTOS\Source/queue.c ****                     else
2741:FreeRTOS\Source/queue.c ****                     {
2742:FreeRTOS\Source/queue.c ****                         mtCOVERAGE_TEST_MARKER();
2743:FreeRTOS\Source/queue.c ****                     }
2744:FreeRTOS\Source/queue.c ****                 }
2745:FreeRTOS\Source/queue.c ****                 else
2746:FreeRTOS\Source/queue.c ****                 {
2747:FreeRTOS\Source/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2748:FreeRTOS\Source/queue.c ****                 }
2749:FreeRTOS\Source/queue.c ****             }
2750:FreeRTOS\Source/queue.c ****             else
2751:FreeRTOS\Source/queue.c ****             {
2752:FreeRTOS\Source/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2753:FreeRTOS\Source/queue.c ****             }
2754:FreeRTOS\Source/queue.c **** 
2755:FreeRTOS\Source/queue.c ****             xReturn = pdPASS;
2756:FreeRTOS\Source/queue.c ****         }
2757:FreeRTOS\Source/queue.c ****         else
2758:FreeRTOS\Source/queue.c ****         {
2759:FreeRTOS\Source/queue.c ****             xReturn = pdFAIL;
2760:FreeRTOS\Source/queue.c ****         }
2761:FreeRTOS\Source/queue.c **** 
2762:FreeRTOS\Source/queue.c ****         return xReturn;
2763:FreeRTOS\Source/queue.c ****     }
2764:FreeRTOS\Source/queue.c **** 
2765:FreeRTOS\Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2766:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
2767:FreeRTOS\Source/queue.c **** 
2768:FreeRTOS\Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2769:FreeRTOS\Source/queue.c **** 
2770:FreeRTOS\Source/queue.c ****     void vQueueAddToRegistry( QueueHandle_t xQueue,
2771:FreeRTOS\Source/queue.c ****                               const char * pcQueueName ) /*lint !e971 Unqualified char types are al
2772:FreeRTOS\Source/queue.c ****     {
 2475              		.loc 1 2772 0
 2476              		.cfi_startproc
 2477              		@ args = 0, pretend = 0, frame = 0
 2478              		@ frame_needed = 0, uses_anonymous_args = 0
 2479              	.LVL406:
 2480 0000 30B5     		push	{r4, r5, lr}
 2481              		.cfi_def_cfa_offset 12
 2482              		.cfi_offset 4, -12
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 100


 2483              		.cfi_offset 5, -8
 2484              		.cfi_offset 14, -4
 2485              	.LVL407:
2773:FreeRTOS\Source/queue.c ****         UBaseType_t ux;
2774:FreeRTOS\Source/queue.c ****         QueueRegistryItem_t * pxEntryToWrite = NULL;
2775:FreeRTOS\Source/queue.c **** 
2776:FreeRTOS\Source/queue.c ****         configASSERT( xQueue );
2777:FreeRTOS\Source/queue.c **** 
2778:FreeRTOS\Source/queue.c ****         if( pcQueueName != NULL )
 2486              		.loc 1 2778 0
 2487 0002 0029     		cmp	r1, #0
 2488 0004 15D1     		bne	.L157
2774:FreeRTOS\Source/queue.c **** 
 2489              		.loc 1 2774 0
 2490 0006 0025     		movs	r5, #0
 2491 0008 17E0     		b	.L152
 2492              	.LVL408:
 2493              	.L155:
2779:FreeRTOS\Source/queue.c ****         {
2780:FreeRTOS\Source/queue.c ****             /* See if there is an empty space in the registry.  A NULL name denotes
2781:FreeRTOS\Source/queue.c ****              * a free slot. */
2782:FreeRTOS\Source/queue.c ****             for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
2783:FreeRTOS\Source/queue.c ****             {
2784:FreeRTOS\Source/queue.c ****                 /* Replace an existing entry if the queue is already in the registry. */
2785:FreeRTOS\Source/queue.c ****                 if( xQueue == xQueueRegistry[ ux ].xHandle )
 2494              		.loc 1 2785 0
 2495 000a D300     		lsls	r3, r2, #3
 2496 000c 0D4C     		ldr	r4, .L158
 2497 000e E318     		adds	r3, r4, r3
 2498 0010 5B68     		ldr	r3, [r3, #4]
 2499 0012 8342     		cmp	r3, r0
 2500 0014 02D1     		bne	.L153
2786:FreeRTOS\Source/queue.c ****                 {
2787:FreeRTOS\Source/queue.c ****                     pxEntryToWrite = &( xQueueRegistry[ ux ] );
 2501              		.loc 1 2787 0
 2502 0016 D200     		lsls	r2, r2, #3
 2503              	.LVL409:
 2504 0018 1519     		adds	r5, r2, r4
 2505              	.LVL410:
2788:FreeRTOS\Source/queue.c ****                     break;
 2506              		.loc 1 2788 0
 2507 001a 0EE0     		b	.L152
 2508              	.LVL411:
 2509              	.L153:
2789:FreeRTOS\Source/queue.c ****                 }
2790:FreeRTOS\Source/queue.c ****                 /* Otherwise, store in the next empty location */
2791:FreeRTOS\Source/queue.c ****                 else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL )
 2510              		.loc 1 2791 0
 2511 001c 002D     		cmp	r5, #0
 2512 001e 06D1     		bne	.L154
 2513              		.loc 1 2791 0 is_stmt 0 discriminator 1
 2514 0020 D300     		lsls	r3, r2, #3
 2515 0022 084C     		ldr	r4, .L158
 2516 0024 1B59     		ldr	r3, [r3, r4]
 2517 0026 002B     		cmp	r3, #0
 2518 0028 01D1     		bne	.L154
2792:FreeRTOS\Source/queue.c ****                 {
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 101


2793:FreeRTOS\Source/queue.c ****                     pxEntryToWrite = &( xQueueRegistry[ ux ] );
 2519              		.loc 1 2793 0 is_stmt 1
 2520 002a D500     		lsls	r5, r2, #3
 2521              	.LVL412:
 2522 002c 2D19     		adds	r5, r5, r4
 2523              	.LVL413:
 2524              	.L154:
2782:FreeRTOS\Source/queue.c ****             {
 2525              		.loc 1 2782 0 discriminator 2
 2526 002e 0132     		adds	r2, r2, #1
 2527              	.LVL414:
 2528 0030 01E0     		b	.L151
 2529              	.LVL415:
 2530              	.L157:
 2531 0032 0025     		movs	r5, #0
 2532 0034 0022     		movs	r2, #0
 2533              	.LVL416:
 2534              	.L151:
2782:FreeRTOS\Source/queue.c ****             {
 2535              		.loc 1 2782 0 is_stmt 0 discriminator 1
 2536 0036 092A     		cmp	r2, #9
 2537 0038 E7D9     		bls	.L155
 2538              	.LVL417:
 2539              	.L152:
2794:FreeRTOS\Source/queue.c ****                 }
2795:FreeRTOS\Source/queue.c ****                 else
2796:FreeRTOS\Source/queue.c ****                 {
2797:FreeRTOS\Source/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2798:FreeRTOS\Source/queue.c ****                 }
2799:FreeRTOS\Source/queue.c ****             }
2800:FreeRTOS\Source/queue.c ****         }
2801:FreeRTOS\Source/queue.c **** 
2802:FreeRTOS\Source/queue.c ****         if( pxEntryToWrite != NULL )
 2540              		.loc 1 2802 0 is_stmt 1
 2541 003a 002D     		cmp	r5, #0
 2542 003c 01D0     		beq	.L150
2803:FreeRTOS\Source/queue.c ****         {
2804:FreeRTOS\Source/queue.c ****             /* Store the information on this queue. */
2805:FreeRTOS\Source/queue.c ****             pxEntryToWrite->pcQueueName = pcQueueName;
 2543              		.loc 1 2805 0
 2544 003e 2960     		str	r1, [r5]
2806:FreeRTOS\Source/queue.c ****             pxEntryToWrite->xHandle = xQueue;
 2545              		.loc 1 2806 0
 2546 0040 6860     		str	r0, [r5, #4]
 2547              	.L150:
2807:FreeRTOS\Source/queue.c **** 
2808:FreeRTOS\Source/queue.c ****             traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
2809:FreeRTOS\Source/queue.c ****         }
2810:FreeRTOS\Source/queue.c ****     }
 2548              		.loc 1 2810 0
 2549              		@ sp needed
 2550              	.LVL418:
 2551 0042 30BD     		pop	{r4, r5, pc}
 2552              	.L159:
 2553              		.align	2
 2554              	.L158:
 2555 0044 00000000 		.word	xQueueRegistry
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 102


 2556              		.cfi_endproc
 2557              	.LFE62:
 2558              		.size	vQueueAddToRegistry, .-vQueueAddToRegistry
 2559              		.section	.text.pcQueueGetName,"ax",%progbits
 2560              		.align	2
 2561              		.global	pcQueueGetName
 2562              		.code	16
 2563              		.thumb_func
 2564              		.type	pcQueueGetName, %function
 2565              	pcQueueGetName:
 2566              	.LFB63:
2811:FreeRTOS\Source/queue.c **** 
2812:FreeRTOS\Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2813:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
2814:FreeRTOS\Source/queue.c **** 
2815:FreeRTOS\Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2816:FreeRTOS\Source/queue.c **** 
2817:FreeRTOS\Source/queue.c ****     const char * pcQueueGetName( QueueHandle_t xQueue ) /*lint !e971 Unqualified char types are all
2818:FreeRTOS\Source/queue.c ****     {
 2567              		.loc 1 2818 0
 2568              		.cfi_startproc
 2569              		@ args = 0, pretend = 0, frame = 0
 2570              		@ frame_needed = 0, uses_anonymous_args = 0
 2571              		@ link register save eliminated.
 2572              	.LVL419:
2819:FreeRTOS\Source/queue.c ****         UBaseType_t ux;
2820:FreeRTOS\Source/queue.c ****         const char * pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings a
2821:FreeRTOS\Source/queue.c **** 
2822:FreeRTOS\Source/queue.c ****         configASSERT( xQueue );
2823:FreeRTOS\Source/queue.c **** 
2824:FreeRTOS\Source/queue.c ****         /* Note there is nothing here to protect against another task adding or
2825:FreeRTOS\Source/queue.c ****          * removing entries from the registry while it is being searched. */
2826:FreeRTOS\Source/queue.c **** 
2827:FreeRTOS\Source/queue.c ****         for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 2573              		.loc 1 2827 0
 2574 0000 0022     		movs	r2, #0
 2575 0002 09E0     		b	.L161
 2576              	.LVL420:
 2577              	.L164:
2828:FreeRTOS\Source/queue.c ****         {
2829:FreeRTOS\Source/queue.c ****             if( xQueueRegistry[ ux ].xHandle == xQueue )
 2578              		.loc 1 2829 0
 2579 0004 D300     		lsls	r3, r2, #3
 2580 0006 0649     		ldr	r1, .L165
 2581 0008 CB18     		adds	r3, r1, r3
 2582 000a 5B68     		ldr	r3, [r3, #4]
 2583 000c 8342     		cmp	r3, r0
 2584 000e 02D1     		bne	.L162
2830:FreeRTOS\Source/queue.c ****             {
2831:FreeRTOS\Source/queue.c ****                 pcReturn = xQueueRegistry[ ux ].pcQueueName;
 2585              		.loc 1 2831 0
 2586 0010 D200     		lsls	r2, r2, #3
 2587              	.LVL421:
 2588 0012 5058     		ldr	r0, [r2, r1]
 2589              	.LVL422:
2832:FreeRTOS\Source/queue.c ****                 break;
 2590              		.loc 1 2832 0
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 103


 2591 0014 03E0     		b	.L163
 2592              	.LVL423:
 2593              	.L162:
2827:FreeRTOS\Source/queue.c ****         {
 2594              		.loc 1 2827 0 discriminator 2
 2595 0016 0132     		adds	r2, r2, #1
 2596              	.LVL424:
 2597              	.L161:
2827:FreeRTOS\Source/queue.c ****         {
 2598              		.loc 1 2827 0 is_stmt 0 discriminator 1
 2599 0018 092A     		cmp	r2, #9
 2600 001a F3D9     		bls	.L164
2820:FreeRTOS\Source/queue.c **** 
 2601              		.loc 1 2820 0 is_stmt 1
 2602 001c 0020     		movs	r0, #0
 2603              	.LVL425:
 2604              	.L163:
2833:FreeRTOS\Source/queue.c ****             }
2834:FreeRTOS\Source/queue.c ****             else
2835:FreeRTOS\Source/queue.c ****             {
2836:FreeRTOS\Source/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2837:FreeRTOS\Source/queue.c ****             }
2838:FreeRTOS\Source/queue.c ****         }
2839:FreeRTOS\Source/queue.c **** 
2840:FreeRTOS\Source/queue.c ****         return pcReturn;
2841:FreeRTOS\Source/queue.c ****     } /*lint !e818 xQueue cannot be a pointer to const because it is a typedef. */
 2605              		.loc 1 2841 0
 2606              		@ sp needed
 2607 001e 7047     		bx	lr
 2608              	.L166:
 2609              		.align	2
 2610              	.L165:
 2611 0020 00000000 		.word	xQueueRegistry
 2612              		.cfi_endproc
 2613              	.LFE63:
 2614              		.size	pcQueueGetName, .-pcQueueGetName
 2615              		.section	.text.vQueueUnregisterQueue,"ax",%progbits
 2616              		.align	2
 2617              		.global	vQueueUnregisterQueue
 2618              		.code	16
 2619              		.thumb_func
 2620              		.type	vQueueUnregisterQueue, %function
 2621              	vQueueUnregisterQueue:
 2622              	.LFB64:
2842:FreeRTOS\Source/queue.c **** 
2843:FreeRTOS\Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2844:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
2845:FreeRTOS\Source/queue.c **** 
2846:FreeRTOS\Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2847:FreeRTOS\Source/queue.c **** 
2848:FreeRTOS\Source/queue.c ****     void vQueueUnregisterQueue( QueueHandle_t xQueue )
2849:FreeRTOS\Source/queue.c ****     {
 2623              		.loc 1 2849 0
 2624              		.cfi_startproc
 2625              		@ args = 0, pretend = 0, frame = 0
 2626              		@ frame_needed = 0, uses_anonymous_args = 0
 2627              		@ link register save eliminated.
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 104


 2628              	.LVL426:
2850:FreeRTOS\Source/queue.c ****         UBaseType_t ux;
2851:FreeRTOS\Source/queue.c **** 
2852:FreeRTOS\Source/queue.c ****         configASSERT( xQueue );
2853:FreeRTOS\Source/queue.c **** 
2854:FreeRTOS\Source/queue.c ****         /* See if the handle of the queue being unregistered in actually in the
2855:FreeRTOS\Source/queue.c ****          * registry. */
2856:FreeRTOS\Source/queue.c ****         for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 2629              		.loc 1 2856 0
 2630 0000 0022     		movs	r2, #0
 2631 0002 0CE0     		b	.L168
 2632              	.LVL427:
 2633              	.L171:
2857:FreeRTOS\Source/queue.c ****         {
2858:FreeRTOS\Source/queue.c ****             if( xQueueRegistry[ ux ].xHandle == xQueue )
 2634              		.loc 1 2858 0
 2635 0004 D300     		lsls	r3, r2, #3
 2636 0006 0749     		ldr	r1, .L172
 2637 0008 CB18     		adds	r3, r1, r3
 2638 000a 5B68     		ldr	r3, [r3, #4]
 2639 000c 8342     		cmp	r3, r0
 2640 000e 05D1     		bne	.L169
2859:FreeRTOS\Source/queue.c ****             {
2860:FreeRTOS\Source/queue.c ****                 /* Set the name to NULL to show that this slot if free again. */
2861:FreeRTOS\Source/queue.c ****                 xQueueRegistry[ ux ].pcQueueName = NULL;
 2641              		.loc 1 2861 0
 2642 0010 D200     		lsls	r2, r2, #3
 2643              	.LVL428:
 2644 0012 0023     		movs	r3, #0
 2645 0014 5350     		str	r3, [r2, r1]
2862:FreeRTOS\Source/queue.c **** 
2863:FreeRTOS\Source/queue.c ****                 /* Set the handle to NULL to ensure the same queue handle cannot
2864:FreeRTOS\Source/queue.c ****                  * appear in the registry twice if it is added, removed, then
2865:FreeRTOS\Source/queue.c ****                  * added again. */
2866:FreeRTOS\Source/queue.c ****                 xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 2646              		.loc 1 2866 0
 2647 0016 8A18     		adds	r2, r1, r2
 2648 0018 5360     		str	r3, [r2, #4]
2867:FreeRTOS\Source/queue.c ****                 break;
 2649              		.loc 1 2867 0
 2650 001a 02E0     		b	.L167
 2651              	.LVL429:
 2652              	.L169:
2856:FreeRTOS\Source/queue.c ****         {
 2653              		.loc 1 2856 0 discriminator 2
 2654 001c 0132     		adds	r2, r2, #1
 2655              	.LVL430:
 2656              	.L168:
2856:FreeRTOS\Source/queue.c ****         {
 2657              		.loc 1 2856 0 is_stmt 0 discriminator 1
 2658 001e 092A     		cmp	r2, #9
 2659 0020 F0D9     		bls	.L171
 2660              	.LVL431:
 2661              	.L167:
2868:FreeRTOS\Source/queue.c ****             }
2869:FreeRTOS\Source/queue.c ****             else
2870:FreeRTOS\Source/queue.c ****             {
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 105


2871:FreeRTOS\Source/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2872:FreeRTOS\Source/queue.c ****             }
2873:FreeRTOS\Source/queue.c ****         }
2874:FreeRTOS\Source/queue.c ****     } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 2662              		.loc 1 2874 0 is_stmt 1
 2663              		@ sp needed
 2664 0022 7047     		bx	lr
 2665              	.L173:
 2666              		.align	2
 2667              	.L172:
 2668 0024 00000000 		.word	xQueueRegistry
 2669              		.cfi_endproc
 2670              	.LFE64:
 2671              		.size	vQueueUnregisterQueue, .-vQueueUnregisterQueue
 2672              		.section	.text.vQueueDelete,"ax",%progbits
 2673              		.align	2
 2674              		.global	vQueueDelete
 2675              		.code	16
 2676              		.thumb_func
 2677              		.type	vQueueDelete, %function
 2678              	vQueueDelete:
 2679              	.LFB53:
2076:FreeRTOS\Source/queue.c ****     Queue_t * const pxQueue = xQueue;
 2680              		.loc 1 2076 0
 2681              		.cfi_startproc
 2682              		@ args = 0, pretend = 0, frame = 0
 2683              		@ frame_needed = 0, uses_anonymous_args = 0
 2684              	.LVL432:
 2685 0000 10B5     		push	{r4, lr}
 2686              		.cfi_def_cfa_offset 8
 2687              		.cfi_offset 4, -8
 2688              		.cfi_offset 14, -4
 2689 0002 0400     		movs	r4, r0
 2690              	.LVL433:
2084:FreeRTOS\Source/queue.c ****     }
 2691              		.loc 1 2084 0
 2692 0004 FFF7FEFF 		bl	vQueueUnregisterQueue
 2693              	.LVL434:
2092:FreeRTOS\Source/queue.c ****     }
 2694              		.loc 1 2092 0
 2695 0008 2000     		movs	r0, r4
 2696 000a FFF7FEFF 		bl	vPortFree
 2697              	.LVL435:
2114:FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 2698              		.loc 1 2114 0
 2699              		@ sp needed
 2700              	.LVL436:
 2701 000e 10BD     		pop	{r4, pc}
 2702              		.cfi_endproc
 2703              	.LFE53:
 2704              		.size	vQueueDelete, .-vQueueDelete
 2705              		.comm	xQueueRegistry,80,4
 2706              		.text
 2707              	.Letext0:
 2708              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 2709              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 2710              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 106


 2711              		.file 5 ".\\FreeRTOS\\Include/portmacro.h"
 2712              		.file 6 ".\\FreeRTOS\\Include/list.h"
 2713              		.file 7 ".\\FreeRTOS\\Include/task.h"
 2714              		.file 8 ".\\FreeRTOS\\Include/queue.h"
 2715              		.file 9 ".\\FreeRTOS\\Include/portable.h"
 2716              		.section	.debug_info,"",%progbits
 2717              	.Ldebug_info0:
 2718 0000 B4190000 		.4byte	0x19b4
 2719 0004 0400     		.2byte	0x4
 2720 0006 00000000 		.4byte	.Ldebug_abbrev0
 2721 000a 04       		.byte	0x4
 2722 000b 01       		.uleb128 0x1
 2723 000c 9A030000 		.4byte	.LASF157
 2724 0010 0C       		.byte	0xc
 2725 0011 10000000 		.4byte	.LASF158
 2726 0015 8B020000 		.4byte	.LASF159
 2727 0019 48000000 		.4byte	.Ldebug_ranges0+0x48
 2728 001d 00000000 		.4byte	0
 2729 0021 00000000 		.4byte	.Ldebug_line0
 2730 0025 02       		.uleb128 0x2
 2731 0026 36040000 		.4byte	.LASF3
 2732 002a 02       		.byte	0x2
 2733 002b D8       		.byte	0xd8
 2734 002c 30000000 		.4byte	0x30
 2735 0030 03       		.uleb128 0x3
 2736 0031 04       		.byte	0x4
 2737 0032 07       		.byte	0x7
 2738 0033 E7000000 		.4byte	.LASF0
 2739 0037 04       		.uleb128 0x4
 2740 0038 04       		.byte	0x4
 2741 0039 05       		.byte	0x5
 2742 003a 696E7400 		.ascii	"int\000"
 2743 003e 03       		.uleb128 0x3
 2744 003f 08       		.byte	0x8
 2745 0040 05       		.byte	0x5
 2746 0041 01060000 		.4byte	.LASF1
 2747 0045 03       		.uleb128 0x3
 2748 0046 08       		.byte	0x8
 2749 0047 04       		.byte	0x4
 2750 0048 3F070000 		.4byte	.LASF2
 2751 004c 02       		.uleb128 0x2
 2752 004d 28070000 		.4byte	.LASF4
 2753 0051 03       		.byte	0x3
 2754 0052 1B       		.byte	0x1b
 2755 0053 57000000 		.4byte	0x57
 2756 0057 03       		.uleb128 0x3
 2757 0058 01       		.byte	0x1
 2758 0059 06       		.byte	0x6
 2759 005a 020A0000 		.4byte	.LASF5
 2760 005e 02       		.uleb128 0x2
 2761 005f 50080000 		.4byte	.LASF6
 2762 0063 03       		.byte	0x3
 2763 0064 1D       		.byte	0x1d
 2764 0065 69000000 		.4byte	0x69
 2765 0069 03       		.uleb128 0x3
 2766 006a 01       		.byte	0x1
 2767 006b 08       		.byte	0x8
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 107


 2768 006c FA080000 		.4byte	.LASF7
 2769 0070 03       		.uleb128 0x3
 2770 0071 02       		.byte	0x2
 2771 0072 05       		.byte	0x5
 2772 0073 AD070000 		.4byte	.LASF8
 2773 0077 03       		.uleb128 0x3
 2774 0078 02       		.byte	0x2
 2775 0079 07       		.byte	0x7
 2776 007a 0E0A0000 		.4byte	.LASF9
 2777 007e 03       		.uleb128 0x3
 2778 007f 04       		.byte	0x4
 2779 0080 05       		.byte	0x5
 2780 0081 C2070000 		.4byte	.LASF10
 2781 0085 02       		.uleb128 0x2
 2782 0086 08090000 		.4byte	.LASF11
 2783 008a 03       		.byte	0x3
 2784 008b 41       		.byte	0x41
 2785 008c 90000000 		.4byte	0x90
 2786 0090 03       		.uleb128 0x3
 2787 0091 04       		.byte	0x4
 2788 0092 07       		.byte	0x7
 2789 0093 84080000 		.4byte	.LASF12
 2790 0097 03       		.uleb128 0x3
 2791 0098 08       		.byte	0x8
 2792 0099 07       		.byte	0x7
 2793 009a DB020000 		.4byte	.LASF13
 2794 009e 03       		.uleb128 0x3
 2795 009f 04       		.byte	0x4
 2796 00a0 07       		.byte	0x7
 2797 00a1 6A080000 		.4byte	.LASF14
 2798 00a5 05       		.uleb128 0x5
 2799 00a6 04       		.byte	0x4
 2800 00a7 03       		.uleb128 0x3
 2801 00a8 01       		.byte	0x1
 2802 00a9 08       		.byte	0x8
 2803 00aa 22050000 		.4byte	.LASF15
 2804 00ae 06       		.uleb128 0x6
 2805 00af 04       		.byte	0x4
 2806 00b0 B4000000 		.4byte	0xb4
 2807 00b4 07       		.uleb128 0x7
 2808 00b5 A7000000 		.4byte	0xa7
 2809 00b9 06       		.uleb128 0x6
 2810 00ba 04       		.byte	0x4
 2811 00bb BF000000 		.4byte	0xbf
 2812 00bf 08       		.uleb128 0x8
 2813 00c0 02       		.uleb128 0x2
 2814 00c1 4C020000 		.4byte	.LASF16
 2815 00c5 04       		.byte	0x4
 2816 00c6 14       		.byte	0x14
 2817 00c7 4C000000 		.4byte	0x4c
 2818 00cb 02       		.uleb128 0x2
 2819 00cc C0050000 		.4byte	.LASF17
 2820 00d0 04       		.byte	0x4
 2821 00d1 18       		.byte	0x18
 2822 00d2 5E000000 		.4byte	0x5e
 2823 00d6 02       		.uleb128 0x2
 2824 00d7 43020000 		.4byte	.LASF18
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 108


 2825 00db 04       		.byte	0x4
 2826 00dc 30       		.byte	0x30
 2827 00dd 85000000 		.4byte	0x85
 2828 00e1 03       		.uleb128 0x3
 2829 00e2 04       		.byte	0x4
 2830 00e3 04       		.byte	0x4
 2831 00e4 75020000 		.4byte	.LASF19
 2832 00e8 03       		.uleb128 0x3
 2833 00e9 08       		.byte	0x8
 2834 00ea 04       		.byte	0x4
 2835 00eb 3C0A0000 		.4byte	.LASF20
 2836 00ef 02       		.uleb128 0x2
 2837 00f0 22060000 		.4byte	.LASF21
 2838 00f4 05       		.byte	0x5
 2839 00f5 3A       		.byte	0x3a
 2840 00f6 7E000000 		.4byte	0x7e
 2841 00fa 02       		.uleb128 0x2
 2842 00fb 4F050000 		.4byte	.LASF22
 2843 00ff 05       		.byte	0x5
 2844 0100 3B       		.byte	0x3b
 2845 0101 90000000 		.4byte	0x90
 2846 0105 02       		.uleb128 0x2
 2847 0106 1D070000 		.4byte	.LASF23
 2848 010a 05       		.byte	0x5
 2849 010b 41       		.byte	0x41
 2850 010c D6000000 		.4byte	0xd6
 2851 0110 06       		.uleb128 0x6
 2852 0111 04       		.byte	0x4
 2853 0112 CB000000 		.4byte	0xcb
 2854 0116 09       		.uleb128 0x9
 2855 0117 2A010000 		.4byte	.LASF29
 2856 011b 14       		.byte	0x14
 2857 011c 06       		.byte	0x6
 2858 011d 90       		.byte	0x90
 2859 011e 5F010000 		.4byte	0x15f
 2860 0122 0A       		.uleb128 0xa
 2861 0123 B7070000 		.4byte	.LASF24
 2862 0127 06       		.byte	0x6
 2863 0128 93       		.byte	0x93
 2864 0129 05010000 		.4byte	0x105
 2865 012d 00       		.byte	0
 2866 012e 0A       		.uleb128 0xa
 2867 012f 68060000 		.4byte	.LASF25
 2868 0133 06       		.byte	0x6
 2869 0134 94       		.byte	0x94
 2870 0135 5F010000 		.4byte	0x15f
 2871 0139 04       		.byte	0x4
 2872 013a 0A       		.uleb128 0xa
 2873 013b 30030000 		.4byte	.LASF26
 2874 013f 06       		.byte	0x6
 2875 0140 95       		.byte	0x95
 2876 0141 5F010000 		.4byte	0x15f
 2877 0145 08       		.byte	0x8
 2878 0146 0A       		.uleb128 0xa
 2879 0147 69090000 		.4byte	.LASF27
 2880 014b 06       		.byte	0x6
 2881 014c 96       		.byte	0x96
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 109


 2882 014d A5000000 		.4byte	0xa5
 2883 0151 0C       		.byte	0xc
 2884 0152 0A       		.uleb128 0xa
 2885 0153 70070000 		.4byte	.LASF28
 2886 0157 06       		.byte	0x6
 2887 0158 97       		.byte	0x97
 2888 0159 96010000 		.4byte	0x196
 2889 015d 10       		.byte	0x10
 2890 015e 00       		.byte	0
 2891 015f 06       		.uleb128 0x6
 2892 0160 04       		.byte	0x4
 2893 0161 16010000 		.4byte	0x116
 2894 0165 09       		.uleb128 0x9
 2895 0166 6A040000 		.4byte	.LASF30
 2896 016a 14       		.byte	0x14
 2897 016b 06       		.byte	0x6
 2898 016c AC       		.byte	0xac
 2899 016d 96010000 		.4byte	0x196
 2900 0171 0A       		.uleb128 0xa
 2901 0172 00000000 		.4byte	.LASF31
 2902 0176 06       		.byte	0x6
 2903 0177 AF       		.byte	0xaf
 2904 0178 E3010000 		.4byte	0x1e3
 2905 017c 00       		.byte	0
 2906 017d 0A       		.uleb128 0xa
 2907 017e F4000000 		.4byte	.LASF32
 2908 0182 06       		.byte	0x6
 2909 0183 B0       		.byte	0xb0
 2910 0184 E8010000 		.4byte	0x1e8
 2911 0188 04       		.byte	0x4
 2912 0189 0A       		.uleb128 0xa
 2913 018a 8A050000 		.4byte	.LASF33
 2914 018e 06       		.byte	0x6
 2915 018f B1       		.byte	0xb1
 2916 0190 D8010000 		.4byte	0x1d8
 2917 0194 08       		.byte	0x8
 2918 0195 00       		.byte	0
 2919 0196 06       		.uleb128 0x6
 2920 0197 04       		.byte	0x4
 2921 0198 65010000 		.4byte	0x165
 2922 019c 02       		.uleb128 0x2
 2923 019d 27050000 		.4byte	.LASF34
 2924 01a1 06       		.byte	0x6
 2925 01a2 9A       		.byte	0x9a
 2926 01a3 16010000 		.4byte	0x116
 2927 01a7 09       		.uleb128 0x9
 2928 01a8 5A040000 		.4byte	.LASF35
 2929 01ac 0C       		.byte	0xc
 2930 01ad 06       		.byte	0x6
 2931 01ae 9D       		.byte	0x9d
 2932 01af D8010000 		.4byte	0x1d8
 2933 01b3 0A       		.uleb128 0xa
 2934 01b4 B7070000 		.4byte	.LASF24
 2935 01b8 06       		.byte	0x6
 2936 01b9 A0       		.byte	0xa0
 2937 01ba 05010000 		.4byte	0x105
 2938 01be 00       		.byte	0
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 110


 2939 01bf 0A       		.uleb128 0xa
 2940 01c0 68060000 		.4byte	.LASF25
 2941 01c4 06       		.byte	0x6
 2942 01c5 A1       		.byte	0xa1
 2943 01c6 5F010000 		.4byte	0x15f
 2944 01ca 04       		.byte	0x4
 2945 01cb 0A       		.uleb128 0xa
 2946 01cc 30030000 		.4byte	.LASF26
 2947 01d0 06       		.byte	0x6
 2948 01d1 A2       		.byte	0xa2
 2949 01d2 5F010000 		.4byte	0x15f
 2950 01d6 08       		.byte	0x8
 2951 01d7 00       		.byte	0
 2952 01d8 02       		.uleb128 0x2
 2953 01d9 B1050000 		.4byte	.LASF36
 2954 01dd 06       		.byte	0x6
 2955 01de A4       		.byte	0xa4
 2956 01df A7010000 		.4byte	0x1a7
 2957 01e3 0B       		.uleb128 0xb
 2958 01e4 FA000000 		.4byte	0xfa
 2959 01e8 06       		.uleb128 0x6
 2960 01e9 04       		.byte	0x4
 2961 01ea 9C010000 		.4byte	0x19c
 2962 01ee 02       		.uleb128 0x2
 2963 01ef FB060000 		.4byte	.LASF37
 2964 01f3 06       		.byte	0x6
 2965 01f4 B3       		.byte	0xb3
 2966 01f5 65010000 		.4byte	0x165
 2967 01f9 02       		.uleb128 0x2
 2968 01fa C2060000 		.4byte	.LASF38
 2969 01fe 07       		.byte	0x7
 2970 01ff 57       		.byte	0x57
 2971 0200 04020000 		.4byte	0x204
 2972 0204 06       		.uleb128 0x6
 2973 0205 04       		.byte	0x4
 2974 0206 0A020000 		.4byte	0x20a
 2975 020a 0C       		.uleb128 0xc
 2976 020b 53000000 		.4byte	.LASF160
 2977 020f 09       		.uleb128 0x9
 2978 0210 FC000000 		.4byte	.LASF39
 2979 0214 08       		.byte	0x8
 2980 0215 07       		.byte	0x7
 2981 0216 77       		.byte	0x77
 2982 0217 34020000 		.4byte	0x234
 2983 021b 0A       		.uleb128 0xa
 2984 021c 7C010000 		.4byte	.LASF40
 2985 0220 07       		.byte	0x7
 2986 0221 79       		.byte	0x79
 2987 0222 EF000000 		.4byte	0xef
 2988 0226 00       		.byte	0
 2989 0227 0A       		.uleb128 0xa
 2990 0228 44060000 		.4byte	.LASF41
 2991 022c 07       		.byte	0x7
 2992 022d 7A       		.byte	0x7a
 2993 022e 05010000 		.4byte	0x105
 2994 0232 04       		.byte	0x4
 2995 0233 00       		.byte	0
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 111


 2996 0234 02       		.uleb128 0x2
 2997 0235 84060000 		.4byte	.LASF42
 2998 0239 07       		.byte	0x7
 2999 023a 7B       		.byte	0x7b
 3000 023b 0F020000 		.4byte	0x20f
 3001 023f 02       		.uleb128 0x2
 3002 0240 7C050000 		.4byte	.LASF43
 3003 0244 08       		.byte	0x8
 3004 0245 33       		.byte	0x33
 3005 0246 4A020000 		.4byte	0x24a
 3006 024a 06       		.uleb128 0x6
 3007 024b 04       		.byte	0x4
 3008 024c 50020000 		.4byte	0x250
 3009 0250 09       		.uleb128 0x9
 3010 0251 7B020000 		.4byte	.LASF44
 3011 0255 48       		.byte	0x48
 3012 0256 01       		.byte	0x1
 3013 0257 64       		.byte	0x64
 3014 0258 D3020000 		.4byte	0x2d3
 3015 025c 0A       		.uleb128 0xa
 3016 025d A6090000 		.4byte	.LASF45
 3017 0261 01       		.byte	0x1
 3018 0262 66       		.byte	0x66
 3019 0263 F8020000 		.4byte	0x2f8
 3020 0267 00       		.byte	0
 3021 0268 0A       		.uleb128 0xa
 3022 0269 13070000 		.4byte	.LASF46
 3023 026d 01       		.byte	0x1
 3024 026e 67       		.byte	0x67
 3025 026f F8020000 		.4byte	0x2f8
 3026 0273 04       		.byte	0x4
 3027 0274 0D       		.uleb128 0xd
 3028 0275 7500     		.ascii	"u\000"
 3029 0277 01       		.byte	0x1
 3030 0278 6D       		.byte	0x6d
 3031 0279 39030000 		.4byte	0x339
 3032 027d 08       		.byte	0x8
 3033 027e 0A       		.uleb128 0xa
 3034 027f 49010000 		.4byte	.LASF47
 3035 0283 01       		.byte	0x1
 3036 0284 6F       		.byte	0x6f
 3037 0285 EE010000 		.4byte	0x1ee
 3038 0289 10       		.byte	0x10
 3039 028a 0A       		.uleb128 0xa
 3040 028b 9A000000 		.4byte	.LASF48
 3041 028f 01       		.byte	0x1
 3042 0290 70       		.byte	0x70
 3043 0291 EE010000 		.4byte	0x1ee
 3044 0295 24       		.byte	0x24
 3045 0296 0A       		.uleb128 0xa
 3046 0297 3B030000 		.4byte	.LASF49
 3047 029b 01       		.byte	0x1
 3048 029c 72       		.byte	0x72
 3049 029d E3010000 		.4byte	0x1e3
 3050 02a1 38       		.byte	0x38
 3051 02a2 0A       		.uleb128 0xa
 3052 02a3 A4070000 		.4byte	.LASF50
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 112


 3053 02a7 01       		.byte	0x1
 3054 02a8 73       		.byte	0x73
 3055 02a9 FA000000 		.4byte	0xfa
 3056 02ad 3C       		.byte	0x3c
 3057 02ae 0A       		.uleb128 0xa
 3058 02af E2040000 		.4byte	.LASF51
 3059 02b3 01       		.byte	0x1
 3060 02b4 74       		.byte	0x74
 3061 02b5 FA000000 		.4byte	0xfa
 3062 02b9 40       		.byte	0x40
 3063 02ba 0A       		.uleb128 0xa
 3064 02bb 4D0A0000 		.4byte	.LASF52
 3065 02bf 01       		.byte	0x1
 3066 02c0 76       		.byte	0x76
 3067 02c1 58030000 		.4byte	0x358
 3068 02c5 44       		.byte	0x44
 3069 02c6 0A       		.uleb128 0xa
 3070 02c7 74010000 		.4byte	.LASF53
 3071 02cb 01       		.byte	0x1
 3072 02cc 77       		.byte	0x77
 3073 02cd 58030000 		.4byte	0x358
 3074 02d1 45       		.byte	0x45
 3075 02d2 00       		.byte	0
 3076 02d3 09       		.uleb128 0x9
 3077 02d4 41050000 		.4byte	.LASF54
 3078 02d8 08       		.byte	0x8
 3079 02d9 01       		.byte	0x1
 3080 02da 45       		.byte	0x45
 3081 02db F8020000 		.4byte	0x2f8
 3082 02df 0A       		.uleb128 0xa
 3083 02e0 49080000 		.4byte	.LASF55
 3084 02e4 01       		.byte	0x1
 3085 02e5 47       		.byte	0x47
 3086 02e6 F8020000 		.4byte	0x2f8
 3087 02ea 00       		.byte	0
 3088 02eb 0A       		.uleb128 0xa
 3089 02ec F5010000 		.4byte	.LASF56
 3090 02f0 01       		.byte	0x1
 3091 02f1 48       		.byte	0x48
 3092 02f2 F8020000 		.4byte	0x2f8
 3093 02f6 04       		.byte	0x4
 3094 02f7 00       		.byte	0
 3095 02f8 06       		.uleb128 0x6
 3096 02f9 04       		.byte	0x4
 3097 02fa C0000000 		.4byte	0xc0
 3098 02fe 02       		.uleb128 0x2
 3099 02ff 8B070000 		.4byte	.LASF57
 3100 0303 01       		.byte	0x1
 3101 0304 49       		.byte	0x49
 3102 0305 D3020000 		.4byte	0x2d3
 3103 0309 09       		.uleb128 0x9
 3104 030a 3A000000 		.4byte	.LASF58
 3105 030e 08       		.byte	0x8
 3106 030f 01       		.byte	0x1
 3107 0310 4B       		.byte	0x4b
 3108 0311 2E030000 		.4byte	0x32e
 3109 0315 0A       		.uleb128 0xa
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 113


 3110 0316 2F0A0000 		.4byte	.LASF59
 3111 031a 01       		.byte	0x1
 3112 031b 4D       		.byte	0x4d
 3113 031c F9010000 		.4byte	0x1f9
 3114 0320 00       		.byte	0
 3115 0321 0A       		.uleb128 0xa
 3116 0322 AB080000 		.4byte	.LASF60
 3117 0326 01       		.byte	0x1
 3118 0327 4E       		.byte	0x4e
 3119 0328 FA000000 		.4byte	0xfa
 3120 032c 04       		.byte	0x4
 3121 032d 00       		.byte	0
 3122 032e 02       		.uleb128 0x2
 3123 032f 67000000 		.4byte	.LASF61
 3124 0333 01       		.byte	0x1
 3125 0334 4F       		.byte	0x4f
 3126 0335 09030000 		.4byte	0x309
 3127 0339 0E       		.uleb128 0xe
 3128 033a 08       		.byte	0x8
 3129 033b 01       		.byte	0x1
 3130 033c 69       		.byte	0x69
 3131 033d 58030000 		.4byte	0x358
 3132 0341 0F       		.uleb128 0xf
 3133 0342 6E020000 		.4byte	.LASF62
 3134 0346 01       		.byte	0x1
 3135 0347 6B       		.byte	0x6b
 3136 0348 FE020000 		.4byte	0x2fe
 3137 034c 0F       		.uleb128 0xf
 3138 034d 4D030000 		.4byte	.LASF63
 3139 0351 01       		.byte	0x1
 3140 0352 6C       		.byte	0x6c
 3141 0353 2E030000 		.4byte	0x32e
 3142 0357 00       		.byte	0
 3143 0358 0B       		.uleb128 0xb
 3144 0359 C0000000 		.4byte	0xc0
 3145 035d 02       		.uleb128 0x2
 3146 035e 280A0000 		.4byte	.LASF64
 3147 0362 01       		.byte	0x1
 3148 0363 85       		.byte	0x85
 3149 0364 50020000 		.4byte	0x250
 3150 0368 02       		.uleb128 0x2
 3151 0369 9E010000 		.4byte	.LASF65
 3152 036d 01       		.byte	0x1
 3153 036e 89       		.byte	0x89
 3154 036f 5D030000 		.4byte	0x35d
 3155 0373 09       		.uleb128 0x9
 3156 0374 35010000 		.4byte	.LASF66
 3157 0378 08       		.byte	0x8
 3158 0379 01       		.byte	0x1
 3159 037a 96       		.byte	0x96
 3160 037b 98030000 		.4byte	0x398
 3161 037f 0A       		.uleb128 0xa
 3162 0380 4E040000 		.4byte	.LASF67
 3163 0384 01       		.byte	0x1
 3164 0385 98       		.byte	0x98
 3165 0386 AE000000 		.4byte	0xae
 3166 038a 00       		.byte	0
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 114


 3167 038b 0A       		.uleb128 0xa
 3168 038c 46040000 		.4byte	.LASF68
 3169 0390 01       		.byte	0x1
 3170 0391 99       		.byte	0x99
 3171 0392 3F020000 		.4byte	0x23f
 3172 0396 04       		.byte	0x4
 3173 0397 00       		.byte	0
 3174 0398 02       		.uleb128 0x2
 3175 0399 C8050000 		.4byte	.LASF69
 3176 039d 01       		.byte	0x1
 3177 039e 9A       		.byte	0x9a
 3178 039f 73030000 		.4byte	0x373
 3179 03a3 02       		.uleb128 0x2
 3180 03a4 D4010000 		.4byte	.LASF70
 3181 03a8 01       		.byte	0x1
 3182 03a9 9F       		.byte	0x9f
 3183 03aa 98030000 		.4byte	0x398
 3184 03ae 10       		.uleb128 0x10
 3185 03af 0B030000 		.4byte	.LASF71
 3186 03b3 01       		.byte	0x1
 3187 03b4 6608     		.2byte	0x866
 3188 03b6 FA000000 		.4byte	0xfa
 3189 03ba 00000000 		.4byte	.LFB54
 3190 03be 14000000 		.4byte	.LFE54-.LFB54
 3191 03c2 01       		.uleb128 0x1
 3192 03c3 9C       		.byte	0x9c
 3193 03c4 E9030000 		.4byte	0x3e9
 3194 03c8 11       		.uleb128 0x11
 3195 03c9 5A080000 		.4byte	.LASF73
 3196 03cd 01       		.byte	0x1
 3197 03ce 6608     		.2byte	0x866
 3198 03d0 F4030000 		.4byte	0x3f4
 3199 03d4 00000000 		.4byte	.LLST0
 3200 03d8 12       		.uleb128 0x12
 3201 03d9 CF060000 		.4byte	.LASF74
 3202 03dd 01       		.byte	0x1
 3203 03de 6808     		.2byte	0x868
 3204 03e0 FA000000 		.4byte	0xfa
 3205 03e4 3A000000 		.4byte	.LLST1
 3206 03e8 00       		.byte	0
 3207 03e9 06       		.uleb128 0x6
 3208 03ea 04       		.byte	0x4
 3209 03eb EF030000 		.4byte	0x3ef
 3210 03ef 07       		.uleb128 0x7
 3211 03f0 68030000 		.4byte	0x368
 3212 03f4 07       		.uleb128 0x7
 3213 03f5 E9030000 		.4byte	0x3e9
 3214 03f9 10       		.uleb128 0x10
 3215 03fa 32050000 		.4byte	.LASF72
 3216 03fe 01       		.byte	0x1
 3217 03ff 8809     		.2byte	0x988
 3218 0401 EF000000 		.4byte	0xef
 3219 0405 00000000 		.4byte	.LFB60
 3220 0409 1E000000 		.4byte	.LFE60-.LFB60
 3221 040d 01       		.uleb128 0x1
 3222 040e 9C       		.byte	0x9c
 3223 040f 46040000 		.4byte	0x446
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 115


 3224 0413 11       		.uleb128 0x11
 3225 0414 5A080000 		.4byte	.LASF73
 3226 0418 01       		.byte	0x1
 3227 0419 8809     		.2byte	0x988
 3228 041b E9030000 		.4byte	0x3e9
 3229 041f 58000000 		.4byte	.LLST2
 3230 0423 12       		.uleb128 0x12
 3231 0424 62080000 		.4byte	.LASF75
 3232 0428 01       		.byte	0x1
 3233 0429 8A09     		.2byte	0x98a
 3234 042b EF000000 		.4byte	0xef
 3235 042f 9D000000 		.4byte	.LLST3
 3236 0433 13       		.uleb128 0x13
 3237 0434 08000000 		.4byte	.LVL6
 3238 0438 B9180000 		.4byte	0x18b9
 3239 043c 13       		.uleb128 0x13
 3240 043d 1A000000 		.4byte	.LVL10
 3241 0441 C4180000 		.4byte	0x18c4
 3242 0445 00       		.byte	0
 3243 0446 10       		.uleb128 0x10
 3244 0447 F2020000 		.4byte	.LASF76
 3245 044b 01       		.byte	0x1
 3246 044c 5F09     		.2byte	0x95f
 3247 044e EF000000 		.4byte	0xef
 3248 0452 00000000 		.4byte	.LFB58
 3249 0456 1C000000 		.4byte	.LFE58-.LFB58
 3250 045a 01       		.uleb128 0x1
 3251 045b 9C       		.byte	0x9c
 3252 045c 93040000 		.4byte	0x493
 3253 0460 11       		.uleb128 0x11
 3254 0461 5A080000 		.4byte	.LASF73
 3255 0465 01       		.byte	0x1
 3256 0466 5F09     		.2byte	0x95f
 3257 0468 E9030000 		.4byte	0x3e9
 3258 046c BB000000 		.4byte	.LLST4
 3259 0470 12       		.uleb128 0x12
 3260 0471 62080000 		.4byte	.LASF75
 3261 0475 01       		.byte	0x1
 3262 0476 6109     		.2byte	0x961
 3263 0478 EF000000 		.4byte	0xef
 3264 047c 00010000 		.4byte	.LLST5
 3265 0480 13       		.uleb128 0x13
 3266 0481 08000000 		.4byte	.LVL13
 3267 0485 B9180000 		.4byte	0x18b9
 3268 0489 13       		.uleb128 0x13
 3269 048a 18000000 		.4byte	.LVL17
 3270 048e C4180000 		.4byte	0x18c4
 3271 0492 00       		.byte	0
 3272 0493 10       		.uleb128 0x10
 3273 0494 89040000 		.4byte	.LASF77
 3274 0498 01       		.byte	0x1
 3275 0499 7F08     		.2byte	0x87f
 3276 049b EF000000 		.4byte	0xef
 3277 049f 00000000 		.4byte	.LFB55
 3278 04a3 82000000 		.4byte	.LFE55-.LFB55
 3279 04a7 01       		.uleb128 0x1
 3280 04a8 9C       		.byte	0x9c
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 116


 3281 04a9 19050000 		.4byte	0x519
 3282 04ad 11       		.uleb128 0x11
 3283 04ae 5A080000 		.4byte	.LASF73
 3284 04b2 01       		.byte	0x1
 3285 04b3 7F08     		.2byte	0x87f
 3286 04b5 1F050000 		.4byte	0x51f
 3287 04b9 1E010000 		.4byte	.LLST6
 3288 04bd 11       		.uleb128 0x11
 3289 04be EC070000 		.4byte	.LASF78
 3290 04c2 01       		.byte	0x1
 3291 04c3 8008     		.2byte	0x880
 3292 04c5 B9000000 		.4byte	0xb9
 3293 04c9 8C010000 		.4byte	.LLST7
 3294 04cd 11       		.uleb128 0x11
 3295 04ce 430A0000 		.4byte	.LASF79
 3296 04d2 01       		.byte	0x1
 3297 04d3 8108     		.2byte	0x881
 3298 04d5 24050000 		.4byte	0x524
 3299 04d9 F8010000 		.4byte	.LLST8
 3300 04dd 12       		.uleb128 0x12
 3301 04de 62080000 		.4byte	.LASF75
 3302 04e2 01       		.byte	0x1
 3303 04e3 8308     		.2byte	0x883
 3304 04e5 EF000000 		.4byte	0xef
 3305 04e9 24020000 		.4byte	.LLST9
 3306 04ed 12       		.uleb128 0x12
 3307 04ee 3B030000 		.4byte	.LASF49
 3308 04f2 01       		.byte	0x1
 3309 04f3 8408     		.2byte	0x884
 3310 04f5 FA000000 		.4byte	0xfa
 3311 04f9 5A020000 		.4byte	.LLST10
 3312 04fd 13       		.uleb128 0x13
 3313 04fe 1A000000 		.4byte	.LVL24
 3314 0502 CF180000 		.4byte	0x18cf
 3315 0506 13       		.uleb128 0x13
 3316 0507 2A000000 		.4byte	.LVL27
 3317 050b DB180000 		.4byte	0x18db
 3318 050f 13       		.uleb128 0x13
 3319 0510 48000000 		.4byte	.LVL30
 3320 0514 DB180000 		.4byte	0x18db
 3321 0518 00       		.byte	0
 3322 0519 06       		.uleb128 0x6
 3323 051a 04       		.byte	0x4
 3324 051b 68030000 		.4byte	0x368
 3325 051f 07       		.uleb128 0x7
 3326 0520 19050000 		.4byte	0x519
 3327 0524 07       		.uleb128 0x7
 3328 0525 EF000000 		.4byte	0xef
 3329 0529 14       		.uleb128 0x14
 3330 052a 23090000 		.4byte	.LASF81
 3331 052e 01       		.byte	0x1
 3332 052f D208     		.2byte	0x8d2
 3333 0531 00000000 		.4byte	.LFB56
 3334 0535 24000000 		.4byte	.LFE56-.LFB56
 3335 0539 01       		.uleb128 0x1
 3336 053a 9C       		.byte	0x9c
 3337 053b 70050000 		.4byte	0x570
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 117


 3338 053f 11       		.uleb128 0x11
 3339 0540 5A080000 		.4byte	.LASF73
 3340 0544 01       		.byte	0x1
 3341 0545 D208     		.2byte	0x8d2
 3342 0547 1F050000 		.4byte	0x51f
 3343 054b 8D020000 		.4byte	.LLST11
 3344 054f 11       		.uleb128 0x11
 3345 0550 02030000 		.4byte	.LASF80
 3346 0554 01       		.byte	0x1
 3347 0555 D308     		.2byte	0x8d3
 3348 0557 70050000 		.4byte	0x570
 3349 055b AE020000 		.4byte	.LLST12
 3350 055f 15       		.uleb128 0x15
 3351 0560 22000000 		.4byte	.LVL43
 3352 0564 DB180000 		.4byte	0x18db
 3353 0568 16       		.uleb128 0x16
 3354 0569 01       		.uleb128 0x1
 3355 056a 50       		.byte	0x50
 3356 056b 02       		.uleb128 0x2
 3357 056c 74       		.byte	0x74
 3358 056d 00       		.sleb128 0
 3359 056e 00       		.byte	0
 3360 056f 00       		.byte	0
 3361 0570 07       		.uleb128 0x7
 3362 0571 A5000000 		.4byte	0xa5
 3363 0575 14       		.uleb128 0x14
 3364 0576 C6090000 		.4byte	.LASF82
 3365 057a 01       		.byte	0x1
 3366 057b E708     		.2byte	0x8e7
 3367 057d 00000000 		.4byte	.LFB57
 3368 0581 6E000000 		.4byte	.LFE57-.LFB57
 3369 0585 01       		.uleb128 0x1
 3370 0586 9C       		.byte	0x9c
 3371 0587 36060000 		.4byte	0x636
 3372 058b 11       		.uleb128 0x11
 3373 058c 5A080000 		.4byte	.LASF73
 3374 0590 01       		.byte	0x1
 3375 0591 E708     		.2byte	0x8e7
 3376 0593 1F050000 		.4byte	0x51f
 3377 0597 DA020000 		.4byte	.LLST13
 3378 059b 17       		.uleb128 0x17
 3379 059c 08000000 		.4byte	.LBB2
 3380 05a0 2C000000 		.4byte	.LBE2-.LBB2
 3381 05a4 D6050000 		.4byte	0x5d6
 3382 05a8 12       		.uleb128 0x12
 3383 05a9 74010000 		.4byte	.LASF53
 3384 05ad 01       		.byte	0x1
 3385 05ae F108     		.2byte	0x8f1
 3386 05b0 C0000000 		.4byte	0xc0
 3387 05b4 06030000 		.4byte	.LLST14
 3388 05b8 18       		.uleb128 0x18
 3389 05b9 1E000000 		.4byte	.LVL48
 3390 05bd E4180000 		.4byte	0x18e4
 3391 05c1 CC050000 		.4byte	0x5cc
 3392 05c5 16       		.uleb128 0x16
 3393 05c6 01       		.uleb128 0x1
 3394 05c7 50       		.byte	0x50
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 118


 3395 05c8 02       		.uleb128 0x2
 3396 05c9 75       		.byte	0x75
 3397 05ca 24       		.sleb128 36
 3398 05cb 00       		.byte	0
 3399 05cc 13       		.uleb128 0x13
 3400 05cd 26000000 		.4byte	.LVL49
 3401 05d1 F0180000 		.4byte	0x18f0
 3402 05d5 00       		.byte	0
 3403 05d6 17       		.uleb128 0x17
 3404 05d7 3C000000 		.4byte	.LBB3
 3405 05db 2C000000 		.4byte	.LBE3-.LBB3
 3406 05df 11060000 		.4byte	0x611
 3407 05e3 12       		.uleb128 0x12
 3408 05e4 4D0A0000 		.4byte	.LASF52
 3409 05e8 01       		.byte	0x1
 3410 05e9 4209     		.2byte	0x942
 3411 05eb C0000000 		.4byte	0xc0
 3412 05ef 24030000 		.4byte	.LLST15
 3413 05f3 18       		.uleb128 0x18
 3414 05f4 52000000 		.4byte	.LVL56
 3415 05f8 E4180000 		.4byte	0x18e4
 3416 05fc 07060000 		.4byte	0x607
 3417 0600 16       		.uleb128 0x16
 3418 0601 01       		.uleb128 0x1
 3419 0602 50       		.byte	0x50
 3420 0603 02       		.uleb128 0x2
 3421 0604 75       		.byte	0x75
 3422 0605 10       		.sleb128 16
 3423 0606 00       		.byte	0
 3424 0607 13       		.uleb128 0x13
 3425 0608 5A000000 		.4byte	.LVL57
 3426 060c F0180000 		.4byte	0x18f0
 3427 0610 00       		.byte	0
 3428 0611 13       		.uleb128 0x13
 3429 0612 08000000 		.4byte	.LVL46
 3430 0616 B9180000 		.4byte	0x18b9
 3431 061a 13       		.uleb128 0x13
 3432 061b 38000000 		.4byte	.LVL52
 3433 061f C4180000 		.4byte	0x18c4
 3434 0623 13       		.uleb128 0x13
 3435 0624 3C000000 		.4byte	.LVL53
 3436 0628 B9180000 		.4byte	0x18b9
 3437 062c 13       		.uleb128 0x13
 3438 062d 6C000000 		.4byte	.LVL60
 3439 0631 C4180000 		.4byte	0x18c4
 3440 0635 00       		.byte	0
 3441 0636 19       		.uleb128 0x19
 3442 0637 D5090000 		.4byte	.LASF89
 3443 063b 01       		.byte	0x1
 3444 063c 2801     		.2byte	0x128
 3445 063e EF000000 		.4byte	0xef
 3446 0642 00000000 		.4byte	.LFB34
 3447 0646 88000000 		.4byte	.LFE34-.LFB34
 3448 064a 01       		.uleb128 0x1
 3449 064b 9C       		.byte	0x9c
 3450 064c E8060000 		.4byte	0x6e8
 3451 0650 11       		.uleb128 0x11
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 119


 3452 0651 6E020000 		.4byte	.LASF62
 3453 0655 01       		.byte	0x1
 3454 0656 2801     		.2byte	0x128
 3455 0658 3F020000 		.4byte	0x23f
 3456 065c 42030000 		.4byte	.LLST16
 3457 0660 11       		.uleb128 0x11
 3458 0661 6F060000 		.4byte	.LASF83
 3459 0665 01       		.byte	0x1
 3460 0666 2901     		.2byte	0x129
 3461 0668 EF000000 		.4byte	0xef
 3462 066c 9A030000 		.4byte	.LLST17
 3463 0670 12       		.uleb128 0x12
 3464 0671 62080000 		.4byte	.LASF75
 3465 0675 01       		.byte	0x1
 3466 0676 2B01     		.2byte	0x12b
 3467 0678 EF000000 		.4byte	0xef
 3468 067c DC030000 		.4byte	.LLST18
 3469 0680 12       		.uleb128 0x12
 3470 0681 5A080000 		.4byte	.LASF73
 3471 0685 01       		.byte	0x1
 3472 0686 2C01     		.2byte	0x12c
 3473 0688 1F050000 		.4byte	0x51f
 3474 068c FB030000 		.4byte	.LLST19
 3475 0690 13       		.uleb128 0x13
 3476 0691 22000000 		.4byte	.LVL68
 3477 0695 B9180000 		.4byte	0x18b9
 3478 0699 18       		.uleb128 0x18
 3479 069a 5A000000 		.4byte	.LVL69
 3480 069e E4180000 		.4byte	0x18e4
 3481 06a2 AD060000 		.4byte	0x6ad
 3482 06a6 16       		.uleb128 0x16
 3483 06a7 01       		.uleb128 0x1
 3484 06a8 50       		.byte	0x50
 3485 06a9 02       		.uleb128 0x2
 3486 06aa 74       		.byte	0x74
 3487 06ab 10       		.sleb128 16
 3488 06ac 00       		.byte	0
 3489 06ad 13       		.uleb128 0x13
 3490 06ae 62000000 		.4byte	.LVL70
 3491 06b2 FC180000 		.4byte	0x18fc
 3492 06b6 18       		.uleb128 0x18
 3493 06b7 6C000000 		.4byte	.LVL71
 3494 06bb 07190000 		.4byte	0x1907
 3495 06bf CA060000 		.4byte	0x6ca
 3496 06c3 16       		.uleb128 0x16
 3497 06c4 01       		.uleb128 0x1
 3498 06c5 50       		.byte	0x50
 3499 06c6 02       		.uleb128 0x2
 3500 06c7 74       		.byte	0x74
 3501 06c8 10       		.sleb128 16
 3502 06c9 00       		.byte	0
 3503 06ca 18       		.uleb128 0x18
 3504 06cb 74000000 		.4byte	.LVL72
 3505 06cf 07190000 		.4byte	0x1907
 3506 06d3 DE060000 		.4byte	0x6de
 3507 06d7 16       		.uleb128 0x16
 3508 06d8 01       		.uleb128 0x1
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 120


 3509 06d9 50       		.byte	0x50
 3510 06da 02       		.uleb128 0x2
 3511 06db 74       		.byte	0x74
 3512 06dc 24       		.sleb128 36
 3513 06dd 00       		.byte	0
 3514 06de 13       		.uleb128 0x13
 3515 06df 78000000 		.4byte	.LVL73
 3516 06e3 C4180000 		.4byte	0x18c4
 3517 06e7 00       		.byte	0
 3518 06e8 14       		.uleb128 0x14
 3519 06e9 2D020000 		.4byte	.LASF84
 3520 06ed 01       		.byte	0x1
 3521 06ee EE01     		.2byte	0x1ee
 3522 06f0 00000000 		.4byte	.LFB36
 3523 06f4 1C000000 		.4byte	.LFE36-.LFB36
 3524 06f8 01       		.uleb128 0x1
 3525 06f9 9C       		.byte	0x9c
 3526 06fa 64070000 		.4byte	0x764
 3527 06fe 11       		.uleb128 0x11
 3528 06ff 31070000 		.4byte	.LASF85
 3529 0703 01       		.byte	0x1
 3530 0704 EE01     		.2byte	0x1ee
 3531 0706 64070000 		.4byte	0x764
 3532 070a 53040000 		.4byte	.LLST20
 3533 070e 11       		.uleb128 0x11
 3534 070f E2040000 		.4byte	.LASF51
 3535 0713 01       		.byte	0x1
 3536 0714 EF01     		.2byte	0x1ef
 3537 0716 64070000 		.4byte	0x764
 3538 071a 80040000 		.4byte	.LLST21
 3539 071e 11       		.uleb128 0x11
 3540 071f 2D060000 		.4byte	.LASF86
 3541 0723 01       		.byte	0x1
 3542 0724 F001     		.2byte	0x1f0
 3543 0726 10010000 		.4byte	0x110
 3544 072a AE040000 		.4byte	.LLST22
 3545 072e 11       		.uleb128 0x11
 3546 072f EF060000 		.4byte	.LASF87
 3547 0733 01       		.byte	0x1
 3548 0734 F101     		.2byte	0x1f1
 3549 0736 69070000 		.4byte	0x769
 3550 073a CF040000 		.4byte	.LLST23
 3551 073e 1A       		.uleb128 0x1a
 3552 073f 1F010000 		.4byte	.LASF88
 3553 0743 01       		.byte	0x1
 3554 0744 F201     		.2byte	0x1f2
 3555 0746 19050000 		.4byte	0x519
 3556 074a 02       		.uleb128 0x2
 3557 074b 91       		.byte	0x91
 3558 074c 00       		.sleb128 0
 3559 074d 15       		.uleb128 0x15
 3560 074e 1A000000 		.4byte	.LVL85
 3561 0752 36060000 		.4byte	0x636
 3562 0756 16       		.uleb128 0x16
 3563 0757 01       		.uleb128 0x1
 3564 0758 50       		.byte	0x50
 3565 0759 03       		.uleb128 0x3
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 121


 3566 075a 91       		.byte	0x91
 3567 075b 00       		.sleb128 0
 3568 075c 06       		.byte	0x6
 3569 075d 16       		.uleb128 0x16
 3570 075e 01       		.uleb128 0x1
 3571 075f 51       		.byte	0x51
 3572 0760 01       		.uleb128 0x1
 3573 0761 31       		.byte	0x31
 3574 0762 00       		.byte	0
 3575 0763 00       		.byte	0
 3576 0764 07       		.uleb128 0x7
 3577 0765 FA000000 		.4byte	0xfa
 3578 0769 07       		.uleb128 0x7
 3579 076a CB000000 		.4byte	0xcb
 3580 076e 19       		.uleb128 0x19
 3581 076f DB050000 		.4byte	.LASF90
 3582 0773 01       		.byte	0x1
 3583 0774 AC01     		.2byte	0x1ac
 3584 0776 3F020000 		.4byte	0x23f
 3585 077a 00000000 		.4byte	.LFB35
 3586 077e 52000000 		.4byte	.LFE35-.LFB35
 3587 0782 01       		.uleb128 0x1
 3588 0783 9C       		.byte	0x9c
 3589 0784 2C080000 		.4byte	0x82c
 3590 0788 11       		.uleb128 0x11
 3591 0789 31070000 		.4byte	.LASF85
 3592 078d 01       		.byte	0x1
 3593 078e AC01     		.2byte	0x1ac
 3594 0790 64070000 		.4byte	0x764
 3595 0794 F0040000 		.4byte	.LLST24
 3596 0798 11       		.uleb128 0x11
 3597 0799 E2040000 		.4byte	.LASF51
 3598 079d 01       		.byte	0x1
 3599 079e AD01     		.2byte	0x1ad
 3600 07a0 64070000 		.4byte	0x764
 3601 07a4 3D050000 		.4byte	.LLST25
 3602 07a8 11       		.uleb128 0x11
 3603 07a9 EF060000 		.4byte	.LASF87
 3604 07ad 01       		.byte	0x1
 3605 07ae AE01     		.2byte	0x1ae
 3606 07b0 69070000 		.4byte	0x769
 3607 07b4 7F050000 		.4byte	.LLST26
 3608 07b8 12       		.uleb128 0x12
 3609 07b9 1F010000 		.4byte	.LASF88
 3610 07bd 01       		.byte	0x1
 3611 07be B001     		.2byte	0x1b0
 3612 07c0 19050000 		.4byte	0x519
 3613 07c4 B9050000 		.4byte	.LLST27
 3614 07c8 12       		.uleb128 0x12
 3615 07c9 CB070000 		.4byte	.LASF91
 3616 07cd 01       		.byte	0x1
 3617 07ce B101     		.2byte	0x1b1
 3618 07d0 25000000 		.4byte	0x25
 3619 07d4 05060000 		.4byte	.LLST28
 3620 07d8 12       		.uleb128 0x12
 3621 07d9 2D060000 		.4byte	.LASF86
 3622 07dd 01       		.byte	0x1
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 122


 3623 07de B201     		.2byte	0x1b2
 3624 07e0 10010000 		.4byte	0x110
 3625 07e4 36060000 		.4byte	.LLST29
 3626 07e8 18       		.uleb128 0x18
 3627 07e9 2C000000 		.4byte	.LVL93
 3628 07ed 13190000 		.4byte	0x1913
 3629 07f1 01080000 		.4byte	0x801
 3630 07f5 16       		.uleb128 0x16
 3631 07f6 01       		.uleb128 0x1
 3632 07f7 50       		.byte	0x50
 3633 07f8 07       		.uleb128 0x7
 3634 07f9 77       		.byte	0x77
 3635 07fa 00       		.sleb128 0
 3636 07fb 74       		.byte	0x74
 3637 07fc 00       		.sleb128 0
 3638 07fd 1E       		.byte	0x1e
 3639 07fe 23       		.byte	0x23
 3640 07ff 48       		.uleb128 0x48
 3641 0800 00       		.byte	0
 3642 0801 15       		.uleb128 0x15
 3643 0802 40000000 		.4byte	.LVL98
 3644 0806 E8060000 		.4byte	0x6e8
 3645 080a 16       		.uleb128 0x16
 3646 080b 01       		.uleb128 0x1
 3647 080c 50       		.byte	0x50
 3648 080d 02       		.uleb128 0x2
 3649 080e 74       		.byte	0x74
 3650 080f 00       		.sleb128 0
 3651 0810 16       		.uleb128 0x16
 3652 0811 01       		.uleb128 0x1
 3653 0812 51       		.byte	0x51
 3654 0813 02       		.uleb128 0x2
 3655 0814 77       		.byte	0x77
 3656 0815 00       		.sleb128 0
 3657 0816 16       		.uleb128 0x16
 3658 0817 01       		.uleb128 0x1
 3659 0818 52       		.byte	0x52
 3660 0819 03       		.uleb128 0x3
 3661 081a 75       		.byte	0x75
 3662 081b C800     		.sleb128 72
 3663 081d 16       		.uleb128 0x16
 3664 081e 01       		.uleb128 0x1
 3665 081f 53       		.byte	0x53
 3666 0820 02       		.uleb128 0x2
 3667 0821 76       		.byte	0x76
 3668 0822 00       		.sleb128 0
 3669 0823 16       		.uleb128 0x16
 3670 0824 02       		.uleb128 0x2
 3671 0825 7D       		.byte	0x7d
 3672 0826 00       		.sleb128 0
 3673 0827 02       		.uleb128 0x2
 3674 0828 75       		.byte	0x75
 3675 0829 00       		.sleb128 0
 3676 082a 00       		.byte	0
 3677 082b 00       		.byte	0
 3678 082c 1B       		.uleb128 0x1b
 3679 082d 880A0000 		.4byte	.LASF92
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 123


 3680 0831 01       		.byte	0x1
 3681 0832 2203     		.2byte	0x322
 3682 0834 3F020000 		.4byte	0x23f
 3683 0838 00000000 		.4byte	.LFB41
 3684 083c 24000000 		.4byte	.LFE41-.LFB41
 3685 0840 01       		.uleb128 0x1
 3686 0841 9C       		.byte	0x9c
 3687 0842 92080000 		.4byte	0x892
 3688 0846 11       		.uleb128 0x11
 3689 0847 79060000 		.4byte	.LASF93
 3690 084b 01       		.byte	0x1
 3691 084c 2203     		.2byte	0x322
 3692 084e 64070000 		.4byte	0x764
 3693 0852 49060000 		.4byte	.LLST30
 3694 0856 11       		.uleb128 0x11
 3695 0857 ED040000 		.4byte	.LASF94
 3696 085b 01       		.byte	0x1
 3697 085c 2303     		.2byte	0x323
 3698 085e 64070000 		.4byte	0x764
 3699 0862 9C060000 		.4byte	.LLST31
 3700 0866 12       		.uleb128 0x12
 3701 0867 46040000 		.4byte	.LASF68
 3702 086b 01       		.byte	0x1
 3703 086c 2503     		.2byte	0x325
 3704 086e 3F020000 		.4byte	0x23f
 3705 0872 DE060000 		.4byte	.LLST32
 3706 0876 15       		.uleb128 0x15
 3707 0877 14000000 		.4byte	.LVL108
 3708 087b 6E070000 		.4byte	0x76e
 3709 087f 16       		.uleb128 0x16
 3710 0880 01       		.uleb128 0x1
 3711 0881 50       		.byte	0x50
 3712 0882 03       		.uleb128 0x3
 3713 0883 F3       		.byte	0xf3
 3714 0884 01       		.uleb128 0x1
 3715 0885 50       		.byte	0x50
 3716 0886 16       		.uleb128 0x16
 3717 0887 01       		.uleb128 0x1
 3718 0888 51       		.byte	0x51
 3719 0889 01       		.uleb128 0x1
 3720 088a 30       		.byte	0x30
 3721 088b 16       		.uleb128 0x16
 3722 088c 01       		.uleb128 0x1
 3723 088d 52       		.byte	0x52
 3724 088e 01       		.uleb128 0x1
 3725 088f 32       		.byte	0x32
 3726 0890 00       		.byte	0
 3727 0891 00       		.byte	0
 3728 0892 1B       		.uleb128 0x1b
 3729 0893 9C040000 		.4byte	.LASF95
 3730 0897 01       		.byte	0x1
 3731 0898 4303     		.2byte	0x343
 3732 089a EF000000 		.4byte	0xef
 3733 089e 00000000 		.4byte	.LFB42
 3734 08a2 EA000000 		.4byte	.LFE42-.LFB42
 3735 08a6 01       		.uleb128 0x1
 3736 08a7 9C       		.byte	0x9c
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 124


 3737 08a8 670A0000 		.4byte	0xa67
 3738 08ac 11       		.uleb128 0x11
 3739 08ad 6E020000 		.4byte	.LASF62
 3740 08b1 01       		.byte	0x1
 3741 08b2 4303     		.2byte	0x343
 3742 08b4 3F020000 		.4byte	0x23f
 3743 08b8 14070000 		.4byte	.LLST33
 3744 08bc 11       		.uleb128 0x11
 3745 08bd EC070000 		.4byte	.LASF78
 3746 08c1 01       		.byte	0x1
 3747 08c2 4403     		.2byte	0x344
 3748 08c4 670A0000 		.4byte	0xa67
 3749 08c8 40070000 		.4byte	.LLST34
 3750 08cc 11       		.uleb128 0x11
 3751 08cd 5C090000 		.4byte	.LASF96
 3752 08d1 01       		.byte	0x1
 3753 08d2 4503     		.2byte	0x345
 3754 08d4 05010000 		.4byte	0x105
 3755 08d8 6C070000 		.4byte	.LLST35
 3756 08dc 11       		.uleb128 0x11
 3757 08dd A6010000 		.4byte	.LASF97
 3758 08e1 01       		.byte	0x1
 3759 08e2 4603     		.2byte	0x346
 3760 08e4 24050000 		.4byte	0x524
 3761 08e8 A3070000 		.4byte	.LLST36
 3762 08ec 12       		.uleb128 0x12
 3763 08ed 28040000 		.4byte	.LASF98
 3764 08f1 01       		.byte	0x1
 3765 08f2 4803     		.2byte	0x348
 3766 08f4 EF000000 		.4byte	0xef
 3767 08f8 CF070000 		.4byte	.LLST37
 3768 08fc 12       		.uleb128 0x12
 3769 08fd 5F020000 		.4byte	.LASF99
 3770 0901 01       		.byte	0x1
 3771 0902 4803     		.2byte	0x348
 3772 0904 EF000000 		.4byte	0xef
 3773 0908 05080000 		.4byte	.LLST38
 3774 090c 1C       		.uleb128 0x1c
 3775 090d 3D040000 		.4byte	.LASF100
 3776 0911 01       		.byte	0x1
 3777 0912 4903     		.2byte	0x349
 3778 0914 34020000 		.4byte	0x234
 3779 0918 02       		.uleb128 0x2
 3780 0919 91       		.byte	0x91
 3781 091a 60       		.sleb128 -32
 3782 091b 12       		.uleb128 0x12
 3783 091c 5A080000 		.4byte	.LASF73
 3784 0920 01       		.byte	0x1
 3785 0921 4A03     		.2byte	0x34a
 3786 0923 1F050000 		.4byte	0x51f
 3787 0927 23080000 		.4byte	.LLST39
 3788 092b 13       		.uleb128 0x13
 3789 092c 12000000 		.4byte	.LVL117
 3790 0930 B9180000 		.4byte	0x18b9
 3791 0934 18       		.uleb128 0x18
 3792 0935 28000000 		.4byte	.LVL118
 3793 0939 93040000 		.4byte	0x493
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 125


 3794 093d 54090000 		.4byte	0x954
 3795 0941 16       		.uleb128 0x16
 3796 0942 01       		.uleb128 0x1
 3797 0943 50       		.byte	0x50
 3798 0944 02       		.uleb128 0x2
 3799 0945 74       		.byte	0x74
 3800 0946 00       		.sleb128 0
 3801 0947 16       		.uleb128 0x16
 3802 0948 01       		.uleb128 0x1
 3803 0949 51       		.byte	0x51
 3804 094a 02       		.uleb128 0x2
 3805 094b 75       		.byte	0x75
 3806 094c 00       		.sleb128 0
 3807 094d 16       		.uleb128 0x16
 3808 094e 01       		.uleb128 0x1
 3809 094f 52       		.byte	0x52
 3810 0950 02       		.uleb128 0x2
 3811 0951 77       		.byte	0x77
 3812 0952 00       		.sleb128 0
 3813 0953 00       		.byte	0
 3814 0954 18       		.uleb128 0x18
 3815 0955 36000000 		.4byte	.LVL120
 3816 0959 E4180000 		.4byte	0x18e4
 3817 095d 68090000 		.4byte	0x968
 3818 0961 16       		.uleb128 0x16
 3819 0962 01       		.uleb128 0x1
 3820 0963 50       		.byte	0x50
 3821 0964 02       		.uleb128 0x2
 3822 0965 74       		.byte	0x74
 3823 0966 24       		.sleb128 36
 3824 0967 00       		.byte	0
 3825 0968 13       		.uleb128 0x13
 3826 0969 3E000000 		.4byte	.LVL121
 3827 096d FC180000 		.4byte	0x18fc
 3828 0971 13       		.uleb128 0x13
 3829 0972 48000000 		.4byte	.LVL123
 3830 0976 FC180000 		.4byte	0x18fc
 3831 097a 13       		.uleb128 0x13
 3832 097b 4C000000 		.4byte	.LVL124
 3833 097f C4180000 		.4byte	0x18c4
 3834 0983 13       		.uleb128 0x13
 3835 0984 5A000000 		.4byte	.LVL125
 3836 0988 C4180000 		.4byte	0x18c4
 3837 098c 18       		.uleb128 0x18
 3838 098d 68000000 		.4byte	.LVL126
 3839 0991 1E190000 		.4byte	0x191e
 3840 0995 A0090000 		.4byte	0x9a0
 3841 0999 16       		.uleb128 0x16
 3842 099a 01       		.uleb128 0x1
 3843 099b 50       		.byte	0x50
 3844 099c 02       		.uleb128 0x2
 3845 099d 91       		.byte	0x91
 3846 099e 60       		.sleb128 -32
 3847 099f 00       		.byte	0
 3848 09a0 13       		.uleb128 0x13
 3849 09a1 6E000000 		.4byte	.LVL128
 3850 09a5 C4180000 		.4byte	0x18c4
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 126


 3851 09a9 13       		.uleb128 0x13
 3852 09aa 72000000 		.4byte	.LVL129
 3853 09ae 2A190000 		.4byte	0x192a
 3854 09b2 13       		.uleb128 0x13
 3855 09b3 76000000 		.4byte	.LVL130
 3856 09b7 B9180000 		.4byte	0x18b9
 3857 09bb 13       		.uleb128 0x13
 3858 09bc 9A000000 		.4byte	.LVL131
 3859 09c0 C4180000 		.4byte	0x18c4
 3860 09c4 18       		.uleb128 0x18
 3861 09c5 A2000000 		.4byte	.LVL133
 3862 09c9 36190000 		.4byte	0x1936
 3863 09cd DE090000 		.4byte	0x9de
 3864 09d1 16       		.uleb128 0x16
 3865 09d2 01       		.uleb128 0x1
 3866 09d3 50       		.byte	0x50
 3867 09d4 02       		.uleb128 0x2
 3868 09d5 91       		.byte	0x91
 3869 09d6 60       		.sleb128 -32
 3870 09d7 16       		.uleb128 0x16
 3871 09d8 01       		.uleb128 0x1
 3872 09d9 51       		.byte	0x51
 3873 09da 02       		.uleb128 0x2
 3874 09db 91       		.byte	0x91
 3875 09dc 5C       		.sleb128 -36
 3876 09dd 00       		.byte	0
 3877 09de 18       		.uleb128 0x18
 3878 09df AC000000 		.4byte	.LVL134
 3879 09e3 F9030000 		.4byte	0x3f9
 3880 09e7 F2090000 		.4byte	0x9f2
 3881 09eb 16       		.uleb128 0x16
 3882 09ec 01       		.uleb128 0x1
 3883 09ed 50       		.byte	0x50
 3884 09ee 02       		.uleb128 0x2
 3885 09ef 74       		.byte	0x74
 3886 09f0 00       		.sleb128 0
 3887 09f1 00       		.byte	0
 3888 09f2 18       		.uleb128 0x18
 3889 09f3 BA000000 		.4byte	.LVL135
 3890 09f7 42190000 		.4byte	0x1942
 3891 09fb 060A0000 		.4byte	0xa06
 3892 09ff 16       		.uleb128 0x16
 3893 0a00 01       		.uleb128 0x1
 3894 0a01 50       		.byte	0x50
 3895 0a02 02       		.uleb128 0x2
 3896 0a03 74       		.byte	0x74
 3897 0a04 10       		.sleb128 16
 3898 0a05 00       		.byte	0
 3899 0a06 18       		.uleb128 0x18
 3900 0a07 C0000000 		.4byte	.LVL136
 3901 0a0b 75050000 		.4byte	0x575
 3902 0a0f 1A0A0000 		.4byte	0xa1a
 3903 0a13 16       		.uleb128 0x16
 3904 0a14 01       		.uleb128 0x1
 3905 0a15 50       		.byte	0x50
 3906 0a16 02       		.uleb128 0x2
 3907 0a17 74       		.byte	0x74
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 127


 3908 0a18 00       		.sleb128 0
 3909 0a19 00       		.byte	0
 3910 0a1a 13       		.uleb128 0x13
 3911 0a1b C4000000 		.4byte	.LVL137
 3912 0a1f 4E190000 		.4byte	0x194e
 3913 0a23 13       		.uleb128 0x13
 3914 0a24 CC000000 		.4byte	.LVL138
 3915 0a28 FC180000 		.4byte	0x18fc
 3916 0a2c 18       		.uleb128 0x18
 3917 0a2d D4000000 		.4byte	.LVL139
 3918 0a31 75050000 		.4byte	0x575
 3919 0a35 400A0000 		.4byte	0xa40
 3920 0a39 16       		.uleb128 0x16
 3921 0a3a 01       		.uleb128 0x1
 3922 0a3b 50       		.byte	0x50
 3923 0a3c 02       		.uleb128 0x2
 3924 0a3d 74       		.byte	0x74
 3925 0a3e 00       		.sleb128 0
 3926 0a3f 00       		.byte	0
 3927 0a40 13       		.uleb128 0x13
 3928 0a41 D8000000 		.4byte	.LVL140
 3929 0a45 4E190000 		.4byte	0x194e
 3930 0a49 18       		.uleb128 0x18
 3931 0a4a E0000000 		.4byte	.LVL141
 3932 0a4e 75050000 		.4byte	0x575
 3933 0a52 5D0A0000 		.4byte	0xa5d
 3934 0a56 16       		.uleb128 0x16
 3935 0a57 01       		.uleb128 0x1
 3936 0a58 50       		.byte	0x50
 3937 0a59 02       		.uleb128 0x2
 3938 0a5a 74       		.byte	0x74
 3939 0a5b 00       		.sleb128 0
 3940 0a5c 00       		.byte	0
 3941 0a5d 13       		.uleb128 0x13
 3942 0a5e E4000000 		.4byte	.LVL142
 3943 0a62 4E190000 		.4byte	0x194e
 3944 0a66 00       		.byte	0
 3945 0a67 07       		.uleb128 0x7
 3946 0a68 B9000000 		.4byte	0xb9
 3947 0a6c 14       		.uleb128 0x14
 3948 0a6d 0F060000 		.4byte	.LASF101
 3949 0a71 01       		.byte	0x1
 3950 0a72 1E02     		.2byte	0x21e
 3951 0a74 00000000 		.4byte	.LFB37
 3952 0a78 18000000 		.4byte	.LFE37-.LFB37
 3953 0a7c 01       		.uleb128 0x1
 3954 0a7d 9C       		.byte	0x9c
 3955 0a7e B30A0000 		.4byte	0xab3
 3956 0a82 11       		.uleb128 0x11
 3957 0a83 1F010000 		.4byte	.LASF88
 3958 0a87 01       		.byte	0x1
 3959 0a88 1E02     		.2byte	0x21e
 3960 0a8a 19050000 		.4byte	0x519
 3961 0a8e 4F080000 		.4byte	.LLST40
 3962 0a92 15       		.uleb128 0x15
 3963 0a93 16000000 		.4byte	.LVL148
 3964 0a97 92080000 		.4byte	0x892
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 128


 3965 0a9b 16       		.uleb128 0x16
 3966 0a9c 01       		.uleb128 0x1
 3967 0a9d 50       		.byte	0x50
 3968 0a9e 03       		.uleb128 0x3
 3969 0a9f F3       		.byte	0xf3
 3970 0aa0 01       		.uleb128 0x1
 3971 0aa1 50       		.byte	0x50
 3972 0aa2 16       		.uleb128 0x16
 3973 0aa3 01       		.uleb128 0x1
 3974 0aa4 51       		.byte	0x51
 3975 0aa5 01       		.uleb128 0x1
 3976 0aa6 30       		.byte	0x30
 3977 0aa7 16       		.uleb128 0x16
 3978 0aa8 01       		.uleb128 0x1
 3979 0aa9 52       		.byte	0x52
 3980 0aaa 01       		.uleb128 0x1
 3981 0aab 30       		.byte	0x30
 3982 0aac 16       		.uleb128 0x16
 3983 0aad 01       		.uleb128 0x1
 3984 0aae 53       		.byte	0x53
 3985 0aaf 01       		.uleb128 0x1
 3986 0ab0 30       		.byte	0x30
 3987 0ab1 00       		.byte	0
 3988 0ab2 00       		.byte	0
 3989 0ab3 1B       		.uleb128 0x1b
 3990 0ab4 EF050000 		.4byte	.LASF102
 3991 0ab8 01       		.byte	0x1
 3992 0ab9 3C02     		.2byte	0x23c
 3993 0abb 3F020000 		.4byte	0x23f
 3994 0abf 00000000 		.4byte	.LFB38
 3995 0ac3 16000000 		.4byte	.LFE38-.LFB38
 3996 0ac7 01       		.uleb128 0x1
 3997 0ac8 9C       		.byte	0x9c
 3998 0ac9 300B0000 		.4byte	0xb30
 3999 0acd 11       		.uleb128 0x11
 4000 0ace EF060000 		.4byte	.LASF87
 4001 0ad2 01       		.byte	0x1
 4002 0ad3 3C02     		.2byte	0x23c
 4003 0ad5 69070000 		.4byte	0x769
 4004 0ad9 70080000 		.4byte	.LLST41
 4005 0add 12       		.uleb128 0x12
 4006 0ade 6F060000 		.4byte	.LASF83
 4007 0ae2 01       		.byte	0x1
 4008 0ae3 3E02     		.2byte	0x23e
 4009 0ae5 3F020000 		.4byte	0x23f
 4010 0ae9 91080000 		.4byte	.LLST42
 4011 0aed 1D       		.uleb128 0x1d
 4012 0aee 14050000 		.4byte	.LASF103
 4013 0af2 01       		.byte	0x1
 4014 0af3 3F02     		.2byte	0x23f
 4015 0af5 64070000 		.4byte	0x764
 4016 0af9 01       		.byte	0x1
 4017 0afa 1D       		.uleb128 0x1d
 4018 0afb 53020000 		.4byte	.LASF104
 4019 0aff 01       		.byte	0x1
 4020 0b00 3F02     		.2byte	0x23f
 4021 0b02 64070000 		.4byte	0x764
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 129


 4022 0b06 00       		.byte	0
 4023 0b07 18       		.uleb128 0x18
 4024 0b08 0C000000 		.4byte	.LVL152
 4025 0b0c 6E070000 		.4byte	0x76e
 4026 0b10 1F0B0000 		.4byte	0xb1f
 4027 0b14 16       		.uleb128 0x16
 4028 0b15 01       		.uleb128 0x1
 4029 0b16 50       		.byte	0x50
 4030 0b17 01       		.uleb128 0x1
 4031 0b18 31       		.byte	0x31
 4032 0b19 16       		.uleb128 0x16
 4033 0b1a 01       		.uleb128 0x1
 4034 0b1b 51       		.byte	0x51
 4035 0b1c 01       		.uleb128 0x1
 4036 0b1d 30       		.byte	0x30
 4037 0b1e 00       		.byte	0
 4038 0b1f 15       		.uleb128 0x15
 4039 0b20 12000000 		.4byte	.LVL154
 4040 0b24 6C0A0000 		.4byte	0xa6c
 4041 0b28 16       		.uleb128 0x16
 4042 0b29 01       		.uleb128 0x1
 4043 0b2a 50       		.byte	0x50
 4044 0b2b 02       		.uleb128 0x2
 4045 0b2c 74       		.byte	0x74
 4046 0b2d 00       		.sleb128 0
 4047 0b2e 00       		.byte	0
 4048 0b2f 00       		.byte	0
 4049 0b30 1B       		.uleb128 0x1b
 4050 0b31 AD090000 		.4byte	.LASF105
 4051 0b35 01       		.byte	0x1
 4052 0b36 9C02     		.2byte	0x29c
 4053 0b38 EF000000 		.4byte	0xef
 4054 0b3c 00000000 		.4byte	.LFB39
 4055 0b40 2E000000 		.4byte	.LFE39-.LFB39
 4056 0b44 01       		.uleb128 0x1
 4057 0b45 9C       		.byte	0x9c
 4058 0b46 9C0B0000 		.4byte	0xb9c
 4059 0b4a 11       		.uleb128 0x11
 4060 0b4b 3D060000 		.4byte	.LASF106
 4061 0b4f 01       		.byte	0x1
 4062 0b50 9C02     		.2byte	0x29c
 4063 0b52 3F020000 		.4byte	0x23f
 4064 0b56 BA080000 		.4byte	.LLST43
 4065 0b5a 1C       		.uleb128 0x1c
 4066 0b5b 62080000 		.4byte	.LASF75
 4067 0b5f 01       		.byte	0x1
 4068 0b60 9E02     		.2byte	0x29e
 4069 0b62 EF000000 		.4byte	0xef
 4070 0b66 01       		.uleb128 0x1
 4071 0b67 50       		.byte	0x50
 4072 0b68 12       		.uleb128 0x12
 4073 0b69 CB000000 		.4byte	.LASF107
 4074 0b6d 01       		.byte	0x1
 4075 0b6e 9F02     		.2byte	0x29f
 4076 0b70 1F050000 		.4byte	0x51f
 4077 0b74 E6080000 		.4byte	.LLST44
 4078 0b78 13       		.uleb128 0x13
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 130


 4079 0b79 0A000000 		.4byte	.LVL158
 4080 0b7d 5A190000 		.4byte	0x195a
 4081 0b81 15       		.uleb128 0x15
 4082 0b82 22000000 		.4byte	.LVL159
 4083 0b86 92080000 		.4byte	0x892
 4084 0b8a 16       		.uleb128 0x16
 4085 0b8b 01       		.uleb128 0x1
 4086 0b8c 50       		.byte	0x50
 4087 0b8d 02       		.uleb128 0x2
 4088 0b8e 74       		.byte	0x74
 4089 0b8f 00       		.sleb128 0
 4090 0b90 16       		.uleb128 0x16
 4091 0b91 01       		.uleb128 0x1
 4092 0b92 51       		.byte	0x51
 4093 0b93 01       		.uleb128 0x1
 4094 0b94 30       		.byte	0x30
 4095 0b95 16       		.uleb128 0x16
 4096 0b96 01       		.uleb128 0x1
 4097 0b97 52       		.byte	0x52
 4098 0b98 01       		.uleb128 0x1
 4099 0b99 30       		.byte	0x30
 4100 0b9a 00       		.byte	0
 4101 0b9b 00       		.byte	0
 4102 0b9c 1B       		.uleb128 0x1b
 4103 0b9d 70040000 		.4byte	.LASF108
 4104 0ba1 01       		.byte	0x1
 4105 0ba2 1704     		.2byte	0x417
 4106 0ba4 EF000000 		.4byte	0xef
 4107 0ba8 00000000 		.4byte	.LFB43
 4108 0bac 84000000 		.4byte	.LFE43-.LFB43
 4109 0bb0 01       		.uleb128 0x1
 4110 0bb1 9C       		.byte	0x9c
 4111 0bb2 C10C0000 		.4byte	0xcc1
 4112 0bb6 11       		.uleb128 0x11
 4113 0bb7 6E020000 		.4byte	.LASF62
 4114 0bbb 01       		.byte	0x1
 4115 0bbc 1704     		.2byte	0x417
 4116 0bbe 3F020000 		.4byte	0x23f
 4117 0bc2 12090000 		.4byte	.LLST45
 4118 0bc6 11       		.uleb128 0x11
 4119 0bc7 EC070000 		.4byte	.LASF78
 4120 0bcb 01       		.byte	0x1
 4121 0bcc 1804     		.2byte	0x418
 4122 0bce 670A0000 		.4byte	0xa67
 4123 0bd2 3E090000 		.4byte	.LLST46
 4124 0bd6 11       		.uleb128 0x11
 4125 0bd7 B1000000 		.4byte	.LASF109
 4126 0bdb 01       		.byte	0x1
 4127 0bdc 1904     		.2byte	0x419
 4128 0bde C70C0000 		.4byte	0xcc7
 4129 0be2 5D090000 		.4byte	.LLST47
 4130 0be6 11       		.uleb128 0x11
 4131 0be7 A6010000 		.4byte	.LASF97
 4132 0beb 01       		.byte	0x1
 4133 0bec 1A04     		.2byte	0x41a
 4134 0bee 24050000 		.4byte	0x524
 4135 0bf2 89090000 		.4byte	.LLST48
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 131


 4136 0bf6 12       		.uleb128 0x12
 4137 0bf7 62080000 		.4byte	.LASF75
 4138 0bfb 01       		.byte	0x1
 4139 0bfc 1C04     		.2byte	0x41c
 4140 0bfe EF000000 		.4byte	0xef
 4141 0c02 4B0A0000 		.4byte	.LLST49
 4142 0c06 12       		.uleb128 0x12
 4143 0c07 16020000 		.4byte	.LASF110
 4144 0c0b 01       		.byte	0x1
 4145 0c0c 1D04     		.2byte	0x41d
 4146 0c0e FA000000 		.4byte	0xfa
 4147 0c12 690A0000 		.4byte	.LLST50
 4148 0c16 12       		.uleb128 0x12
 4149 0c17 5A080000 		.4byte	.LASF73
 4150 0c1b 01       		.byte	0x1
 4151 0c1c 1E04     		.2byte	0x41e
 4152 0c1e 1F050000 		.4byte	0x51f
 4153 0c22 AB0A0000 		.4byte	.LLST51
 4154 0c26 1E       		.uleb128 0x1e
 4155 0c27 00000000 		.4byte	.Ldebug_ranges0+0
 4156 0c2b A60C0000 		.4byte	0xca6
 4157 0c2f 12       		.uleb128 0x12
 4158 0c30 74010000 		.4byte	.LASF53
 4159 0c34 01       		.byte	0x1
 4160 0c35 3D04     		.2byte	0x43d
 4161 0c37 CC0C0000 		.4byte	0xccc
 4162 0c3b D70A0000 		.4byte	.LLST52
 4163 0c3f 1C       		.uleb128 0x1c
 4164 0c40 75030000 		.4byte	.LASF111
 4165 0c44 01       		.byte	0x1
 4166 0c45 3E04     		.2byte	0x43e
 4167 0c47 64070000 		.4byte	0x764
 4168 0c4b 01       		.uleb128 0x1
 4169 0c4c 53       		.byte	0x53
 4170 0c4d 17       		.uleb128 0x17
 4171 0c4e 52000000 		.4byte	.LBB5
 4172 0c52 10000000 		.4byte	.LBE5-.LBB5
 4173 0c56 740C0000 		.4byte	0xc74
 4174 0c5a 12       		.uleb128 0x12
 4175 0c5b 60070000 		.4byte	.LASF112
 4176 0c5f 01       		.byte	0x1
 4177 0c60 AB04     		.2byte	0x4ab
 4178 0c62 64070000 		.4byte	0x764
 4179 0c66 F50A0000 		.4byte	.LLST53
 4180 0c6a 13       		.uleb128 0x13
 4181 0c6b 56000000 		.4byte	.LVL172
 4182 0c6f 66190000 		.4byte	0x1966
 4183 0c73 00       		.byte	0
 4184 0c74 18       		.uleb128 0x18
 4185 0c75 30000000 		.4byte	.LVL168
 4186 0c79 93040000 		.4byte	0x493
 4187 0c7d 950C0000 		.4byte	0xc95
 4188 0c81 16       		.uleb128 0x16
 4189 0c82 01       		.uleb128 0x1
 4190 0c83 50       		.byte	0x50
 4191 0c84 02       		.uleb128 0x2
 4192 0c85 76       		.byte	0x76
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 132


 4193 0c86 00       		.sleb128 0
 4194 0c87 16       		.uleb128 0x16
 4195 0c88 01       		.uleb128 0x1
 4196 0c89 51       		.byte	0x51
 4197 0c8a 03       		.uleb128 0x3
 4198 0c8b 91       		.byte	0x91
 4199 0c8c 64       		.sleb128 -28
 4200 0c8d 06       		.byte	0x6
 4201 0c8e 16       		.uleb128 0x16
 4202 0c8f 01       		.uleb128 0x1
 4203 0c90 52       		.byte	0x52
 4204 0c91 02       		.uleb128 0x2
 4205 0c92 74       		.byte	0x74
 4206 0c93 00       		.sleb128 0
 4207 0c94 00       		.byte	0
 4208 0c95 15       		.uleb128 0x15
 4209 0c96 42000000 		.4byte	.LVL169
 4210 0c9a E4180000 		.4byte	0x18e4
 4211 0c9e 16       		.uleb128 0x16
 4212 0c9f 01       		.uleb128 0x1
 4213 0ca0 50       		.byte	0x50
 4214 0ca1 02       		.uleb128 0x2
 4215 0ca2 76       		.byte	0x76
 4216 0ca3 24       		.sleb128 36
 4217 0ca4 00       		.byte	0
 4218 0ca5 00       		.byte	0
 4219 0ca6 13       		.uleb128 0x13
 4220 0ca7 10000000 		.4byte	.LVL164
 4221 0cab 72190000 		.4byte	0x1972
 4222 0caf 15       		.uleb128 0x15
 4223 0cb0 7E000000 		.4byte	.LVL184
 4224 0cb4 7D190000 		.4byte	0x197d
 4225 0cb8 16       		.uleb128 0x16
 4226 0cb9 01       		.uleb128 0x1
 4227 0cba 50       		.byte	0x50
 4228 0cbb 03       		.uleb128 0x3
 4229 0cbc 7D       		.byte	0x7d
 4230 0cbd 00       		.sleb128 0
 4231 0cbe 06       		.byte	0x6
 4232 0cbf 00       		.byte	0
 4233 0cc0 00       		.byte	0
 4234 0cc1 06       		.uleb128 0x6
 4235 0cc2 04       		.byte	0x4
 4236 0cc3 EF000000 		.4byte	0xef
 4237 0cc7 07       		.uleb128 0x7
 4238 0cc8 C10C0000 		.4byte	0xcc1
 4239 0ccc 07       		.uleb128 0x7
 4240 0ccd C0000000 		.4byte	0xc0
 4241 0cd1 1B       		.uleb128 0x1b
 4242 0cd2 5B050000 		.4byte	.LASF113
 4243 0cd6 01       		.byte	0x1
 4244 0cd7 BC04     		.2byte	0x4bc
 4245 0cd9 EF000000 		.4byte	0xef
 4246 0cdd 00000000 		.4byte	.LFB44
 4247 0ce1 70000000 		.4byte	.LFE44-.LFB44
 4248 0ce5 01       		.uleb128 0x1
 4249 0ce6 9C       		.byte	0x9c
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 133


 4250 0ce7 C00D0000 		.4byte	0xdc0
 4251 0ceb 11       		.uleb128 0x11
 4252 0cec 6E020000 		.4byte	.LASF62
 4253 0cf0 01       		.byte	0x1
 4254 0cf1 BC04     		.2byte	0x4bc
 4255 0cf3 3F020000 		.4byte	0x23f
 4256 0cf7 130B0000 		.4byte	.LLST54
 4257 0cfb 11       		.uleb128 0x11
 4258 0cfc B1000000 		.4byte	.LASF109
 4259 0d00 01       		.byte	0x1
 4260 0d01 BD04     		.2byte	0x4bd
 4261 0d03 C70C0000 		.4byte	0xcc7
 4262 0d07 D50B0000 		.4byte	.LLST55
 4263 0d0b 12       		.uleb128 0x12
 4264 0d0c 62080000 		.4byte	.LASF75
 4265 0d10 01       		.byte	0x1
 4266 0d11 BF04     		.2byte	0x4bf
 4267 0d13 EF000000 		.4byte	0xef
 4268 0d17 010C0000 		.4byte	.LLST56
 4269 0d1b 12       		.uleb128 0x12
 4270 0d1c 16020000 		.4byte	.LASF110
 4271 0d20 01       		.byte	0x1
 4272 0d21 C004     		.2byte	0x4c0
 4273 0d23 FA000000 		.4byte	0xfa
 4274 0d27 1F0C0000 		.4byte	.LLST57
 4275 0d2b 12       		.uleb128 0x12
 4276 0d2c 5A080000 		.4byte	.LASF73
 4277 0d30 01       		.byte	0x1
 4278 0d31 C104     		.2byte	0x4c1
 4279 0d33 1F050000 		.4byte	0x51f
 4280 0d37 690C0000 		.4byte	.LLST58
 4281 0d3b 17       		.uleb128 0x17
 4282 0d3c 0C000000 		.4byte	.LBB7
 4283 0d40 5A000000 		.4byte	.LBE7-.LBB7
 4284 0d44 A60D0000 		.4byte	0xda6
 4285 0d48 12       		.uleb128 0x12
 4286 0d49 3B030000 		.4byte	.LASF49
 4287 0d4d 01       		.byte	0x1
 4288 0d4e E604     		.2byte	0x4e6
 4289 0d50 64070000 		.4byte	0x764
 4290 0d54 2B0D0000 		.4byte	.LLST59
 4291 0d58 1F       		.uleb128 0x1f
 4292 0d59 18000000 		.4byte	.Ldebug_ranges0+0x18
 4293 0d5d 12       		.uleb128 0x12
 4294 0d5e 74010000 		.4byte	.LASF53
 4295 0d62 01       		.byte	0x1
 4296 0d63 ED04     		.2byte	0x4ed
 4297 0d65 CC0C0000 		.4byte	0xccc
 4298 0d69 990D0000 		.4byte	.LLST60
 4299 0d6d 17       		.uleb128 0x17
 4300 0d6e 40000000 		.4byte	.LBB9
 4301 0d72 10000000 		.4byte	.LBE9-.LBB9
 4302 0d76 940D0000 		.4byte	0xd94
 4303 0d7a 12       		.uleb128 0x12
 4304 0d7b 60070000 		.4byte	.LASF112
 4305 0d7f 01       		.byte	0x1
 4306 0d80 5105     		.2byte	0x551
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 134


 4307 0d82 64070000 		.4byte	0x764
 4308 0d86 C40D0000 		.4byte	.LLST61
 4309 0d8a 13       		.uleb128 0x13
 4310 0d8b 44000000 		.4byte	.LVL201
 4311 0d8f 66190000 		.4byte	0x1966
 4312 0d93 00       		.byte	0
 4313 0d94 15       		.uleb128 0x15
 4314 0d95 30000000 		.4byte	.LVL198
 4315 0d99 E4180000 		.4byte	0x18e4
 4316 0d9d 16       		.uleb128 0x16
 4317 0d9e 01       		.uleb128 0x1
 4318 0d9f 50       		.byte	0x50
 4319 0da0 02       		.uleb128 0x2
 4320 0da1 74       		.byte	0x74
 4321 0da2 24       		.sleb128 36
 4322 0da3 00       		.byte	0
 4323 0da4 00       		.byte	0
 4324 0da5 00       		.byte	0
 4325 0da6 13       		.uleb128 0x13
 4326 0da7 0A000000 		.4byte	.LVL191
 4327 0dab 72190000 		.4byte	0x1972
 4328 0daf 15       		.uleb128 0x15
 4329 0db0 6C000000 		.4byte	.LVL215
 4330 0db4 7D190000 		.4byte	0x197d
 4331 0db8 16       		.uleb128 0x16
 4332 0db9 01       		.uleb128 0x1
 4333 0dba 50       		.byte	0x50
 4334 0dbb 02       		.uleb128 0x2
 4335 0dbc 75       		.byte	0x75
 4336 0dbd 00       		.sleb128 0
 4337 0dbe 00       		.byte	0
 4338 0dbf 00       		.byte	0
 4339 0dc0 1B       		.uleb128 0x1b
 4340 0dc1 77000000 		.4byte	.LASF114
 4341 0dc5 01       		.byte	0x1
 4342 0dc6 6205     		.2byte	0x562
 4343 0dc8 EF000000 		.4byte	0xef
 4344 0dcc 00000000 		.4byte	.LFB45
 4345 0dd0 E4000000 		.4byte	.LFE45-.LFB45
 4346 0dd4 01       		.uleb128 0x1
 4347 0dd5 9C       		.byte	0x9c
 4348 0dd6 900F0000 		.4byte	0xf90
 4349 0dda 11       		.uleb128 0x11
 4350 0ddb 6E020000 		.4byte	.LASF62
 4351 0ddf 01       		.byte	0x1
 4352 0de0 6205     		.2byte	0x562
 4353 0de2 3F020000 		.4byte	0x23f
 4354 0de6 E20D0000 		.4byte	.LLST62
 4355 0dea 11       		.uleb128 0x11
 4356 0deb 02030000 		.4byte	.LASF80
 4357 0def 01       		.byte	0x1
 4358 0df0 6305     		.2byte	0x563
 4359 0df2 70050000 		.4byte	0x570
 4360 0df6 0E0E0000 		.4byte	.LLST63
 4361 0dfa 11       		.uleb128 0x11
 4362 0dfb 5C090000 		.4byte	.LASF96
 4363 0dff 01       		.byte	0x1
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 135


 4364 0e00 6405     		.2byte	0x564
 4365 0e02 05010000 		.4byte	0x105
 4366 0e06 3A0E0000 		.4byte	.LLST64
 4367 0e0a 12       		.uleb128 0x12
 4368 0e0b 28040000 		.4byte	.LASF98
 4369 0e0f 01       		.byte	0x1
 4370 0e10 6605     		.2byte	0x566
 4371 0e12 EF000000 		.4byte	0xef
 4372 0e16 710E0000 		.4byte	.LLST65
 4373 0e1a 1C       		.uleb128 0x1c
 4374 0e1b 3D040000 		.4byte	.LASF100
 4375 0e1f 01       		.byte	0x1
 4376 0e20 6705     		.2byte	0x567
 4377 0e22 34020000 		.4byte	0x234
 4378 0e26 02       		.uleb128 0x2
 4379 0e27 91       		.byte	0x91
 4380 0e28 60       		.sleb128 -32
 4381 0e29 12       		.uleb128 0x12
 4382 0e2a 5A080000 		.4byte	.LASF73
 4383 0e2e 01       		.byte	0x1
 4384 0e2f 6805     		.2byte	0x568
 4385 0e31 1F050000 		.4byte	0x51f
 4386 0e35 A70E0000 		.4byte	.LLST66
 4387 0e39 17       		.uleb128 0x17
 4388 0e3a 10000000 		.4byte	.LBB11
 4389 0e3e 4A000000 		.4byte	.LBE11-.LBB11
 4390 0e42 B00E0000 		.4byte	0xeb0
 4391 0e46 12       		.uleb128 0x12
 4392 0e47 3B030000 		.4byte	.LASF49
 4393 0e4b 01       		.byte	0x1
 4394 0e4c 7F05     		.2byte	0x57f
 4395 0e4e 64070000 		.4byte	0x764
 4396 0e52 D30E0000 		.4byte	.LLST67
 4397 0e56 18       		.uleb128 0x18
 4398 0e57 1E000000 		.4byte	.LVL224
 4399 0e5b 29050000 		.4byte	0x529
 4400 0e5f 700E0000 		.4byte	0xe70
 4401 0e63 16       		.uleb128 0x16
 4402 0e64 01       		.uleb128 0x1
 4403 0e65 50       		.byte	0x50
 4404 0e66 02       		.uleb128 0x2
 4405 0e67 74       		.byte	0x74
 4406 0e68 00       		.sleb128 0
 4407 0e69 16       		.uleb128 0x16
 4408 0e6a 01       		.uleb128 0x1
 4409 0e6b 51       		.byte	0x51
 4410 0e6c 02       		.uleb128 0x2
 4411 0e6d 75       		.byte	0x75
 4412 0e6e 00       		.sleb128 0
 4413 0e6f 00       		.byte	0
 4414 0e70 18       		.uleb128 0x18
 4415 0e71 30000000 		.4byte	.LVL226
 4416 0e75 E4180000 		.4byte	0x18e4
 4417 0e79 840E0000 		.4byte	0xe84
 4418 0e7d 16       		.uleb128 0x16
 4419 0e7e 01       		.uleb128 0x1
 4420 0e7f 50       		.byte	0x50
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 136


 4421 0e80 02       		.uleb128 0x2
 4422 0e81 74       		.byte	0x74
 4423 0e82 10       		.sleb128 16
 4424 0e83 00       		.byte	0
 4425 0e84 13       		.uleb128 0x13
 4426 0e85 38000000 		.4byte	.LVL227
 4427 0e89 FC180000 		.4byte	0x18fc
 4428 0e8d 13       		.uleb128 0x13
 4429 0e8e 3C000000 		.4byte	.LVL228
 4430 0e92 C4180000 		.4byte	0x18c4
 4431 0e96 13       		.uleb128 0x13
 4432 0e97 4A000000 		.4byte	.LVL230
 4433 0e9b C4180000 		.4byte	0x18c4
 4434 0e9f 15       		.uleb128 0x15
 4435 0ea0 58000000 		.4byte	.LVL231
 4436 0ea4 1E190000 		.4byte	0x191e
 4437 0ea8 16       		.uleb128 0x16
 4438 0ea9 01       		.uleb128 0x1
 4439 0eaa 50       		.byte	0x50
 4440 0eab 02       		.uleb128 0x2
 4441 0eac 91       		.byte	0x91
 4442 0ead 60       		.sleb128 -32
 4443 0eae 00       		.byte	0
 4444 0eaf 00       		.byte	0
 4445 0eb0 13       		.uleb128 0x13
 4446 0eb1 10000000 		.4byte	.LVL222
 4447 0eb5 B9180000 		.4byte	0x18b9
 4448 0eb9 13       		.uleb128 0x13
 4449 0eba 5E000000 		.4byte	.LVL233
 4450 0ebe C4180000 		.4byte	0x18c4
 4451 0ec2 13       		.uleb128 0x13
 4452 0ec3 62000000 		.4byte	.LVL234
 4453 0ec7 2A190000 		.4byte	0x192a
 4454 0ecb 13       		.uleb128 0x13
 4455 0ecc 66000000 		.4byte	.LVL235
 4456 0ed0 B9180000 		.4byte	0x18b9
 4457 0ed4 13       		.uleb128 0x13
 4458 0ed5 8A000000 		.4byte	.LVL236
 4459 0ed9 C4180000 		.4byte	0x18c4
 4460 0edd 18       		.uleb128 0x18
 4461 0ede 92000000 		.4byte	.LVL238
 4462 0ee2 36190000 		.4byte	0x1936
 4463 0ee6 F70E0000 		.4byte	0xef7
 4464 0eea 16       		.uleb128 0x16
 4465 0eeb 01       		.uleb128 0x1
 4466 0eec 50       		.byte	0x50
 4467 0eed 02       		.uleb128 0x2
 4468 0eee 91       		.byte	0x91
 4469 0eef 60       		.sleb128 -32
 4470 0ef0 16       		.uleb128 0x16
 4471 0ef1 01       		.uleb128 0x1
 4472 0ef2 51       		.byte	0x51
 4473 0ef3 02       		.uleb128 0x2
 4474 0ef4 91       		.byte	0x91
 4475 0ef5 5C       		.sleb128 -36
 4476 0ef6 00       		.byte	0
 4477 0ef7 18       		.uleb128 0x18
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 137


 4478 0ef8 9C000000 		.4byte	.LVL239
 4479 0efc 46040000 		.4byte	0x446
 4480 0f00 0B0F0000 		.4byte	0xf0b
 4481 0f04 16       		.uleb128 0x16
 4482 0f05 01       		.uleb128 0x1
 4483 0f06 50       		.byte	0x50
 4484 0f07 02       		.uleb128 0x2
 4485 0f08 74       		.byte	0x74
 4486 0f09 00       		.sleb128 0
 4487 0f0a 00       		.byte	0
 4488 0f0b 18       		.uleb128 0x18
 4489 0f0c AA000000 		.4byte	.LVL240
 4490 0f10 42190000 		.4byte	0x1942
 4491 0f14 1F0F0000 		.4byte	0xf1f
 4492 0f18 16       		.uleb128 0x16
 4493 0f19 01       		.uleb128 0x1
 4494 0f1a 50       		.byte	0x50
 4495 0f1b 02       		.uleb128 0x2
 4496 0f1c 74       		.byte	0x74
 4497 0f1d 24       		.sleb128 36
 4498 0f1e 00       		.byte	0
 4499 0f1f 18       		.uleb128 0x18
 4500 0f20 B0000000 		.4byte	.LVL241
 4501 0f24 75050000 		.4byte	0x575
 4502 0f28 330F0000 		.4byte	0xf33
 4503 0f2c 16       		.uleb128 0x16
 4504 0f2d 01       		.uleb128 0x1
 4505 0f2e 50       		.byte	0x50
 4506 0f2f 02       		.uleb128 0x2
 4507 0f30 74       		.byte	0x74
 4508 0f31 00       		.sleb128 0
 4509 0f32 00       		.byte	0
 4510 0f33 13       		.uleb128 0x13
 4511 0f34 B4000000 		.4byte	.LVL242
 4512 0f38 4E190000 		.4byte	0x194e
 4513 0f3c 13       		.uleb128 0x13
 4514 0f3d BC000000 		.4byte	.LVL243
 4515 0f41 FC180000 		.4byte	0x18fc
 4516 0f45 18       		.uleb128 0x18
 4517 0f46 C4000000 		.4byte	.LVL244
 4518 0f4a 75050000 		.4byte	0x575
 4519 0f4e 590F0000 		.4byte	0xf59
 4520 0f52 16       		.uleb128 0x16
 4521 0f53 01       		.uleb128 0x1
 4522 0f54 50       		.byte	0x50
 4523 0f55 02       		.uleb128 0x2
 4524 0f56 74       		.byte	0x74
 4525 0f57 00       		.sleb128 0
 4526 0f58 00       		.byte	0
 4527 0f59 13       		.uleb128 0x13
 4528 0f5a C8000000 		.4byte	.LVL245
 4529 0f5e 4E190000 		.4byte	0x194e
 4530 0f62 18       		.uleb128 0x18
 4531 0f63 D0000000 		.4byte	.LVL246
 4532 0f67 75050000 		.4byte	0x575
 4533 0f6b 760F0000 		.4byte	0xf76
 4534 0f6f 16       		.uleb128 0x16
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 138


 4535 0f70 01       		.uleb128 0x1
 4536 0f71 50       		.byte	0x50
 4537 0f72 02       		.uleb128 0x2
 4538 0f73 74       		.byte	0x74
 4539 0f74 00       		.sleb128 0
 4540 0f75 00       		.byte	0
 4541 0f76 13       		.uleb128 0x13
 4542 0f77 D4000000 		.4byte	.LVL247
 4543 0f7b 4E190000 		.4byte	0x194e
 4544 0f7f 15       		.uleb128 0x15
 4545 0f80 DA000000 		.4byte	.LVL248
 4546 0f84 46040000 		.4byte	0x446
 4547 0f88 16       		.uleb128 0x16
 4548 0f89 01       		.uleb128 0x1
 4549 0f8a 50       		.byte	0x50
 4550 0f8b 02       		.uleb128 0x2
 4551 0f8c 74       		.byte	0x74
 4552 0f8d 00       		.sleb128 0
 4553 0f8e 00       		.byte	0
 4554 0f8f 00       		.byte	0
 4555 0f90 1B       		.uleb128 0x1b
 4556 0f91 D3000000 		.4byte	.LASF115
 4557 0f95 01       		.byte	0x1
 4558 0f96 F105     		.2byte	0x5f1
 4559 0f98 EF000000 		.4byte	0xef
 4560 0f9c 00000000 		.4byte	.LFB46
 4561 0fa0 1C010000 		.4byte	.LFE46-.LFB46
 4562 0fa4 01       		.uleb128 0x1
 4563 0fa5 9C       		.byte	0x9c
 4564 0fa6 BB110000 		.4byte	0x11bb
 4565 0faa 11       		.uleb128 0x11
 4566 0fab 6E020000 		.4byte	.LASF62
 4567 0faf 01       		.byte	0x1
 4568 0fb0 F105     		.2byte	0x5f1
 4569 0fb2 3F020000 		.4byte	0x23f
 4570 0fb6 FE0E0000 		.4byte	.LLST68
 4571 0fba 11       		.uleb128 0x11
 4572 0fbb 5C090000 		.4byte	.LASF96
 4573 0fbf 01       		.byte	0x1
 4574 0fc0 F205     		.2byte	0x5f2
 4575 0fc2 05010000 		.4byte	0x105
 4576 0fc6 2A0F0000 		.4byte	.LLST69
 4577 0fca 12       		.uleb128 0x12
 4578 0fcb 28040000 		.4byte	.LASF98
 4579 0fcf 01       		.byte	0x1
 4580 0fd0 F405     		.2byte	0x5f4
 4581 0fd2 EF000000 		.4byte	0xef
 4582 0fd6 610F0000 		.4byte	.LLST70
 4583 0fda 1C       		.uleb128 0x1c
 4584 0fdb 3D040000 		.4byte	.LASF100
 4585 0fdf 01       		.byte	0x1
 4586 0fe0 F505     		.2byte	0x5f5
 4587 0fe2 34020000 		.4byte	0x234
 4588 0fe6 02       		.uleb128 0x2
 4589 0fe7 91       		.byte	0x91
 4590 0fe8 68       		.sleb128 -24
 4591 0fe9 12       		.uleb128 0x12
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 139


 4592 0fea 5A080000 		.4byte	.LASF73
 4593 0fee 01       		.byte	0x1
 4594 0fef F605     		.2byte	0x5f6
 4595 0ff1 1F050000 		.4byte	0x51f
 4596 0ff5 970F0000 		.4byte	.LLST71
 4597 0ff9 12       		.uleb128 0x12
 4598 0ffa 4B070000 		.4byte	.LASF116
 4599 0ffe 01       		.byte	0x1
 4600 0fff F905     		.2byte	0x5f9
 4601 1001 EF000000 		.4byte	0xef
 4602 1005 C30F0000 		.4byte	.LLST72
 4603 1009 17       		.uleb128 0x17
 4604 100a 10000000 		.4byte	.LBB12
 4605 100e 4E000000 		.4byte	.LBE12-.LBB12
 4606 1012 6F100000 		.4byte	0x106f
 4607 1016 12       		.uleb128 0x12
 4608 1017 02070000 		.4byte	.LASF117
 4609 101b 01       		.byte	0x1
 4610 101c 1306     		.2byte	0x613
 4611 101e 64070000 		.4byte	0x764
 4612 1022 F80F0000 		.4byte	.LLST73
 4613 1026 13       		.uleb128 0x13
 4614 1027 24000000 		.4byte	.LVL260
 4615 102b 88190000 		.4byte	0x1988
 4616 102f 18       		.uleb128 0x18
 4617 1030 34000000 		.4byte	.LVL261
 4618 1034 E4180000 		.4byte	0x18e4
 4619 1038 43100000 		.4byte	0x1043
 4620 103c 16       		.uleb128 0x16
 4621 103d 01       		.uleb128 0x1
 4622 103e 50       		.byte	0x50
 4623 103f 02       		.uleb128 0x2
 4624 1040 74       		.byte	0x74
 4625 1041 10       		.sleb128 16
 4626 1042 00       		.byte	0
 4627 1043 13       		.uleb128 0x13
 4628 1044 3C000000 		.4byte	.LVL262
 4629 1048 FC180000 		.4byte	0x18fc
 4630 104c 13       		.uleb128 0x13
 4631 104d 40000000 		.4byte	.LVL263
 4632 1051 C4180000 		.4byte	0x18c4
 4633 1055 13       		.uleb128 0x13
 4634 1056 4E000000 		.4byte	.LVL266
 4635 105a C4180000 		.4byte	0x18c4
 4636 105e 15       		.uleb128 0x15
 4637 105f 5C000000 		.4byte	.LVL267
 4638 1063 1E190000 		.4byte	0x191e
 4639 1067 16       		.uleb128 0x16
 4640 1068 01       		.uleb128 0x1
 4641 1069 50       		.byte	0x50
 4642 106a 02       		.uleb128 0x2
 4643 106b 91       		.byte	0x91
 4644 106c 68       		.sleb128 -24
 4645 106d 00       		.byte	0
 4646 106e 00       		.byte	0
 4647 106f 17       		.uleb128 0x17
 4648 1070 00010000 		.4byte	.LBB13
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 140


 4649 1074 0E000000 		.4byte	.LBE13-.LBB13
 4650 1078 AA100000 		.4byte	0x10aa
 4651 107c 12       		.uleb128 0x12
 4652 107d D2080000 		.4byte	.LASF118
 4653 1081 01       		.byte	0x1
 4654 1082 A806     		.2byte	0x6a8
 4655 1084 FA000000 		.4byte	0xfa
 4656 1088 33100000 		.4byte	.LLST74
 4657 108c 18       		.uleb128 0x18
 4658 108d 06010000 		.4byte	.LVL290
 4659 1091 AE030000 		.4byte	0x3ae
 4660 1095 A0100000 		.4byte	0x10a0
 4661 1099 16       		.uleb128 0x16
 4662 109a 01       		.uleb128 0x1
 4663 109b 50       		.byte	0x50
 4664 109c 02       		.uleb128 0x2
 4665 109d 74       		.byte	0x74
 4666 109e 00       		.sleb128 0
 4667 109f 00       		.byte	0
 4668 10a0 13       		.uleb128 0x13
 4669 10a1 0E010000 		.4byte	.LVL293
 4670 10a5 94190000 		.4byte	0x1994
 4671 10a9 00       		.byte	0
 4672 10aa 13       		.uleb128 0x13
 4673 10ab 10000000 		.4byte	.LVL256
 4674 10af B9180000 		.4byte	0x18b9
 4675 10b3 13       		.uleb128 0x13
 4676 10b4 62000000 		.4byte	.LVL269
 4677 10b8 C4180000 		.4byte	0x18c4
 4678 10bc 13       		.uleb128 0x13
 4679 10bd 66000000 		.4byte	.LVL270
 4680 10c1 2A190000 		.4byte	0x192a
 4681 10c5 13       		.uleb128 0x13
 4682 10c6 6A000000 		.4byte	.LVL271
 4683 10ca B9180000 		.4byte	0x18b9
 4684 10ce 13       		.uleb128 0x13
 4685 10cf 8E000000 		.4byte	.LVL272
 4686 10d3 C4180000 		.4byte	0x18c4
 4687 10d7 18       		.uleb128 0x18
 4688 10d8 96000000 		.4byte	.LVL274
 4689 10dc 36190000 		.4byte	0x1936
 4690 10e0 F1100000 		.4byte	0x10f1
 4691 10e4 16       		.uleb128 0x16
 4692 10e5 01       		.uleb128 0x1
 4693 10e6 50       		.byte	0x50
 4694 10e7 02       		.uleb128 0x2
 4695 10e8 91       		.byte	0x91
 4696 10e9 68       		.sleb128 -24
 4697 10ea 16       		.uleb128 0x16
 4698 10eb 01       		.uleb128 0x1
 4699 10ec 51       		.byte	0x51
 4700 10ed 02       		.uleb128 0x2
 4701 10ee 91       		.byte	0x91
 4702 10ef 64       		.sleb128 -28
 4703 10f0 00       		.byte	0
 4704 10f1 18       		.uleb128 0x18
 4705 10f2 A0000000 		.4byte	.LVL275
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 141


 4706 10f6 46040000 		.4byte	0x446
 4707 10fa 05110000 		.4byte	0x1105
 4708 10fe 16       		.uleb128 0x16
 4709 10ff 01       		.uleb128 0x1
 4710 1100 50       		.byte	0x50
 4711 1101 02       		.uleb128 0x2
 4712 1102 74       		.byte	0x74
 4713 1103 00       		.sleb128 0
 4714 1104 00       		.byte	0
 4715 1105 13       		.uleb128 0x13
 4716 1106 AE000000 		.4byte	.LVL276
 4717 110a B9180000 		.4byte	0x18b9
 4718 110e 13       		.uleb128 0x13
 4719 110f B4000000 		.4byte	.LVL277
 4720 1113 A0190000 		.4byte	0x19a0
 4721 1117 13       		.uleb128 0x13
 4722 1118 BA000000 		.4byte	.LVL279
 4723 111c C4180000 		.4byte	0x18c4
 4724 1120 18       		.uleb128 0x18
 4725 1121 C4000000 		.4byte	.LVL280
 4726 1125 42190000 		.4byte	0x1942
 4727 1129 34110000 		.4byte	0x1134
 4728 112d 16       		.uleb128 0x16
 4729 112e 01       		.uleb128 0x1
 4730 112f 50       		.byte	0x50
 4731 1130 02       		.uleb128 0x2
 4732 1131 74       		.byte	0x74
 4733 1132 24       		.sleb128 36
 4734 1133 00       		.byte	0
 4735 1134 18       		.uleb128 0x18
 4736 1135 CA000000 		.4byte	.LVL281
 4737 1139 75050000 		.4byte	0x575
 4738 113d 48110000 		.4byte	0x1148
 4739 1141 16       		.uleb128 0x16
 4740 1142 01       		.uleb128 0x1
 4741 1143 50       		.byte	0x50
 4742 1144 02       		.uleb128 0x2
 4743 1145 74       		.byte	0x74
 4744 1146 00       		.sleb128 0
 4745 1147 00       		.byte	0
 4746 1148 13       		.uleb128 0x13
 4747 1149 CE000000 		.4byte	.LVL282
 4748 114d 4E190000 		.4byte	0x194e
 4749 1151 13       		.uleb128 0x13
 4750 1152 D6000000 		.4byte	.LVL283
 4751 1156 FC180000 		.4byte	0x18fc
 4752 115a 18       		.uleb128 0x18
 4753 115b DE000000 		.4byte	.LVL284
 4754 115f 75050000 		.4byte	0x575
 4755 1163 6E110000 		.4byte	0x116e
 4756 1167 16       		.uleb128 0x16
 4757 1168 01       		.uleb128 0x1
 4758 1169 50       		.byte	0x50
 4759 116a 02       		.uleb128 0x2
 4760 116b 74       		.byte	0x74
 4761 116c 00       		.sleb128 0
 4762 116d 00       		.byte	0
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 142


 4763 116e 13       		.uleb128 0x13
 4764 116f E2000000 		.4byte	.LVL285
 4765 1173 4E190000 		.4byte	0x194e
 4766 1177 18       		.uleb128 0x18
 4767 1178 EA000000 		.4byte	.LVL286
 4768 117c 75050000 		.4byte	0x575
 4769 1180 8B110000 		.4byte	0x118b
 4770 1184 16       		.uleb128 0x16
 4771 1185 01       		.uleb128 0x1
 4772 1186 50       		.byte	0x50
 4773 1187 02       		.uleb128 0x2
 4774 1188 74       		.byte	0x74
 4775 1189 00       		.sleb128 0
 4776 118a 00       		.byte	0
 4777 118b 13       		.uleb128 0x13
 4778 118c EE000000 		.4byte	.LVL287
 4779 1190 4E190000 		.4byte	0x194e
 4780 1194 18       		.uleb128 0x18
 4781 1195 F4000000 		.4byte	.LVL288
 4782 1199 46040000 		.4byte	0x446
 4783 119d A8110000 		.4byte	0x11a8
 4784 11a1 16       		.uleb128 0x16
 4785 11a2 01       		.uleb128 0x1
 4786 11a3 50       		.byte	0x50
 4787 11a4 02       		.uleb128 0x2
 4788 11a5 74       		.byte	0x74
 4789 11a6 00       		.sleb128 0
 4790 11a7 00       		.byte	0
 4791 11a8 13       		.uleb128 0x13
 4792 11a9 00010000 		.4byte	.LVL289
 4793 11ad B9180000 		.4byte	0x18b9
 4794 11b1 13       		.uleb128 0x13
 4795 11b2 12010000 		.4byte	.LVL294
 4796 11b6 C4180000 		.4byte	0x18c4
 4797 11ba 00       		.byte	0
 4798 11bb 1B       		.uleb128 0x1b
 4799 11bc 06010000 		.4byte	.LASF119
 4800 11c0 01       		.byte	0x1
 4801 11c1 D302     		.2byte	0x2d3
 4802 11c3 EF000000 		.4byte	0xef
 4803 11c7 00000000 		.4byte	.LFB40
 4804 11cb 2E000000 		.4byte	.LFE40-.LFB40
 4805 11cf 01       		.uleb128 0x1
 4806 11d0 9C       		.byte	0x9c
 4807 11d1 35120000 		.4byte	0x1235
 4808 11d5 11       		.uleb128 0x11
 4809 11d6 3D060000 		.4byte	.LASF106
 4810 11da 01       		.byte	0x1
 4811 11db D302     		.2byte	0x2d3
 4812 11dd 3F020000 		.4byte	0x23f
 4813 11e1 51100000 		.4byte	.LLST75
 4814 11e5 11       		.uleb128 0x11
 4815 11e6 5C090000 		.4byte	.LASF96
 4816 11ea 01       		.byte	0x1
 4817 11eb D402     		.2byte	0x2d4
 4818 11ed 05010000 		.4byte	0x105
 4819 11f1 7D100000 		.4byte	.LLST76
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 143


 4820 11f5 12       		.uleb128 0x12
 4821 11f6 62080000 		.4byte	.LASF75
 4822 11fa 01       		.byte	0x1
 4823 11fb D602     		.2byte	0x2d6
 4824 11fd EF000000 		.4byte	0xef
 4825 1201 A9100000 		.4byte	.LLST77
 4826 1205 12       		.uleb128 0x12
 4827 1206 CB000000 		.4byte	.LASF107
 4828 120a 01       		.byte	0x1
 4829 120b D702     		.2byte	0x2d7
 4830 120d 1F050000 		.4byte	0x51f
 4831 1211 C8100000 		.4byte	.LLST78
 4832 1215 13       		.uleb128 0x13
 4833 1216 0C000000 		.4byte	.LVL300
 4834 121a 5A190000 		.4byte	0x195a
 4835 121e 15       		.uleb128 0x15
 4836 121f 22000000 		.4byte	.LVL303
 4837 1223 900F0000 		.4byte	0xf90
 4838 1227 16       		.uleb128 0x16
 4839 1228 01       		.uleb128 0x1
 4840 1229 50       		.byte	0x50
 4841 122a 02       		.uleb128 0x2
 4842 122b 74       		.byte	0x74
 4843 122c 00       		.sleb128 0
 4844 122d 16       		.uleb128 0x16
 4845 122e 01       		.uleb128 0x1
 4846 122f 51       		.byte	0x51
 4847 1230 02       		.uleb128 0x2
 4848 1231 76       		.byte	0x76
 4849 1232 00       		.sleb128 0
 4850 1233 00       		.byte	0
 4851 1234 00       		.byte	0
 4852 1235 1B       		.uleb128 0x1b
 4853 1236 8F030000 		.4byte	.LASF120
 4854 123a 01       		.byte	0x1
 4855 123b C306     		.2byte	0x6c3
 4856 123d EF000000 		.4byte	0xef
 4857 1241 00000000 		.4byte	.LFB47
 4858 1245 E4000000 		.4byte	.LFE47-.LFB47
 4859 1249 01       		.uleb128 0x1
 4860 124a 9C       		.byte	0x9c
 4861 124b 15140000 		.4byte	0x1415
 4862 124f 11       		.uleb128 0x11
 4863 1250 6E020000 		.4byte	.LASF62
 4864 1254 01       		.byte	0x1
 4865 1255 C306     		.2byte	0x6c3
 4866 1257 3F020000 		.4byte	0x23f
 4867 125b F4100000 		.4byte	.LLST79
 4868 125f 11       		.uleb128 0x11
 4869 1260 02030000 		.4byte	.LASF80
 4870 1264 01       		.byte	0x1
 4871 1265 C406     		.2byte	0x6c4
 4872 1267 70050000 		.4byte	0x570
 4873 126b 20110000 		.4byte	.LLST80
 4874 126f 11       		.uleb128 0x11
 4875 1270 5C090000 		.4byte	.LASF96
 4876 1274 01       		.byte	0x1
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 144


 4877 1275 C506     		.2byte	0x6c5
 4878 1277 05010000 		.4byte	0x105
 4879 127b 4C110000 		.4byte	.LLST81
 4880 127f 12       		.uleb128 0x12
 4881 1280 28040000 		.4byte	.LASF98
 4882 1284 01       		.byte	0x1
 4883 1285 C706     		.2byte	0x6c7
 4884 1287 EF000000 		.4byte	0xef
 4885 128b 83110000 		.4byte	.LLST82
 4886 128f 1C       		.uleb128 0x1c
 4887 1290 3D040000 		.4byte	.LASF100
 4888 1294 01       		.byte	0x1
 4889 1295 C806     		.2byte	0x6c8
 4890 1297 34020000 		.4byte	0x234
 4891 129b 02       		.uleb128 0x2
 4892 129c 91       		.byte	0x91
 4893 129d 68       		.sleb128 -24
 4894 129e 12       		.uleb128 0x12
 4895 129f AB060000 		.4byte	.LASF121
 4896 12a3 01       		.byte	0x1
 4897 12a4 C906     		.2byte	0x6c9
 4898 12a6 F8020000 		.4byte	0x2f8
 4899 12aa C4110000 		.4byte	.LLST83
 4900 12ae 12       		.uleb128 0x12
 4901 12af 5A080000 		.4byte	.LASF73
 4902 12b3 01       		.byte	0x1
 4903 12b4 CA06     		.2byte	0x6ca
 4904 12b6 1F050000 		.4byte	0x51f
 4905 12ba D7110000 		.4byte	.LLST84
 4906 12be 17       		.uleb128 0x17
 4907 12bf 10000000 		.4byte	.LBB14
 4908 12c3 4A000000 		.4byte	.LBE14-.LBB14
 4909 12c7 35130000 		.4byte	0x1335
 4910 12cb 12       		.uleb128 0x12
 4911 12cc 3B030000 		.4byte	.LASF49
 4912 12d0 01       		.byte	0x1
 4913 12d1 E106     		.2byte	0x6e1
 4914 12d3 64070000 		.4byte	0x764
 4915 12d7 03120000 		.4byte	.LLST85
 4916 12db 18       		.uleb128 0x18
 4917 12dc 20000000 		.4byte	.LVL313
 4918 12e0 29050000 		.4byte	0x529
 4919 12e4 F5120000 		.4byte	0x12f5
 4920 12e8 16       		.uleb128 0x16
 4921 12e9 01       		.uleb128 0x1
 4922 12ea 50       		.byte	0x50
 4923 12eb 02       		.uleb128 0x2
 4924 12ec 74       		.byte	0x74
 4925 12ed 00       		.sleb128 0
 4926 12ee 16       		.uleb128 0x16
 4927 12ef 01       		.uleb128 0x1
 4928 12f0 51       		.byte	0x51
 4929 12f1 02       		.uleb128 0x2
 4930 12f2 75       		.byte	0x75
 4931 12f3 00       		.sleb128 0
 4932 12f4 00       		.byte	0
 4933 12f5 18       		.uleb128 0x18
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 145


 4934 12f6 30000000 		.4byte	.LVL314
 4935 12fa E4180000 		.4byte	0x18e4
 4936 12fe 09130000 		.4byte	0x1309
 4937 1302 16       		.uleb128 0x16
 4938 1303 01       		.uleb128 0x1
 4939 1304 50       		.byte	0x50
 4940 1305 02       		.uleb128 0x2
 4941 1306 74       		.byte	0x74
 4942 1307 24       		.sleb128 36
 4943 1308 00       		.byte	0
 4944 1309 13       		.uleb128 0x13
 4945 130a 38000000 		.4byte	.LVL315
 4946 130e FC180000 		.4byte	0x18fc
 4947 1312 13       		.uleb128 0x13
 4948 1313 3C000000 		.4byte	.LVL316
 4949 1317 C4180000 		.4byte	0x18c4
 4950 131b 13       		.uleb128 0x13
 4951 131c 4A000000 		.4byte	.LVL319
 4952 1320 C4180000 		.4byte	0x18c4
 4953 1324 15       		.uleb128 0x15
 4954 1325 58000000 		.4byte	.LVL320
 4955 1329 1E190000 		.4byte	0x191e
 4956 132d 16       		.uleb128 0x16
 4957 132e 01       		.uleb128 0x1
 4958 132f 50       		.byte	0x50
 4959 1330 02       		.uleb128 0x2
 4960 1331 91       		.byte	0x91
 4961 1332 68       		.sleb128 -24
 4962 1333 00       		.byte	0
 4963 1334 00       		.byte	0
 4964 1335 13       		.uleb128 0x13
 4965 1336 10000000 		.4byte	.LVL310
 4966 133a B9180000 		.4byte	0x18b9
 4967 133e 13       		.uleb128 0x13
 4968 133f 5E000000 		.4byte	.LVL322
 4969 1343 C4180000 		.4byte	0x18c4
 4970 1347 13       		.uleb128 0x13
 4971 1348 62000000 		.4byte	.LVL323
 4972 134c 2A190000 		.4byte	0x192a
 4973 1350 13       		.uleb128 0x13
 4974 1351 66000000 		.4byte	.LVL324
 4975 1355 B9180000 		.4byte	0x18b9
 4976 1359 13       		.uleb128 0x13
 4977 135a 8A000000 		.4byte	.LVL325
 4978 135e C4180000 		.4byte	0x18c4
 4979 1362 18       		.uleb128 0x18
 4980 1363 92000000 		.4byte	.LVL327
 4981 1367 36190000 		.4byte	0x1936
 4982 136b 7C130000 		.4byte	0x137c
 4983 136f 16       		.uleb128 0x16
 4984 1370 01       		.uleb128 0x1
 4985 1371 50       		.byte	0x50
 4986 1372 02       		.uleb128 0x2
 4987 1373 91       		.byte	0x91
 4988 1374 68       		.sleb128 -24
 4989 1375 16       		.uleb128 0x16
 4990 1376 01       		.uleb128 0x1
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 146


 4991 1377 51       		.byte	0x51
 4992 1378 02       		.uleb128 0x2
 4993 1379 91       		.byte	0x91
 4994 137a 64       		.sleb128 -28
 4995 137b 00       		.byte	0
 4996 137c 18       		.uleb128 0x18
 4997 137d 9C000000 		.4byte	.LVL328
 4998 1381 46040000 		.4byte	0x446
 4999 1385 90130000 		.4byte	0x1390
 5000 1389 16       		.uleb128 0x16
 5001 138a 01       		.uleb128 0x1
 5002 138b 50       		.byte	0x50
 5003 138c 02       		.uleb128 0x2
 5004 138d 74       		.byte	0x74
 5005 138e 00       		.sleb128 0
 5006 138f 00       		.byte	0
 5007 1390 18       		.uleb128 0x18
 5008 1391 AA000000 		.4byte	.LVL329
 5009 1395 42190000 		.4byte	0x1942
 5010 1399 A4130000 		.4byte	0x13a4
 5011 139d 16       		.uleb128 0x16
 5012 139e 01       		.uleb128 0x1
 5013 139f 50       		.byte	0x50
 5014 13a0 02       		.uleb128 0x2
 5015 13a1 74       		.byte	0x74
 5016 13a2 24       		.sleb128 36
 5017 13a3 00       		.byte	0
 5018 13a4 18       		.uleb128 0x18
 5019 13a5 B0000000 		.4byte	.LVL330
 5020 13a9 75050000 		.4byte	0x575
 5021 13ad B8130000 		.4byte	0x13b8
 5022 13b1 16       		.uleb128 0x16
 5023 13b2 01       		.uleb128 0x1
 5024 13b3 50       		.byte	0x50
 5025 13b4 02       		.uleb128 0x2
 5026 13b5 74       		.byte	0x74
 5027 13b6 00       		.sleb128 0
 5028 13b7 00       		.byte	0
 5029 13b8 13       		.uleb128 0x13
 5030 13b9 B4000000 		.4byte	.LVL331
 5031 13bd 4E190000 		.4byte	0x194e
 5032 13c1 13       		.uleb128 0x13
 5033 13c2 BC000000 		.4byte	.LVL332
 5034 13c6 FC180000 		.4byte	0x18fc
 5035 13ca 18       		.uleb128 0x18
 5036 13cb C4000000 		.4byte	.LVL333
 5037 13cf 75050000 		.4byte	0x575
 5038 13d3 DE130000 		.4byte	0x13de
 5039 13d7 16       		.uleb128 0x16
 5040 13d8 01       		.uleb128 0x1
 5041 13d9 50       		.byte	0x50
 5042 13da 02       		.uleb128 0x2
 5043 13db 74       		.byte	0x74
 5044 13dc 00       		.sleb128 0
 5045 13dd 00       		.byte	0
 5046 13de 13       		.uleb128 0x13
 5047 13df C8000000 		.4byte	.LVL334
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 147


 5048 13e3 4E190000 		.4byte	0x194e
 5049 13e7 18       		.uleb128 0x18
 5050 13e8 D0000000 		.4byte	.LVL335
 5051 13ec 75050000 		.4byte	0x575
 5052 13f0 FB130000 		.4byte	0x13fb
 5053 13f4 16       		.uleb128 0x16
 5054 13f5 01       		.uleb128 0x1
 5055 13f6 50       		.byte	0x50
 5056 13f7 02       		.uleb128 0x2
 5057 13f8 74       		.byte	0x74
 5058 13f9 00       		.sleb128 0
 5059 13fa 00       		.byte	0
 5060 13fb 13       		.uleb128 0x13
 5061 13fc D4000000 		.4byte	.LVL336
 5062 1400 4E190000 		.4byte	0x194e
 5063 1404 15       		.uleb128 0x15
 5064 1405 DA000000 		.4byte	.LVL337
 5065 1409 46040000 		.4byte	0x446
 5066 140d 16       		.uleb128 0x16
 5067 140e 01       		.uleb128 0x1
 5068 140f 50       		.byte	0x50
 5069 1410 02       		.uleb128 0x2
 5070 1411 74       		.byte	0x74
 5071 1412 00       		.sleb128 0
 5072 1413 00       		.byte	0
 5073 1414 00       		.byte	0
 5074 1415 1B       		.uleb128 0x1b
 5075 1416 85000000 		.4byte	.LASF122
 5076 141a 01       		.byte	0x1
 5077 141b 5A07     		.2byte	0x75a
 5078 141d EF000000 		.4byte	0xef
 5079 1421 00000000 		.4byte	.LFB48
 5080 1425 7E000000 		.4byte	.LFE48-.LFB48
 5081 1429 01       		.uleb128 0x1
 5082 142a 9C       		.byte	0x9c
 5083 142b 2F150000 		.4byte	0x152f
 5084 142f 11       		.uleb128 0x11
 5085 1430 6E020000 		.4byte	.LASF62
 5086 1434 01       		.byte	0x1
 5087 1435 5A07     		.2byte	0x75a
 5088 1437 3F020000 		.4byte	0x23f
 5089 143b 21120000 		.4byte	.LLST86
 5090 143f 11       		.uleb128 0x11
 5091 1440 02030000 		.4byte	.LASF80
 5092 1444 01       		.byte	0x1
 5093 1445 5B07     		.2byte	0x75b
 5094 1447 70050000 		.4byte	0x570
 5095 144b E3120000 		.4byte	.LLST87
 5096 144f 11       		.uleb128 0x11
 5097 1450 B1000000 		.4byte	.LASF109
 5098 1454 01       		.byte	0x1
 5099 1455 5C07     		.2byte	0x75c
 5100 1457 C70C0000 		.4byte	0xcc7
 5101 145b 0E130000 		.4byte	.LLST88
 5102 145f 12       		.uleb128 0x12
 5103 1460 62080000 		.4byte	.LASF75
 5104 1464 01       		.byte	0x1
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 148


 5105 1465 5E07     		.2byte	0x75e
 5106 1467 EF000000 		.4byte	0xef
 5107 146b 2D130000 		.4byte	.LLST89
 5108 146f 12       		.uleb128 0x12
 5109 1470 16020000 		.4byte	.LASF110
 5110 1474 01       		.byte	0x1
 5111 1475 5F07     		.2byte	0x75f
 5112 1477 FA000000 		.4byte	0xfa
 5113 147b 4B130000 		.4byte	.LLST90
 5114 147f 12       		.uleb128 0x12
 5115 1480 5A080000 		.4byte	.LASF73
 5116 1484 01       		.byte	0x1
 5117 1485 6007     		.2byte	0x760
 5118 1487 1F050000 		.4byte	0x51f
 5119 148b 7F130000 		.4byte	.LLST91
 5120 148f 17       		.uleb128 0x17
 5121 1490 10000000 		.4byte	.LBB15
 5122 1494 62000000 		.4byte	.LBE15-.LBB15
 5123 1498 15150000 		.4byte	0x1515
 5124 149c 12       		.uleb128 0x12
 5125 149d 3B030000 		.4byte	.LASF49
 5126 14a1 01       		.byte	0x1
 5127 14a2 7707     		.2byte	0x777
 5128 14a4 64070000 		.4byte	0x764
 5129 14a8 41140000 		.4byte	.LLST92
 5130 14ac 1F       		.uleb128 0x1f
 5131 14ad 30000000 		.4byte	.Ldebug_ranges0+0x30
 5132 14b1 12       		.uleb128 0x12
 5133 14b2 4D0A0000 		.4byte	.LASF52
 5134 14b6 01       		.byte	0x1
 5135 14b7 7C07     		.2byte	0x77c
 5136 14b9 CC0C0000 		.4byte	0xccc
 5137 14bd 54140000 		.4byte	.LLST93
 5138 14c1 17       		.uleb128 0x17
 5139 14c2 4C000000 		.4byte	.LBB17
 5140 14c6 10000000 		.4byte	.LBE17-.LBB17
 5141 14ca E8140000 		.4byte	0x14e8
 5142 14ce 12       		.uleb128 0x12
 5143 14cf 60070000 		.4byte	.LASF112
 5144 14d3 01       		.byte	0x1
 5145 14d4 A607     		.2byte	0x7a6
 5146 14d6 64070000 		.4byte	0x764
 5147 14da 72140000 		.4byte	.LLST94
 5148 14de 13       		.uleb128 0x13
 5149 14df 50000000 		.4byte	.LVL352
 5150 14e3 66190000 		.4byte	0x1966
 5151 14e7 00       		.byte	0
 5152 14e8 18       		.uleb128 0x18
 5153 14e9 24000000 		.4byte	.LVL348
 5154 14ed 29050000 		.4byte	0x529
 5155 14f1 03150000 		.4byte	0x1503
 5156 14f5 16       		.uleb128 0x16
 5157 14f6 01       		.uleb128 0x1
 5158 14f7 50       		.byte	0x50
 5159 14f8 02       		.uleb128 0x2
 5160 14f9 74       		.byte	0x74
 5161 14fa 00       		.sleb128 0
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 149


 5162 14fb 16       		.uleb128 0x16
 5163 14fc 01       		.uleb128 0x1
 5164 14fd 51       		.byte	0x51
 5165 14fe 03       		.uleb128 0x3
 5166 14ff 7D       		.byte	0x7d
 5167 1500 00       		.sleb128 0
 5168 1501 06       		.byte	0x6
 5169 1502 00       		.byte	0
 5170 1503 15       		.uleb128 0x15
 5171 1504 3A000000 		.4byte	.LVL349
 5172 1508 E4180000 		.4byte	0x18e4
 5173 150c 16       		.uleb128 0x16
 5174 150d 01       		.uleb128 0x1
 5175 150e 50       		.byte	0x50
 5176 150f 02       		.uleb128 0x2
 5177 1510 74       		.byte	0x74
 5178 1511 10       		.sleb128 16
 5179 1512 00       		.byte	0
 5180 1513 00       		.byte	0
 5181 1514 00       		.byte	0
 5182 1515 13       		.uleb128 0x13
 5183 1516 0E000000 		.4byte	.LVL343
 5184 151a 72190000 		.4byte	0x1972
 5185 151e 15       		.uleb128 0x15
 5186 151f 78000000 		.4byte	.LVL364
 5187 1523 7D190000 		.4byte	0x197d
 5188 1527 16       		.uleb128 0x16
 5189 1528 01       		.uleb128 0x1
 5190 1529 50       		.byte	0x50
 5191 152a 02       		.uleb128 0x2
 5192 152b 75       		.byte	0x75
 5193 152c 00       		.sleb128 0
 5194 152d 00       		.byte	0
 5195 152e 00       		.byte	0
 5196 152f 1B       		.uleb128 0x1b
 5197 1530 C0080000 		.4byte	.LASF123
 5198 1534 01       		.byte	0x1
 5199 1535 B707     		.2byte	0x7b7
 5200 1537 EF000000 		.4byte	0xef
 5201 153b 00000000 		.4byte	.LFB49
 5202 153f 2E000000 		.4byte	.LFE49-.LFB49
 5203 1543 01       		.uleb128 0x1
 5204 1544 9C       		.byte	0x9c
 5205 1545 DD150000 		.4byte	0x15dd
 5206 1549 11       		.uleb128 0x11
 5207 154a 6E020000 		.4byte	.LASF62
 5208 154e 01       		.byte	0x1
 5209 154f B707     		.2byte	0x7b7
 5210 1551 3F020000 		.4byte	0x23f
 5211 1555 90140000 		.4byte	.LLST95
 5212 1559 11       		.uleb128 0x11
 5213 155a 02030000 		.4byte	.LASF80
 5214 155e 01       		.byte	0x1
 5215 155f B807     		.2byte	0x7b8
 5216 1561 70050000 		.4byte	0x570
 5217 1565 D5140000 		.4byte	.LLST96
 5218 1569 12       		.uleb128 0x12
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 150


 5219 156a 62080000 		.4byte	.LASF75
 5220 156e 01       		.byte	0x1
 5221 156f BA07     		.2byte	0x7ba
 5222 1571 EF000000 		.4byte	0xef
 5223 1575 01150000 		.4byte	.LLST97
 5224 1579 12       		.uleb128 0x12
 5225 157a 16020000 		.4byte	.LASF110
 5226 157e 01       		.byte	0x1
 5227 157f BB07     		.2byte	0x7bb
 5228 1581 FA000000 		.4byte	0xfa
 5229 1585 2B150000 		.4byte	.LLST98
 5230 1589 12       		.uleb128 0x12
 5231 158a AB060000 		.4byte	.LASF121
 5232 158e 01       		.byte	0x1
 5233 158f BC07     		.2byte	0x7bc
 5234 1591 F8020000 		.4byte	0x2f8
 5235 1595 5F150000 		.4byte	.LLST99
 5236 1599 12       		.uleb128 0x12
 5237 159a 5A080000 		.4byte	.LASF73
 5238 159e 01       		.byte	0x1
 5239 159f BD07     		.2byte	0x7bd
 5240 15a1 1F050000 		.4byte	0x51f
 5241 15a5 72150000 		.4byte	.LLST100
 5242 15a9 13       		.uleb128 0x13
 5243 15aa 0A000000 		.4byte	.LVL371
 5244 15ae 72190000 		.4byte	0x1972
 5245 15b2 18       		.uleb128 0x18
 5246 15b3 1C000000 		.4byte	.LVL375
 5247 15b7 29050000 		.4byte	0x529
 5248 15bb CC150000 		.4byte	0x15cc
 5249 15bf 16       		.uleb128 0x16
 5250 15c0 01       		.uleb128 0x1
 5251 15c1 50       		.byte	0x50
 5252 15c2 02       		.uleb128 0x2
 5253 15c3 74       		.byte	0x74
 5254 15c4 00       		.sleb128 0
 5255 15c5 16       		.uleb128 0x16
 5256 15c6 01       		.uleb128 0x1
 5257 15c7 51       		.byte	0x51
 5258 15c8 02       		.uleb128 0x2
 5259 15c9 76       		.byte	0x76
 5260 15ca 00       		.sleb128 0
 5261 15cb 00       		.byte	0
 5262 15cc 15       		.uleb128 0x15
 5263 15cd 2A000000 		.4byte	.LVL380
 5264 15d1 7D190000 		.4byte	0x197d
 5265 15d5 16       		.uleb128 0x16
 5266 15d6 01       		.uleb128 0x1
 5267 15d7 50       		.byte	0x50
 5268 15d8 02       		.uleb128 0x2
 5269 15d9 75       		.byte	0x75
 5270 15da 00       		.sleb128 0
 5271 15db 00       		.byte	0
 5272 15dc 00       		.byte	0
 5273 15dd 1B       		.uleb128 0x1b
 5274 15de 32080000 		.4byte	.LASF124
 5275 15e2 01       		.byte	0x1
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 151


 5276 15e3 EE07     		.2byte	0x7ee
 5277 15e5 FA000000 		.4byte	0xfa
 5278 15e9 00000000 		.4byte	.LFB50
 5279 15ed 12000000 		.4byte	.LFE50-.LFB50
 5280 15f1 01       		.uleb128 0x1
 5281 15f2 9C       		.byte	0x9c
 5282 15f3 2A160000 		.4byte	0x162a
 5283 15f7 11       		.uleb128 0x11
 5284 15f8 6E020000 		.4byte	.LASF62
 5285 15fc 01       		.byte	0x1
 5286 15fd EE07     		.2byte	0x7ee
 5287 15ff 2A160000 		.4byte	0x162a
 5288 1603 B7150000 		.4byte	.LLST101
 5289 1607 12       		.uleb128 0x12
 5290 1608 B4010000 		.4byte	.LASF125
 5291 160c 01       		.byte	0x1
 5292 160d F007     		.2byte	0x7f0
 5293 160f FA000000 		.4byte	0xfa
 5294 1613 E3150000 		.4byte	.LLST102
 5295 1617 13       		.uleb128 0x13
 5296 1618 08000000 		.4byte	.LVL385
 5297 161c B9180000 		.4byte	0x18b9
 5298 1620 13       		.uleb128 0x13
 5299 1621 0E000000 		.4byte	.LVL387
 5300 1625 C4180000 		.4byte	0x18c4
 5301 1629 00       		.byte	0
 5302 162a 07       		.uleb128 0x7
 5303 162b 3F020000 		.4byte	0x23f
 5304 162f 1B       		.uleb128 0x1b
 5305 1630 5D010000 		.4byte	.LASF126
 5306 1634 01       		.byte	0x1
 5307 1635 FE07     		.2byte	0x7fe
 5308 1637 FA000000 		.4byte	0xfa
 5309 163b 00000000 		.4byte	.LFB51
 5310 163f 16000000 		.4byte	.LFE51-.LFB51
 5311 1643 01       		.uleb128 0x1
 5312 1644 9C       		.byte	0x9c
 5313 1645 8C160000 		.4byte	0x168c
 5314 1649 11       		.uleb128 0x11
 5315 164a 6E020000 		.4byte	.LASF62
 5316 164e 01       		.byte	0x1
 5317 164f FE07     		.2byte	0x7fe
 5318 1651 2A160000 		.4byte	0x162a
 5319 1655 01160000 		.4byte	.LLST103
 5320 1659 12       		.uleb128 0x12
 5321 165a B4010000 		.4byte	.LASF125
 5322 165e 01       		.byte	0x1
 5323 165f 0008     		.2byte	0x800
 5324 1661 FA000000 		.4byte	0xfa
 5325 1665 2D160000 		.4byte	.LLST104
 5326 1669 12       		.uleb128 0x12
 5327 166a 5A080000 		.4byte	.LASF73
 5328 166e 01       		.byte	0x1
 5329 166f 0108     		.2byte	0x801
 5330 1671 1F050000 		.4byte	0x51f
 5331 1675 4B160000 		.4byte	.LLST105
 5332 1679 13       		.uleb128 0x13
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 152


 5333 167a 08000000 		.4byte	.LVL391
 5334 167e B9180000 		.4byte	0x18b9
 5335 1682 13       		.uleb128 0x13
 5336 1683 12000000 		.4byte	.LVL394
 5337 1687 C4180000 		.4byte	0x18c4
 5338 168b 00       		.byte	0
 5339 168c 1B       		.uleb128 0x1b
 5340 168d 93050000 		.4byte	.LASF127
 5341 1691 01       		.byte	0x1
 5342 1692 0F08     		.2byte	0x80f
 5343 1694 FA000000 		.4byte	0xfa
 5344 1698 00000000 		.4byte	.LFB52
 5345 169c 04000000 		.4byte	.LFE52-.LFB52
 5346 16a0 01       		.uleb128 0x1
 5347 16a1 9C       		.byte	0x9c
 5348 16a2 D5160000 		.4byte	0x16d5
 5349 16a6 11       		.uleb128 0x11
 5350 16a7 6E020000 		.4byte	.LASF62
 5351 16ab 01       		.byte	0x1
 5352 16ac 0F08     		.2byte	0x80f
 5353 16ae 2A160000 		.4byte	0x162a
 5354 16b2 77160000 		.4byte	.LLST106
 5355 16b6 1C       		.uleb128 0x1c
 5356 16b7 B4010000 		.4byte	.LASF125
 5357 16bb 01       		.byte	0x1
 5358 16bc 1108     		.2byte	0x811
 5359 16be FA000000 		.4byte	0xfa
 5360 16c2 01       		.uleb128 0x1
 5361 16c3 50       		.byte	0x50
 5362 16c4 12       		.uleb128 0x12
 5363 16c5 5A080000 		.4byte	.LASF73
 5364 16c9 01       		.byte	0x1
 5365 16ca 1208     		.2byte	0x812
 5366 16cc 1F050000 		.4byte	0x51f
 5367 16d0 98160000 		.4byte	.LLST107
 5368 16d4 00       		.byte	0
 5369 16d5 1B       		.uleb128 0x1b
 5370 16d6 E8090000 		.4byte	.LASF128
 5371 16da 01       		.byte	0x1
 5372 16db 7409     		.2byte	0x974
 5373 16dd EF000000 		.4byte	0xef
 5374 16e1 00000000 		.4byte	.LFB59
 5375 16e5 0E000000 		.4byte	.LFE59-.LFB59
 5376 16e9 01       		.uleb128 0x1
 5377 16ea 9C       		.byte	0x9c
 5378 16eb 1E170000 		.4byte	0x171e
 5379 16ef 11       		.uleb128 0x11
 5380 16f0 6E020000 		.4byte	.LASF62
 5381 16f4 01       		.byte	0x1
 5382 16f5 7409     		.2byte	0x974
 5383 16f7 2A160000 		.4byte	0x162a
 5384 16fb B9160000 		.4byte	.LLST108
 5385 16ff 1C       		.uleb128 0x1c
 5386 1700 62080000 		.4byte	.LASF75
 5387 1704 01       		.byte	0x1
 5388 1705 7609     		.2byte	0x976
 5389 1707 EF000000 		.4byte	0xef
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 153


 5390 170b 01       		.uleb128 0x1
 5391 170c 50       		.byte	0x50
 5392 170d 12       		.uleb128 0x12
 5393 170e 5A080000 		.4byte	.LASF73
 5394 1712 01       		.byte	0x1
 5395 1713 7709     		.2byte	0x977
 5396 1715 1F050000 		.4byte	0x51f
 5397 1719 F3160000 		.4byte	.LLST109
 5398 171d 00       		.byte	0
 5399 171e 1B       		.uleb128 0x1b
 5400 171f 19080000 		.4byte	.LASF129
 5401 1723 01       		.byte	0x1
 5402 1724 9D09     		.2byte	0x99d
 5403 1726 EF000000 		.4byte	0xef
 5404 172a 00000000 		.4byte	.LFB61
 5405 172e 10000000 		.4byte	.LFE61-.LFB61
 5406 1732 01       		.uleb128 0x1
 5407 1733 9C       		.byte	0x9c
 5408 1734 67170000 		.4byte	0x1767
 5409 1738 11       		.uleb128 0x11
 5410 1739 6E020000 		.4byte	.LASF62
 5411 173d 01       		.byte	0x1
 5412 173e 9D09     		.2byte	0x99d
 5413 1740 2A160000 		.4byte	0x162a
 5414 1744 2D170000 		.4byte	.LLST110
 5415 1748 1C       		.uleb128 0x1c
 5416 1749 62080000 		.4byte	.LASF75
 5417 174d 01       		.byte	0x1
 5418 174e 9F09     		.2byte	0x99f
 5419 1750 EF000000 		.4byte	0xef
 5420 1754 01       		.uleb128 0x1
 5421 1755 50       		.byte	0x50
 5422 1756 12       		.uleb128 0x12
 5423 1757 5A080000 		.4byte	.LASF73
 5424 175b 01       		.byte	0x1
 5425 175c A009     		.2byte	0x9a0
 5426 175e 1F050000 		.4byte	0x51f
 5427 1762 67170000 		.4byte	.LLST111
 5428 1766 00       		.byte	0
 5429 1767 20       		.uleb128 0x20
 5430 1768 54060000 		.4byte	.LASF133
 5431 176c 01       		.byte	0x1
 5432 176d D20A     		.2byte	0xad2
 5433 176f 00000000 		.4byte	.LFB62
 5434 1773 48000000 		.4byte	.LFE62-.LFB62
 5435 1777 01       		.uleb128 0x1
 5436 1778 9C       		.byte	0x9c
 5437 1779 B9170000 		.4byte	0x17b9
 5438 177d 1A       		.uleb128 0x1a
 5439 177e 6E020000 		.4byte	.LASF62
 5440 1782 01       		.byte	0x1
 5441 1783 D20A     		.2byte	0xad2
 5442 1785 3F020000 		.4byte	0x23f
 5443 1789 01       		.uleb128 0x1
 5444 178a 50       		.byte	0x50
 5445 178b 1A       		.uleb128 0x1a
 5446 178c 4E040000 		.4byte	.LASF67
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 154


 5447 1790 01       		.byte	0x1
 5448 1791 D30A     		.2byte	0xad3
 5449 1793 AE000000 		.4byte	0xae
 5450 1797 01       		.uleb128 0x1
 5451 1798 51       		.byte	0x51
 5452 1799 21       		.uleb128 0x21
 5453 179a 757800   		.ascii	"ux\000"
 5454 179d 01       		.byte	0x1
 5455 179e D50A     		.2byte	0xad5
 5456 17a0 FA000000 		.4byte	0xfa
 5457 17a4 A1170000 		.4byte	.LLST112
 5458 17a8 12       		.uleb128 0x12
 5459 17a9 EB080000 		.4byte	.LASF130
 5460 17ad 01       		.byte	0x1
 5461 17ae D60A     		.2byte	0xad6
 5462 17b0 B9170000 		.4byte	0x17b9
 5463 17b4 CA170000 		.4byte	.LLST113
 5464 17b8 00       		.byte	0
 5465 17b9 06       		.uleb128 0x6
 5466 17ba 04       		.byte	0x4
 5467 17bb A3030000 		.4byte	0x3a3
 5468 17bf 1B       		.uleb128 0x1b
 5469 17c0 7C070000 		.4byte	.LASF131
 5470 17c4 01       		.byte	0x1
 5471 17c5 010B     		.2byte	0xb01
 5472 17c7 AE000000 		.4byte	0xae
 5473 17cb 00000000 		.4byte	.LFB63
 5474 17cf 24000000 		.4byte	.LFE63-.LFB63
 5475 17d3 01       		.uleb128 0x1
 5476 17d4 9C       		.byte	0x9c
 5477 17d5 09180000 		.4byte	0x1809
 5478 17d9 11       		.uleb128 0x11
 5479 17da 6E020000 		.4byte	.LASF62
 5480 17de 01       		.byte	0x1
 5481 17df 010B     		.2byte	0xb01
 5482 17e1 3F020000 		.4byte	0x23f
 5483 17e5 0B180000 		.4byte	.LLST114
 5484 17e9 21       		.uleb128 0x21
 5485 17ea 757800   		.ascii	"ux\000"
 5486 17ed 01       		.byte	0x1
 5487 17ee 030B     		.2byte	0xb03
 5488 17f0 FA000000 		.4byte	0xfa
 5489 17f4 45180000 		.4byte	.LLST115
 5490 17f8 12       		.uleb128 0x12
 5491 17f9 9B070000 		.4byte	.LASF132
 5492 17fd 01       		.byte	0x1
 5493 17fe 040B     		.2byte	0xb04
 5494 1800 AE000000 		.4byte	0xae
 5495 1804 6F180000 		.4byte	.LLST116
 5496 1808 00       		.byte	0
 5497 1809 20       		.uleb128 0x20
 5498 180a 00020000 		.4byte	.LASF134
 5499 180e 01       		.byte	0x1
 5500 180f 200B     		.2byte	0xb20
 5501 1811 00000000 		.4byte	.LFB64
 5502 1815 28000000 		.4byte	.LFE64-.LFB64
 5503 1819 01       		.uleb128 0x1
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 155


 5504 181a 9C       		.byte	0x9c
 5505 181b 3D180000 		.4byte	0x183d
 5506 181f 1A       		.uleb128 0x1a
 5507 1820 6E020000 		.4byte	.LASF62
 5508 1824 01       		.byte	0x1
 5509 1825 200B     		.2byte	0xb20
 5510 1827 3F020000 		.4byte	0x23f
 5511 182b 01       		.uleb128 0x1
 5512 182c 50       		.byte	0x50
 5513 182d 21       		.uleb128 0x21
 5514 182e 757800   		.ascii	"ux\000"
 5515 1831 01       		.byte	0x1
 5516 1832 220B     		.2byte	0xb22
 5517 1834 FA000000 		.4byte	0xfa
 5518 1838 A5180000 		.4byte	.LLST117
 5519 183c 00       		.byte	0
 5520 183d 20       		.uleb128 0x20
 5521 183e E8010000 		.4byte	.LASF135
 5522 1842 01       		.byte	0x1
 5523 1843 1B08     		.2byte	0x81b
 5524 1845 00000000 		.4byte	.LFB53
 5525 1849 10000000 		.4byte	.LFE53-.LFB53
 5526 184d 01       		.uleb128 0x1
 5527 184e 9C       		.byte	0x9c
 5528 184f 98180000 		.4byte	0x1898
 5529 1853 11       		.uleb128 0x11
 5530 1854 6E020000 		.4byte	.LASF62
 5531 1858 01       		.byte	0x1
 5532 1859 1B08     		.2byte	0x81b
 5533 185b 3F020000 		.4byte	0x23f
 5534 185f CF180000 		.4byte	.LLST118
 5535 1863 12       		.uleb128 0x12
 5536 1864 5A080000 		.4byte	.LASF73
 5537 1868 01       		.byte	0x1
 5538 1869 1D08     		.2byte	0x81d
 5539 186b 1F050000 		.4byte	0x51f
 5540 186f FB180000 		.4byte	.LLST119
 5541 1873 18       		.uleb128 0x18
 5542 1874 08000000 		.4byte	.LVL434
 5543 1878 09180000 		.4byte	0x1809
 5544 187c 87180000 		.4byte	0x1887
 5545 1880 16       		.uleb128 0x16
 5546 1881 01       		.uleb128 0x1
 5547 1882 50       		.byte	0x50
 5548 1883 02       		.uleb128 0x2
 5549 1884 74       		.byte	0x74
 5550 1885 00       		.sleb128 0
 5551 1886 00       		.byte	0
 5552 1887 15       		.uleb128 0x15
 5553 1888 0E000000 		.4byte	.LVL435
 5554 188c AC190000 		.4byte	0x19ac
 5555 1890 16       		.uleb128 0x16
 5556 1891 01       		.uleb128 0x1
 5557 1892 50       		.byte	0x50
 5558 1893 02       		.uleb128 0x2
 5559 1894 74       		.byte	0x74
 5560 1895 00       		.sleb128 0
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 156


 5561 1896 00       		.byte	0
 5562 1897 00       		.byte	0
 5563 1898 22       		.uleb128 0x22
 5564 1899 A3030000 		.4byte	0x3a3
 5565 189d A8180000 		.4byte	0x18a8
 5566 18a1 23       		.uleb128 0x23
 5567 18a2 9E000000 		.4byte	0x9e
 5568 18a6 09       		.byte	0x9
 5569 18a7 00       		.byte	0
 5570 18a8 24       		.uleb128 0x24
 5571 18a9 6D050000 		.4byte	.LASF161
 5572 18ad 01       		.byte	0x1
 5573 18ae A4       		.byte	0xa4
 5574 18af 98180000 		.4byte	0x1898
 5575 18b3 05       		.uleb128 0x5
 5576 18b4 03       		.byte	0x3
 5577 18b5 00000000 		.4byte	xQueueRegistry
 5578 18b9 25       		.uleb128 0x25
 5579 18ba 8B010000 		.4byte	.LASF136
 5580 18be 8B010000 		.4byte	.LASF136
 5581 18c2 05       		.byte	0x5
 5582 18c3 5D       		.byte	0x5d
 5583 18c4 25       		.uleb128 0x25
 5584 18c5 28000000 		.4byte	.LASF137
 5585 18c9 28000000 		.4byte	.LASF137
 5586 18cd 05       		.byte	0x5
 5587 18ce 5E       		.byte	0x5e
 5588 18cf 26       		.uleb128 0x26
 5589 18d0 FC040000 		.4byte	.LASF138
 5590 18d4 FC040000 		.4byte	.LASF138
 5591 18d8 07       		.byte	0x7
 5592 18d9 E90B     		.2byte	0xbe9
 5593 18db 27       		.uleb128 0x27
 5594 18dc 210A0000 		.4byte	.LASF162
 5595 18e0 210A0000 		.4byte	.LASF162
 5596 18e4 26       		.uleb128 0x26
 5597 18e5 6F0A0000 		.4byte	.LASF139
 5598 18e9 6F0A0000 		.4byte	.LASF139
 5599 18ed 07       		.byte	0x7
 5600 18ee BA0B     		.2byte	0xbba
 5601 18f0 26       		.uleb128 0x26
 5602 18f1 73080000 		.4byte	.LASF140
 5603 18f5 73080000 		.4byte	.LASF140
 5604 18f9 07       		.byte	0x7
 5605 18fa D70B     		.2byte	0xbd7
 5606 18fc 25       		.uleb128 0x25
 5607 18fd 48000000 		.4byte	.LASF141
 5608 1901 48000000 		.4byte	.LASF141
 5609 1905 05       		.byte	0x5
 5610 1906 53       		.byte	0x53
 5611 1907 26       		.uleb128 0x26
 5612 1908 13090000 		.4byte	.LASF142
 5613 190c 13090000 		.4byte	.LASF142
 5614 1910 06       		.byte	0x6
 5615 1911 B101     		.2byte	0x1b1
 5616 1913 25       		.uleb128 0x25
 5617 1914 58030000 		.4byte	.LASF143
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 157


 5618 1918 58030000 		.4byte	.LASF143
 5619 191c 09       		.byte	0x9
 5620 191d AF       		.byte	0xaf
 5621 191e 26       		.uleb128 0x26
 5622 191f 8E060000 		.4byte	.LASF144
 5623 1923 8E060000 		.4byte	.LASF144
 5624 1927 07       		.byte	0x7
 5625 1928 260C     		.2byte	0xc26
 5626 192a 26       		.uleb128 0x26
 5627 192b 65030000 		.4byte	.LASF145
 5628 192f 65030000 		.4byte	.LASF145
 5629 1933 07       		.byte	0x7
 5630 1934 5A05     		.2byte	0x55a
 5631 1936 26       		.uleb128 0x26
 5632 1937 FA070000 		.4byte	.LASF146
 5633 193b FA070000 		.4byte	.LASF146
 5634 193f 07       		.byte	0x7
 5635 1940 390B     		.2byte	0xb39
 5636 1942 26       		.uleb128 0x26
 5637 1943 AE040000 		.4byte	.LASF147
 5638 1947 AE040000 		.4byte	.LASF147
 5639 194b 07       		.byte	0x7
 5640 194c 8D0B     		.2byte	0xb8d
 5641 194e 26       		.uleb128 0x26
 5642 194f DD070000 		.4byte	.LASF148
 5643 1953 DD070000 		.4byte	.LASF148
 5644 1957 07       		.byte	0x7
 5645 1958 9205     		.2byte	0x592
 5646 195a 26       		.uleb128 0x26
 5647 195b 8C090000 		.4byte	.LASF149
 5648 195f 8C090000 		.4byte	.LASF149
 5649 1963 07       		.byte	0x7
 5650 1964 D10B     		.2byte	0xbd1
 5651 1966 26       		.uleb128 0x26
 5652 1967 BD010000 		.4byte	.LASF150
 5653 196b BD010000 		.4byte	.LASF150
 5654 196f 07       		.byte	0x7
 5655 1970 C505     		.2byte	0x5c5
 5656 1972 25       		.uleb128 0x25
 5657 1973 550A0000 		.4byte	.LASF151
 5658 1977 550A0000 		.4byte	.LASF151
 5659 197b 05       		.byte	0x5
 5660 197c 5F       		.byte	0x5f
 5661 197d 25       		.uleb128 0x25
 5662 197e 71090000 		.4byte	.LASF152
 5663 1982 71090000 		.4byte	.LASF152
 5664 1986 05       		.byte	0x5
 5665 1987 60       		.byte	0x60
 5666 1988 26       		.uleb128 0x26
 5667 1989 C4040000 		.4byte	.LASF153
 5668 198d C4040000 		.4byte	.LASF153
 5669 1991 07       		.byte	0x7
 5670 1992 200C     		.2byte	0xc20
 5671 1994 26       		.uleb128 0x26
 5672 1995 38090000 		.4byte	.LASF154
 5673 1999 38090000 		.4byte	.LASF154
 5674 199d 07       		.byte	0x7
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 158


 5675 199e F30B     		.2byte	0xbf3
 5676 19a0 26       		.uleb128 0x26
 5677 19a1 96080000 		.4byte	.LASF155
 5678 19a5 96080000 		.4byte	.LASF155
 5679 19a9 07       		.byte	0x7
 5680 19aa E30B     		.2byte	0xbe3
 5681 19ac 25       		.uleb128 0x25
 5682 19ad 0F080000 		.4byte	.LASF156
 5683 19b1 0F080000 		.4byte	.LASF156
 5684 19b5 09       		.byte	0x9
 5685 19b6 B2       		.byte	0xb2
 5686 19b7 00       		.byte	0
 5687              		.section	.debug_abbrev,"",%progbits
 5688              	.Ldebug_abbrev0:
 5689 0000 01       		.uleb128 0x1
 5690 0001 11       		.uleb128 0x11
 5691 0002 01       		.byte	0x1
 5692 0003 25       		.uleb128 0x25
 5693 0004 0E       		.uleb128 0xe
 5694 0005 13       		.uleb128 0x13
 5695 0006 0B       		.uleb128 0xb
 5696 0007 03       		.uleb128 0x3
 5697 0008 0E       		.uleb128 0xe
 5698 0009 1B       		.uleb128 0x1b
 5699 000a 0E       		.uleb128 0xe
 5700 000b 55       		.uleb128 0x55
 5701 000c 17       		.uleb128 0x17
 5702 000d 11       		.uleb128 0x11
 5703 000e 01       		.uleb128 0x1
 5704 000f 10       		.uleb128 0x10
 5705 0010 17       		.uleb128 0x17
 5706 0011 00       		.byte	0
 5707 0012 00       		.byte	0
 5708 0013 02       		.uleb128 0x2
 5709 0014 16       		.uleb128 0x16
 5710 0015 00       		.byte	0
 5711 0016 03       		.uleb128 0x3
 5712 0017 0E       		.uleb128 0xe
 5713 0018 3A       		.uleb128 0x3a
 5714 0019 0B       		.uleb128 0xb
 5715 001a 3B       		.uleb128 0x3b
 5716 001b 0B       		.uleb128 0xb
 5717 001c 49       		.uleb128 0x49
 5718 001d 13       		.uleb128 0x13
 5719 001e 00       		.byte	0
 5720 001f 00       		.byte	0
 5721 0020 03       		.uleb128 0x3
 5722 0021 24       		.uleb128 0x24
 5723 0022 00       		.byte	0
 5724 0023 0B       		.uleb128 0xb
 5725 0024 0B       		.uleb128 0xb
 5726 0025 3E       		.uleb128 0x3e
 5727 0026 0B       		.uleb128 0xb
 5728 0027 03       		.uleb128 0x3
 5729 0028 0E       		.uleb128 0xe
 5730 0029 00       		.byte	0
 5731 002a 00       		.byte	0
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 159


 5732 002b 04       		.uleb128 0x4
 5733 002c 24       		.uleb128 0x24
 5734 002d 00       		.byte	0
 5735 002e 0B       		.uleb128 0xb
 5736 002f 0B       		.uleb128 0xb
 5737 0030 3E       		.uleb128 0x3e
 5738 0031 0B       		.uleb128 0xb
 5739 0032 03       		.uleb128 0x3
 5740 0033 08       		.uleb128 0x8
 5741 0034 00       		.byte	0
 5742 0035 00       		.byte	0
 5743 0036 05       		.uleb128 0x5
 5744 0037 0F       		.uleb128 0xf
 5745 0038 00       		.byte	0
 5746 0039 0B       		.uleb128 0xb
 5747 003a 0B       		.uleb128 0xb
 5748 003b 00       		.byte	0
 5749 003c 00       		.byte	0
 5750 003d 06       		.uleb128 0x6
 5751 003e 0F       		.uleb128 0xf
 5752 003f 00       		.byte	0
 5753 0040 0B       		.uleb128 0xb
 5754 0041 0B       		.uleb128 0xb
 5755 0042 49       		.uleb128 0x49
 5756 0043 13       		.uleb128 0x13
 5757 0044 00       		.byte	0
 5758 0045 00       		.byte	0
 5759 0046 07       		.uleb128 0x7
 5760 0047 26       		.uleb128 0x26
 5761 0048 00       		.byte	0
 5762 0049 49       		.uleb128 0x49
 5763 004a 13       		.uleb128 0x13
 5764 004b 00       		.byte	0
 5765 004c 00       		.byte	0
 5766 004d 08       		.uleb128 0x8
 5767 004e 26       		.uleb128 0x26
 5768 004f 00       		.byte	0
 5769 0050 00       		.byte	0
 5770 0051 00       		.byte	0
 5771 0052 09       		.uleb128 0x9
 5772 0053 13       		.uleb128 0x13
 5773 0054 01       		.byte	0x1
 5774 0055 03       		.uleb128 0x3
 5775 0056 0E       		.uleb128 0xe
 5776 0057 0B       		.uleb128 0xb
 5777 0058 0B       		.uleb128 0xb
 5778 0059 3A       		.uleb128 0x3a
 5779 005a 0B       		.uleb128 0xb
 5780 005b 3B       		.uleb128 0x3b
 5781 005c 0B       		.uleb128 0xb
 5782 005d 01       		.uleb128 0x1
 5783 005e 13       		.uleb128 0x13
 5784 005f 00       		.byte	0
 5785 0060 00       		.byte	0
 5786 0061 0A       		.uleb128 0xa
 5787 0062 0D       		.uleb128 0xd
 5788 0063 00       		.byte	0
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 160


 5789 0064 03       		.uleb128 0x3
 5790 0065 0E       		.uleb128 0xe
 5791 0066 3A       		.uleb128 0x3a
 5792 0067 0B       		.uleb128 0xb
 5793 0068 3B       		.uleb128 0x3b
 5794 0069 0B       		.uleb128 0xb
 5795 006a 49       		.uleb128 0x49
 5796 006b 13       		.uleb128 0x13
 5797 006c 38       		.uleb128 0x38
 5798 006d 0B       		.uleb128 0xb
 5799 006e 00       		.byte	0
 5800 006f 00       		.byte	0
 5801 0070 0B       		.uleb128 0xb
 5802 0071 35       		.uleb128 0x35
 5803 0072 00       		.byte	0
 5804 0073 49       		.uleb128 0x49
 5805 0074 13       		.uleb128 0x13
 5806 0075 00       		.byte	0
 5807 0076 00       		.byte	0
 5808 0077 0C       		.uleb128 0xc
 5809 0078 13       		.uleb128 0x13
 5810 0079 00       		.byte	0
 5811 007a 03       		.uleb128 0x3
 5812 007b 0E       		.uleb128 0xe
 5813 007c 3C       		.uleb128 0x3c
 5814 007d 19       		.uleb128 0x19
 5815 007e 00       		.byte	0
 5816 007f 00       		.byte	0
 5817 0080 0D       		.uleb128 0xd
 5818 0081 0D       		.uleb128 0xd
 5819 0082 00       		.byte	0
 5820 0083 03       		.uleb128 0x3
 5821 0084 08       		.uleb128 0x8
 5822 0085 3A       		.uleb128 0x3a
 5823 0086 0B       		.uleb128 0xb
 5824 0087 3B       		.uleb128 0x3b
 5825 0088 0B       		.uleb128 0xb
 5826 0089 49       		.uleb128 0x49
 5827 008a 13       		.uleb128 0x13
 5828 008b 38       		.uleb128 0x38
 5829 008c 0B       		.uleb128 0xb
 5830 008d 00       		.byte	0
 5831 008e 00       		.byte	0
 5832 008f 0E       		.uleb128 0xe
 5833 0090 17       		.uleb128 0x17
 5834 0091 01       		.byte	0x1
 5835 0092 0B       		.uleb128 0xb
 5836 0093 0B       		.uleb128 0xb
 5837 0094 3A       		.uleb128 0x3a
 5838 0095 0B       		.uleb128 0xb
 5839 0096 3B       		.uleb128 0x3b
 5840 0097 0B       		.uleb128 0xb
 5841 0098 01       		.uleb128 0x1
 5842 0099 13       		.uleb128 0x13
 5843 009a 00       		.byte	0
 5844 009b 00       		.byte	0
 5845 009c 0F       		.uleb128 0xf
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 161


 5846 009d 0D       		.uleb128 0xd
 5847 009e 00       		.byte	0
 5848 009f 03       		.uleb128 0x3
 5849 00a0 0E       		.uleb128 0xe
 5850 00a1 3A       		.uleb128 0x3a
 5851 00a2 0B       		.uleb128 0xb
 5852 00a3 3B       		.uleb128 0x3b
 5853 00a4 0B       		.uleb128 0xb
 5854 00a5 49       		.uleb128 0x49
 5855 00a6 13       		.uleb128 0x13
 5856 00a7 00       		.byte	0
 5857 00a8 00       		.byte	0
 5858 00a9 10       		.uleb128 0x10
 5859 00aa 2E       		.uleb128 0x2e
 5860 00ab 01       		.byte	0x1
 5861 00ac 03       		.uleb128 0x3
 5862 00ad 0E       		.uleb128 0xe
 5863 00ae 3A       		.uleb128 0x3a
 5864 00af 0B       		.uleb128 0xb
 5865 00b0 3B       		.uleb128 0x3b
 5866 00b1 05       		.uleb128 0x5
 5867 00b2 27       		.uleb128 0x27
 5868 00b3 19       		.uleb128 0x19
 5869 00b4 49       		.uleb128 0x49
 5870 00b5 13       		.uleb128 0x13
 5871 00b6 11       		.uleb128 0x11
 5872 00b7 01       		.uleb128 0x1
 5873 00b8 12       		.uleb128 0x12
 5874 00b9 06       		.uleb128 0x6
 5875 00ba 40       		.uleb128 0x40
 5876 00bb 18       		.uleb128 0x18
 5877 00bc 9742     		.uleb128 0x2117
 5878 00be 19       		.uleb128 0x19
 5879 00bf 01       		.uleb128 0x1
 5880 00c0 13       		.uleb128 0x13
 5881 00c1 00       		.byte	0
 5882 00c2 00       		.byte	0
 5883 00c3 11       		.uleb128 0x11
 5884 00c4 05       		.uleb128 0x5
 5885 00c5 00       		.byte	0
 5886 00c6 03       		.uleb128 0x3
 5887 00c7 0E       		.uleb128 0xe
 5888 00c8 3A       		.uleb128 0x3a
 5889 00c9 0B       		.uleb128 0xb
 5890 00ca 3B       		.uleb128 0x3b
 5891 00cb 05       		.uleb128 0x5
 5892 00cc 49       		.uleb128 0x49
 5893 00cd 13       		.uleb128 0x13
 5894 00ce 02       		.uleb128 0x2
 5895 00cf 17       		.uleb128 0x17
 5896 00d0 00       		.byte	0
 5897 00d1 00       		.byte	0
 5898 00d2 12       		.uleb128 0x12
 5899 00d3 34       		.uleb128 0x34
 5900 00d4 00       		.byte	0
 5901 00d5 03       		.uleb128 0x3
 5902 00d6 0E       		.uleb128 0xe
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 162


 5903 00d7 3A       		.uleb128 0x3a
 5904 00d8 0B       		.uleb128 0xb
 5905 00d9 3B       		.uleb128 0x3b
 5906 00da 05       		.uleb128 0x5
 5907 00db 49       		.uleb128 0x49
 5908 00dc 13       		.uleb128 0x13
 5909 00dd 02       		.uleb128 0x2
 5910 00de 17       		.uleb128 0x17
 5911 00df 00       		.byte	0
 5912 00e0 00       		.byte	0
 5913 00e1 13       		.uleb128 0x13
 5914 00e2 898201   		.uleb128 0x4109
 5915 00e5 00       		.byte	0
 5916 00e6 11       		.uleb128 0x11
 5917 00e7 01       		.uleb128 0x1
 5918 00e8 31       		.uleb128 0x31
 5919 00e9 13       		.uleb128 0x13
 5920 00ea 00       		.byte	0
 5921 00eb 00       		.byte	0
 5922 00ec 14       		.uleb128 0x14
 5923 00ed 2E       		.uleb128 0x2e
 5924 00ee 01       		.byte	0x1
 5925 00ef 03       		.uleb128 0x3
 5926 00f0 0E       		.uleb128 0xe
 5927 00f1 3A       		.uleb128 0x3a
 5928 00f2 0B       		.uleb128 0xb
 5929 00f3 3B       		.uleb128 0x3b
 5930 00f4 05       		.uleb128 0x5
 5931 00f5 27       		.uleb128 0x27
 5932 00f6 19       		.uleb128 0x19
 5933 00f7 11       		.uleb128 0x11
 5934 00f8 01       		.uleb128 0x1
 5935 00f9 12       		.uleb128 0x12
 5936 00fa 06       		.uleb128 0x6
 5937 00fb 40       		.uleb128 0x40
 5938 00fc 18       		.uleb128 0x18
 5939 00fd 9742     		.uleb128 0x2117
 5940 00ff 19       		.uleb128 0x19
 5941 0100 01       		.uleb128 0x1
 5942 0101 13       		.uleb128 0x13
 5943 0102 00       		.byte	0
 5944 0103 00       		.byte	0
 5945 0104 15       		.uleb128 0x15
 5946 0105 898201   		.uleb128 0x4109
 5947 0108 01       		.byte	0x1
 5948 0109 11       		.uleb128 0x11
 5949 010a 01       		.uleb128 0x1
 5950 010b 31       		.uleb128 0x31
 5951 010c 13       		.uleb128 0x13
 5952 010d 00       		.byte	0
 5953 010e 00       		.byte	0
 5954 010f 16       		.uleb128 0x16
 5955 0110 8A8201   		.uleb128 0x410a
 5956 0113 00       		.byte	0
 5957 0114 02       		.uleb128 0x2
 5958 0115 18       		.uleb128 0x18
 5959 0116 9142     		.uleb128 0x2111
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 163


 5960 0118 18       		.uleb128 0x18
 5961 0119 00       		.byte	0
 5962 011a 00       		.byte	0
 5963 011b 17       		.uleb128 0x17
 5964 011c 0B       		.uleb128 0xb
 5965 011d 01       		.byte	0x1
 5966 011e 11       		.uleb128 0x11
 5967 011f 01       		.uleb128 0x1
 5968 0120 12       		.uleb128 0x12
 5969 0121 06       		.uleb128 0x6
 5970 0122 01       		.uleb128 0x1
 5971 0123 13       		.uleb128 0x13
 5972 0124 00       		.byte	0
 5973 0125 00       		.byte	0
 5974 0126 18       		.uleb128 0x18
 5975 0127 898201   		.uleb128 0x4109
 5976 012a 01       		.byte	0x1
 5977 012b 11       		.uleb128 0x11
 5978 012c 01       		.uleb128 0x1
 5979 012d 31       		.uleb128 0x31
 5980 012e 13       		.uleb128 0x13
 5981 012f 01       		.uleb128 0x1
 5982 0130 13       		.uleb128 0x13
 5983 0131 00       		.byte	0
 5984 0132 00       		.byte	0
 5985 0133 19       		.uleb128 0x19
 5986 0134 2E       		.uleb128 0x2e
 5987 0135 01       		.byte	0x1
 5988 0136 3F       		.uleb128 0x3f
 5989 0137 19       		.uleb128 0x19
 5990 0138 03       		.uleb128 0x3
 5991 0139 0E       		.uleb128 0xe
 5992 013a 3A       		.uleb128 0x3a
 5993 013b 0B       		.uleb128 0xb
 5994 013c 3B       		.uleb128 0x3b
 5995 013d 05       		.uleb128 0x5
 5996 013e 27       		.uleb128 0x27
 5997 013f 19       		.uleb128 0x19
 5998 0140 49       		.uleb128 0x49
 5999 0141 13       		.uleb128 0x13
 6000 0142 11       		.uleb128 0x11
 6001 0143 01       		.uleb128 0x1
 6002 0144 12       		.uleb128 0x12
 6003 0145 06       		.uleb128 0x6
 6004 0146 40       		.uleb128 0x40
 6005 0147 18       		.uleb128 0x18
 6006 0148 9642     		.uleb128 0x2116
 6007 014a 19       		.uleb128 0x19
 6008 014b 01       		.uleb128 0x1
 6009 014c 13       		.uleb128 0x13
 6010 014d 00       		.byte	0
 6011 014e 00       		.byte	0
 6012 014f 1A       		.uleb128 0x1a
 6013 0150 05       		.uleb128 0x5
 6014 0151 00       		.byte	0
 6015 0152 03       		.uleb128 0x3
 6016 0153 0E       		.uleb128 0xe
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 164


 6017 0154 3A       		.uleb128 0x3a
 6018 0155 0B       		.uleb128 0xb
 6019 0156 3B       		.uleb128 0x3b
 6020 0157 05       		.uleb128 0x5
 6021 0158 49       		.uleb128 0x49
 6022 0159 13       		.uleb128 0x13
 6023 015a 02       		.uleb128 0x2
 6024 015b 18       		.uleb128 0x18
 6025 015c 00       		.byte	0
 6026 015d 00       		.byte	0
 6027 015e 1B       		.uleb128 0x1b
 6028 015f 2E       		.uleb128 0x2e
 6029 0160 01       		.byte	0x1
 6030 0161 3F       		.uleb128 0x3f
 6031 0162 19       		.uleb128 0x19
 6032 0163 03       		.uleb128 0x3
 6033 0164 0E       		.uleb128 0xe
 6034 0165 3A       		.uleb128 0x3a
 6035 0166 0B       		.uleb128 0xb
 6036 0167 3B       		.uleb128 0x3b
 6037 0168 05       		.uleb128 0x5
 6038 0169 27       		.uleb128 0x27
 6039 016a 19       		.uleb128 0x19
 6040 016b 49       		.uleb128 0x49
 6041 016c 13       		.uleb128 0x13
 6042 016d 11       		.uleb128 0x11
 6043 016e 01       		.uleb128 0x1
 6044 016f 12       		.uleb128 0x12
 6045 0170 06       		.uleb128 0x6
 6046 0171 40       		.uleb128 0x40
 6047 0172 18       		.uleb128 0x18
 6048 0173 9742     		.uleb128 0x2117
 6049 0175 19       		.uleb128 0x19
 6050 0176 01       		.uleb128 0x1
 6051 0177 13       		.uleb128 0x13
 6052 0178 00       		.byte	0
 6053 0179 00       		.byte	0
 6054 017a 1C       		.uleb128 0x1c
 6055 017b 34       		.uleb128 0x34
 6056 017c 00       		.byte	0
 6057 017d 03       		.uleb128 0x3
 6058 017e 0E       		.uleb128 0xe
 6059 017f 3A       		.uleb128 0x3a
 6060 0180 0B       		.uleb128 0xb
 6061 0181 3B       		.uleb128 0x3b
 6062 0182 05       		.uleb128 0x5
 6063 0183 49       		.uleb128 0x49
 6064 0184 13       		.uleb128 0x13
 6065 0185 02       		.uleb128 0x2
 6066 0186 18       		.uleb128 0x18
 6067 0187 00       		.byte	0
 6068 0188 00       		.byte	0
 6069 0189 1D       		.uleb128 0x1d
 6070 018a 34       		.uleb128 0x34
 6071 018b 00       		.byte	0
 6072 018c 03       		.uleb128 0x3
 6073 018d 0E       		.uleb128 0xe
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 165


 6074 018e 3A       		.uleb128 0x3a
 6075 018f 0B       		.uleb128 0xb
 6076 0190 3B       		.uleb128 0x3b
 6077 0191 05       		.uleb128 0x5
 6078 0192 49       		.uleb128 0x49
 6079 0193 13       		.uleb128 0x13
 6080 0194 1C       		.uleb128 0x1c
 6081 0195 0B       		.uleb128 0xb
 6082 0196 00       		.byte	0
 6083 0197 00       		.byte	0
 6084 0198 1E       		.uleb128 0x1e
 6085 0199 0B       		.uleb128 0xb
 6086 019a 01       		.byte	0x1
 6087 019b 55       		.uleb128 0x55
 6088 019c 17       		.uleb128 0x17
 6089 019d 01       		.uleb128 0x1
 6090 019e 13       		.uleb128 0x13
 6091 019f 00       		.byte	0
 6092 01a0 00       		.byte	0
 6093 01a1 1F       		.uleb128 0x1f
 6094 01a2 0B       		.uleb128 0xb
 6095 01a3 01       		.byte	0x1
 6096 01a4 55       		.uleb128 0x55
 6097 01a5 17       		.uleb128 0x17
 6098 01a6 00       		.byte	0
 6099 01a7 00       		.byte	0
 6100 01a8 20       		.uleb128 0x20
 6101 01a9 2E       		.uleb128 0x2e
 6102 01aa 01       		.byte	0x1
 6103 01ab 3F       		.uleb128 0x3f
 6104 01ac 19       		.uleb128 0x19
 6105 01ad 03       		.uleb128 0x3
 6106 01ae 0E       		.uleb128 0xe
 6107 01af 3A       		.uleb128 0x3a
 6108 01b0 0B       		.uleb128 0xb
 6109 01b1 3B       		.uleb128 0x3b
 6110 01b2 05       		.uleb128 0x5
 6111 01b3 27       		.uleb128 0x27
 6112 01b4 19       		.uleb128 0x19
 6113 01b5 11       		.uleb128 0x11
 6114 01b6 01       		.uleb128 0x1
 6115 01b7 12       		.uleb128 0x12
 6116 01b8 06       		.uleb128 0x6
 6117 01b9 40       		.uleb128 0x40
 6118 01ba 18       		.uleb128 0x18
 6119 01bb 9742     		.uleb128 0x2117
 6120 01bd 19       		.uleb128 0x19
 6121 01be 01       		.uleb128 0x1
 6122 01bf 13       		.uleb128 0x13
 6123 01c0 00       		.byte	0
 6124 01c1 00       		.byte	0
 6125 01c2 21       		.uleb128 0x21
 6126 01c3 34       		.uleb128 0x34
 6127 01c4 00       		.byte	0
 6128 01c5 03       		.uleb128 0x3
 6129 01c6 08       		.uleb128 0x8
 6130 01c7 3A       		.uleb128 0x3a
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 166


 6131 01c8 0B       		.uleb128 0xb
 6132 01c9 3B       		.uleb128 0x3b
 6133 01ca 05       		.uleb128 0x5
 6134 01cb 49       		.uleb128 0x49
 6135 01cc 13       		.uleb128 0x13
 6136 01cd 02       		.uleb128 0x2
 6137 01ce 17       		.uleb128 0x17
 6138 01cf 00       		.byte	0
 6139 01d0 00       		.byte	0
 6140 01d1 22       		.uleb128 0x22
 6141 01d2 01       		.uleb128 0x1
 6142 01d3 01       		.byte	0x1
 6143 01d4 49       		.uleb128 0x49
 6144 01d5 13       		.uleb128 0x13
 6145 01d6 01       		.uleb128 0x1
 6146 01d7 13       		.uleb128 0x13
 6147 01d8 00       		.byte	0
 6148 01d9 00       		.byte	0
 6149 01da 23       		.uleb128 0x23
 6150 01db 21       		.uleb128 0x21
 6151 01dc 00       		.byte	0
 6152 01dd 49       		.uleb128 0x49
 6153 01de 13       		.uleb128 0x13
 6154 01df 2F       		.uleb128 0x2f
 6155 01e0 0B       		.uleb128 0xb
 6156 01e1 00       		.byte	0
 6157 01e2 00       		.byte	0
 6158 01e3 24       		.uleb128 0x24
 6159 01e4 34       		.uleb128 0x34
 6160 01e5 00       		.byte	0
 6161 01e6 03       		.uleb128 0x3
 6162 01e7 0E       		.uleb128 0xe
 6163 01e8 3A       		.uleb128 0x3a
 6164 01e9 0B       		.uleb128 0xb
 6165 01ea 3B       		.uleb128 0x3b
 6166 01eb 0B       		.uleb128 0xb
 6167 01ec 49       		.uleb128 0x49
 6168 01ed 13       		.uleb128 0x13
 6169 01ee 3F       		.uleb128 0x3f
 6170 01ef 19       		.uleb128 0x19
 6171 01f0 02       		.uleb128 0x2
 6172 01f1 18       		.uleb128 0x18
 6173 01f2 00       		.byte	0
 6174 01f3 00       		.byte	0
 6175 01f4 25       		.uleb128 0x25
 6176 01f5 2E       		.uleb128 0x2e
 6177 01f6 00       		.byte	0
 6178 01f7 3F       		.uleb128 0x3f
 6179 01f8 19       		.uleb128 0x19
 6180 01f9 3C       		.uleb128 0x3c
 6181 01fa 19       		.uleb128 0x19
 6182 01fb 6E       		.uleb128 0x6e
 6183 01fc 0E       		.uleb128 0xe
 6184 01fd 03       		.uleb128 0x3
 6185 01fe 0E       		.uleb128 0xe
 6186 01ff 3A       		.uleb128 0x3a
 6187 0200 0B       		.uleb128 0xb
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 167


 6188 0201 3B       		.uleb128 0x3b
 6189 0202 0B       		.uleb128 0xb
 6190 0203 00       		.byte	0
 6191 0204 00       		.byte	0
 6192 0205 26       		.uleb128 0x26
 6193 0206 2E       		.uleb128 0x2e
 6194 0207 00       		.byte	0
 6195 0208 3F       		.uleb128 0x3f
 6196 0209 19       		.uleb128 0x19
 6197 020a 3C       		.uleb128 0x3c
 6198 020b 19       		.uleb128 0x19
 6199 020c 6E       		.uleb128 0x6e
 6200 020d 0E       		.uleb128 0xe
 6201 020e 03       		.uleb128 0x3
 6202 020f 0E       		.uleb128 0xe
 6203 0210 3A       		.uleb128 0x3a
 6204 0211 0B       		.uleb128 0xb
 6205 0212 3B       		.uleb128 0x3b
 6206 0213 05       		.uleb128 0x5
 6207 0214 00       		.byte	0
 6208 0215 00       		.byte	0
 6209 0216 27       		.uleb128 0x27
 6210 0217 2E       		.uleb128 0x2e
 6211 0218 00       		.byte	0
 6212 0219 3F       		.uleb128 0x3f
 6213 021a 19       		.uleb128 0x19
 6214 021b 3C       		.uleb128 0x3c
 6215 021c 19       		.uleb128 0x19
 6216 021d 6E       		.uleb128 0x6e
 6217 021e 0E       		.uleb128 0xe
 6218 021f 03       		.uleb128 0x3
 6219 0220 0E       		.uleb128 0xe
 6220 0221 00       		.byte	0
 6221 0222 00       		.byte	0
 6222 0223 00       		.byte	0
 6223              		.section	.debug_loc,"",%progbits
 6224              	.Ldebug_loc0:
 6225              	.LLST0:
 6226 0000 00000000 		.4byte	.LVL0
 6227 0004 0A000000 		.4byte	.LVL1
 6228 0008 0100     		.2byte	0x1
 6229 000a 50       		.byte	0x50
 6230 000b 0A000000 		.4byte	.LVL1
 6231 000f 10000000 		.4byte	.LVL3
 6232 0013 0400     		.2byte	0x4
 6233 0015 F3       		.byte	0xf3
 6234 0016 01       		.uleb128 0x1
 6235 0017 50       		.byte	0x50
 6236 0018 9F       		.byte	0x9f
 6237 0019 10000000 		.4byte	.LVL3
 6238 001d 12000000 		.4byte	.LVL4
 6239 0021 0100     		.2byte	0x1
 6240 0023 50       		.byte	0x50
 6241 0024 12000000 		.4byte	.LVL4
 6242 0028 14000000 		.4byte	.LFE54
 6243 002c 0400     		.2byte	0x4
 6244 002e F3       		.byte	0xf3
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 168


 6245 002f 01       		.uleb128 0x1
 6246 0030 50       		.byte	0x50
 6247 0031 9F       		.byte	0x9f
 6248 0032 00000000 		.4byte	0
 6249 0036 00000000 		.4byte	0
 6250              	.LLST1:
 6251 003a 0E000000 		.4byte	.LVL2
 6252 003e 10000000 		.4byte	.LVL3
 6253 0042 0100     		.2byte	0x1
 6254 0044 50       		.byte	0x50
 6255 0045 12000000 		.4byte	.LVL4
 6256 0049 14000000 		.4byte	.LFE54
 6257 004d 0100     		.2byte	0x1
 6258 004f 50       		.byte	0x50
 6259 0050 00000000 		.4byte	0
 6260 0054 00000000 		.4byte	0
 6261              	.LLST2:
 6262 0058 00000000 		.4byte	.LVL5
 6263 005c 07000000 		.4byte	.LVL6-1
 6264 0060 0100     		.2byte	0x1
 6265 0062 50       		.byte	0x50
 6266 0063 07000000 		.4byte	.LVL6-1
 6267 0067 12000000 		.4byte	.LVL7
 6268 006b 0100     		.2byte	0x1
 6269 006d 54       		.byte	0x54
 6270 006e 12000000 		.4byte	.LVL7
 6271 0072 14000000 		.4byte	.LVL8
 6272 0076 0400     		.2byte	0x4
 6273 0078 F3       		.byte	0xf3
 6274 0079 01       		.uleb128 0x1
 6275 007a 50       		.byte	0x50
 6276 007b 9F       		.byte	0x9f
 6277 007c 14000000 		.4byte	.LVL8
 6278 0080 16000000 		.4byte	.LVL9
 6279 0084 0100     		.2byte	0x1
 6280 0086 54       		.byte	0x54
 6281 0087 16000000 		.4byte	.LVL9
 6282 008b 1E000000 		.4byte	.LFE60
 6283 008f 0400     		.2byte	0x4
 6284 0091 F3       		.byte	0xf3
 6285 0092 01       		.uleb128 0x1
 6286 0093 50       		.byte	0x50
 6287 0094 9F       		.byte	0x9f
 6288 0095 00000000 		.4byte	0
 6289 0099 00000000 		.4byte	0
 6290              	.LLST3:
 6291 009d 16000000 		.4byte	.LVL9
 6292 00a1 1C000000 		.4byte	.LVL11
 6293 00a5 0100     		.2byte	0x1
 6294 00a7 54       		.byte	0x54
 6295 00a8 1C000000 		.4byte	.LVL11
 6296 00ac 1E000000 		.4byte	.LFE60
 6297 00b0 0100     		.2byte	0x1
 6298 00b2 50       		.byte	0x50
 6299 00b3 00000000 		.4byte	0
 6300 00b7 00000000 		.4byte	0
 6301              	.LLST4:
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 169


 6302 00bb 00000000 		.4byte	.LVL12
 6303 00bf 07000000 		.4byte	.LVL13-1
 6304 00c3 0100     		.2byte	0x1
 6305 00c5 50       		.byte	0x50
 6306 00c6 07000000 		.4byte	.LVL13-1
 6307 00ca 10000000 		.4byte	.LVL14
 6308 00ce 0100     		.2byte	0x1
 6309 00d0 54       		.byte	0x54
 6310 00d1 10000000 		.4byte	.LVL14
 6311 00d5 12000000 		.4byte	.LVL15
 6312 00d9 0400     		.2byte	0x4
 6313 00db F3       		.byte	0xf3
 6314 00dc 01       		.uleb128 0x1
 6315 00dd 50       		.byte	0x50
 6316 00de 9F       		.byte	0x9f
 6317 00df 12000000 		.4byte	.LVL15
 6318 00e3 14000000 		.4byte	.LVL16
 6319 00e7 0100     		.2byte	0x1
 6320 00e9 54       		.byte	0x54
 6321 00ea 14000000 		.4byte	.LVL16
 6322 00ee 1C000000 		.4byte	.LFE58
 6323 00f2 0400     		.2byte	0x4
 6324 00f4 F3       		.byte	0xf3
 6325 00f5 01       		.uleb128 0x1
 6326 00f6 50       		.byte	0x50
 6327 00f7 9F       		.byte	0x9f
 6328 00f8 00000000 		.4byte	0
 6329 00fc 00000000 		.4byte	0
 6330              	.LLST5:
 6331 0100 14000000 		.4byte	.LVL16
 6332 0104 1A000000 		.4byte	.LVL18
 6333 0108 0100     		.2byte	0x1
 6334 010a 54       		.byte	0x54
 6335 010b 1A000000 		.4byte	.LVL18
 6336 010f 1C000000 		.4byte	.LFE58
 6337 0113 0100     		.2byte	0x1
 6338 0115 50       		.byte	0x50
 6339 0116 00000000 		.4byte	0
 6340 011a 00000000 		.4byte	0
 6341              	.LLST6:
 6342 011e 00000000 		.4byte	.LVL19
 6343 0122 16000000 		.4byte	.LVL23
 6344 0126 0100     		.2byte	0x1
 6345 0128 50       		.byte	0x50
 6346 0129 16000000 		.4byte	.LVL23
 6347 012d 20000000 		.4byte	.LVL25
 6348 0131 0100     		.2byte	0x1
 6349 0133 54       		.byte	0x54
 6350 0134 20000000 		.4byte	.LVL25
 6351 0138 26000000 		.4byte	.LVL26
 6352 013c 0100     		.2byte	0x1
 6353 013e 50       		.byte	0x50
 6354 013f 26000000 		.4byte	.LVL26
 6355 0143 42000000 		.4byte	.LVL28
 6356 0147 0100     		.2byte	0x1
 6357 0149 54       		.byte	0x54
 6358 014a 42000000 		.4byte	.LVL28
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 170


 6359 014e 44000000 		.4byte	.LVL29
 6360 0152 0100     		.2byte	0x1
 6361 0154 50       		.byte	0x50
 6362 0155 44000000 		.4byte	.LVL29
 6363 0159 6E000000 		.4byte	.LVL32
 6364 015d 0100     		.2byte	0x1
 6365 015f 54       		.byte	0x54
 6366 0160 6E000000 		.4byte	.LVL32
 6367 0164 70000000 		.4byte	.LVL33
 6368 0168 0100     		.2byte	0x1
 6369 016a 50       		.byte	0x50
 6370 016b 70000000 		.4byte	.LVL33
 6371 016f 80000000 		.4byte	.LVL37
 6372 0173 0100     		.2byte	0x1
 6373 0175 54       		.byte	0x54
 6374 0176 80000000 		.4byte	.LVL37
 6375 017a 82000000 		.4byte	.LFE55
 6376 017e 0400     		.2byte	0x4
 6377 0180 F3       		.byte	0xf3
 6378 0181 01       		.uleb128 0x1
 6379 0182 50       		.byte	0x50
 6380 0183 9F       		.byte	0x9f
 6381 0184 00000000 		.4byte	0
 6382 0188 00000000 		.4byte	0
 6383              	.LLST7:
 6384 018c 00000000 		.4byte	.LVL19
 6385 0190 19000000 		.4byte	.LVL24-1
 6386 0194 0100     		.2byte	0x1
 6387 0196 51       		.byte	0x51
 6388 0197 19000000 		.4byte	.LVL24-1
 6389 019b 20000000 		.4byte	.LVL25
 6390 019f 0400     		.2byte	0x4
 6391 01a1 F3       		.byte	0xf3
 6392 01a2 01       		.uleb128 0x1
 6393 01a3 51       		.byte	0x51
 6394 01a4 9F       		.byte	0x9f
 6395 01a5 20000000 		.4byte	.LVL25
 6396 01a9 29000000 		.4byte	.LVL27-1
 6397 01ad 0100     		.2byte	0x1
 6398 01af 51       		.byte	0x51
 6399 01b0 29000000 		.4byte	.LVL27-1
 6400 01b4 42000000 		.4byte	.LVL28
 6401 01b8 0400     		.2byte	0x4
 6402 01ba F3       		.byte	0xf3
 6403 01bb 01       		.uleb128 0x1
 6404 01bc 51       		.byte	0x51
 6405 01bd 9F       		.byte	0x9f
 6406 01be 42000000 		.4byte	.LVL28
 6407 01c2 47000000 		.4byte	.LVL30-1
 6408 01c6 0100     		.2byte	0x1
 6409 01c8 51       		.byte	0x51
 6410 01c9 47000000 		.4byte	.LVL30-1
 6411 01cd 6E000000 		.4byte	.LVL32
 6412 01d1 0400     		.2byte	0x4
 6413 01d3 F3       		.byte	0xf3
 6414 01d4 01       		.uleb128 0x1
 6415 01d5 51       		.byte	0x51
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 171


 6416 01d6 9F       		.byte	0x9f
 6417 01d7 6E000000 		.4byte	.LVL32
 6418 01db 72000000 		.4byte	.LVL34
 6419 01df 0100     		.2byte	0x1
 6420 01e1 51       		.byte	0x51
 6421 01e2 72000000 		.4byte	.LVL34
 6422 01e6 82000000 		.4byte	.LFE55
 6423 01ea 0400     		.2byte	0x4
 6424 01ec F3       		.byte	0xf3
 6425 01ed 01       		.uleb128 0x1
 6426 01ee 51       		.byte	0x51
 6427 01ef 9F       		.byte	0x9f
 6428 01f0 00000000 		.4byte	0
 6429 01f4 00000000 		.4byte	0
 6430              	.LLST8:
 6431 01f8 00000000 		.4byte	.LVL19
 6432 01fc 0A000000 		.4byte	.LVL22
 6433 0200 0100     		.2byte	0x1
 6434 0202 52       		.byte	0x52
 6435 0203 0A000000 		.4byte	.LVL22
 6436 0207 80000000 		.4byte	.LVL39
 6437 020b 0100     		.2byte	0x1
 6438 020d 56       		.byte	0x56
 6439 020e 80000000 		.4byte	.LVL39
 6440 0212 82000000 		.4byte	.LFE55
 6441 0216 0400     		.2byte	0x4
 6442 0218 F3       		.byte	0xf3
 6443 0219 01       		.uleb128 0x1
 6444 021a 52       		.byte	0x52
 6445 021b 9F       		.byte	0x9f
 6446 021c 00000000 		.4byte	0
 6447 0220 00000000 		.4byte	0
 6448              	.LLST9:
 6449 0224 06000000 		.4byte	.LVL20
 6450 0228 1A000000 		.4byte	.LVL24
 6451 022c 0200     		.2byte	0x2
 6452 022e 30       		.byte	0x30
 6453 022f 9F       		.byte	0x9f
 6454 0230 1A000000 		.4byte	.LVL24
 6455 0234 20000000 		.4byte	.LVL25
 6456 0238 0100     		.2byte	0x1
 6457 023a 50       		.byte	0x50
 6458 023b 20000000 		.4byte	.LVL25
 6459 023f 7C000000 		.4byte	.LVL35
 6460 0243 0200     		.2byte	0x2
 6461 0245 30       		.byte	0x30
 6462 0246 9F       		.byte	0x9f
 6463 0247 7C000000 		.4byte	.LVL35
 6464 024b 82000000 		.4byte	.LFE55
 6465 024f 0100     		.2byte	0x1
 6466 0251 50       		.byte	0x50
 6467 0252 00000000 		.4byte	0
 6468 0256 00000000 		.4byte	0
 6469              	.LLST10:
 6470 025a 08000000 		.4byte	.LVL21
 6471 025e 7E000000 		.4byte	.LVL36
 6472 0262 0100     		.2byte	0x1
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 172


 6473 0264 55       		.byte	0x55
 6474 0265 7E000000 		.4byte	.LVL36
 6475 0269 80000000 		.4byte	.LVL38
 6476 026d 0300     		.2byte	0x3
 6477 026f 75       		.byte	0x75
 6478 0270 7F       		.sleb128 -1
 6479 0271 9F       		.byte	0x9f
 6480 0272 80000000 		.4byte	.LVL38
 6481 0276 82000000 		.4byte	.LFE55
 6482 027a 0900     		.2byte	0x9
 6483 027c F3       		.byte	0xf3
 6484 027d 01       		.uleb128 0x1
 6485 027e 50       		.byte	0x50
 6486 027f 23       		.byte	0x23
 6487 0280 38       		.uleb128 0x38
 6488 0281 06       		.byte	0x6
 6489 0282 31       		.byte	0x31
 6490 0283 1C       		.byte	0x1c
 6491 0284 9F       		.byte	0x9f
 6492 0285 00000000 		.4byte	0
 6493 0289 00000000 		.4byte	0
 6494              	.LLST11:
 6495 028d 00000000 		.4byte	.LVL40
 6496 0291 1E000000 		.4byte	.LVL42
 6497 0295 0100     		.2byte	0x1
 6498 0297 50       		.byte	0x50
 6499 0298 1E000000 		.4byte	.LVL42
 6500 029c 24000000 		.4byte	.LFE56
 6501 02a0 0400     		.2byte	0x4
 6502 02a2 F3       		.byte	0xf3
 6503 02a3 01       		.uleb128 0x1
 6504 02a4 50       		.byte	0x50
 6505 02a5 9F       		.byte	0x9f
 6506 02a6 00000000 		.4byte	0
 6507 02aa 00000000 		.4byte	0
 6508              	.LLST12:
 6509 02ae 00000000 		.4byte	.LVL40
 6510 02b2 12000000 		.4byte	.LVL41
 6511 02b6 0100     		.2byte	0x1
 6512 02b8 51       		.byte	0x51
 6513 02b9 12000000 		.4byte	.LVL41
 6514 02bd 22000000 		.4byte	.LVL44
 6515 02c1 0100     		.2byte	0x1
 6516 02c3 54       		.byte	0x54
 6517 02c4 22000000 		.4byte	.LVL44
 6518 02c8 24000000 		.4byte	.LFE56
 6519 02cc 0400     		.2byte	0x4
 6520 02ce F3       		.byte	0xf3
 6521 02cf 01       		.uleb128 0x1
 6522 02d0 51       		.byte	0x51
 6523 02d1 9F       		.byte	0x9f
 6524 02d2 00000000 		.4byte	0
 6525 02d6 00000000 		.4byte	0
 6526              	.LLST13:
 6527 02da 00000000 		.4byte	.LVL45
 6528 02de 07000000 		.4byte	.LVL46-1
 6529 02e2 0100     		.2byte	0x1
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 173


 6530 02e4 50       		.byte	0x50
 6531 02e5 07000000 		.4byte	.LVL46-1
 6532 02e9 6C000000 		.4byte	.LVL62
 6533 02ed 0100     		.2byte	0x1
 6534 02ef 55       		.byte	0x55
 6535 02f0 6C000000 		.4byte	.LVL62
 6536 02f4 6E000000 		.4byte	.LFE57
 6537 02f8 0400     		.2byte	0x4
 6538 02fa F3       		.byte	0xf3
 6539 02fb 01       		.uleb128 0x1
 6540 02fc 50       		.byte	0x50
 6541 02fd 9F       		.byte	0x9f
 6542 02fe 00000000 		.4byte	0
 6543 0302 00000000 		.4byte	0
 6544              	.LLST14:
 6545 0306 0E000000 		.4byte	.LVL47
 6546 030a 28000000 		.4byte	.LVL50
 6547 030e 0100     		.2byte	0x1
 6548 0310 54       		.byte	0x54
 6549 0311 2A000000 		.4byte	.LVL51
 6550 0315 40000000 		.4byte	.LVL54
 6551 0319 0100     		.2byte	0x1
 6552 031b 54       		.byte	0x54
 6553 031c 00000000 		.4byte	0
 6554 0320 00000000 		.4byte	0
 6555              	.LLST15:
 6556 0324 42000000 		.4byte	.LVL55
 6557 0328 5C000000 		.4byte	.LVL58
 6558 032c 0100     		.2byte	0x1
 6559 032e 54       		.byte	0x54
 6560 032f 5E000000 		.4byte	.LVL59
 6561 0333 6C000000 		.4byte	.LVL61
 6562 0337 0100     		.2byte	0x1
 6563 0339 54       		.byte	0x54
 6564 033a 00000000 		.4byte	0
 6565 033e 00000000 		.4byte	0
 6566              	.LLST16:
 6567 0342 00000000 		.4byte	.LVL63
 6568 0346 12000000 		.4byte	.LVL66
 6569 034a 0100     		.2byte	0x1
 6570 034c 50       		.byte	0x50
 6571 034d 12000000 		.4byte	.LVL66
 6572 0351 7C000000 		.4byte	.LVL74
 6573 0355 0100     		.2byte	0x1
 6574 0357 54       		.byte	0x54
 6575 0358 7C000000 		.4byte	.LVL74
 6576 035c 7E000000 		.4byte	.LVL75
 6577 0360 0100     		.2byte	0x1
 6578 0362 50       		.byte	0x50
 6579 0363 7E000000 		.4byte	.LVL75
 6580 0367 80000000 		.4byte	.LVL76
 6581 036b 0100     		.2byte	0x1
 6582 036d 54       		.byte	0x54
 6583 036e 80000000 		.4byte	.LVL76
 6584 0372 82000000 		.4byte	.LVL77
 6585 0376 0100     		.2byte	0x1
 6586 0378 50       		.byte	0x50
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 174


 6587 0379 82000000 		.4byte	.LVL77
 6588 037d 86000000 		.4byte	.LVL79
 6589 0381 0100     		.2byte	0x1
 6590 0383 54       		.byte	0x54
 6591 0384 86000000 		.4byte	.LVL79
 6592 0388 88000000 		.4byte	.LFE34
 6593 038c 0400     		.2byte	0x4
 6594 038e F3       		.byte	0xf3
 6595 038f 01       		.uleb128 0x1
 6596 0390 50       		.byte	0x50
 6597 0391 9F       		.byte	0x9f
 6598 0392 00000000 		.4byte	0
 6599 0396 00000000 		.4byte	0
 6600              	.LLST17:
 6601 039a 00000000 		.4byte	.LVL63
 6602 039e 0C000000 		.4byte	.LVL65
 6603 03a2 0100     		.2byte	0x1
 6604 03a4 51       		.byte	0x51
 6605 03a5 0C000000 		.4byte	.LVL65
 6606 03a9 7C000000 		.4byte	.LVL74
 6607 03ad 0100     		.2byte	0x1
 6608 03af 55       		.byte	0x55
 6609 03b0 7C000000 		.4byte	.LVL74
 6610 03b4 80000000 		.4byte	.LVL76
 6611 03b8 0100     		.2byte	0x1
 6612 03ba 51       		.byte	0x51
 6613 03bb 80000000 		.4byte	.LVL76
 6614 03bf 86000000 		.4byte	.LVL80
 6615 03c3 0100     		.2byte	0x1
 6616 03c5 55       		.byte	0x55
 6617 03c6 86000000 		.4byte	.LVL80
 6618 03ca 88000000 		.4byte	.LFE34
 6619 03ce 0400     		.2byte	0x4
 6620 03d0 F3       		.byte	0xf3
 6621 03d1 01       		.uleb128 0x1
 6622 03d2 51       		.byte	0x51
 6623 03d3 9F       		.byte	0x9f
 6624 03d4 00000000 		.4byte	0
 6625 03d8 00000000 		.4byte	0
 6626              	.LLST18:
 6627 03dc 06000000 		.4byte	.LVL64
 6628 03e0 86000000 		.4byte	.LVL78
 6629 03e4 0200     		.2byte	0x2
 6630 03e6 31       		.byte	0x31
 6631 03e7 9F       		.byte	0x9f
 6632 03e8 86000000 		.4byte	.LVL78
 6633 03ec 88000000 		.4byte	.LFE34
 6634 03f0 0100     		.2byte	0x1
 6635 03f2 50       		.byte	0x50
 6636 03f3 00000000 		.4byte	0
 6637 03f7 00000000 		.4byte	0
 6638              	.LLST19:
 6639 03fb 06000000 		.4byte	.LVL64
 6640 03ff 12000000 		.4byte	.LVL66
 6641 0403 0100     		.2byte	0x1
 6642 0405 50       		.byte	0x50
 6643 0406 12000000 		.4byte	.LVL66
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 175


 6644 040a 7C000000 		.4byte	.LVL74
 6645 040e 0100     		.2byte	0x1
 6646 0410 54       		.byte	0x54
 6647 0411 7C000000 		.4byte	.LVL74
 6648 0415 7E000000 		.4byte	.LVL75
 6649 0419 0100     		.2byte	0x1
 6650 041b 50       		.byte	0x50
 6651 041c 7E000000 		.4byte	.LVL75
 6652 0420 80000000 		.4byte	.LVL76
 6653 0424 0100     		.2byte	0x1
 6654 0426 54       		.byte	0x54
 6655 0427 80000000 		.4byte	.LVL76
 6656 042b 82000000 		.4byte	.LVL77
 6657 042f 0100     		.2byte	0x1
 6658 0431 50       		.byte	0x50
 6659 0432 82000000 		.4byte	.LVL77
 6660 0436 86000000 		.4byte	.LVL79
 6661 043a 0100     		.2byte	0x1
 6662 043c 54       		.byte	0x54
 6663 043d 86000000 		.4byte	.LVL79
 6664 0441 88000000 		.4byte	.LFE34
 6665 0445 0400     		.2byte	0x4
 6666 0447 F3       		.byte	0xf3
 6667 0448 01       		.uleb128 0x1
 6668 0449 50       		.byte	0x50
 6669 044a 9F       		.byte	0x9f
 6670 044b 00000000 		.4byte	0
 6671 044f 00000000 		.4byte	0
 6672              	.LLST20:
 6673 0453 00000000 		.4byte	.LVL81
 6674 0457 16000000 		.4byte	.LVL84
 6675 045b 0100     		.2byte	0x1
 6676 045d 50       		.byte	0x50
 6677 045e 16000000 		.4byte	.LVL84
 6678 0462 19000000 		.4byte	.LVL85-1
 6679 0466 0200     		.2byte	0x2
 6680 0468 73       		.byte	0x73
 6681 0469 3C       		.sleb128 60
 6682 046a 19000000 		.4byte	.LVL85-1
 6683 046e 1C000000 		.4byte	.LFE36
 6684 0472 0400     		.2byte	0x4
 6685 0474 F3       		.byte	0xf3
 6686 0475 01       		.uleb128 0x1
 6687 0476 50       		.byte	0x50
 6688 0477 9F       		.byte	0x9f
 6689 0478 00000000 		.4byte	0
 6690 047c 00000000 		.4byte	0
 6691              	.LLST21:
 6692 0480 00000000 		.4byte	.LVL81
 6693 0484 14000000 		.4byte	.LVL83
 6694 0488 0100     		.2byte	0x1
 6695 048a 51       		.byte	0x51
 6696 048b 14000000 		.4byte	.LVL83
 6697 048f 19000000 		.4byte	.LVL85-1
 6698 0493 0300     		.2byte	0x3
 6699 0495 73       		.byte	0x73
 6700 0496 C000     		.sleb128 64
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 176


 6701 0498 19000000 		.4byte	.LVL85-1
 6702 049c 1C000000 		.4byte	.LFE36
 6703 04a0 0400     		.2byte	0x4
 6704 04a2 F3       		.byte	0xf3
 6705 04a3 01       		.uleb128 0x1
 6706 04a4 51       		.byte	0x51
 6707 04a5 9F       		.byte	0x9f
 6708 04a6 00000000 		.4byte	0
 6709 04aa 00000000 		.4byte	0
 6710              	.LLST22:
 6711 04ae 00000000 		.4byte	.LVL81
 6712 04b2 19000000 		.4byte	.LVL85-1
 6713 04b6 0100     		.2byte	0x1
 6714 04b8 52       		.byte	0x52
 6715 04b9 19000000 		.4byte	.LVL85-1
 6716 04bd 1C000000 		.4byte	.LFE36
 6717 04c1 0400     		.2byte	0x4
 6718 04c3 F3       		.byte	0xf3
 6719 04c4 01       		.uleb128 0x1
 6720 04c5 52       		.byte	0x52
 6721 04c6 9F       		.byte	0x9f
 6722 04c7 00000000 		.4byte	0
 6723 04cb 00000000 		.4byte	0
 6724              	.LLST23:
 6725 04cf 00000000 		.4byte	.LVL81
 6726 04d3 04000000 		.4byte	.LVL82
 6727 04d7 0100     		.2byte	0x1
 6728 04d9 53       		.byte	0x53
 6729 04da 04000000 		.4byte	.LVL82
 6730 04de 1C000000 		.4byte	.LFE36
 6731 04e2 0400     		.2byte	0x4
 6732 04e4 F3       		.byte	0xf3
 6733 04e5 01       		.uleb128 0x1
 6734 04e6 53       		.byte	0x53
 6735 04e7 9F       		.byte	0x9f
 6736 04e8 00000000 		.4byte	0
 6737 04ec 00000000 		.4byte	0
 6738              	.LLST24:
 6739 04f0 00000000 		.4byte	.LVL86
 6740 04f4 12000000 		.4byte	.LVL89
 6741 04f8 0100     		.2byte	0x1
 6742 04fa 50       		.byte	0x50
 6743 04fb 12000000 		.4byte	.LVL89
 6744 04ff 17000000 		.4byte	.LVL90-1
 6745 0503 0100     		.2byte	0x1
 6746 0505 51       		.byte	0x51
 6747 0506 17000000 		.4byte	.LVL90-1
 6748 050a 42000000 		.4byte	.LVL99
 6749 050e 0100     		.2byte	0x1
 6750 0510 54       		.byte	0x54
 6751 0511 42000000 		.4byte	.LVL99
 6752 0515 46000000 		.4byte	.LVL100
 6753 0519 0100     		.2byte	0x1
 6754 051b 50       		.byte	0x50
 6755 051c 46000000 		.4byte	.LVL100
 6756 0520 50000000 		.4byte	.LVL102
 6757 0524 0100     		.2byte	0x1
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 177


 6758 0526 54       		.byte	0x54
 6759 0527 50000000 		.4byte	.LVL102
 6760 052b 52000000 		.4byte	.LFE35
 6761 052f 0400     		.2byte	0x4
 6762 0531 F3       		.byte	0xf3
 6763 0532 01       		.uleb128 0x1
 6764 0533 50       		.byte	0x50
 6765 0534 9F       		.byte	0x9f
 6766 0535 00000000 		.4byte	0
 6767 0539 00000000 		.4byte	0
 6768              	.LLST25:
 6769 053d 00000000 		.4byte	.LVL86
 6770 0541 10000000 		.4byte	.LVL88
 6771 0545 0100     		.2byte	0x1
 6772 0547 51       		.byte	0x51
 6773 0548 10000000 		.4byte	.LVL88
 6774 054c 42000000 		.4byte	.LVL99
 6775 0550 0100     		.2byte	0x1
 6776 0552 57       		.byte	0x57
 6777 0553 42000000 		.4byte	.LVL99
 6778 0557 46000000 		.4byte	.LVL100
 6779 055b 0100     		.2byte	0x1
 6780 055d 51       		.byte	0x51
 6781 055e 46000000 		.4byte	.LVL100
 6782 0562 50000000 		.4byte	.LVL104
 6783 0566 0100     		.2byte	0x1
 6784 0568 57       		.byte	0x57
 6785 0569 50000000 		.4byte	.LVL104
 6786 056d 52000000 		.4byte	.LFE35
 6787 0571 0400     		.2byte	0x4
 6788 0573 F3       		.byte	0xf3
 6789 0574 01       		.uleb128 0x1
 6790 0575 51       		.byte	0x51
 6791 0576 9F       		.byte	0x9f
 6792 0577 00000000 		.4byte	0
 6793 057b 00000000 		.4byte	0
 6794              	.LLST26:
 6795 057f 00000000 		.4byte	.LVL86
 6796 0583 17000000 		.4byte	.LVL90-1
 6797 0587 0100     		.2byte	0x1
 6798 0589 52       		.byte	0x52
 6799 058a 17000000 		.4byte	.LVL90-1
 6800 058e 42000000 		.4byte	.LVL99
 6801 0592 0400     		.2byte	0x4
 6802 0594 F3       		.byte	0xf3
 6803 0595 01       		.uleb128 0x1
 6804 0596 52       		.byte	0x52
 6805 0597 9F       		.byte	0x9f
 6806 0598 42000000 		.4byte	.LVL99
 6807 059c 46000000 		.4byte	.LVL100
 6808 05a0 0100     		.2byte	0x1
 6809 05a2 52       		.byte	0x52
 6810 05a3 46000000 		.4byte	.LVL100
 6811 05a7 52000000 		.4byte	.LFE35
 6812 05ab 0400     		.2byte	0x4
 6813 05ad F3       		.byte	0xf3
 6814 05ae 01       		.uleb128 0x1
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 178


 6815 05af 52       		.byte	0x52
 6816 05b0 9F       		.byte	0x9f
 6817 05b1 00000000 		.4byte	0
 6818 05b5 00000000 		.4byte	0
 6819              	.LLST27:
 6820 05b9 0A000000 		.4byte	.LVL87
 6821 05bd 2E000000 		.4byte	.LVL94
 6822 05c1 0200     		.2byte	0x2
 6823 05c3 30       		.byte	0x30
 6824 05c4 9F       		.byte	0x9f
 6825 05c5 2E000000 		.4byte	.LVL94
 6826 05c9 3C000000 		.4byte	.LVL97
 6827 05cd 0100     		.2byte	0x1
 6828 05cf 50       		.byte	0x50
 6829 05d0 3C000000 		.4byte	.LVL97
 6830 05d4 42000000 		.4byte	.LVL99
 6831 05d8 0100     		.2byte	0x1
 6832 05da 55       		.byte	0x55
 6833 05db 42000000 		.4byte	.LVL99
 6834 05df 4C000000 		.4byte	.LVL101
 6835 05e3 0200     		.2byte	0x2
 6836 05e5 30       		.byte	0x30
 6837 05e6 9F       		.byte	0x9f
 6838 05e7 4C000000 		.4byte	.LVL101
 6839 05eb 50000000 		.4byte	.LVL103
 6840 05ef 0100     		.2byte	0x1
 6841 05f1 55       		.byte	0x55
 6842 05f2 50000000 		.4byte	.LVL103
 6843 05f6 52000000 		.4byte	.LFE35
 6844 05fa 0100     		.2byte	0x1
 6845 05fc 50       		.byte	0x50
 6846 05fd 00000000 		.4byte	0
 6847 0601 00000000 		.4byte	0
 6848              	.LLST28:
 6849 0605 26000000 		.4byte	.LVL91
 6850 0609 28000000 		.4byte	.LVL92
 6851 060d 0100     		.2byte	0x1
 6852 060f 50       		.byte	0x50
 6853 0610 28000000 		.4byte	.LVL92
 6854 0614 2B000000 		.4byte	.LVL93-1
 6855 0618 0400     		.2byte	0x4
 6856 061a 70       		.byte	0x70
 6857 061b B87F     		.sleb128 -72
 6858 061d 9F       		.byte	0x9f
 6859 061e 2B000000 		.4byte	.LVL93-1
 6860 0622 42000000 		.4byte	.LVL99
 6861 0626 0600     		.2byte	0x6
 6862 0628 77       		.byte	0x77
 6863 0629 00       		.sleb128 0
 6864 062a 74       		.byte	0x74
 6865 062b 00       		.sleb128 0
 6866 062c 1E       		.byte	0x1e
 6867 062d 9F       		.byte	0x9f
 6868 062e 00000000 		.4byte	0
 6869 0632 00000000 		.4byte	0
 6870              	.LLST29:
 6871 0636 30000000 		.4byte	.LVL95
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 179


 6872 063a 34000000 		.4byte	.LVL96
 6873 063e 0100     		.2byte	0x1
 6874 0640 50       		.byte	0x50
 6875 0641 00000000 		.4byte	0
 6876 0645 00000000 		.4byte	0
 6877              	.LLST30:
 6878 0649 00000000 		.4byte	.LVL105
 6879 064d 13000000 		.4byte	.LVL108-1
 6880 0651 0100     		.2byte	0x1
 6881 0653 50       		.byte	0x50
 6882 0654 13000000 		.4byte	.LVL108-1
 6883 0658 1C000000 		.4byte	.LVL109
 6884 065c 0400     		.2byte	0x4
 6885 065e F3       		.byte	0xf3
 6886 065f 01       		.uleb128 0x1
 6887 0660 50       		.byte	0x50
 6888 0661 9F       		.byte	0x9f
 6889 0662 1C000000 		.4byte	.LVL109
 6890 0666 1E000000 		.4byte	.LVL110
 6891 066a 0100     		.2byte	0x1
 6892 066c 50       		.byte	0x50
 6893 066d 1E000000 		.4byte	.LVL110
 6894 0671 20000000 		.4byte	.LVL111
 6895 0675 0400     		.2byte	0x4
 6896 0677 F3       		.byte	0xf3
 6897 0678 01       		.uleb128 0x1
 6898 0679 50       		.byte	0x50
 6899 067a 9F       		.byte	0x9f
 6900 067b 20000000 		.4byte	.LVL111
 6901 067f 22000000 		.4byte	.LVL112
 6902 0683 0100     		.2byte	0x1
 6903 0685 50       		.byte	0x50
 6904 0686 22000000 		.4byte	.LVL112
 6905 068a 24000000 		.4byte	.LFE41
 6906 068e 0400     		.2byte	0x4
 6907 0690 F3       		.byte	0xf3
 6908 0691 01       		.uleb128 0x1
 6909 0692 50       		.byte	0x50
 6910 0693 9F       		.byte	0x9f
 6911 0694 00000000 		.4byte	0
 6912 0698 00000000 		.4byte	0
 6913              	.LLST31:
 6914 069c 00000000 		.4byte	.LVL105
 6915 06a0 10000000 		.4byte	.LVL107
 6916 06a4 0100     		.2byte	0x1
 6917 06a6 51       		.byte	0x51
 6918 06a7 10000000 		.4byte	.LVL107
 6919 06ab 1C000000 		.4byte	.LVL109
 6920 06af 0100     		.2byte	0x1
 6921 06b1 54       		.byte	0x54
 6922 06b2 1C000000 		.4byte	.LVL109
 6923 06b6 22000000 		.4byte	.LVL112
 6924 06ba 0100     		.2byte	0x1
 6925 06bc 51       		.byte	0x51
 6926 06bd 22000000 		.4byte	.LVL112
 6927 06c1 22000000 		.4byte	.LVL113
 6928 06c5 0100     		.2byte	0x1
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 180


 6929 06c7 54       		.byte	0x54
 6930 06c8 22000000 		.4byte	.LVL113
 6931 06cc 24000000 		.4byte	.LFE41
 6932 06d0 0400     		.2byte	0x4
 6933 06d2 F3       		.byte	0xf3
 6934 06d3 01       		.uleb128 0x1
 6935 06d4 51       		.byte	0x51
 6936 06d5 9F       		.byte	0x9f
 6937 06d6 00000000 		.4byte	0
 6938 06da 00000000 		.4byte	0
 6939              	.LLST32:
 6940 06de 04000000 		.4byte	.LVL106
 6941 06e2 14000000 		.4byte	.LVL108
 6942 06e6 0200     		.2byte	0x2
 6943 06e8 30       		.byte	0x30
 6944 06e9 9F       		.byte	0x9f
 6945 06ea 14000000 		.4byte	.LVL108
 6946 06ee 1C000000 		.4byte	.LVL109
 6947 06f2 0100     		.2byte	0x1
 6948 06f4 50       		.byte	0x50
 6949 06f5 1C000000 		.4byte	.LVL109
 6950 06f9 22000000 		.4byte	.LVL112
 6951 06fd 0200     		.2byte	0x2
 6952 06ff 30       		.byte	0x30
 6953 0700 9F       		.byte	0x9f
 6954 0701 22000000 		.4byte	.LVL112
 6955 0705 24000000 		.4byte	.LFE41
 6956 0709 0100     		.2byte	0x1
 6957 070b 50       		.byte	0x50
 6958 070c 00000000 		.4byte	0
 6959 0710 00000000 		.4byte	0
 6960              	.LLST33:
 6961 0714 00000000 		.4byte	.LVL114
 6962 0718 0E000000 		.4byte	.LVL116
 6963 071c 0100     		.2byte	0x1
 6964 071e 50       		.byte	0x50
 6965 071f 0E000000 		.4byte	.LVL116
 6966 0723 E8000000 		.4byte	.LVL143
 6967 0727 0100     		.2byte	0x1
 6968 0729 54       		.byte	0x54
 6969 072a E8000000 		.4byte	.LVL143
 6970 072e EA000000 		.4byte	.LFE42
 6971 0732 0400     		.2byte	0x4
 6972 0734 F3       		.byte	0xf3
 6973 0735 01       		.uleb128 0x1
 6974 0736 50       		.byte	0x50
 6975 0737 9F       		.byte	0x9f
 6976 0738 00000000 		.4byte	0
 6977 073c 00000000 		.4byte	0
 6978              	.LLST34:
 6979 0740 00000000 		.4byte	.LVL114
 6980 0744 0E000000 		.4byte	.LVL116
 6981 0748 0100     		.2byte	0x1
 6982 074a 51       		.byte	0x51
 6983 074b 0E000000 		.4byte	.LVL116
 6984 074f E8000000 		.4byte	.LVL144
 6985 0753 0100     		.2byte	0x1
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 181


 6986 0755 55       		.byte	0x55
 6987 0756 E8000000 		.4byte	.LVL144
 6988 075a EA000000 		.4byte	.LFE42
 6989 075e 0400     		.2byte	0x4
 6990 0760 F3       		.byte	0xf3
 6991 0761 01       		.uleb128 0x1
 6992 0762 51       		.byte	0x51
 6993 0763 9F       		.byte	0x9f
 6994 0764 00000000 		.4byte	0
 6995 0768 00000000 		.4byte	0
 6996              	.LLST35:
 6997 076c 00000000 		.4byte	.LVL114
 6998 0770 0E000000 		.4byte	.LVL116
 6999 0774 0100     		.2byte	0x1
 7000 0776 52       		.byte	0x52
 7001 0777 0E000000 		.4byte	.LVL116
 7002 077b 9C000000 		.4byte	.LVL132
 7003 077f 0200     		.2byte	0x2
 7004 0781 91       		.byte	0x91
 7005 0782 5C       		.sleb128 -36
 7006 0783 9C000000 		.4byte	.LVL132
 7007 0787 A1000000 		.4byte	.LVL133-1
 7008 078b 0200     		.2byte	0x2
 7009 078d 71       		.byte	0x71
 7010 078e 00       		.sleb128 0
 7011 078f A1000000 		.4byte	.LVL133-1
 7012 0793 EA000000 		.4byte	.LFE42
 7013 0797 0200     		.2byte	0x2
 7014 0799 91       		.byte	0x91
 7015 079a 5C       		.sleb128 -36
 7016 079b 00000000 		.4byte	0
 7017 079f 00000000 		.4byte	0
 7018              	.LLST36:
 7019 07a3 00000000 		.4byte	.LVL114
 7020 07a7 0E000000 		.4byte	.LVL116
 7021 07ab 0100     		.2byte	0x1
 7022 07ad 53       		.byte	0x53
 7023 07ae 0E000000 		.4byte	.LVL116
 7024 07b2 E8000000 		.4byte	.LVL146
 7025 07b6 0100     		.2byte	0x1
 7026 07b8 57       		.byte	0x57
 7027 07b9 E8000000 		.4byte	.LVL146
 7028 07bd EA000000 		.4byte	.LFE42
 7029 07c1 0400     		.2byte	0x4
 7030 07c3 F3       		.byte	0xf3
 7031 07c4 01       		.uleb128 0x1
 7032 07c5 53       		.byte	0x53
 7033 07c6 9F       		.byte	0x9f
 7034 07c7 00000000 		.4byte	0
 7035 07cb 00000000 		.4byte	0
 7036              	.LLST37:
 7037 07cf 0C000000 		.4byte	.LVL115
 7038 07d3 0E000000 		.4byte	.LVL116
 7039 07d7 0200     		.2byte	0x2
 7040 07d9 30       		.byte	0x30
 7041 07da 9F       		.byte	0x9f
 7042 07db 0E000000 		.4byte	.LVL116
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 182


 7043 07df 68000000 		.4byte	.LVL126
 7044 07e3 0100     		.2byte	0x1
 7045 07e5 56       		.byte	0x56
 7046 07e6 68000000 		.4byte	.LVL126
 7047 07ea 6A000000 		.4byte	.LVL127
 7048 07ee 0200     		.2byte	0x2
 7049 07f0 31       		.byte	0x31
 7050 07f1 9F       		.byte	0x9f
 7051 07f2 6A000000 		.4byte	.LVL127
 7052 07f6 E8000000 		.4byte	.LVL145
 7053 07fa 0100     		.2byte	0x1
 7054 07fc 56       		.byte	0x56
 7055 07fd 00000000 		.4byte	0
 7056 0801 00000000 		.4byte	0
 7057              	.LLST38:
 7058 0805 28000000 		.4byte	.LVL118
 7059 0809 30000000 		.4byte	.LVL119
 7060 080d 0100     		.2byte	0x1
 7061 080f 50       		.byte	0x50
 7062 0810 40000000 		.4byte	.LVL122
 7063 0814 47000000 		.4byte	.LVL123-1
 7064 0818 0100     		.2byte	0x1
 7065 081a 50       		.byte	0x50
 7066 081b 00000000 		.4byte	0
 7067 081f 00000000 		.4byte	0
 7068              	.LLST39:
 7069 0823 0C000000 		.4byte	.LVL115
 7070 0827 0E000000 		.4byte	.LVL116
 7071 082b 0100     		.2byte	0x1
 7072 082d 50       		.byte	0x50
 7073 082e 0E000000 		.4byte	.LVL116
 7074 0832 E8000000 		.4byte	.LVL143
 7075 0836 0100     		.2byte	0x1
 7076 0838 54       		.byte	0x54
 7077 0839 E8000000 		.4byte	.LVL143
 7078 083d EA000000 		.4byte	.LFE42
 7079 0841 0400     		.2byte	0x4
 7080 0843 F3       		.byte	0xf3
 7081 0844 01       		.uleb128 0x1
 7082 0845 50       		.byte	0x50
 7083 0846 9F       		.byte	0x9f
 7084 0847 00000000 		.4byte	0
 7085 084b 00000000 		.4byte	0
 7086              	.LLST40:
 7087 084f 00000000 		.4byte	.LVL147
 7088 0853 15000000 		.4byte	.LVL148-1
 7089 0857 0100     		.2byte	0x1
 7090 0859 50       		.byte	0x50
 7091 085a 15000000 		.4byte	.LVL148-1
 7092 085e 18000000 		.4byte	.LFE37
 7093 0862 0400     		.2byte	0x4
 7094 0864 F3       		.byte	0xf3
 7095 0865 01       		.uleb128 0x1
 7096 0866 50       		.byte	0x50
 7097 0867 9F       		.byte	0x9f
 7098 0868 00000000 		.4byte	0
 7099 086c 00000000 		.4byte	0
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 183


 7100              	.LLST41:
 7101 0870 00000000 		.4byte	.LVL149
 7102 0874 08000000 		.4byte	.LVL151
 7103 0878 0100     		.2byte	0x1
 7104 087a 50       		.byte	0x50
 7105 087b 08000000 		.4byte	.LVL151
 7106 087f 16000000 		.4byte	.LFE38
 7107 0883 0400     		.2byte	0x4
 7108 0885 F3       		.byte	0xf3
 7109 0886 01       		.uleb128 0x1
 7110 0887 50       		.byte	0x50
 7111 0888 9F       		.byte	0x9f
 7112 0889 00000000 		.4byte	0
 7113 088d 00000000 		.4byte	0
 7114              	.LLST42:
 7115 0891 0E000000 		.4byte	.LVL153
 7116 0895 11000000 		.4byte	.LVL154-1
 7117 0899 0100     		.2byte	0x1
 7118 089b 50       		.byte	0x50
 7119 089c 11000000 		.4byte	.LVL154-1
 7120 08a0 14000000 		.4byte	.LVL155
 7121 08a4 0100     		.2byte	0x1
 7122 08a6 54       		.byte	0x54
 7123 08a7 14000000 		.4byte	.LVL155
 7124 08ab 16000000 		.4byte	.LFE38
 7125 08af 0100     		.2byte	0x1
 7126 08b1 50       		.byte	0x50
 7127 08b2 00000000 		.4byte	0
 7128 08b6 00000000 		.4byte	0
 7129              	.LLST43:
 7130 08ba 00000000 		.4byte	.LVL156
 7131 08be 09000000 		.4byte	.LVL158-1
 7132 08c2 0100     		.2byte	0x1
 7133 08c4 50       		.byte	0x50
 7134 08c5 09000000 		.4byte	.LVL158-1
 7135 08c9 2C000000 		.4byte	.LVL161
 7136 08cd 0100     		.2byte	0x1
 7137 08cf 54       		.byte	0x54
 7138 08d0 2C000000 		.4byte	.LVL161
 7139 08d4 2E000000 		.4byte	.LFE39
 7140 08d8 0400     		.2byte	0x4
 7141 08da F3       		.byte	0xf3
 7142 08db 01       		.uleb128 0x1
 7143 08dc 50       		.byte	0x50
 7144 08dd 9F       		.byte	0x9f
 7145 08de 00000000 		.4byte	0
 7146 08e2 00000000 		.4byte	0
 7147              	.LLST44:
 7148 08e6 04000000 		.4byte	.LVL157
 7149 08ea 09000000 		.4byte	.LVL158-1
 7150 08ee 0100     		.2byte	0x1
 7151 08f0 50       		.byte	0x50
 7152 08f1 09000000 		.4byte	.LVL158-1
 7153 08f5 2C000000 		.4byte	.LVL161
 7154 08f9 0100     		.2byte	0x1
 7155 08fb 54       		.byte	0x54
 7156 08fc 2C000000 		.4byte	.LVL161
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 184


 7157 0900 2E000000 		.4byte	.LFE39
 7158 0904 0400     		.2byte	0x4
 7159 0906 F3       		.byte	0xf3
 7160 0907 01       		.uleb128 0x1
 7161 0908 50       		.byte	0x50
 7162 0909 9F       		.byte	0x9f
 7163 090a 00000000 		.4byte	0
 7164 090e 00000000 		.4byte	0
 7165              	.LLST45:
 7166 0912 00000000 		.4byte	.LVL162
 7167 0916 0F000000 		.4byte	.LVL164-1
 7168 091a 0100     		.2byte	0x1
 7169 091c 50       		.byte	0x50
 7170 091d 0F000000 		.4byte	.LVL164-1
 7171 0921 82000000 		.4byte	.LVL187
 7172 0925 0100     		.2byte	0x1
 7173 0927 56       		.byte	0x56
 7174 0928 82000000 		.4byte	.LVL187
 7175 092c 84000000 		.4byte	.LFE43
 7176 0930 0400     		.2byte	0x4
 7177 0932 F3       		.byte	0xf3
 7178 0933 01       		.uleb128 0x1
 7179 0934 50       		.byte	0x50
 7180 0935 9F       		.byte	0x9f
 7181 0936 00000000 		.4byte	0
 7182 093a 00000000 		.4byte	0
 7183              	.LLST46:
 7184 093e 00000000 		.4byte	.LVL162
 7185 0942 0F000000 		.4byte	.LVL164-1
 7186 0946 0100     		.2byte	0x1
 7187 0948 51       		.byte	0x51
 7188 0949 0F000000 		.4byte	.LVL164-1
 7189 094d 84000000 		.4byte	.LFE43
 7190 0951 0200     		.2byte	0x2
 7191 0953 91       		.byte	0x91
 7192 0954 64       		.sleb128 -28
 7193 0955 00000000 		.4byte	0
 7194 0959 00000000 		.4byte	0
 7195              	.LLST47:
 7196 095d 00000000 		.4byte	.LVL162
 7197 0961 0F000000 		.4byte	.LVL164-1
 7198 0965 0100     		.2byte	0x1
 7199 0967 52       		.byte	0x52
 7200 0968 0F000000 		.4byte	.LVL164-1
 7201 096c 82000000 		.4byte	.LVL188
 7202 0970 0100     		.2byte	0x1
 7203 0972 57       		.byte	0x57
 7204 0973 82000000 		.4byte	.LVL188
 7205 0977 84000000 		.4byte	.LFE43
 7206 097b 0400     		.2byte	0x4
 7207 097d F3       		.byte	0xf3
 7208 097e 01       		.uleb128 0x1
 7209 097f 52       		.byte	0x52
 7210 0980 9F       		.byte	0x9f
 7211 0981 00000000 		.4byte	0
 7212 0985 00000000 		.4byte	0
 7213              	.LLST48:
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 185


 7214 0989 00000000 		.4byte	.LVL162
 7215 098d 0F000000 		.4byte	.LVL164-1
 7216 0991 0100     		.2byte	0x1
 7217 0993 53       		.byte	0x53
 7218 0994 0F000000 		.4byte	.LVL164-1
 7219 0998 50000000 		.4byte	.LVL170
 7220 099c 0100     		.2byte	0x1
 7221 099e 54       		.byte	0x54
 7222 099f 50000000 		.4byte	.LVL170
 7223 09a3 52000000 		.4byte	.LVL171
 7224 09a7 0400     		.2byte	0x4
 7225 09a9 F3       		.byte	0xf3
 7226 09aa 01       		.uleb128 0x1
 7227 09ab 53       		.byte	0x53
 7228 09ac 9F       		.byte	0x9f
 7229 09ad 52000000 		.4byte	.LVL171
 7230 09b1 64000000 		.4byte	.LVL173
 7231 09b5 0100     		.2byte	0x1
 7232 09b7 54       		.byte	0x54
 7233 09b8 64000000 		.4byte	.LVL173
 7234 09bc 66000000 		.4byte	.LVL174
 7235 09c0 0400     		.2byte	0x4
 7236 09c2 F3       		.byte	0xf3
 7237 09c3 01       		.uleb128 0x1
 7238 09c4 53       		.byte	0x53
 7239 09c5 9F       		.byte	0x9f
 7240 09c6 66000000 		.4byte	.LVL174
 7241 09ca 68000000 		.4byte	.LVL175
 7242 09ce 0100     		.2byte	0x1
 7243 09d0 54       		.byte	0x54
 7244 09d1 68000000 		.4byte	.LVL175
 7245 09d5 6A000000 		.4byte	.LVL176
 7246 09d9 0400     		.2byte	0x4
 7247 09db F3       		.byte	0xf3
 7248 09dc 01       		.uleb128 0x1
 7249 09dd 53       		.byte	0x53
 7250 09de 9F       		.byte	0x9f
 7251 09df 6A000000 		.4byte	.LVL176
 7252 09e3 6C000000 		.4byte	.LVL177
 7253 09e7 0100     		.2byte	0x1
 7254 09e9 54       		.byte	0x54
 7255 09ea 6C000000 		.4byte	.LVL177
 7256 09ee 6E000000 		.4byte	.LVL178
 7257 09f2 0400     		.2byte	0x4
 7258 09f4 F3       		.byte	0xf3
 7259 09f5 01       		.uleb128 0x1
 7260 09f6 53       		.byte	0x53
 7261 09f7 9F       		.byte	0x9f
 7262 09f8 6E000000 		.4byte	.LVL178
 7263 09fc 70000000 		.4byte	.LVL179
 7264 0a00 0100     		.2byte	0x1
 7265 0a02 54       		.byte	0x54
 7266 0a03 70000000 		.4byte	.LVL179
 7267 0a07 72000000 		.4byte	.LVL180
 7268 0a0b 0400     		.2byte	0x4
 7269 0a0d F3       		.byte	0xf3
 7270 0a0e 01       		.uleb128 0x1
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 186


 7271 0a0f 53       		.byte	0x53
 7272 0a10 9F       		.byte	0x9f
 7273 0a11 72000000 		.4byte	.LVL180
 7274 0a15 74000000 		.4byte	.LVL181
 7275 0a19 0100     		.2byte	0x1
 7276 0a1b 54       		.byte	0x54
 7277 0a1c 74000000 		.4byte	.LVL181
 7278 0a20 76000000 		.4byte	.LVL182
 7279 0a24 0400     		.2byte	0x4
 7280 0a26 F3       		.byte	0xf3
 7281 0a27 01       		.uleb128 0x1
 7282 0a28 53       		.byte	0x53
 7283 0a29 9F       		.byte	0x9f
 7284 0a2a 76000000 		.4byte	.LVL182
 7285 0a2e 78000000 		.4byte	.LVL183
 7286 0a32 0100     		.2byte	0x1
 7287 0a34 54       		.byte	0x54
 7288 0a35 78000000 		.4byte	.LVL183
 7289 0a39 84000000 		.4byte	.LFE43
 7290 0a3d 0400     		.2byte	0x4
 7291 0a3f F3       		.byte	0xf3
 7292 0a40 01       		.uleb128 0x1
 7293 0a41 53       		.byte	0x53
 7294 0a42 9F       		.byte	0x9f
 7295 0a43 00000000 		.4byte	0
 7296 0a47 00000000 		.4byte	0
 7297              	.LLST49:
 7298 0a4b 78000000 		.4byte	.LVL183
 7299 0a4f 82000000 		.4byte	.LVL186
 7300 0a53 0100     		.2byte	0x1
 7301 0a55 54       		.byte	0x54
 7302 0a56 82000000 		.4byte	.LVL186
 7303 0a5a 84000000 		.4byte	.LFE43
 7304 0a5e 0100     		.2byte	0x1
 7305 0a60 50       		.byte	0x50
 7306 0a61 00000000 		.4byte	0
 7307 0a65 00000000 		.4byte	0
 7308              	.LLST50:
 7309 0a69 12000000 		.4byte	.LVL165
 7310 0a6d 2C000000 		.4byte	.LVL167
 7311 0a71 0100     		.2byte	0x1
 7312 0a73 50       		.byte	0x50
 7313 0a74 2C000000 		.4byte	.LVL167
 7314 0a78 66000000 		.4byte	.LVL174
 7315 0a7c 0200     		.2byte	0x2
 7316 0a7e 7D       		.byte	0x7d
 7317 0a7f 00       		.sleb128 0
 7318 0a80 66000000 		.4byte	.LVL174
 7319 0a84 6A000000 		.4byte	.LVL176
 7320 0a88 0100     		.2byte	0x1
 7321 0a8a 50       		.byte	0x50
 7322 0a8b 6A000000 		.4byte	.LVL176
 7323 0a8f 82000000 		.4byte	.LVL185
 7324 0a93 0200     		.2byte	0x2
 7325 0a95 7D       		.byte	0x7d
 7326 0a96 00       		.sleb128 0
 7327 0a97 82000000 		.4byte	.LVL185
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 187


 7328 0a9b 84000000 		.4byte	.LFE43
 7329 0a9f 0200     		.2byte	0x2
 7330 0aa1 91       		.byte	0x91
 7331 0aa2 60       		.sleb128 -32
 7332 0aa3 00000000 		.4byte	0
 7333 0aa7 00000000 		.4byte	0
 7334              	.LLST51:
 7335 0aab 0C000000 		.4byte	.LVL163
 7336 0aaf 0F000000 		.4byte	.LVL164-1
 7337 0ab3 0100     		.2byte	0x1
 7338 0ab5 50       		.byte	0x50
 7339 0ab6 0F000000 		.4byte	.LVL164-1
 7340 0aba 82000000 		.4byte	.LVL187
 7341 0abe 0100     		.2byte	0x1
 7342 0ac0 56       		.byte	0x56
 7343 0ac1 82000000 		.4byte	.LVL187
 7344 0ac5 84000000 		.4byte	.LFE43
 7345 0ac9 0400     		.2byte	0x4
 7346 0acb F3       		.byte	0xf3
 7347 0acc 01       		.uleb128 0x1
 7348 0acd 50       		.byte	0x50
 7349 0ace 9F       		.byte	0x9f
 7350 0acf 00000000 		.4byte	0
 7351 0ad3 00000000 		.4byte	0
 7352              	.LLST52:
 7353 0ad7 24000000 		.4byte	.LVL166
 7354 0adb 66000000 		.4byte	.LVL174
 7355 0adf 0100     		.2byte	0x1
 7356 0ae1 55       		.byte	0x55
 7357 0ae2 6A000000 		.4byte	.LVL176
 7358 0ae6 78000000 		.4byte	.LVL183
 7359 0aea 0100     		.2byte	0x1
 7360 0aec 55       		.byte	0x55
 7361 0aed 00000000 		.4byte	0
 7362 0af1 00000000 		.4byte	0
 7363              	.LLST53:
 7364 0af5 56000000 		.4byte	.LVL172
 7365 0af9 66000000 		.4byte	.LVL174
 7366 0afd 0100     		.2byte	0x1
 7367 0aff 50       		.byte	0x50
 7368 0b00 76000000 		.4byte	.LVL182
 7369 0b04 78000000 		.4byte	.LVL183
 7370 0b08 0100     		.2byte	0x1
 7371 0b0a 50       		.byte	0x50
 7372 0b0b 00000000 		.4byte	0
 7373 0b0f 00000000 		.4byte	0
 7374              	.LLST54:
 7375 0b13 00000000 		.4byte	.LVL189
 7376 0b17 09000000 		.4byte	.LVL191-1
 7377 0b1b 0100     		.2byte	0x1
 7378 0b1d 50       		.byte	0x50
 7379 0b1e 09000000 		.4byte	.LVL191-1
 7380 0b22 3E000000 		.4byte	.LVL199
 7381 0b26 0100     		.2byte	0x1
 7382 0b28 54       		.byte	0x54
 7383 0b29 3E000000 		.4byte	.LVL199
 7384 0b2d 40000000 		.4byte	.LVL200
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 188


 7385 0b31 0400     		.2byte	0x4
 7386 0b33 F3       		.byte	0xf3
 7387 0b34 01       		.uleb128 0x1
 7388 0b35 50       		.byte	0x50
 7389 0b36 9F       		.byte	0x9f
 7390 0b37 40000000 		.4byte	.LVL200
 7391 0b3b 52000000 		.4byte	.LVL204
 7392 0b3f 0100     		.2byte	0x1
 7393 0b41 54       		.byte	0x54
 7394 0b42 52000000 		.4byte	.LVL204
 7395 0b46 54000000 		.4byte	.LVL205
 7396 0b4a 0400     		.2byte	0x4
 7397 0b4c F3       		.byte	0xf3
 7398 0b4d 01       		.uleb128 0x1
 7399 0b4e 50       		.byte	0x50
 7400 0b4f 9F       		.byte	0x9f
 7401 0b50 54000000 		.4byte	.LVL205
 7402 0b54 56000000 		.4byte	.LVL206
 7403 0b58 0100     		.2byte	0x1
 7404 0b5a 54       		.byte	0x54
 7405 0b5b 56000000 		.4byte	.LVL206
 7406 0b5f 58000000 		.4byte	.LVL207
 7407 0b63 0400     		.2byte	0x4
 7408 0b65 F3       		.byte	0xf3
 7409 0b66 01       		.uleb128 0x1
 7410 0b67 50       		.byte	0x50
 7411 0b68 9F       		.byte	0x9f
 7412 0b69 58000000 		.4byte	.LVL207
 7413 0b6d 5A000000 		.4byte	.LVL208
 7414 0b71 0100     		.2byte	0x1
 7415 0b73 54       		.byte	0x54
 7416 0b74 5A000000 		.4byte	.LVL208
 7417 0b78 5C000000 		.4byte	.LVL209
 7418 0b7c 0400     		.2byte	0x4
 7419 0b7e F3       		.byte	0xf3
 7420 0b7f 01       		.uleb128 0x1
 7421 0b80 50       		.byte	0x50
 7422 0b81 9F       		.byte	0x9f
 7423 0b82 5C000000 		.4byte	.LVL209
 7424 0b86 5E000000 		.4byte	.LVL210
 7425 0b8a 0100     		.2byte	0x1
 7426 0b8c 54       		.byte	0x54
 7427 0b8d 5E000000 		.4byte	.LVL210
 7428 0b91 60000000 		.4byte	.LVL211
 7429 0b95 0400     		.2byte	0x4
 7430 0b97 F3       		.byte	0xf3
 7431 0b98 01       		.uleb128 0x1
 7432 0b99 50       		.byte	0x50
 7433 0b9a 9F       		.byte	0x9f
 7434 0b9b 60000000 		.4byte	.LVL211
 7435 0b9f 62000000 		.4byte	.LVL212
 7436 0ba3 0100     		.2byte	0x1
 7437 0ba5 54       		.byte	0x54
 7438 0ba6 62000000 		.4byte	.LVL212
 7439 0baa 64000000 		.4byte	.LVL213
 7440 0bae 0400     		.2byte	0x4
 7441 0bb0 F3       		.byte	0xf3
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 189


 7442 0bb1 01       		.uleb128 0x1
 7443 0bb2 50       		.byte	0x50
 7444 0bb3 9F       		.byte	0x9f
 7445 0bb4 64000000 		.4byte	.LVL213
 7446 0bb8 66000000 		.4byte	.LVL214
 7447 0bbc 0100     		.2byte	0x1
 7448 0bbe 54       		.byte	0x54
 7449 0bbf 66000000 		.4byte	.LVL214
 7450 0bc3 70000000 		.4byte	.LFE44
 7451 0bc7 0400     		.2byte	0x4
 7452 0bc9 F3       		.byte	0xf3
 7453 0bca 01       		.uleb128 0x1
 7454 0bcb 50       		.byte	0x50
 7455 0bcc 9F       		.byte	0x9f
 7456 0bcd 00000000 		.4byte	0
 7457 0bd1 00000000 		.4byte	0
 7458              	.LLST55:
 7459 0bd5 00000000 		.4byte	.LVL189
 7460 0bd9 09000000 		.4byte	.LVL191-1
 7461 0bdd 0100     		.2byte	0x1
 7462 0bdf 51       		.byte	0x51
 7463 0be0 09000000 		.4byte	.LVL191-1
 7464 0be4 6E000000 		.4byte	.LVL218
 7465 0be8 0100     		.2byte	0x1
 7466 0bea 56       		.byte	0x56
 7467 0beb 6E000000 		.4byte	.LVL218
 7468 0bef 70000000 		.4byte	.LFE44
 7469 0bf3 0400     		.2byte	0x4
 7470 0bf5 F3       		.byte	0xf3
 7471 0bf6 01       		.uleb128 0x1
 7472 0bf7 51       		.byte	0x51
 7473 0bf8 9F       		.byte	0x9f
 7474 0bf9 00000000 		.4byte	0
 7475 0bfd 00000000 		.4byte	0
 7476              	.LLST56:
 7477 0c01 66000000 		.4byte	.LVL214
 7478 0c05 6E000000 		.4byte	.LVL216
 7479 0c09 0100     		.2byte	0x1
 7480 0c0b 54       		.byte	0x54
 7481 0c0c 6E000000 		.4byte	.LVL216
 7482 0c10 70000000 		.4byte	.LFE44
 7483 0c14 0100     		.2byte	0x1
 7484 0c16 50       		.byte	0x50
 7485 0c17 00000000 		.4byte	0
 7486 0c1b 00000000 		.4byte	0
 7487              	.LLST57:
 7488 0c1f 0C000000 		.4byte	.LVL192
 7489 0c23 2A000000 		.4byte	.LVL197
 7490 0c27 0100     		.2byte	0x1
 7491 0c29 50       		.byte	0x50
 7492 0c2a 2A000000 		.4byte	.LVL197
 7493 0c2e 40000000 		.4byte	.LVL200
 7494 0c32 0100     		.2byte	0x1
 7495 0c34 55       		.byte	0x55
 7496 0c35 40000000 		.4byte	.LVL200
 7497 0c39 43000000 		.4byte	.LVL201-1
 7498 0c3d 0100     		.2byte	0x1
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 190


 7499 0c3f 50       		.byte	0x50
 7500 0c40 43000000 		.4byte	.LVL201-1
 7501 0c44 54000000 		.4byte	.LVL205
 7502 0c48 0100     		.2byte	0x1
 7503 0c4a 55       		.byte	0x55
 7504 0c4b 54000000 		.4byte	.LVL205
 7505 0c4f 5C000000 		.4byte	.LVL209
 7506 0c53 0100     		.2byte	0x1
 7507 0c55 50       		.byte	0x50
 7508 0c56 5C000000 		.4byte	.LVL209
 7509 0c5a 6E000000 		.4byte	.LVL217
 7510 0c5e 0100     		.2byte	0x1
 7511 0c60 55       		.byte	0x55
 7512 0c61 00000000 		.4byte	0
 7513 0c65 00000000 		.4byte	0
 7514              	.LLST58:
 7515 0c69 06000000 		.4byte	.LVL190
 7516 0c6d 09000000 		.4byte	.LVL191-1
 7517 0c71 0100     		.2byte	0x1
 7518 0c73 50       		.byte	0x50
 7519 0c74 09000000 		.4byte	.LVL191-1
 7520 0c78 3E000000 		.4byte	.LVL199
 7521 0c7c 0100     		.2byte	0x1
 7522 0c7e 54       		.byte	0x54
 7523 0c7f 3E000000 		.4byte	.LVL199
 7524 0c83 40000000 		.4byte	.LVL200
 7525 0c87 0400     		.2byte	0x4
 7526 0c89 F3       		.byte	0xf3
 7527 0c8a 01       		.uleb128 0x1
 7528 0c8b 50       		.byte	0x50
 7529 0c8c 9F       		.byte	0x9f
 7530 0c8d 40000000 		.4byte	.LVL200
 7531 0c91 52000000 		.4byte	.LVL204
 7532 0c95 0100     		.2byte	0x1
 7533 0c97 54       		.byte	0x54
 7534 0c98 52000000 		.4byte	.LVL204
 7535 0c9c 54000000 		.4byte	.LVL205
 7536 0ca0 0400     		.2byte	0x4
 7537 0ca2 F3       		.byte	0xf3
 7538 0ca3 01       		.uleb128 0x1
 7539 0ca4 50       		.byte	0x50
 7540 0ca5 9F       		.byte	0x9f
 7541 0ca6 54000000 		.4byte	.LVL205
 7542 0caa 56000000 		.4byte	.LVL206
 7543 0cae 0100     		.2byte	0x1
 7544 0cb0 54       		.byte	0x54
 7545 0cb1 56000000 		.4byte	.LVL206
 7546 0cb5 58000000 		.4byte	.LVL207
 7547 0cb9 0400     		.2byte	0x4
 7548 0cbb F3       		.byte	0xf3
 7549 0cbc 01       		.uleb128 0x1
 7550 0cbd 50       		.byte	0x50
 7551 0cbe 9F       		.byte	0x9f
 7552 0cbf 58000000 		.4byte	.LVL207
 7553 0cc3 5A000000 		.4byte	.LVL208
 7554 0cc7 0100     		.2byte	0x1
 7555 0cc9 54       		.byte	0x54
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 191


 7556 0cca 5A000000 		.4byte	.LVL208
 7557 0cce 5C000000 		.4byte	.LVL209
 7558 0cd2 0400     		.2byte	0x4
 7559 0cd4 F3       		.byte	0xf3
 7560 0cd5 01       		.uleb128 0x1
 7561 0cd6 50       		.byte	0x50
 7562 0cd7 9F       		.byte	0x9f
 7563 0cd8 5C000000 		.4byte	.LVL209
 7564 0cdc 5E000000 		.4byte	.LVL210
 7565 0ce0 0100     		.2byte	0x1
 7566 0ce2 54       		.byte	0x54
 7567 0ce3 5E000000 		.4byte	.LVL210
 7568 0ce7 60000000 		.4byte	.LVL211
 7569 0ceb 0400     		.2byte	0x4
 7570 0ced F3       		.byte	0xf3
 7571 0cee 01       		.uleb128 0x1
 7572 0cef 50       		.byte	0x50
 7573 0cf0 9F       		.byte	0x9f
 7574 0cf1 60000000 		.4byte	.LVL211
 7575 0cf5 62000000 		.4byte	.LVL212
 7576 0cf9 0100     		.2byte	0x1
 7577 0cfb 54       		.byte	0x54
 7578 0cfc 62000000 		.4byte	.LVL212
 7579 0d00 64000000 		.4byte	.LVL213
 7580 0d04 0400     		.2byte	0x4
 7581 0d06 F3       		.byte	0xf3
 7582 0d07 01       		.uleb128 0x1
 7583 0d08 50       		.byte	0x50
 7584 0d09 9F       		.byte	0x9f
 7585 0d0a 64000000 		.4byte	.LVL213
 7586 0d0e 66000000 		.4byte	.LVL214
 7587 0d12 0100     		.2byte	0x1
 7588 0d14 54       		.byte	0x54
 7589 0d15 66000000 		.4byte	.LVL214
 7590 0d19 70000000 		.4byte	.LFE44
 7591 0d1d 0400     		.2byte	0x4
 7592 0d1f F3       		.byte	0xf3
 7593 0d20 01       		.uleb128 0x1
 7594 0d21 50       		.byte	0x50
 7595 0d22 9F       		.byte	0x9f
 7596 0d23 00000000 		.4byte	0
 7597 0d27 00000000 		.4byte	0
 7598              	.LLST59:
 7599 0d2b 0E000000 		.4byte	.LVL193
 7600 0d2f 1C000000 		.4byte	.LVL195
 7601 0d33 0100     		.2byte	0x1
 7602 0d35 53       		.byte	0x53
 7603 0d36 1C000000 		.4byte	.LVL195
 7604 0d3a 22000000 		.4byte	.LVL196
 7605 0d3e 0300     		.2byte	0x3
 7606 0d40 73       		.byte	0x73
 7607 0d41 7F       		.sleb128 -1
 7608 0d42 9F       		.byte	0x9f
 7609 0d43 22000000 		.4byte	.LVL196
 7610 0d47 2F000000 		.4byte	.LVL198-1
 7611 0d4b 0600     		.2byte	0x6
 7612 0d4d 74       		.byte	0x74
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 192


 7613 0d4e 38       		.sleb128 56
 7614 0d4f 06       		.byte	0x6
 7615 0d50 31       		.byte	0x31
 7616 0d51 1C       		.byte	0x1c
 7617 0d52 9F       		.byte	0x9f
 7618 0d53 40000000 		.4byte	.LVL200
 7619 0d57 43000000 		.4byte	.LVL201-1
 7620 0d5b 0600     		.2byte	0x6
 7621 0d5d 74       		.byte	0x74
 7622 0d5e 38       		.sleb128 56
 7623 0d5f 06       		.byte	0x6
 7624 0d60 31       		.byte	0x31
 7625 0d61 1C       		.byte	0x1c
 7626 0d62 9F       		.byte	0x9f
 7627 0d63 54000000 		.4byte	.LVL205
 7628 0d67 58000000 		.4byte	.LVL207
 7629 0d6b 0100     		.2byte	0x1
 7630 0d6d 53       		.byte	0x53
 7631 0d6e 58000000 		.4byte	.LVL207
 7632 0d72 5A000000 		.4byte	.LVL208
 7633 0d76 0600     		.2byte	0x6
 7634 0d78 74       		.byte	0x74
 7635 0d79 38       		.sleb128 56
 7636 0d7a 06       		.byte	0x6
 7637 0d7b 31       		.byte	0x31
 7638 0d7c 1C       		.byte	0x1c
 7639 0d7d 9F       		.byte	0x9f
 7640 0d7e 5A000000 		.4byte	.LVL208
 7641 0d82 5C000000 		.4byte	.LVL209
 7642 0d86 0900     		.2byte	0x9
 7643 0d88 F3       		.byte	0xf3
 7644 0d89 01       		.uleb128 0x1
 7645 0d8a 50       		.byte	0x50
 7646 0d8b 23       		.byte	0x23
 7647 0d8c 38       		.uleb128 0x38
 7648 0d8d 06       		.byte	0x6
 7649 0d8e 31       		.byte	0x31
 7650 0d8f 1C       		.byte	0x1c
 7651 0d90 9F       		.byte	0x9f
 7652 0d91 00000000 		.4byte	0
 7653 0d95 00000000 		.4byte	0
 7654              	.LLST60:
 7655 0d99 1A000000 		.4byte	.LVL194
 7656 0d9d 4A000000 		.4byte	.LVL202
 7657 0da1 0100     		.2byte	0x1
 7658 0da3 57       		.byte	0x57
 7659 0da4 4A000000 		.4byte	.LVL202
 7660 0da8 4C000000 		.4byte	.LVL203
 7661 0dac 0300     		.2byte	0x3
 7662 0dae 77       		.byte	0x77
 7663 0daf 7F       		.sleb128 -1
 7664 0db0 9F       		.byte	0x9f
 7665 0db1 58000000 		.4byte	.LVL207
 7666 0db5 66000000 		.4byte	.LVL214
 7667 0db9 0100     		.2byte	0x1
 7668 0dbb 57       		.byte	0x57
 7669 0dbc 00000000 		.4byte	0
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 193


 7670 0dc0 00000000 		.4byte	0
 7671              	.LLST61:
 7672 0dc4 44000000 		.4byte	.LVL201
 7673 0dc8 54000000 		.4byte	.LVL205
 7674 0dcc 0100     		.2byte	0x1
 7675 0dce 50       		.byte	0x50
 7676 0dcf 64000000 		.4byte	.LVL213
 7677 0dd3 66000000 		.4byte	.LVL214
 7678 0dd7 0100     		.2byte	0x1
 7679 0dd9 50       		.byte	0x50
 7680 0dda 00000000 		.4byte	0
 7681 0dde 00000000 		.4byte	0
 7682              	.LLST62:
 7683 0de2 00000000 		.4byte	.LVL219
 7684 0de6 0C000000 		.4byte	.LVL221
 7685 0dea 0100     		.2byte	0x1
 7686 0dec 50       		.byte	0x50
 7687 0ded 0C000000 		.4byte	.LVL221
 7688 0df1 E2000000 		.4byte	.LVL250
 7689 0df5 0100     		.2byte	0x1
 7690 0df7 54       		.byte	0x54
 7691 0df8 E2000000 		.4byte	.LVL250
 7692 0dfc E4000000 		.4byte	.LFE45
 7693 0e00 0400     		.2byte	0x4
 7694 0e02 F3       		.byte	0xf3
 7695 0e03 01       		.uleb128 0x1
 7696 0e04 50       		.byte	0x50
 7697 0e05 9F       		.byte	0x9f
 7698 0e06 00000000 		.4byte	0
 7699 0e0a 00000000 		.4byte	0
 7700              	.LLST63:
 7701 0e0e 00000000 		.4byte	.LVL219
 7702 0e12 0C000000 		.4byte	.LVL221
 7703 0e16 0100     		.2byte	0x1
 7704 0e18 51       		.byte	0x51
 7705 0e19 0C000000 		.4byte	.LVL221
 7706 0e1d E2000000 		.4byte	.LVL251
 7707 0e21 0100     		.2byte	0x1
 7708 0e23 55       		.byte	0x55
 7709 0e24 E2000000 		.4byte	.LVL251
 7710 0e28 E4000000 		.4byte	.LFE45
 7711 0e2c 0400     		.2byte	0x4
 7712 0e2e F3       		.byte	0xf3
 7713 0e2f 01       		.uleb128 0x1
 7714 0e30 51       		.byte	0x51
 7715 0e31 9F       		.byte	0x9f
 7716 0e32 00000000 		.4byte	0
 7717 0e36 00000000 		.4byte	0
 7718              	.LLST64:
 7719 0e3a 00000000 		.4byte	.LVL219
 7720 0e3e 0C000000 		.4byte	.LVL221
 7721 0e42 0100     		.2byte	0x1
 7722 0e44 52       		.byte	0x52
 7723 0e45 0C000000 		.4byte	.LVL221
 7724 0e49 8C000000 		.4byte	.LVL237
 7725 0e4d 0200     		.2byte	0x2
 7726 0e4f 91       		.byte	0x91
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 194


 7727 0e50 5C       		.sleb128 -36
 7728 0e51 8C000000 		.4byte	.LVL237
 7729 0e55 91000000 		.4byte	.LVL238-1
 7730 0e59 0200     		.2byte	0x2
 7731 0e5b 71       		.byte	0x71
 7732 0e5c 00       		.sleb128 0
 7733 0e5d 91000000 		.4byte	.LVL238-1
 7734 0e61 E4000000 		.4byte	.LFE45
 7735 0e65 0200     		.2byte	0x2
 7736 0e67 91       		.byte	0x91
 7737 0e68 5C       		.sleb128 -36
 7738 0e69 00000000 		.4byte	0
 7739 0e6d 00000000 		.4byte	0
 7740              	.LLST65:
 7741 0e71 0A000000 		.4byte	.LVL220
 7742 0e75 0C000000 		.4byte	.LVL221
 7743 0e79 0200     		.2byte	0x2
 7744 0e7b 30       		.byte	0x30
 7745 0e7c 9F       		.byte	0x9f
 7746 0e7d 0C000000 		.4byte	.LVL221
 7747 0e81 58000000 		.4byte	.LVL231
 7748 0e85 0100     		.2byte	0x1
 7749 0e87 57       		.byte	0x57
 7750 0e88 58000000 		.4byte	.LVL231
 7751 0e8c 5A000000 		.4byte	.LVL232
 7752 0e90 0200     		.2byte	0x2
 7753 0e92 31       		.byte	0x31
 7754 0e93 9F       		.byte	0x9f
 7755 0e94 5A000000 		.4byte	.LVL232
 7756 0e98 E2000000 		.4byte	.LVL252
 7757 0e9c 0100     		.2byte	0x1
 7758 0e9e 57       		.byte	0x57
 7759 0e9f 00000000 		.4byte	0
 7760 0ea3 00000000 		.4byte	0
 7761              	.LLST66:
 7762 0ea7 0A000000 		.4byte	.LVL220
 7763 0eab 0C000000 		.4byte	.LVL221
 7764 0eaf 0100     		.2byte	0x1
 7765 0eb1 50       		.byte	0x50
 7766 0eb2 0C000000 		.4byte	.LVL221
 7767 0eb6 E2000000 		.4byte	.LVL250
 7768 0eba 0100     		.2byte	0x1
 7769 0ebc 54       		.byte	0x54
 7770 0ebd E2000000 		.4byte	.LVL250
 7771 0ec1 E4000000 		.4byte	.LFE45
 7772 0ec5 0400     		.2byte	0x4
 7773 0ec7 F3       		.byte	0xf3
 7774 0ec8 01       		.uleb128 0x1
 7775 0ec9 50       		.byte	0x50
 7776 0eca 9F       		.byte	0x9f
 7777 0ecb 00000000 		.4byte	0
 7778 0ecf 00000000 		.4byte	0
 7779              	.LLST67:
 7780 0ed3 12000000 		.4byte	.LVL223
 7781 0ed7 20000000 		.4byte	.LVL225
 7782 0edb 0100     		.2byte	0x1
 7783 0edd 56       		.byte	0x56
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 195


 7784 0ede 20000000 		.4byte	.LVL225
 7785 0ee2 40000000 		.4byte	.LVL229
 7786 0ee6 0300     		.2byte	0x3
 7787 0ee8 76       		.byte	0x76
 7788 0ee9 01       		.sleb128 1
 7789 0eea 9F       		.byte	0x9f
 7790 0eeb 40000000 		.4byte	.LVL229
 7791 0eef E0000000 		.4byte	.LVL249
 7792 0ef3 0100     		.2byte	0x1
 7793 0ef5 56       		.byte	0x56
 7794 0ef6 00000000 		.4byte	0
 7795 0efa 00000000 		.4byte	0
 7796              	.LLST68:
 7797 0efe 00000000 		.4byte	.LVL253
 7798 0f02 0C000000 		.4byte	.LVL255
 7799 0f06 0100     		.2byte	0x1
 7800 0f08 50       		.byte	0x50
 7801 0f09 0C000000 		.4byte	.LVL255
 7802 0f0d 1A010000 		.4byte	.LVL295
 7803 0f11 0100     		.2byte	0x1
 7804 0f13 54       		.byte	0x54
 7805 0f14 1A010000 		.4byte	.LVL295
 7806 0f18 1C010000 		.4byte	.LFE46
 7807 0f1c 0400     		.2byte	0x4
 7808 0f1e F3       		.byte	0xf3
 7809 0f1f 01       		.uleb128 0x1
 7810 0f20 50       		.byte	0x50
 7811 0f21 9F       		.byte	0x9f
 7812 0f22 00000000 		.4byte	0
 7813 0f26 00000000 		.4byte	0
 7814              	.LLST69:
 7815 0f2a 00000000 		.4byte	.LVL253
 7816 0f2e 0C000000 		.4byte	.LVL255
 7817 0f32 0100     		.2byte	0x1
 7818 0f34 51       		.byte	0x51
 7819 0f35 0C000000 		.4byte	.LVL255
 7820 0f39 90000000 		.4byte	.LVL273
 7821 0f3d 0200     		.2byte	0x2
 7822 0f3f 91       		.byte	0x91
 7823 0f40 64       		.sleb128 -28
 7824 0f41 90000000 		.4byte	.LVL273
 7825 0f45 95000000 		.4byte	.LVL274-1
 7826 0f49 0200     		.2byte	0x2
 7827 0f4b 71       		.byte	0x71
 7828 0f4c 00       		.sleb128 0
 7829 0f4d 95000000 		.4byte	.LVL274-1
 7830 0f51 1C010000 		.4byte	.LFE46
 7831 0f55 0200     		.2byte	0x2
 7832 0f57 91       		.byte	0x91
 7833 0f58 64       		.sleb128 -28
 7834 0f59 00000000 		.4byte	0
 7835 0f5d 00000000 		.4byte	0
 7836              	.LLST70:
 7837 0f61 08000000 		.4byte	.LVL254
 7838 0f65 0C000000 		.4byte	.LVL255
 7839 0f69 0200     		.2byte	0x2
 7840 0f6b 30       		.byte	0x30
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 196


 7841 0f6c 9F       		.byte	0x9f
 7842 0f6d 0C000000 		.4byte	.LVL255
 7843 0f71 5C000000 		.4byte	.LVL267
 7844 0f75 0100     		.2byte	0x1
 7845 0f77 55       		.byte	0x55
 7846 0f78 5C000000 		.4byte	.LVL267
 7847 0f7c 5E000000 		.4byte	.LVL268
 7848 0f80 0200     		.2byte	0x2
 7849 0f82 31       		.byte	0x31
 7850 0f83 9F       		.byte	0x9f
 7851 0f84 5E000000 		.4byte	.LVL268
 7852 0f88 1A010000 		.4byte	.LVL296
 7853 0f8c 0100     		.2byte	0x1
 7854 0f8e 55       		.byte	0x55
 7855 0f8f 00000000 		.4byte	0
 7856 0f93 00000000 		.4byte	0
 7857              	.LLST71:
 7858 0f97 08000000 		.4byte	.LVL254
 7859 0f9b 0C000000 		.4byte	.LVL255
 7860 0f9f 0100     		.2byte	0x1
 7861 0fa1 50       		.byte	0x50
 7862 0fa2 0C000000 		.4byte	.LVL255
 7863 0fa6 1A010000 		.4byte	.LVL295
 7864 0faa 0100     		.2byte	0x1
 7865 0fac 54       		.byte	0x54
 7866 0fad 1A010000 		.4byte	.LVL295
 7867 0fb1 1C010000 		.4byte	.LFE46
 7868 0fb5 0400     		.2byte	0x4
 7869 0fb7 F3       		.byte	0xf3
 7870 0fb8 01       		.uleb128 0x1
 7871 0fb9 50       		.byte	0x50
 7872 0fba 9F       		.byte	0x9f
 7873 0fbb 00000000 		.4byte	0
 7874 0fbf 00000000 		.4byte	0
 7875              	.LLST72:
 7876 0fc3 08000000 		.4byte	.LVL254
 7877 0fc7 0C000000 		.4byte	.LVL255
 7878 0fcb 0200     		.2byte	0x2
 7879 0fcd 30       		.byte	0x30
 7880 0fce 9F       		.byte	0x9f
 7881 0fcf 0C000000 		.4byte	.LVL255
 7882 0fd3 B6000000 		.4byte	.LVL278
 7883 0fd7 0100     		.2byte	0x1
 7884 0fd9 56       		.byte	0x56
 7885 0fda B6000000 		.4byte	.LVL278
 7886 0fde B9000000 		.4byte	.LVL279-1
 7887 0fe2 0100     		.2byte	0x1
 7888 0fe4 50       		.byte	0x50
 7889 0fe5 B9000000 		.4byte	.LVL279-1
 7890 0fe9 1A010000 		.4byte	.LVL297
 7891 0fed 0100     		.2byte	0x1
 7892 0fef 56       		.byte	0x56
 7893 0ff0 00000000 		.4byte	0
 7894 0ff4 00000000 		.4byte	0
 7895              	.LLST73:
 7896 0ff8 12000000 		.4byte	.LVL257
 7897 0ffc 18000000 		.4byte	.LVL258
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 197


 7898 1000 0100     		.2byte	0x1
 7899 1002 53       		.byte	0x53
 7900 1003 18000000 		.4byte	.LVL258
 7901 1007 1C000000 		.4byte	.LVL259
 7902 100b 0300     		.2byte	0x3
 7903 100d 73       		.byte	0x73
 7904 100e 01       		.sleb128 1
 7905 100f 9F       		.byte	0x9f
 7906 1010 1C000000 		.4byte	.LVL259
 7907 1014 23000000 		.4byte	.LVL260-1
 7908 1018 0600     		.2byte	0x6
 7909 101a 74       		.byte	0x74
 7910 101b 38       		.sleb128 56
 7911 101c 06       		.byte	0x6
 7912 101d 23       		.byte	0x23
 7913 101e 01       		.uleb128 0x1
 7914 101f 9F       		.byte	0x9f
 7915 1020 44000000 		.4byte	.LVL264
 7916 1024 46000000 		.4byte	.LVL265
 7917 1028 0100     		.2byte	0x1
 7918 102a 53       		.byte	0x53
 7919 102b 00000000 		.4byte	0
 7920 102f 00000000 		.4byte	0
 7921              	.LLST74:
 7922 1033 08010000 		.4byte	.LVL291
 7923 1037 0A010000 		.4byte	.LVL292
 7924 103b 0100     		.2byte	0x1
 7925 103d 50       		.byte	0x50
 7926 103e 0A010000 		.4byte	.LVL292
 7927 1042 0D010000 		.4byte	.LVL293-1
 7928 1046 0100     		.2byte	0x1
 7929 1048 51       		.byte	0x51
 7930 1049 00000000 		.4byte	0
 7931 104d 00000000 		.4byte	0
 7932              	.LLST75:
 7933 1051 00000000 		.4byte	.LVL298
 7934 1055 0B000000 		.4byte	.LVL300-1
 7935 1059 0100     		.2byte	0x1
 7936 105b 50       		.byte	0x50
 7937 105c 0B000000 		.4byte	.LVL300-1
 7938 1060 2C000000 		.4byte	.LVL305
 7939 1064 0100     		.2byte	0x1
 7940 1066 54       		.byte	0x54
 7941 1067 2C000000 		.4byte	.LVL305
 7942 106b 2E000000 		.4byte	.LFE40
 7943 106f 0400     		.2byte	0x4
 7944 1071 F3       		.byte	0xf3
 7945 1072 01       		.uleb128 0x1
 7946 1073 50       		.byte	0x50
 7947 1074 9F       		.byte	0x9f
 7948 1075 00000000 		.4byte	0
 7949 1079 00000000 		.4byte	0
 7950              	.LLST76:
 7951 107d 00000000 		.4byte	.LVL298
 7952 1081 0B000000 		.4byte	.LVL300-1
 7953 1085 0100     		.2byte	0x1
 7954 1087 51       		.byte	0x51
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 198


 7955 1088 0B000000 		.4byte	.LVL300-1
 7956 108c 2C000000 		.4byte	.LVL306
 7957 1090 0100     		.2byte	0x1
 7958 1092 56       		.byte	0x56
 7959 1093 2C000000 		.4byte	.LVL306
 7960 1097 2E000000 		.4byte	.LFE40
 7961 109b 0400     		.2byte	0x4
 7962 109d F3       		.byte	0xf3
 7963 109e 01       		.uleb128 0x1
 7964 109f 51       		.byte	0x51
 7965 10a0 9F       		.byte	0x9f
 7966 10a1 00000000 		.4byte	0
 7967 10a5 00000000 		.4byte	0
 7968              	.LLST77:
 7969 10a9 16000000 		.4byte	.LVL301
 7970 10ad 1A000000 		.4byte	.LVL302
 7971 10b1 0200     		.2byte	0x2
 7972 10b3 31       		.byte	0x31
 7973 10b4 9F       		.byte	0x9f
 7974 10b5 22000000 		.4byte	.LVL303
 7975 10b9 2E000000 		.4byte	.LFE40
 7976 10bd 0100     		.2byte	0x1
 7977 10bf 50       		.byte	0x50
 7978 10c0 00000000 		.4byte	0
 7979 10c4 00000000 		.4byte	0
 7980              	.LLST78:
 7981 10c8 06000000 		.4byte	.LVL299
 7982 10cc 0B000000 		.4byte	.LVL300-1
 7983 10d0 0100     		.2byte	0x1
 7984 10d2 50       		.byte	0x50
 7985 10d3 0B000000 		.4byte	.LVL300-1
 7986 10d7 2C000000 		.4byte	.LVL305
 7987 10db 0100     		.2byte	0x1
 7988 10dd 54       		.byte	0x54
 7989 10de 2C000000 		.4byte	.LVL305
 7990 10e2 2E000000 		.4byte	.LFE40
 7991 10e6 0400     		.2byte	0x4
 7992 10e8 F3       		.byte	0xf3
 7993 10e9 01       		.uleb128 0x1
 7994 10ea 50       		.byte	0x50
 7995 10eb 9F       		.byte	0x9f
 7996 10ec 00000000 		.4byte	0
 7997 10f0 00000000 		.4byte	0
 7998              	.LLST79:
 7999 10f4 00000000 		.4byte	.LVL307
 8000 10f8 0C000000 		.4byte	.LVL309
 8001 10fc 0100     		.2byte	0x1
 8002 10fe 50       		.byte	0x50
 8003 10ff 0C000000 		.4byte	.LVL309
 8004 1103 E2000000 		.4byte	.LVL339
 8005 1107 0100     		.2byte	0x1
 8006 1109 54       		.byte	0x54
 8007 110a E2000000 		.4byte	.LVL339
 8008 110e E4000000 		.4byte	.LFE47
 8009 1112 0400     		.2byte	0x4
 8010 1114 F3       		.byte	0xf3
 8011 1115 01       		.uleb128 0x1
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 199


 8012 1116 50       		.byte	0x50
 8013 1117 9F       		.byte	0x9f
 8014 1118 00000000 		.4byte	0
 8015 111c 00000000 		.4byte	0
 8016              	.LLST80:
 8017 1120 00000000 		.4byte	.LVL307
 8018 1124 0C000000 		.4byte	.LVL309
 8019 1128 0100     		.2byte	0x1
 8020 112a 51       		.byte	0x51
 8021 112b 0C000000 		.4byte	.LVL309
 8022 112f E2000000 		.4byte	.LVL340
 8023 1133 0100     		.2byte	0x1
 8024 1135 55       		.byte	0x55
 8025 1136 E2000000 		.4byte	.LVL340
 8026 113a E4000000 		.4byte	.LFE47
 8027 113e 0400     		.2byte	0x4
 8028 1140 F3       		.byte	0xf3
 8029 1141 01       		.uleb128 0x1
 8030 1142 51       		.byte	0x51
 8031 1143 9F       		.byte	0x9f
 8032 1144 00000000 		.4byte	0
 8033 1148 00000000 		.4byte	0
 8034              	.LLST81:
 8035 114c 00000000 		.4byte	.LVL307
 8036 1150 0C000000 		.4byte	.LVL309
 8037 1154 0100     		.2byte	0x1
 8038 1156 52       		.byte	0x52
 8039 1157 0C000000 		.4byte	.LVL309
 8040 115b 8C000000 		.4byte	.LVL326
 8041 115f 0200     		.2byte	0x2
 8042 1161 91       		.byte	0x91
 8043 1162 64       		.sleb128 -28
 8044 1163 8C000000 		.4byte	.LVL326
 8045 1167 91000000 		.4byte	.LVL327-1
 8046 116b 0200     		.2byte	0x2
 8047 116d 71       		.byte	0x71
 8048 116e 00       		.sleb128 0
 8049 116f 91000000 		.4byte	.LVL327-1
 8050 1173 E4000000 		.4byte	.LFE47
 8051 1177 0200     		.2byte	0x2
 8052 1179 91       		.byte	0x91
 8053 117a 64       		.sleb128 -28
 8054 117b 00000000 		.4byte	0
 8055 117f 00000000 		.4byte	0
 8056              	.LLST82:
 8057 1183 0A000000 		.4byte	.LVL308
 8058 1187 0C000000 		.4byte	.LVL309
 8059 118b 0200     		.2byte	0x2
 8060 118d 30       		.byte	0x30
 8061 118e 9F       		.byte	0x9f
 8062 118f 0C000000 		.4byte	.LVL309
 8063 1193 18000000 		.4byte	.LVL312
 8064 1197 0100     		.2byte	0x1
 8065 1199 56       		.byte	0x56
 8066 119a 40000000 		.4byte	.LVL317
 8067 119e 58000000 		.4byte	.LVL320
 8068 11a2 0100     		.2byte	0x1
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 200


 8069 11a4 56       		.byte	0x56
 8070 11a5 58000000 		.4byte	.LVL320
 8071 11a9 5A000000 		.4byte	.LVL321
 8072 11ad 0200     		.2byte	0x2
 8073 11af 31       		.byte	0x31
 8074 11b0 9F       		.byte	0x9f
 8075 11b1 5A000000 		.4byte	.LVL321
 8076 11b5 E0000000 		.4byte	.LVL338
 8077 11b9 0100     		.2byte	0x1
 8078 11bb 56       		.byte	0x56
 8079 11bc 00000000 		.4byte	0
 8080 11c0 00000000 		.4byte	0
 8081              	.LLST83:
 8082 11c4 18000000 		.4byte	.LVL312
 8083 11c8 40000000 		.4byte	.LVL317
 8084 11cc 0100     		.2byte	0x1
 8085 11ce 56       		.byte	0x56
 8086 11cf 00000000 		.4byte	0
 8087 11d3 00000000 		.4byte	0
 8088              	.LLST84:
 8089 11d7 0A000000 		.4byte	.LVL308
 8090 11db 0C000000 		.4byte	.LVL309
 8091 11df 0100     		.2byte	0x1
 8092 11e1 50       		.byte	0x50
 8093 11e2 0C000000 		.4byte	.LVL309
 8094 11e6 E2000000 		.4byte	.LVL339
 8095 11ea 0100     		.2byte	0x1
 8096 11ec 54       		.byte	0x54
 8097 11ed E2000000 		.4byte	.LVL339
 8098 11f1 E4000000 		.4byte	.LFE47
 8099 11f5 0400     		.2byte	0x4
 8100 11f7 F3       		.byte	0xf3
 8101 11f8 01       		.uleb128 0x1
 8102 11f9 50       		.byte	0x50
 8103 11fa 9F       		.byte	0x9f
 8104 11fb 00000000 		.4byte	0
 8105 11ff 00000000 		.4byte	0
 8106              	.LLST85:
 8107 1203 12000000 		.4byte	.LVL311
 8108 1207 1F000000 		.4byte	.LVL313-1
 8109 120b 0100     		.2byte	0x1
 8110 120d 53       		.byte	0x53
 8111 120e 40000000 		.4byte	.LVL317
 8112 1212 42000000 		.4byte	.LVL318
 8113 1216 0100     		.2byte	0x1
 8114 1218 53       		.byte	0x53
 8115 1219 00000000 		.4byte	0
 8116 121d 00000000 		.4byte	0
 8117              	.LLST86:
 8118 1221 00000000 		.4byte	.LVL341
 8119 1225 0D000000 		.4byte	.LVL343-1
 8120 1229 0100     		.2byte	0x1
 8121 122b 50       		.byte	0x50
 8122 122c 0D000000 		.4byte	.LVL343-1
 8123 1230 4A000000 		.4byte	.LVL350
 8124 1234 0100     		.2byte	0x1
 8125 1236 54       		.byte	0x54
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 201


 8126 1237 4A000000 		.4byte	.LVL350
 8127 123b 4C000000 		.4byte	.LVL351
 8128 123f 0400     		.2byte	0x4
 8129 1241 F3       		.byte	0xf3
 8130 1242 01       		.uleb128 0x1
 8131 1243 50       		.byte	0x50
 8132 1244 9F       		.byte	0x9f
 8133 1245 4C000000 		.4byte	.LVL351
 8134 1249 5E000000 		.4byte	.LVL353
 8135 124d 0100     		.2byte	0x1
 8136 124f 54       		.byte	0x54
 8137 1250 5E000000 		.4byte	.LVL353
 8138 1254 60000000 		.4byte	.LVL354
 8139 1258 0400     		.2byte	0x4
 8140 125a F3       		.byte	0xf3
 8141 125b 01       		.uleb128 0x1
 8142 125c 50       		.byte	0x50
 8143 125d 9F       		.byte	0x9f
 8144 125e 60000000 		.4byte	.LVL354
 8145 1262 62000000 		.4byte	.LVL355
 8146 1266 0100     		.2byte	0x1
 8147 1268 54       		.byte	0x54
 8148 1269 62000000 		.4byte	.LVL355
 8149 126d 64000000 		.4byte	.LVL356
 8150 1271 0400     		.2byte	0x4
 8151 1273 F3       		.byte	0xf3
 8152 1274 01       		.uleb128 0x1
 8153 1275 50       		.byte	0x50
 8154 1276 9F       		.byte	0x9f
 8155 1277 64000000 		.4byte	.LVL356
 8156 127b 66000000 		.4byte	.LVL357
 8157 127f 0100     		.2byte	0x1
 8158 1281 54       		.byte	0x54
 8159 1282 66000000 		.4byte	.LVL357
 8160 1286 68000000 		.4byte	.LVL358
 8161 128a 0400     		.2byte	0x4
 8162 128c F3       		.byte	0xf3
 8163 128d 01       		.uleb128 0x1
 8164 128e 50       		.byte	0x50
 8165 128f 9F       		.byte	0x9f
 8166 1290 68000000 		.4byte	.LVL358
 8167 1294 6A000000 		.4byte	.LVL359
 8168 1298 0100     		.2byte	0x1
 8169 129a 54       		.byte	0x54
 8170 129b 6A000000 		.4byte	.LVL359
 8171 129f 6C000000 		.4byte	.LVL360
 8172 12a3 0400     		.2byte	0x4
 8173 12a5 F3       		.byte	0xf3
 8174 12a6 01       		.uleb128 0x1
 8175 12a7 50       		.byte	0x50
 8176 12a8 9F       		.byte	0x9f
 8177 12a9 6C000000 		.4byte	.LVL360
 8178 12ad 6E000000 		.4byte	.LVL361
 8179 12b1 0100     		.2byte	0x1
 8180 12b3 54       		.byte	0x54
 8181 12b4 6E000000 		.4byte	.LVL361
 8182 12b8 70000000 		.4byte	.LVL362
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 202


 8183 12bc 0400     		.2byte	0x4
 8184 12be F3       		.byte	0xf3
 8185 12bf 01       		.uleb128 0x1
 8186 12c0 50       		.byte	0x50
 8187 12c1 9F       		.byte	0x9f
 8188 12c2 70000000 		.4byte	.LVL362
 8189 12c6 72000000 		.4byte	.LVL363
 8190 12ca 0100     		.2byte	0x1
 8191 12cc 54       		.byte	0x54
 8192 12cd 72000000 		.4byte	.LVL363
 8193 12d1 7E000000 		.4byte	.LFE48
 8194 12d5 0400     		.2byte	0x4
 8195 12d7 F3       		.byte	0xf3
 8196 12d8 01       		.uleb128 0x1
 8197 12d9 50       		.byte	0x50
 8198 12da 9F       		.byte	0x9f
 8199 12db 00000000 		.4byte	0
 8200 12df 00000000 		.4byte	0
 8201              	.LLST87:
 8202 12e3 00000000 		.4byte	.LVL341
 8203 12e7 0D000000 		.4byte	.LVL343-1
 8204 12eb 0100     		.2byte	0x1
 8205 12ed 51       		.byte	0x51
 8206 12ee 0D000000 		.4byte	.LVL343-1
 8207 12f2 7C000000 		.4byte	.LVL365
 8208 12f6 0200     		.2byte	0x2
 8209 12f8 7D       		.byte	0x7d
 8210 12f9 00       		.sleb128 0
 8211 12fa 7C000000 		.4byte	.LVL365
 8212 12fe 7E000000 		.4byte	.LFE48
 8213 1302 0200     		.2byte	0x2
 8214 1304 91       		.byte	0x91
 8215 1305 60       		.sleb128 -32
 8216 1306 00000000 		.4byte	0
 8217 130a 00000000 		.4byte	0
 8218              	.LLST88:
 8219 130e 00000000 		.4byte	.LVL341
 8220 1312 0D000000 		.4byte	.LVL343-1
 8221 1316 0100     		.2byte	0x1
 8222 1318 52       		.byte	0x52
 8223 1319 0D000000 		.4byte	.LVL343-1
 8224 131d 7E000000 		.4byte	.LFE48
 8225 1321 0200     		.2byte	0x2
 8226 1323 91       		.byte	0x91
 8227 1324 64       		.sleb128 -28
 8228 1325 00000000 		.4byte	0
 8229 1329 00000000 		.4byte	0
 8230              	.LLST89:
 8231 132d 72000000 		.4byte	.LVL363
 8232 1331 7C000000 		.4byte	.LVL366
 8233 1335 0100     		.2byte	0x1
 8234 1337 54       		.byte	0x54
 8235 1338 7C000000 		.4byte	.LVL366
 8236 133c 7E000000 		.4byte	.LFE48
 8237 1340 0100     		.2byte	0x1
 8238 1342 50       		.byte	0x50
 8239 1343 00000000 		.4byte	0
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 203


 8240 1347 00000000 		.4byte	0
 8241              	.LLST90:
 8242 134b 10000000 		.4byte	.LVL344
 8243 134f 20000000 		.4byte	.LVL347
 8244 1353 0100     		.2byte	0x1
 8245 1355 50       		.byte	0x50
 8246 1356 20000000 		.4byte	.LVL347
 8247 135a 60000000 		.4byte	.LVL354
 8248 135e 0100     		.2byte	0x1
 8249 1360 55       		.byte	0x55
 8250 1361 60000000 		.4byte	.LVL354
 8251 1365 64000000 		.4byte	.LVL356
 8252 1369 0100     		.2byte	0x1
 8253 136b 50       		.byte	0x50
 8254 136c 64000000 		.4byte	.LVL356
 8255 1370 7C000000 		.4byte	.LVL367
 8256 1374 0100     		.2byte	0x1
 8257 1376 55       		.byte	0x55
 8258 1377 00000000 		.4byte	0
 8259 137b 00000000 		.4byte	0
 8260              	.LLST91:
 8261 137f 0A000000 		.4byte	.LVL342
 8262 1383 0D000000 		.4byte	.LVL343-1
 8263 1387 0100     		.2byte	0x1
 8264 1389 50       		.byte	0x50
 8265 138a 0D000000 		.4byte	.LVL343-1
 8266 138e 4A000000 		.4byte	.LVL350
 8267 1392 0100     		.2byte	0x1
 8268 1394 54       		.byte	0x54
 8269 1395 4A000000 		.4byte	.LVL350
 8270 1399 4C000000 		.4byte	.LVL351
 8271 139d 0400     		.2byte	0x4
 8272 139f F3       		.byte	0xf3
 8273 13a0 01       		.uleb128 0x1
 8274 13a1 50       		.byte	0x50
 8275 13a2 9F       		.byte	0x9f
 8276 13a3 4C000000 		.4byte	.LVL351
 8277 13a7 5E000000 		.4byte	.LVL353
 8278 13ab 0100     		.2byte	0x1
 8279 13ad 54       		.byte	0x54
 8280 13ae 5E000000 		.4byte	.LVL353
 8281 13b2 60000000 		.4byte	.LVL354
 8282 13b6 0400     		.2byte	0x4
 8283 13b8 F3       		.byte	0xf3
 8284 13b9 01       		.uleb128 0x1
 8285 13ba 50       		.byte	0x50
 8286 13bb 9F       		.byte	0x9f
 8287 13bc 60000000 		.4byte	.LVL354
 8288 13c0 62000000 		.4byte	.LVL355
 8289 13c4 0100     		.2byte	0x1
 8290 13c6 54       		.byte	0x54
 8291 13c7 62000000 		.4byte	.LVL355
 8292 13cb 64000000 		.4byte	.LVL356
 8293 13cf 0400     		.2byte	0x4
 8294 13d1 F3       		.byte	0xf3
 8295 13d2 01       		.uleb128 0x1
 8296 13d3 50       		.byte	0x50
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 204


 8297 13d4 9F       		.byte	0x9f
 8298 13d5 64000000 		.4byte	.LVL356
 8299 13d9 66000000 		.4byte	.LVL357
 8300 13dd 0100     		.2byte	0x1
 8301 13df 54       		.byte	0x54
 8302 13e0 66000000 		.4byte	.LVL357
 8303 13e4 68000000 		.4byte	.LVL358
 8304 13e8 0400     		.2byte	0x4
 8305 13ea F3       		.byte	0xf3
 8306 13eb 01       		.uleb128 0x1
 8307 13ec 50       		.byte	0x50
 8308 13ed 9F       		.byte	0x9f
 8309 13ee 68000000 		.4byte	.LVL358
 8310 13f2 6A000000 		.4byte	.LVL359
 8311 13f6 0100     		.2byte	0x1
 8312 13f8 54       		.byte	0x54
 8313 13f9 6A000000 		.4byte	.LVL359
 8314 13fd 6C000000 		.4byte	.LVL360
 8315 1401 0400     		.2byte	0x4
 8316 1403 F3       		.byte	0xf3
 8317 1404 01       		.uleb128 0x1
 8318 1405 50       		.byte	0x50
 8319 1406 9F       		.byte	0x9f
 8320 1407 6C000000 		.4byte	.LVL360
 8321 140b 6E000000 		.4byte	.LVL361
 8322 140f 0100     		.2byte	0x1
 8323 1411 54       		.byte	0x54
 8324 1412 6E000000 		.4byte	.LVL361
 8325 1416 70000000 		.4byte	.LVL362
 8326 141a 0400     		.2byte	0x4
 8327 141c F3       		.byte	0xf3
 8328 141d 01       		.uleb128 0x1
 8329 141e 50       		.byte	0x50
 8330 141f 9F       		.byte	0x9f
 8331 1420 70000000 		.4byte	.LVL362
 8332 1424 72000000 		.4byte	.LVL363
 8333 1428 0100     		.2byte	0x1
 8334 142a 54       		.byte	0x54
 8335 142b 72000000 		.4byte	.LVL363
 8336 142f 7E000000 		.4byte	.LFE48
 8337 1433 0400     		.2byte	0x4
 8338 1435 F3       		.byte	0xf3
 8339 1436 01       		.uleb128 0x1
 8340 1437 50       		.byte	0x50
 8341 1438 9F       		.byte	0x9f
 8342 1439 00000000 		.4byte	0
 8343 143d 00000000 		.4byte	0
 8344              	.LLST92:
 8345 1441 12000000 		.4byte	.LVL345
 8346 1445 7C000000 		.4byte	.LVL368
 8347 1449 0100     		.2byte	0x1
 8348 144b 57       		.byte	0x57
 8349 144c 00000000 		.4byte	0
 8350 1450 00000000 		.4byte	0
 8351              	.LLST93:
 8352 1454 1C000000 		.4byte	.LVL346
 8353 1458 60000000 		.4byte	.LVL354
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 205


 8354 145c 0100     		.2byte	0x1
 8355 145e 56       		.byte	0x56
 8356 145f 64000000 		.4byte	.LVL356
 8357 1463 72000000 		.4byte	.LVL363
 8358 1467 0100     		.2byte	0x1
 8359 1469 56       		.byte	0x56
 8360 146a 00000000 		.4byte	0
 8361 146e 00000000 		.4byte	0
 8362              	.LLST94:
 8363 1472 50000000 		.4byte	.LVL352
 8364 1476 60000000 		.4byte	.LVL354
 8365 147a 0100     		.2byte	0x1
 8366 147c 50       		.byte	0x50
 8367 147d 70000000 		.4byte	.LVL362
 8368 1481 72000000 		.4byte	.LVL363
 8369 1485 0100     		.2byte	0x1
 8370 1487 50       		.byte	0x50
 8371 1488 00000000 		.4byte	0
 8372 148c 00000000 		.4byte	0
 8373              	.LLST95:
 8374 1490 00000000 		.4byte	.LVL369
 8375 1494 09000000 		.4byte	.LVL371-1
 8376 1498 0100     		.2byte	0x1
 8377 149a 50       		.byte	0x50
 8378 149b 09000000 		.4byte	.LVL371-1
 8379 149f 20000000 		.4byte	.LVL377
 8380 14a3 0100     		.2byte	0x1
 8381 14a5 54       		.byte	0x54
 8382 14a6 20000000 		.4byte	.LVL377
 8383 14aa 22000000 		.4byte	.LVL378
 8384 14ae 0400     		.2byte	0x4
 8385 14b0 F3       		.byte	0xf3
 8386 14b1 01       		.uleb128 0x1
 8387 14b2 50       		.byte	0x50
 8388 14b3 9F       		.byte	0x9f
 8389 14b4 22000000 		.4byte	.LVL378
 8390 14b8 24000000 		.4byte	.LVL379
 8391 14bc 0100     		.2byte	0x1
 8392 14be 54       		.byte	0x54
 8393 14bf 24000000 		.4byte	.LVL379
 8394 14c3 2E000000 		.4byte	.LFE49
 8395 14c7 0400     		.2byte	0x4
 8396 14c9 F3       		.byte	0xf3
 8397 14ca 01       		.uleb128 0x1
 8398 14cb 50       		.byte	0x50
 8399 14cc 9F       		.byte	0x9f
 8400 14cd 00000000 		.4byte	0
 8401 14d1 00000000 		.4byte	0
 8402              	.LLST96:
 8403 14d5 00000000 		.4byte	.LVL369
 8404 14d9 09000000 		.4byte	.LVL371-1
 8405 14dd 0100     		.2byte	0x1
 8406 14df 51       		.byte	0x51
 8407 14e0 09000000 		.4byte	.LVL371-1
 8408 14e4 2C000000 		.4byte	.LVL383
 8409 14e8 0100     		.2byte	0x1
 8410 14ea 56       		.byte	0x56
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 206


 8411 14eb 2C000000 		.4byte	.LVL383
 8412 14ef 2E000000 		.4byte	.LFE49
 8413 14f3 0400     		.2byte	0x4
 8414 14f5 F3       		.byte	0xf3
 8415 14f6 01       		.uleb128 0x1
 8416 14f7 51       		.byte	0x51
 8417 14f8 9F       		.byte	0x9f
 8418 14f9 00000000 		.4byte	0
 8419 14fd 00000000 		.4byte	0
 8420              	.LLST97:
 8421 1501 1E000000 		.4byte	.LVL376
 8422 1505 22000000 		.4byte	.LVL378
 8423 1509 0200     		.2byte	0x2
 8424 150b 31       		.byte	0x31
 8425 150c 9F       		.byte	0x9f
 8426 150d 24000000 		.4byte	.LVL379
 8427 1511 2C000000 		.4byte	.LVL381
 8428 1515 0100     		.2byte	0x1
 8429 1517 54       		.byte	0x54
 8430 1518 2C000000 		.4byte	.LVL381
 8431 151c 2E000000 		.4byte	.LFE49
 8432 1520 0100     		.2byte	0x1
 8433 1522 50       		.byte	0x50
 8434 1523 00000000 		.4byte	0
 8435 1527 00000000 		.4byte	0
 8436              	.LLST98:
 8437 152b 0C000000 		.4byte	.LVL372
 8438 152f 18000000 		.4byte	.LVL374
 8439 1533 0100     		.2byte	0x1
 8440 1535 50       		.byte	0x50
 8441 1536 18000000 		.4byte	.LVL374
 8442 153a 22000000 		.4byte	.LVL378
 8443 153e 0100     		.2byte	0x1
 8444 1540 55       		.byte	0x55
 8445 1541 22000000 		.4byte	.LVL378
 8446 1545 24000000 		.4byte	.LVL379
 8447 1549 0100     		.2byte	0x1
 8448 154b 50       		.byte	0x50
 8449 154c 24000000 		.4byte	.LVL379
 8450 1550 2C000000 		.4byte	.LVL382
 8451 1554 0100     		.2byte	0x1
 8452 1556 55       		.byte	0x55
 8453 1557 00000000 		.4byte	0
 8454 155b 00000000 		.4byte	0
 8455              	.LLST99:
 8456 155f 14000000 		.4byte	.LVL373
 8457 1563 22000000 		.4byte	.LVL378
 8458 1567 0100     		.2byte	0x1
 8459 1569 57       		.byte	0x57
 8460 156a 00000000 		.4byte	0
 8461 156e 00000000 		.4byte	0
 8462              	.LLST100:
 8463 1572 06000000 		.4byte	.LVL370
 8464 1576 09000000 		.4byte	.LVL371-1
 8465 157a 0100     		.2byte	0x1
 8466 157c 50       		.byte	0x50
 8467 157d 09000000 		.4byte	.LVL371-1
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 207


 8468 1581 20000000 		.4byte	.LVL377
 8469 1585 0100     		.2byte	0x1
 8470 1587 54       		.byte	0x54
 8471 1588 20000000 		.4byte	.LVL377
 8472 158c 22000000 		.4byte	.LVL378
 8473 1590 0400     		.2byte	0x4
 8474 1592 F3       		.byte	0xf3
 8475 1593 01       		.uleb128 0x1
 8476 1594 50       		.byte	0x50
 8477 1595 9F       		.byte	0x9f
 8478 1596 22000000 		.4byte	.LVL378
 8479 159a 24000000 		.4byte	.LVL379
 8480 159e 0100     		.2byte	0x1
 8481 15a0 54       		.byte	0x54
 8482 15a1 24000000 		.4byte	.LVL379
 8483 15a5 2E000000 		.4byte	.LFE49
 8484 15a9 0400     		.2byte	0x4
 8485 15ab F3       		.byte	0xf3
 8486 15ac 01       		.uleb128 0x1
 8487 15ad 50       		.byte	0x50
 8488 15ae 9F       		.byte	0x9f
 8489 15af 00000000 		.4byte	0
 8490 15b3 00000000 		.4byte	0
 8491              	.LLST101:
 8492 15b7 00000000 		.4byte	.LVL384
 8493 15bb 07000000 		.4byte	.LVL385-1
 8494 15bf 0100     		.2byte	0x1
 8495 15c1 50       		.byte	0x50
 8496 15c2 07000000 		.4byte	.LVL385-1
 8497 15c6 0A000000 		.4byte	.LVL386
 8498 15ca 0100     		.2byte	0x1
 8499 15cc 54       		.byte	0x54
 8500 15cd 0A000000 		.4byte	.LVL386
 8501 15d1 12000000 		.4byte	.LFE50
 8502 15d5 0400     		.2byte	0x4
 8503 15d7 F3       		.byte	0xf3
 8504 15d8 01       		.uleb128 0x1
 8505 15d9 50       		.byte	0x50
 8506 15da 9F       		.byte	0x9f
 8507 15db 00000000 		.4byte	0
 8508 15df 00000000 		.4byte	0
 8509              	.LLST102:
 8510 15e3 0A000000 		.4byte	.LVL386
 8511 15e7 10000000 		.4byte	.LVL388
 8512 15eb 0100     		.2byte	0x1
 8513 15ed 54       		.byte	0x54
 8514 15ee 10000000 		.4byte	.LVL388
 8515 15f2 12000000 		.4byte	.LFE50
 8516 15f6 0100     		.2byte	0x1
 8517 15f8 50       		.byte	0x50
 8518 15f9 00000000 		.4byte	0
 8519 15fd 00000000 		.4byte	0
 8520              	.LLST103:
 8521 1601 00000000 		.4byte	.LVL389
 8522 1605 07000000 		.4byte	.LVL391-1
 8523 1609 0100     		.2byte	0x1
 8524 160b 50       		.byte	0x50
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 208


 8525 160c 07000000 		.4byte	.LVL391-1
 8526 1610 0C000000 		.4byte	.LVL392
 8527 1614 0100     		.2byte	0x1
 8528 1616 54       		.byte	0x54
 8529 1617 0C000000 		.4byte	.LVL392
 8530 161b 16000000 		.4byte	.LFE51
 8531 161f 0400     		.2byte	0x4
 8532 1621 F3       		.byte	0xf3
 8533 1622 01       		.uleb128 0x1
 8534 1623 50       		.byte	0x50
 8535 1624 9F       		.byte	0x9f
 8536 1625 00000000 		.4byte	0
 8537 1629 00000000 		.4byte	0
 8538              	.LLST104:
 8539 162d 0E000000 		.4byte	.LVL393
 8540 1631 14000000 		.4byte	.LVL395
 8541 1635 0100     		.2byte	0x1
 8542 1637 54       		.byte	0x54
 8543 1638 14000000 		.4byte	.LVL395
 8544 163c 16000000 		.4byte	.LFE51
 8545 1640 0100     		.2byte	0x1
 8546 1642 50       		.byte	0x50
 8547 1643 00000000 		.4byte	0
 8548 1647 00000000 		.4byte	0
 8549              	.LLST105:
 8550 164b 04000000 		.4byte	.LVL390
 8551 164f 07000000 		.4byte	.LVL391-1
 8552 1653 0100     		.2byte	0x1
 8553 1655 50       		.byte	0x50
 8554 1656 07000000 		.4byte	.LVL391-1
 8555 165a 0C000000 		.4byte	.LVL392
 8556 165e 0100     		.2byte	0x1
 8557 1660 54       		.byte	0x54
 8558 1661 0C000000 		.4byte	.LVL392
 8559 1665 16000000 		.4byte	.LFE51
 8560 1669 0400     		.2byte	0x4
 8561 166b F3       		.byte	0xf3
 8562 166c 01       		.uleb128 0x1
 8563 166d 50       		.byte	0x50
 8564 166e 9F       		.byte	0x9f
 8565 166f 00000000 		.4byte	0
 8566 1673 00000000 		.4byte	0
 8567              	.LLST106:
 8568 1677 00000000 		.4byte	.LVL396
 8569 167b 02000000 		.4byte	.LVL397
 8570 167f 0100     		.2byte	0x1
 8571 1681 50       		.byte	0x50
 8572 1682 02000000 		.4byte	.LVL397
 8573 1686 04000000 		.4byte	.LFE52
 8574 168a 0400     		.2byte	0x4
 8575 168c F3       		.byte	0xf3
 8576 168d 01       		.uleb128 0x1
 8577 168e 50       		.byte	0x50
 8578 168f 9F       		.byte	0x9f
 8579 1690 00000000 		.4byte	0
 8580 1694 00000000 		.4byte	0
 8581              	.LLST107:
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 209


 8582 1698 00000000 		.4byte	.LVL396
 8583 169c 02000000 		.4byte	.LVL397
 8584 16a0 0100     		.2byte	0x1
 8585 16a2 50       		.byte	0x50
 8586 16a3 02000000 		.4byte	.LVL397
 8587 16a7 04000000 		.4byte	.LFE52
 8588 16ab 0400     		.2byte	0x4
 8589 16ad F3       		.byte	0xf3
 8590 16ae 01       		.uleb128 0x1
 8591 16af 50       		.byte	0x50
 8592 16b0 9F       		.byte	0x9f
 8593 16b1 00000000 		.4byte	0
 8594 16b5 00000000 		.4byte	0
 8595              	.LLST108:
 8596 16b9 00000000 		.4byte	.LVL398
 8597 16bd 08000000 		.4byte	.LVL399
 8598 16c1 0100     		.2byte	0x1
 8599 16c3 50       		.byte	0x50
 8600 16c4 08000000 		.4byte	.LVL399
 8601 16c8 0A000000 		.4byte	.LVL400
 8602 16cc 0400     		.2byte	0x4
 8603 16ce F3       		.byte	0xf3
 8604 16cf 01       		.uleb128 0x1
 8605 16d0 50       		.byte	0x50
 8606 16d1 9F       		.byte	0x9f
 8607 16d2 0A000000 		.4byte	.LVL400
 8608 16d6 0C000000 		.4byte	.LVL401
 8609 16da 0100     		.2byte	0x1
 8610 16dc 50       		.byte	0x50
 8611 16dd 0C000000 		.4byte	.LVL401
 8612 16e1 0E000000 		.4byte	.LFE59
 8613 16e5 0400     		.2byte	0x4
 8614 16e7 F3       		.byte	0xf3
 8615 16e8 01       		.uleb128 0x1
 8616 16e9 50       		.byte	0x50
 8617 16ea 9F       		.byte	0x9f
 8618 16eb 00000000 		.4byte	0
 8619 16ef 00000000 		.4byte	0
 8620              	.LLST109:
 8621 16f3 00000000 		.4byte	.LVL398
 8622 16f7 08000000 		.4byte	.LVL399
 8623 16fb 0100     		.2byte	0x1
 8624 16fd 50       		.byte	0x50
 8625 16fe 08000000 		.4byte	.LVL399
 8626 1702 0A000000 		.4byte	.LVL400
 8627 1706 0400     		.2byte	0x4
 8628 1708 F3       		.byte	0xf3
 8629 1709 01       		.uleb128 0x1
 8630 170a 50       		.byte	0x50
 8631 170b 9F       		.byte	0x9f
 8632 170c 0A000000 		.4byte	.LVL400
 8633 1710 0C000000 		.4byte	.LVL401
 8634 1714 0100     		.2byte	0x1
 8635 1716 50       		.byte	0x50
 8636 1717 0C000000 		.4byte	.LVL401
 8637 171b 0E000000 		.4byte	.LFE59
 8638 171f 0400     		.2byte	0x4
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 210


 8639 1721 F3       		.byte	0xf3
 8640 1722 01       		.uleb128 0x1
 8641 1723 50       		.byte	0x50
 8642 1724 9F       		.byte	0x9f
 8643 1725 00000000 		.4byte	0
 8644 1729 00000000 		.4byte	0
 8645              	.LLST110:
 8646 172d 00000000 		.4byte	.LVL402
 8647 1731 0A000000 		.4byte	.LVL403
 8648 1735 0100     		.2byte	0x1
 8649 1737 50       		.byte	0x50
 8650 1738 0A000000 		.4byte	.LVL403
 8651 173c 0C000000 		.4byte	.LVL404
 8652 1740 0400     		.2byte	0x4
 8653 1742 F3       		.byte	0xf3
 8654 1743 01       		.uleb128 0x1
 8655 1744 50       		.byte	0x50
 8656 1745 9F       		.byte	0x9f
 8657 1746 0C000000 		.4byte	.LVL404
 8658 174a 0E000000 		.4byte	.LVL405
 8659 174e 0100     		.2byte	0x1
 8660 1750 50       		.byte	0x50
 8661 1751 0E000000 		.4byte	.LVL405
 8662 1755 10000000 		.4byte	.LFE61
 8663 1759 0400     		.2byte	0x4
 8664 175b F3       		.byte	0xf3
 8665 175c 01       		.uleb128 0x1
 8666 175d 50       		.byte	0x50
 8667 175e 9F       		.byte	0x9f
 8668 175f 00000000 		.4byte	0
 8669 1763 00000000 		.4byte	0
 8670              	.LLST111:
 8671 1767 00000000 		.4byte	.LVL402
 8672 176b 0A000000 		.4byte	.LVL403
 8673 176f 0100     		.2byte	0x1
 8674 1771 50       		.byte	0x50
 8675 1772 0A000000 		.4byte	.LVL403
 8676 1776 0C000000 		.4byte	.LVL404
 8677 177a 0400     		.2byte	0x4
 8678 177c F3       		.byte	0xf3
 8679 177d 01       		.uleb128 0x1
 8680 177e 50       		.byte	0x50
 8681 177f 9F       		.byte	0x9f
 8682 1780 0C000000 		.4byte	.LVL404
 8683 1784 0E000000 		.4byte	.LVL405
 8684 1788 0100     		.2byte	0x1
 8685 178a 50       		.byte	0x50
 8686 178b 0E000000 		.4byte	.LVL405
 8687 178f 10000000 		.4byte	.LFE61
 8688 1793 0400     		.2byte	0x4
 8689 1795 F3       		.byte	0xf3
 8690 1796 01       		.uleb128 0x1
 8691 1797 50       		.byte	0x50
 8692 1798 9F       		.byte	0x9f
 8693 1799 00000000 		.4byte	0
 8694 179d 00000000 		.4byte	0
 8695              	.LLST112:
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 211


 8696 17a1 0A000000 		.4byte	.LVL408
 8697 17a5 18000000 		.4byte	.LVL409
 8698 17a9 0100     		.2byte	0x1
 8699 17ab 52       		.byte	0x52
 8700 17ac 1C000000 		.4byte	.LVL411
 8701 17b0 32000000 		.4byte	.LVL415
 8702 17b4 0100     		.2byte	0x1
 8703 17b6 52       		.byte	0x52
 8704 17b7 36000000 		.4byte	.LVL416
 8705 17bb 3A000000 		.4byte	.LVL417
 8706 17bf 0100     		.2byte	0x1
 8707 17c1 52       		.byte	0x52
 8708 17c2 00000000 		.4byte	0
 8709 17c6 00000000 		.4byte	0
 8710              	.LLST113:
 8711 17ca 02000000 		.4byte	.LVL407
 8712 17ce 0A000000 		.4byte	.LVL408
 8713 17d2 0200     		.2byte	0x2
 8714 17d4 30       		.byte	0x30
 8715 17d5 9F       		.byte	0x9f
 8716 17d6 0A000000 		.4byte	.LVL408
 8717 17da 2C000000 		.4byte	.LVL412
 8718 17de 0100     		.2byte	0x1
 8719 17e0 55       		.byte	0x55
 8720 17e1 2E000000 		.4byte	.LVL413
 8721 17e5 32000000 		.4byte	.LVL415
 8722 17e9 0100     		.2byte	0x1
 8723 17eb 55       		.byte	0x55
 8724 17ec 32000000 		.4byte	.LVL415
 8725 17f0 36000000 		.4byte	.LVL416
 8726 17f4 0200     		.2byte	0x2
 8727 17f6 30       		.byte	0x30
 8728 17f7 9F       		.byte	0x9f
 8729 17f8 36000000 		.4byte	.LVL416
 8730 17fc 42000000 		.4byte	.LVL418
 8731 1800 0100     		.2byte	0x1
 8732 1802 55       		.byte	0x55
 8733 1803 00000000 		.4byte	0
 8734 1807 00000000 		.4byte	0
 8735              	.LLST114:
 8736 180b 00000000 		.4byte	.LVL419
 8737 180f 14000000 		.4byte	.LVL422
 8738 1813 0100     		.2byte	0x1
 8739 1815 50       		.byte	0x50
 8740 1816 14000000 		.4byte	.LVL422
 8741 181a 16000000 		.4byte	.LVL423
 8742 181e 0400     		.2byte	0x4
 8743 1820 F3       		.byte	0xf3
 8744 1821 01       		.uleb128 0x1
 8745 1822 50       		.byte	0x50
 8746 1823 9F       		.byte	0x9f
 8747 1824 16000000 		.4byte	.LVL423
 8748 1828 1E000000 		.4byte	.LVL425
 8749 182c 0100     		.2byte	0x1
 8750 182e 50       		.byte	0x50
 8751 182f 1E000000 		.4byte	.LVL425
 8752 1833 24000000 		.4byte	.LFE63
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 212


 8753 1837 0400     		.2byte	0x4
 8754 1839 F3       		.byte	0xf3
 8755 183a 01       		.uleb128 0x1
 8756 183b 50       		.byte	0x50
 8757 183c 9F       		.byte	0x9f
 8758 183d 00000000 		.4byte	0
 8759 1841 00000000 		.4byte	0
 8760              	.LLST115:
 8761 1845 00000000 		.4byte	.LVL419
 8762 1849 04000000 		.4byte	.LVL420
 8763 184d 0200     		.2byte	0x2
 8764 184f 30       		.byte	0x30
 8765 1850 9F       		.byte	0x9f
 8766 1851 04000000 		.4byte	.LVL420
 8767 1855 12000000 		.4byte	.LVL421
 8768 1859 0100     		.2byte	0x1
 8769 185b 52       		.byte	0x52
 8770 185c 16000000 		.4byte	.LVL423
 8771 1860 1E000000 		.4byte	.LVL425
 8772 1864 0100     		.2byte	0x1
 8773 1866 52       		.byte	0x52
 8774 1867 00000000 		.4byte	0
 8775 186b 00000000 		.4byte	0
 8776              	.LLST116:
 8777 186f 00000000 		.4byte	.LVL419
 8778 1873 14000000 		.4byte	.LVL422
 8779 1877 0200     		.2byte	0x2
 8780 1879 30       		.byte	0x30
 8781 187a 9F       		.byte	0x9f
 8782 187b 14000000 		.4byte	.LVL422
 8783 187f 16000000 		.4byte	.LVL423
 8784 1883 0100     		.2byte	0x1
 8785 1885 50       		.byte	0x50
 8786 1886 16000000 		.4byte	.LVL423
 8787 188a 1E000000 		.4byte	.LVL425
 8788 188e 0200     		.2byte	0x2
 8789 1890 30       		.byte	0x30
 8790 1891 9F       		.byte	0x9f
 8791 1892 1E000000 		.4byte	.LVL425
 8792 1896 24000000 		.4byte	.LFE63
 8793 189a 0100     		.2byte	0x1
 8794 189c 50       		.byte	0x50
 8795 189d 00000000 		.4byte	0
 8796 18a1 00000000 		.4byte	0
 8797              	.LLST117:
 8798 18a5 00000000 		.4byte	.LVL426
 8799 18a9 04000000 		.4byte	.LVL427
 8800 18ad 0200     		.2byte	0x2
 8801 18af 30       		.byte	0x30
 8802 18b0 9F       		.byte	0x9f
 8803 18b1 04000000 		.4byte	.LVL427
 8804 18b5 12000000 		.4byte	.LVL428
 8805 18b9 0100     		.2byte	0x1
 8806 18bb 52       		.byte	0x52
 8807 18bc 1C000000 		.4byte	.LVL429
 8808 18c0 22000000 		.4byte	.LVL431
 8809 18c4 0100     		.2byte	0x1
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 213


 8810 18c6 52       		.byte	0x52
 8811 18c7 00000000 		.4byte	0
 8812 18cb 00000000 		.4byte	0
 8813              	.LLST118:
 8814 18cf 00000000 		.4byte	.LVL432
 8815 18d3 07000000 		.4byte	.LVL434-1
 8816 18d7 0100     		.2byte	0x1
 8817 18d9 50       		.byte	0x50
 8818 18da 07000000 		.4byte	.LVL434-1
 8819 18de 0E000000 		.4byte	.LVL436
 8820 18e2 0100     		.2byte	0x1
 8821 18e4 54       		.byte	0x54
 8822 18e5 0E000000 		.4byte	.LVL436
 8823 18e9 10000000 		.4byte	.LFE53
 8824 18ed 0400     		.2byte	0x4
 8825 18ef F3       		.byte	0xf3
 8826 18f0 01       		.uleb128 0x1
 8827 18f1 50       		.byte	0x50
 8828 18f2 9F       		.byte	0x9f
 8829 18f3 00000000 		.4byte	0
 8830 18f7 00000000 		.4byte	0
 8831              	.LLST119:
 8832 18fb 04000000 		.4byte	.LVL433
 8833 18ff 07000000 		.4byte	.LVL434-1
 8834 1903 0100     		.2byte	0x1
 8835 1905 50       		.byte	0x50
 8836 1906 07000000 		.4byte	.LVL434-1
 8837 190a 0E000000 		.4byte	.LVL436
 8838 190e 0100     		.2byte	0x1
 8839 1910 54       		.byte	0x54
 8840 1911 0E000000 		.4byte	.LVL436
 8841 1915 10000000 		.4byte	.LFE53
 8842 1919 0400     		.2byte	0x4
 8843 191b F3       		.byte	0xf3
 8844 191c 01       		.uleb128 0x1
 8845 191d 50       		.byte	0x50
 8846 191e 9F       		.byte	0x9f
 8847 191f 00000000 		.4byte	0
 8848 1923 00000000 		.4byte	0
 8849              		.section	.debug_aranges,"",%progbits
 8850 0000 0C010000 		.4byte	0x10c
 8851 0004 0200     		.2byte	0x2
 8852 0006 00000000 		.4byte	.Ldebug_info0
 8853 000a 04       		.byte	0x4
 8854 000b 00       		.byte	0
 8855 000c 0000     		.2byte	0
 8856 000e 0000     		.2byte	0
 8857 0010 00000000 		.4byte	.LFB54
 8858 0014 14000000 		.4byte	.LFE54-.LFB54
 8859 0018 00000000 		.4byte	.LFB60
 8860 001c 1E000000 		.4byte	.LFE60-.LFB60
 8861 0020 00000000 		.4byte	.LFB58
 8862 0024 1C000000 		.4byte	.LFE58-.LFB58
 8863 0028 00000000 		.4byte	.LFB55
 8864 002c 82000000 		.4byte	.LFE55-.LFB55
 8865 0030 00000000 		.4byte	.LFB56
 8866 0034 24000000 		.4byte	.LFE56-.LFB56
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 214


 8867 0038 00000000 		.4byte	.LFB57
 8868 003c 6E000000 		.4byte	.LFE57-.LFB57
 8869 0040 00000000 		.4byte	.LFB34
 8870 0044 88000000 		.4byte	.LFE34-.LFB34
 8871 0048 00000000 		.4byte	.LFB36
 8872 004c 1C000000 		.4byte	.LFE36-.LFB36
 8873 0050 00000000 		.4byte	.LFB35
 8874 0054 52000000 		.4byte	.LFE35-.LFB35
 8875 0058 00000000 		.4byte	.LFB41
 8876 005c 24000000 		.4byte	.LFE41-.LFB41
 8877 0060 00000000 		.4byte	.LFB42
 8878 0064 EA000000 		.4byte	.LFE42-.LFB42
 8879 0068 00000000 		.4byte	.LFB37
 8880 006c 18000000 		.4byte	.LFE37-.LFB37
 8881 0070 00000000 		.4byte	.LFB38
 8882 0074 16000000 		.4byte	.LFE38-.LFB38
 8883 0078 00000000 		.4byte	.LFB39
 8884 007c 2E000000 		.4byte	.LFE39-.LFB39
 8885 0080 00000000 		.4byte	.LFB43
 8886 0084 84000000 		.4byte	.LFE43-.LFB43
 8887 0088 00000000 		.4byte	.LFB44
 8888 008c 70000000 		.4byte	.LFE44-.LFB44
 8889 0090 00000000 		.4byte	.LFB45
 8890 0094 E4000000 		.4byte	.LFE45-.LFB45
 8891 0098 00000000 		.4byte	.LFB46
 8892 009c 1C010000 		.4byte	.LFE46-.LFB46
 8893 00a0 00000000 		.4byte	.LFB40
 8894 00a4 2E000000 		.4byte	.LFE40-.LFB40
 8895 00a8 00000000 		.4byte	.LFB47
 8896 00ac E4000000 		.4byte	.LFE47-.LFB47
 8897 00b0 00000000 		.4byte	.LFB48
 8898 00b4 7E000000 		.4byte	.LFE48-.LFB48
 8899 00b8 00000000 		.4byte	.LFB49
 8900 00bc 2E000000 		.4byte	.LFE49-.LFB49
 8901 00c0 00000000 		.4byte	.LFB50
 8902 00c4 12000000 		.4byte	.LFE50-.LFB50
 8903 00c8 00000000 		.4byte	.LFB51
 8904 00cc 16000000 		.4byte	.LFE51-.LFB51
 8905 00d0 00000000 		.4byte	.LFB52
 8906 00d4 04000000 		.4byte	.LFE52-.LFB52
 8907 00d8 00000000 		.4byte	.LFB59
 8908 00dc 0E000000 		.4byte	.LFE59-.LFB59
 8909 00e0 00000000 		.4byte	.LFB61
 8910 00e4 10000000 		.4byte	.LFE61-.LFB61
 8911 00e8 00000000 		.4byte	.LFB62
 8912 00ec 48000000 		.4byte	.LFE62-.LFB62
 8913 00f0 00000000 		.4byte	.LFB63
 8914 00f4 24000000 		.4byte	.LFE63-.LFB63
 8915 00f8 00000000 		.4byte	.LFB64
 8916 00fc 28000000 		.4byte	.LFE64-.LFB64
 8917 0100 00000000 		.4byte	.LFB53
 8918 0104 10000000 		.4byte	.LFE53-.LFB53
 8919 0108 00000000 		.4byte	0
 8920 010c 00000000 		.4byte	0
 8921              		.section	.debug_ranges,"",%progbits
 8922              	.Ldebug_ranges0:
 8923 0000 1E000000 		.4byte	.LBB4
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 215


 8924 0004 66000000 		.4byte	.LBE4
 8925 0008 6A000000 		.4byte	.LBB6
 8926 000c 78000000 		.4byte	.LBE6
 8927 0010 00000000 		.4byte	0
 8928 0014 00000000 		.4byte	0
 8929 0018 14000000 		.4byte	.LBB8
 8930 001c 54000000 		.4byte	.LBE8
 8931 0020 58000000 		.4byte	.LBB10
 8932 0024 66000000 		.4byte	.LBE10
 8933 0028 00000000 		.4byte	0
 8934 002c 00000000 		.4byte	0
 8935 0030 16000000 		.4byte	.LBB16
 8936 0034 60000000 		.4byte	.LBE16
 8937 0038 64000000 		.4byte	.LBB18
 8938 003c 72000000 		.4byte	.LBE18
 8939 0040 00000000 		.4byte	0
 8940 0044 00000000 		.4byte	0
 8941 0048 00000000 		.4byte	.LFB54
 8942 004c 14000000 		.4byte	.LFE54
 8943 0050 00000000 		.4byte	.LFB60
 8944 0054 1E000000 		.4byte	.LFE60
 8945 0058 00000000 		.4byte	.LFB58
 8946 005c 1C000000 		.4byte	.LFE58
 8947 0060 00000000 		.4byte	.LFB55
 8948 0064 82000000 		.4byte	.LFE55
 8949 0068 00000000 		.4byte	.LFB56
 8950 006c 24000000 		.4byte	.LFE56
 8951 0070 00000000 		.4byte	.LFB57
 8952 0074 6E000000 		.4byte	.LFE57
 8953 0078 00000000 		.4byte	.LFB34
 8954 007c 88000000 		.4byte	.LFE34
 8955 0080 00000000 		.4byte	.LFB36
 8956 0084 1C000000 		.4byte	.LFE36
 8957 0088 00000000 		.4byte	.LFB35
 8958 008c 52000000 		.4byte	.LFE35
 8959 0090 00000000 		.4byte	.LFB41
 8960 0094 24000000 		.4byte	.LFE41
 8961 0098 00000000 		.4byte	.LFB42
 8962 009c EA000000 		.4byte	.LFE42
 8963 00a0 00000000 		.4byte	.LFB37
 8964 00a4 18000000 		.4byte	.LFE37
 8965 00a8 00000000 		.4byte	.LFB38
 8966 00ac 16000000 		.4byte	.LFE38
 8967 00b0 00000000 		.4byte	.LFB39
 8968 00b4 2E000000 		.4byte	.LFE39
 8969 00b8 00000000 		.4byte	.LFB43
 8970 00bc 84000000 		.4byte	.LFE43
 8971 00c0 00000000 		.4byte	.LFB44
 8972 00c4 70000000 		.4byte	.LFE44
 8973 00c8 00000000 		.4byte	.LFB45
 8974 00cc E4000000 		.4byte	.LFE45
 8975 00d0 00000000 		.4byte	.LFB46
 8976 00d4 1C010000 		.4byte	.LFE46
 8977 00d8 00000000 		.4byte	.LFB40
 8978 00dc 2E000000 		.4byte	.LFE40
 8979 00e0 00000000 		.4byte	.LFB47
 8980 00e4 E4000000 		.4byte	.LFE47
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 216


 8981 00e8 00000000 		.4byte	.LFB48
 8982 00ec 7E000000 		.4byte	.LFE48
 8983 00f0 00000000 		.4byte	.LFB49
 8984 00f4 2E000000 		.4byte	.LFE49
 8985 00f8 00000000 		.4byte	.LFB50
 8986 00fc 12000000 		.4byte	.LFE50
 8987 0100 00000000 		.4byte	.LFB51
 8988 0104 16000000 		.4byte	.LFE51
 8989 0108 00000000 		.4byte	.LFB52
 8990 010c 04000000 		.4byte	.LFE52
 8991 0110 00000000 		.4byte	.LFB59
 8992 0114 0E000000 		.4byte	.LFE59
 8993 0118 00000000 		.4byte	.LFB61
 8994 011c 10000000 		.4byte	.LFE61
 8995 0120 00000000 		.4byte	.LFB62
 8996 0124 48000000 		.4byte	.LFE62
 8997 0128 00000000 		.4byte	.LFB63
 8998 012c 24000000 		.4byte	.LFE63
 8999 0130 00000000 		.4byte	.LFB64
 9000 0134 28000000 		.4byte	.LFE64
 9001 0138 00000000 		.4byte	.LFB53
 9002 013c 10000000 		.4byte	.LFE53
 9003 0140 00000000 		.4byte	0
 9004 0144 00000000 		.4byte	0
 9005              		.section	.debug_line,"",%progbits
 9006              	.Ldebug_line0:
 9007 0000 D4060000 		.section	.debug_str,"MS",%progbits,1
 9007      0200FC01 
 9007      00000201 
 9007      FB0E0D00 
 9007      01010101 
 9008              	.LASF31:
 9009 0000 75784E75 		.ascii	"uxNumberOfItems\000"
 9009      6D626572 
 9009      4F664974 
 9009      656D7300 
 9010              	.LASF158:
 9011 0010 46726565 		.ascii	"FreeRTOS\\Source\\queue.c\000"
 9011      52544F53 
 9011      5C536F75 
 9011      7263655C 
 9011      71756575 
 9012              	.LASF137:
 9013 0028 76506F72 		.ascii	"vPortExitCritical\000"
 9013      74457869 
 9013      74437269 
 9013      74696361 
 9013      6C00
 9014              	.LASF58:
 9015 003a 53656D61 		.ascii	"SemaphoreData\000"
 9015      70686F72 
 9015      65446174 
 9015      6100
 9016              	.LASF141:
 9017 0048 76506F72 		.ascii	"vPortYield\000"
 9017      74596965 
 9017      6C6400
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 217


 9018              	.LASF160:
 9019 0053 74736B54 		.ascii	"tskTaskControlBlock\000"
 9019      61736B43 
 9019      6F6E7472 
 9019      6F6C426C 
 9019      6F636B00 
 9020              	.LASF61:
 9021 0067 53656D61 		.ascii	"SemaphoreData_t\000"
 9021      70686F72 
 9021      65446174 
 9021      615F7400 
 9022              	.LASF114:
 9023 0077 78517565 		.ascii	"xQueueReceive\000"
 9023      75655265 
 9023      63656976 
 9023      6500
 9024              	.LASF122:
 9025 0085 78517565 		.ascii	"xQueueReceiveFromISR\000"
 9025      75655265 
 9025      63656976 
 9025      6546726F 
 9025      6D495352 
 9026              	.LASF48:
 9027 009a 78546173 		.ascii	"xTasksWaitingToReceive\000"
 9027      6B735761 
 9027      6974696E 
 9027      67546F52 
 9027      65636569 
 9028              	.LASF109:
 9029 00b1 70784869 		.ascii	"pxHigherPriorityTaskWoken\000"
 9029      67686572 
 9029      5072696F 
 9029      72697479 
 9029      5461736B 
 9030              	.LASF107:
 9031 00cb 70784D75 		.ascii	"pxMutex\000"
 9031      74657800 
 9032              	.LASF115:
 9033 00d3 78517565 		.ascii	"xQueueSemaphoreTake\000"
 9033      75655365 
 9033      6D617068 
 9033      6F726554 
 9033      616B6500 
 9034              	.LASF0:
 9035 00e7 756E7369 		.ascii	"unsigned int\000"
 9035      676E6564 
 9035      20696E74 
 9035      00
 9036              	.LASF32:
 9037 00f4 7078496E 		.ascii	"pxIndex\000"
 9037      64657800 
 9038              	.LASF39:
 9039 00fc 7854494D 		.ascii	"xTIME_OUT\000"
 9039      455F4F55 
 9039      5400
 9040              	.LASF119:
 9041 0106 78517565 		.ascii	"xQueueTakeMutexRecursive\000"
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 218


 9041      75655461 
 9041      6B654D75 
 9041      74657852 
 9041      65637572 
 9042              	.LASF88:
 9043 011f 70784E65 		.ascii	"pxNewQueue\000"
 9043      77517565 
 9043      756500
 9044              	.LASF29:
 9045 012a 784C4953 		.ascii	"xLIST_ITEM\000"
 9045      545F4954 
 9045      454D00
 9046              	.LASF66:
 9047 0135 51554555 		.ascii	"QUEUE_REGISTRY_ITEM\000"
 9047      455F5245 
 9047      47495354 
 9047      52595F49 
 9047      54454D00 
 9048              	.LASF47:
 9049 0149 78546173 		.ascii	"xTasksWaitingToSend\000"
 9049      6B735761 
 9049      6974696E 
 9049      67546F53 
 9049      656E6400 
 9050              	.LASF126:
 9051 015d 75785175 		.ascii	"uxQueueSpacesAvailable\000"
 9051      65756553 
 9051      70616365 
 9051      73417661 
 9051      696C6162 
 9052              	.LASF53:
 9053 0174 6354784C 		.ascii	"cTxLock\000"
 9053      6F636B00 
 9054              	.LASF40:
 9055 017c 784F7665 		.ascii	"xOverflowCount\000"
 9055      72666C6F 
 9055      77436F75 
 9055      6E7400
 9056              	.LASF136:
 9057 018b 76506F72 		.ascii	"vPortEnterCritical\000"
 9057      74456E74 
 9057      65724372 
 9057      69746963 
 9057      616C00
 9058              	.LASF65:
 9059 019e 51756575 		.ascii	"Queue_t\000"
 9059      655F7400 
 9060              	.LASF97:
 9061 01a6 78436F70 		.ascii	"xCopyPosition\000"
 9061      79506F73 
 9061      6974696F 
 9061      6E00
 9062              	.LASF125:
 9063 01b4 75785265 		.ascii	"uxReturn\000"
 9063      7475726E 
 9063      00
 9064              	.LASF150:
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 219


 9065 01bd 75785461 		.ascii	"uxTaskGetNumberOfTasks\000"
 9065      736B4765 
 9065      744E756D 
 9065      6265724F 
 9065      66546173 
 9066              	.LASF70:
 9067 01d4 51756575 		.ascii	"QueueRegistryItem_t\000"
 9067      65526567 
 9067      69737472 
 9067      79497465 
 9067      6D5F7400 
 9068              	.LASF135:
 9069 01e8 76517565 		.ascii	"vQueueDelete\000"
 9069      75654465 
 9069      6C657465 
 9069      00
 9070              	.LASF56:
 9071 01f5 70635265 		.ascii	"pcReadFrom\000"
 9071      61644672 
 9071      6F6D00
 9072              	.LASF134:
 9073 0200 76517565 		.ascii	"vQueueUnregisterQueue\000"
 9073      7565556E 
 9073      72656769 
 9073      73746572 
 9073      51756575 
 9074              	.LASF110:
 9075 0216 75785361 		.ascii	"uxSavedInterruptStatus\000"
 9075      76656449 
 9075      6E746572 
 9075      72757074 
 9075      53746174 
 9076              	.LASF84:
 9077 022d 70727649 		.ascii	"prvInitialiseNewQueue\000"
 9077      6E697469 
 9077      616C6973 
 9077      654E6577 
 9077      51756575 
 9078              	.LASF18:
 9079 0243 75696E74 		.ascii	"uint32_t\000"
 9079      33325F74 
 9079      00
 9080              	.LASF16:
 9081 024c 696E7438 		.ascii	"int8_t\000"
 9081      5F7400
 9082              	.LASF104:
 9083 0253 75784D75 		.ascii	"uxMutexSize\000"
 9083      74657853 
 9083      697A6500 
 9084              	.LASF99:
 9085 025f 78596965 		.ascii	"xYieldRequired\000"
 9085      6C645265 
 9085      71756972 
 9085      656400
 9086              	.LASF62:
 9087 026e 78517565 		.ascii	"xQueue\000"
 9087      756500
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 220


 9088              	.LASF19:
 9089 0275 666C6F61 		.ascii	"float\000"
 9089      7400
 9090              	.LASF44:
 9091 027b 51756575 		.ascii	"QueueDefinition\000"
 9091      65446566 
 9091      696E6974 
 9091      696F6E00 
 9092              	.LASF159:
 9093 028b 433A5C55 		.ascii	"C:\\Users\\tyork\\Documents\\PSoC Creator\\ECE381_S"
 9093      73657273 
 9093      5C74796F 
 9093      726B5C44 
 9093      6F63756D 
 9094 02b9 5032335F 		.ascii	"P23_Lab08_FreeRTOS\\Design01.cydsn\000"
 9094      4C616230 
 9094      385F4672 
 9094      65655254 
 9094      4F535C44 
 9095              	.LASF13:
 9096 02db 6C6F6E67 		.ascii	"long long unsigned int\000"
 9096      206C6F6E 
 9096      6720756E 
 9096      7369676E 
 9096      65642069 
 9097              	.LASF76:
 9098 02f2 70727649 		.ascii	"prvIsQueueEmpty\000"
 9098      73517565 
 9098      7565456D 
 9098      70747900 
 9099              	.LASF80:
 9100 0302 70764275 		.ascii	"pvBuffer\000"
 9100      66666572 
 9100      00
 9101              	.LASF71:
 9102 030b 70727647 		.ascii	"prvGetDisinheritPriorityAfterTimeout\000"
 9102      65744469 
 9102      73696E68 
 9102      65726974 
 9102      5072696F 
 9103              	.LASF26:
 9104 0330 70785072 		.ascii	"pxPrevious\000"
 9104      6576696F 
 9104      757300
 9105              	.LASF49:
 9106 033b 75784D65 		.ascii	"uxMessagesWaiting\000"
 9106      73736167 
 9106      65735761 
 9106      6974696E 
 9106      6700
 9107              	.LASF63:
 9108 034d 7853656D 		.ascii	"xSemaphore\000"
 9108      6170686F 
 9108      726500
 9109              	.LASF143:
 9110 0358 7076506F 		.ascii	"pvPortMalloc\000"
 9110      72744D61 
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 221


 9110      6C6C6F63 
 9110      00
 9111              	.LASF145:
 9112 0365 76546173 		.ascii	"vTaskSuspendAll\000"
 9112      6B537573 
 9112      70656E64 
 9112      416C6C00 
 9113              	.LASF111:
 9114 0375 75785072 		.ascii	"uxPreviousMessagesWaiting\000"
 9114      6576696F 
 9114      75734D65 
 9114      73736167 
 9114      65735761 
 9115              	.LASF120:
 9116 038f 78517565 		.ascii	"xQueuePeek\000"
 9116      75655065 
 9116      656B00
 9117              	.LASF157:
 9118 039a 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 9118      43313120 
 9118      352E342E 
 9118      31203230 
 9118      31363036 
 9119 03cd 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -O"
 9119      20726576 
 9119      6973696F 
 9119      6E203233 
 9119      37373135 
 9120 0400 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 9120      66756E63 
 9120      74696F6E 
 9120      2D736563 
 9120      74696F6E 
 9121              	.LASF98:
 9122 0428 78456E74 		.ascii	"xEntryTimeSet\000"
 9122      72795469 
 9122      6D655365 
 9122      7400
 9123              	.LASF3:
 9124 0436 73697A65 		.ascii	"size_t\000"
 9124      5F7400
 9125              	.LASF100:
 9126 043d 7854696D 		.ascii	"xTimeOut\000"
 9126      654F7574 
 9126      00
 9127              	.LASF68:
 9128 0446 7848616E 		.ascii	"xHandle\000"
 9128      646C6500 
 9129              	.LASF67:
 9130 044e 70635175 		.ascii	"pcQueueName\000"
 9130      6575654E 
 9130      616D6500 
 9131              	.LASF35:
 9132 045a 784D494E 		.ascii	"xMINI_LIST_ITEM\000"
 9132      495F4C49 
 9132      53545F49 
 9132      54454D00 
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 222


 9133              	.LASF30:
 9134 046a 784C4953 		.ascii	"xLIST\000"
 9134      5400
 9135              	.LASF108:
 9136 0470 78517565 		.ascii	"xQueueGenericSendFromISR\000"
 9136      75654765 
 9136      6E657269 
 9136      6353656E 
 9136      6446726F 
 9137              	.LASF77:
 9138 0489 70727643 		.ascii	"prvCopyDataToQueue\000"
 9138      6F707944 
 9138      61746154 
 9138      6F517565 
 9138      756500
 9139              	.LASF95:
 9140 049c 78517565 		.ascii	"xQueueGenericSend\000"
 9140      75654765 
 9140      6E657269 
 9140      6353656E 
 9140      6400
 9141              	.LASF147:
 9142 04ae 76546173 		.ascii	"vTaskPlaceOnEventList\000"
 9142      6B506C61 
 9142      63654F6E 
 9142      4576656E 
 9142      744C6973 
 9143              	.LASF153:
 9144 04c4 70765461 		.ascii	"pvTaskIncrementMutexHeldCount\000"
 9144      736B496E 
 9144      6372656D 
 9144      656E744D 
 9144      75746578 
 9145              	.LASF51:
 9146 04e2 75784974 		.ascii	"uxItemSize\000"
 9146      656D5369 
 9146      7A6500
 9147              	.LASF94:
 9148 04ed 7578496E 		.ascii	"uxInitialCount\000"
 9148      69746961 
 9148      6C436F75 
 9148      6E7400
 9149              	.LASF138:
 9150 04fc 78546173 		.ascii	"xTaskPriorityDisinherit\000"
 9150      6B507269 
 9150      6F726974 
 9150      79446973 
 9150      696E6865 
 9151              	.LASF103:
 9152 0514 75784D75 		.ascii	"uxMutexLength\000"
 9152      7465784C 
 9152      656E6774 
 9152      6800
 9153              	.LASF15:
 9154 0522 63686172 		.ascii	"char\000"
 9154      00
 9155              	.LASF34:
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 223


 9156 0527 4C697374 		.ascii	"ListItem_t\000"
 9156      4974656D 
 9156      5F7400
 9157              	.LASF72:
 9158 0532 70727649 		.ascii	"prvIsQueueFull\000"
 9158      73517565 
 9158      75654675 
 9158      6C6C00
 9159              	.LASF54:
 9160 0541 51756575 		.ascii	"QueuePointers\000"
 9160      65506F69 
 9160      6E746572 
 9160      7300
 9161              	.LASF22:
 9162 054f 55426173 		.ascii	"UBaseType_t\000"
 9162      65547970 
 9162      655F7400 
 9163              	.LASF113:
 9164 055b 78517565 		.ascii	"xQueueGiveFromISR\000"
 9164      75654769 
 9164      76654672 
 9164      6F6D4953 
 9164      5200
 9165              	.LASF161:
 9166 056d 78517565 		.ascii	"xQueueRegistry\000"
 9166      75655265 
 9166      67697374 
 9166      727900
 9167              	.LASF43:
 9168 057c 51756575 		.ascii	"QueueHandle_t\000"
 9168      6548616E 
 9168      646C655F 
 9168      7400
 9169              	.LASF33:
 9170 058a 784C6973 		.ascii	"xListEnd\000"
 9170      74456E64 
 9170      00
 9171              	.LASF127:
 9172 0593 75785175 		.ascii	"uxQueueMessagesWaitingFromISR\000"
 9172      6575654D 
 9172      65737361 
 9172      67657357 
 9172      61697469 
 9173              	.LASF36:
 9174 05b1 4D696E69 		.ascii	"MiniListItem_t\000"
 9174      4C697374 
 9174      4974656D 
 9174      5F7400
 9175              	.LASF17:
 9176 05c0 75696E74 		.ascii	"uint8_t\000"
 9176      385F7400 
 9177              	.LASF69:
 9178 05c8 78517565 		.ascii	"xQueueRegistryItem\000"
 9178      75655265 
 9178      67697374 
 9178      72794974 
 9178      656D00
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 224


 9179              	.LASF90:
 9180 05db 78517565 		.ascii	"xQueueGenericCreate\000"
 9180      75654765 
 9180      6E657269 
 9180      63437265 
 9180      61746500 
 9181              	.LASF102:
 9182 05ef 78517565 		.ascii	"xQueueCreateMutex\000"
 9182      75654372 
 9182      65617465 
 9182      4D757465 
 9182      7800
 9183              	.LASF1:
 9184 0601 6C6F6E67 		.ascii	"long long int\000"
 9184      206C6F6E 
 9184      6720696E 
 9184      7400
 9185              	.LASF101:
 9186 060f 70727649 		.ascii	"prvInitialiseMutex\000"
 9186      6E697469 
 9186      616C6973 
 9186      654D7574 
 9186      657800
 9187              	.LASF21:
 9188 0622 42617365 		.ascii	"BaseType_t\000"
 9188      54797065 
 9188      5F7400
 9189              	.LASF86:
 9190 062d 70756351 		.ascii	"pucQueueStorage\000"
 9190      75657565 
 9190      53746F72 
 9190      61676500 
 9191              	.LASF106:
 9192 063d 784D7574 		.ascii	"xMutex\000"
 9192      657800
 9193              	.LASF41:
 9194 0644 7854696D 		.ascii	"xTimeOnEntering\000"
 9194      654F6E45 
 9194      6E746572 
 9194      696E6700 
 9195              	.LASF133:
 9196 0654 76517565 		.ascii	"vQueueAddToRegistry\000"
 9196      75654164 
 9196      64546F52 
 9196      65676973 
 9196      74727900 
 9197              	.LASF25:
 9198 0668 70784E65 		.ascii	"pxNext\000"
 9198      787400
 9199              	.LASF83:
 9200 066f 784E6577 		.ascii	"xNewQueue\000"
 9200      51756575 
 9200      6500
 9201              	.LASF93:
 9202 0679 75784D61 		.ascii	"uxMaxCount\000"
 9202      78436F75 
 9202      6E7400
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 225


 9203              	.LASF42:
 9204 0684 54696D65 		.ascii	"TimeOut_t\000"
 9204      4F75745F 
 9204      7400
 9205              	.LASF144:
 9206 068e 76546173 		.ascii	"vTaskInternalSetTimeOutState\000"
 9206      6B496E74 
 9206      65726E61 
 9206      6C536574 
 9206      54696D65 
 9207              	.LASF121:
 9208 06ab 70634F72 		.ascii	"pcOriginalReadPosition\000"
 9208      6967696E 
 9208      616C5265 
 9208      6164506F 
 9208      73697469 
 9209              	.LASF38:
 9210 06c2 5461736B 		.ascii	"TaskHandle_t\000"
 9210      48616E64 
 9210      6C655F74 
 9210      00
 9211              	.LASF74:
 9212 06cf 75784869 		.ascii	"uxHighestPriorityOfWaitingTasks\000"
 9212      67686573 
 9212      74507269 
 9212      6F726974 
 9212      794F6657 
 9213              	.LASF87:
 9214 06ef 75635175 		.ascii	"ucQueueType\000"
 9214      65756554 
 9214      79706500 
 9215              	.LASF37:
 9216 06fb 4C697374 		.ascii	"List_t\000"
 9216      5F7400
 9217              	.LASF117:
 9218 0702 75785365 		.ascii	"uxSemaphoreCount\000"
 9218      6D617068 
 9218      6F726543 
 9218      6F756E74 
 9218      00
 9219              	.LASF46:
 9220 0713 70635772 		.ascii	"pcWriteTo\000"
 9220      69746554 
 9220      6F00
 9221              	.LASF23:
 9222 071d 5469636B 		.ascii	"TickType_t\000"
 9222      54797065 
 9222      5F7400
 9223              	.LASF4:
 9224 0728 5F5F696E 		.ascii	"__int8_t\000"
 9224      74385F74 
 9224      00
 9225              	.LASF85:
 9226 0731 75785175 		.ascii	"uxQueueLength\000"
 9226      6575654C 
 9226      656E6774 
 9226      6800
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 226


 9227              	.LASF2:
 9228 073f 6C6F6E67 		.ascii	"long double\000"
 9228      20646F75 
 9228      626C6500 
 9229              	.LASF116:
 9230 074b 78496E68 		.ascii	"xInheritanceOccurred\000"
 9230      65726974 
 9230      616E6365 
 9230      4F636375 
 9230      72726564 
 9231              	.LASF112:
 9232 0760 75784E75 		.ascii	"uxNumberOfTasks\000"
 9232      6D626572 
 9232      4F665461 
 9232      736B7300 
 9233              	.LASF28:
 9234 0770 7076436F 		.ascii	"pvContainer\000"
 9234      6E746169 
 9234      6E657200 
 9235              	.LASF131:
 9236 077c 70635175 		.ascii	"pcQueueGetName\000"
 9236      65756547 
 9236      65744E61 
 9236      6D6500
 9237              	.LASF57:
 9238 078b 51756575 		.ascii	"QueuePointers_t\000"
 9238      65506F69 
 9238      6E746572 
 9238      735F7400 
 9239              	.LASF132:
 9240 079b 70635265 		.ascii	"pcReturn\000"
 9240      7475726E 
 9240      00
 9241              	.LASF50:
 9242 07a4 75784C65 		.ascii	"uxLength\000"
 9242      6E677468 
 9242      00
 9243              	.LASF8:
 9244 07ad 73686F72 		.ascii	"short int\000"
 9244      7420696E 
 9244      7400
 9245              	.LASF24:
 9246 07b7 78497465 		.ascii	"xItemValue\000"
 9246      6D56616C 
 9246      756500
 9247              	.LASF10:
 9248 07c2 6C6F6E67 		.ascii	"long int\000"
 9248      20696E74 
 9248      00
 9249              	.LASF91:
 9250 07cb 78517565 		.ascii	"xQueueSizeInBytes\000"
 9250      75655369 
 9250      7A65496E 
 9250      42797465 
 9250      7300
 9251              	.LASF148:
 9252 07dd 78546173 		.ascii	"xTaskResumeAll\000"
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 227


 9252      6B526573 
 9252      756D6541 
 9252      6C6C00
 9253              	.LASF78:
 9254 07ec 70764974 		.ascii	"pvItemToQueue\000"
 9254      656D546F 
 9254      51756575 
 9254      6500
 9255              	.LASF146:
 9256 07fa 78546173 		.ascii	"xTaskCheckForTimeOut\000"
 9256      6B436865 
 9256      636B466F 
 9256      7254696D 
 9256      654F7574 
 9257              	.LASF156:
 9258 080f 76506F72 		.ascii	"vPortFree\000"
 9258      74467265 
 9258      6500
 9259              	.LASF129:
 9260 0819 78517565 		.ascii	"xQueueIsQueueFullFromISR\000"
 9260      75654973 
 9260      51756575 
 9260      6546756C 
 9260      6C46726F 
 9261              	.LASF124:
 9262 0832 75785175 		.ascii	"uxQueueMessagesWaiting\000"
 9262      6575654D 
 9262      65737361 
 9262      67657357 
 9262      61697469 
 9263              	.LASF55:
 9264 0849 70635461 		.ascii	"pcTail\000"
 9264      696C00
 9265              	.LASF6:
 9266 0850 5F5F7569 		.ascii	"__uint8_t\000"
 9266      6E74385F 
 9266      7400
 9267              	.LASF73:
 9268 085a 70785175 		.ascii	"pxQueue\000"
 9268      65756500 
 9269              	.LASF75:
 9270 0862 78526574 		.ascii	"xReturn\000"
 9270      75726E00 
 9271              	.LASF14:
 9272 086a 73697A65 		.ascii	"sizetype\000"
 9272      74797065 
 9272      00
 9273              	.LASF140:
 9274 0873 76546173 		.ascii	"vTaskMissedYield\000"
 9274      6B4D6973 
 9274      73656459 
 9274      69656C64 
 9274      00
 9275              	.LASF12:
 9276 0884 6C6F6E67 		.ascii	"long unsigned int\000"
 9276      20756E73 
 9276      69676E65 
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 228


 9276      6420696E 
 9276      7400
 9277              	.LASF155:
 9278 0896 78546173 		.ascii	"xTaskPriorityInherit\000"
 9278      6B507269 
 9278      6F726974 
 9278      79496E68 
 9278      65726974 
 9279              	.LASF60:
 9280 08ab 75785265 		.ascii	"uxRecursiveCallCount\000"
 9280      63757273 
 9280      69766543 
 9280      616C6C43 
 9280      6F756E74 
 9281              	.LASF123:
 9282 08c0 78517565 		.ascii	"xQueuePeekFromISR\000"
 9282      75655065 
 9282      656B4672 
 9282      6F6D4953 
 9282      5200
 9283              	.LASF118:
 9284 08d2 75784869 		.ascii	"uxHighestWaitingPriority\000"
 9284      67686573 
 9284      74576169 
 9284      74696E67 
 9284      5072696F 
 9285              	.LASF130:
 9286 08eb 7078456E 		.ascii	"pxEntryToWrite\000"
 9286      74727954 
 9286      6F577269 
 9286      746500
 9287              	.LASF7:
 9288 08fa 756E7369 		.ascii	"unsigned char\000"
 9288      676E6564 
 9288      20636861 
 9288      7200
 9289              	.LASF11:
 9290 0908 5F5F7569 		.ascii	"__uint32_t\000"
 9290      6E743332 
 9290      5F7400
 9291              	.LASF142:
 9292 0913 764C6973 		.ascii	"vListInitialise\000"
 9292      74496E69 
 9292      7469616C 
 9292      69736500 
 9293              	.LASF81:
 9294 0923 70727643 		.ascii	"prvCopyDataFromQueue\000"
 9294      6F707944 
 9294      61746146 
 9294      726F6D51 
 9294      75657565 
 9295              	.LASF154:
 9296 0938 76546173 		.ascii	"vTaskPriorityDisinheritAfterTimeout\000"
 9296      6B507269 
 9296      6F726974 
 9296      79446973 
 9296      696E6865 
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 229


 9297              	.LASF96:
 9298 095c 78546963 		.ascii	"xTicksToWait\000"
 9298      6B73546F 
 9298      57616974 
 9298      00
 9299              	.LASF27:
 9300 0969 70764F77 		.ascii	"pvOwner\000"
 9300      6E657200 
 9301              	.LASF152:
 9302 0971 76436C65 		.ascii	"vClearInterruptMaskFromISR\000"
 9302      6172496E 
 9302      74657272 
 9302      7570744D 
 9302      61736B46 
 9303              	.LASF149:
 9304 098c 78546173 		.ascii	"xTaskGetCurrentTaskHandle\000"
 9304      6B476574 
 9304      43757272 
 9304      656E7454 
 9304      61736B48 
 9305              	.LASF45:
 9306 09a6 70634865 		.ascii	"pcHead\000"
 9306      616400
 9307              	.LASF105:
 9308 09ad 78517565 		.ascii	"xQueueGiveMutexRecursive\000"
 9308      75654769 
 9308      76654D75 
 9308      74657852 
 9308      65637572 
 9309              	.LASF82:
 9310 09c6 70727655 		.ascii	"prvUnlockQueue\000"
 9310      6E6C6F63 
 9310      6B517565 
 9310      756500
 9311              	.LASF89:
 9312 09d5 78517565 		.ascii	"xQueueGenericReset\000"
 9312      75654765 
 9312      6E657269 
 9312      63526573 
 9312      657400
 9313              	.LASF128:
 9314 09e8 78517565 		.ascii	"xQueueIsQueueEmptyFromISR\000"
 9314      75654973 
 9314      51756575 
 9314      65456D70 
 9314      74794672 
 9315              	.LASF5:
 9316 0a02 7369676E 		.ascii	"signed char\000"
 9316      65642063 
 9316      68617200 
 9317              	.LASF9:
 9318 0a0e 73686F72 		.ascii	"short unsigned int\000"
 9318      7420756E 
 9318      7369676E 
 9318      65642069 
 9318      6E7400
 9319              	.LASF162:
ARM GAS  C:\Users\tyork\AppData\Local\Temp\cceyb3cc.s 			page 230


 9320 0a21 6D656D63 		.ascii	"memcpy\000"
 9320      707900
 9321              	.LASF64:
 9322 0a28 78515545 		.ascii	"xQUEUE\000"
 9322      554500
 9323              	.LASF59:
 9324 0a2f 784D7574 		.ascii	"xMutexHolder\000"
 9324      6578486F 
 9324      6C646572 
 9324      00
 9325              	.LASF20:
 9326 0a3c 646F7562 		.ascii	"double\000"
 9326      6C6500
 9327              	.LASF79:
 9328 0a43 78506F73 		.ascii	"xPosition\000"
 9328      6974696F 
 9328      6E00
 9329              	.LASF52:
 9330 0a4d 6352784C 		.ascii	"cRxLock\000"
 9330      6F636B00 
 9331              	.LASF151:
 9332 0a55 756C5365 		.ascii	"ulSetInterruptMaskFromISR\000"
 9332      74496E74 
 9332      65727275 
 9332      70744D61 
 9332      736B4672 
 9333              	.LASF139:
 9334 0a6f 78546173 		.ascii	"xTaskRemoveFromEventList\000"
 9334      6B52656D 
 9334      6F766546 
 9334      726F6D45 
 9334      76656E74 
 9335              	.LASF92:
 9336 0a88 78517565 		.ascii	"xQueueCreateCountingSemaphore\000"
 9336      75654372 
 9336      65617465 
 9336      436F756E 
 9336      74696E67 
 9337              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
