ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"tasks.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  20              		.align	2
  21              		.code	16
  22              		.thumb_func
  23              		.type	prvTaskIsTaskSuspended, %function
  24              	prvTaskIsTaskSuspended:
  25              	.LFB44:
  26              		.file 1 "FreeRTOS\\Source\\tasks.c"
   1:FreeRTOS\Source/tasks.c **** /*
   2:FreeRTOS\Source/tasks.c ****  * FreeRTOS Kernel V10.5.1
   3:FreeRTOS\Source/tasks.c ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS\Source/tasks.c ****  *
   5:FreeRTOS\Source/tasks.c ****  * SPDX-License-Identifier: MIT
   6:FreeRTOS\Source/tasks.c ****  *
   7:FreeRTOS\Source/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:FreeRTOS\Source/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   9:FreeRTOS\Source/tasks.c ****  * the Software without restriction, including without limitation the rights to
  10:FreeRTOS\Source/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:FreeRTOS\Source/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:FreeRTOS\Source/tasks.c ****  * subject to the following conditions:
  13:FreeRTOS\Source/tasks.c ****  *
  14:FreeRTOS\Source/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  15:FreeRTOS\Source/tasks.c ****  * copies or substantial portions of the Software.
  16:FreeRTOS\Source/tasks.c ****  *
  17:FreeRTOS\Source/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:FreeRTOS\Source/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:FreeRTOS\Source/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:FreeRTOS\Source/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:FreeRTOS\Source/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:FreeRTOS\Source/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:FreeRTOS\Source/tasks.c ****  *
  24:FreeRTOS\Source/tasks.c ****  * https://www.FreeRTOS.org
  25:FreeRTOS\Source/tasks.c ****  * https://github.com/FreeRTOS
  26:FreeRTOS\Source/tasks.c ****  *
  27:FreeRTOS\Source/tasks.c ****  */
  28:FreeRTOS\Source/tasks.c **** 
  29:FreeRTOS\Source/tasks.c **** /* Standard includes. */
  30:FreeRTOS\Source/tasks.c **** #include <stdlib.h>
  31:FreeRTOS\Source/tasks.c **** #include <string.h>
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 2


  32:FreeRTOS\Source/tasks.c **** 
  33:FreeRTOS\Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  34:FreeRTOS\Source/tasks.c ****  * all the API functions to use the MPU wrappers.  That should only be done when
  35:FreeRTOS\Source/tasks.c ****  * task.h is included from an application file. */
  36:FreeRTOS\Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  37:FreeRTOS\Source/tasks.c **** 
  38:FreeRTOS\Source/tasks.c **** /* FreeRTOS includes. */
  39:FreeRTOS\Source/tasks.c **** #include "FreeRTOS.h"
  40:FreeRTOS\Source/tasks.c **** #include "task.h"
  41:FreeRTOS\Source/tasks.c **** #include "timers.h"
  42:FreeRTOS\Source/tasks.c **** #include "stack_macros.h"
  43:FreeRTOS\Source/tasks.c **** 
  44:FreeRTOS\Source/tasks.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  45:FreeRTOS\Source/tasks.c ****  * because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  46:FreeRTOS\Source/tasks.c ****  * for the header files above, but not in this file, in order to generate the
  47:FreeRTOS\Source/tasks.c ****  * correct privileged Vs unprivileged linkage and placement. */
  48:FreeRTOS\Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  49:FreeRTOS\Source/tasks.c **** 
  50:FreeRTOS\Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  51:FreeRTOS\Source/tasks.c ****  * functions but without including stdio.h here. */
  52:FreeRTOS\Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  53:FreeRTOS\Source/tasks.c **** 
  54:FreeRTOS\Source/tasks.c **** /* At the bottom of this file are two optional functions that can be used
  55:FreeRTOS\Source/tasks.c ****  * to generate human readable text from the raw data generated by the
  56:FreeRTOS\Source/tasks.c ****  * uxTaskGetSystemState() function.  Note the formatting functions are provided
  57:FreeRTOS\Source/tasks.c ****  * for convenience only, and are NOT considered part of the kernel. */
  58:FreeRTOS\Source/tasks.c ****     #include <stdio.h>
  59:FreeRTOS\Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  60:FreeRTOS\Source/tasks.c **** 
  61:FreeRTOS\Source/tasks.c **** #if ( configUSE_PREEMPTION == 0 )
  62:FreeRTOS\Source/tasks.c **** 
  63:FreeRTOS\Source/tasks.c **** /* If the cooperative scheduler is being used then a yield should not be
  64:FreeRTOS\Source/tasks.c ****  * performed just because a higher priority task has been woken. */
  65:FreeRTOS\Source/tasks.c ****     #define taskYIELD_IF_USING_PREEMPTION()
  66:FreeRTOS\Source/tasks.c **** #else
  67:FreeRTOS\Source/tasks.c ****     #define taskYIELD_IF_USING_PREEMPTION()    portYIELD_WITHIN_API()
  68:FreeRTOS\Source/tasks.c **** #endif
  69:FreeRTOS\Source/tasks.c **** 
  70:FreeRTOS\Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  71:FreeRTOS\Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION              ( ( uint8_t ) 0 ) /* Must be zero as it is the in
  72:FreeRTOS\Source/tasks.c **** #define taskWAITING_NOTIFICATION                  ( ( uint8_t ) 1 )
  73:FreeRTOS\Source/tasks.c **** #define taskNOTIFICATION_RECEIVED                 ( ( uint8_t ) 2 )
  74:FreeRTOS\Source/tasks.c **** 
  75:FreeRTOS\Source/tasks.c **** /*
  76:FreeRTOS\Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  77:FreeRTOS\Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
  78:FreeRTOS\Source/tasks.c ****  */
  79:FreeRTOS\Source/tasks.c **** #define tskSTACK_FILL_BYTE                        ( 0xa5U )
  80:FreeRTOS\Source/tasks.c **** 
  81:FreeRTOS\Source/tasks.c **** /* Bits used to record how a task's stack and TCB were allocated. */
  82:FreeRTOS\Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB    ( ( uint8_t ) 0 )
  83:FreeRTOS\Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY        ( ( uint8_t ) 1 )
  84:FreeRTOS\Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB     ( ( uint8_t ) 2 )
  85:FreeRTOS\Source/tasks.c **** 
  86:FreeRTOS\Source/tasks.c **** /* If any of the following are set then task stacks are filled with a known
  87:FreeRTOS\Source/tasks.c ****  * value so the high water mark can be determined.  If none of the following are
  88:FreeRTOS\Source/tasks.c ****  * set then don't fill the stack so there is no unnecessary dependency on memset. */
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 3


  89:FreeRTOS\Source/tasks.c **** #if ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTa
  90:FreeRTOS\Source/tasks.c ****     #define tskSET_NEW_STACKS_TO_KNOWN_VALUE    1
  91:FreeRTOS\Source/tasks.c **** #else
  92:FreeRTOS\Source/tasks.c ****     #define tskSET_NEW_STACKS_TO_KNOWN_VALUE    0
  93:FreeRTOS\Source/tasks.c **** #endif
  94:FreeRTOS\Source/tasks.c **** 
  95:FreeRTOS\Source/tasks.c **** /*
  96:FreeRTOS\Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
  97:FreeRTOS\Source/tasks.c ****  */
  98:FreeRTOS\Source/tasks.c **** #define tskRUNNING_CHAR      ( 'X' )
  99:FreeRTOS\Source/tasks.c **** #define tskBLOCKED_CHAR      ( 'B' )
 100:FreeRTOS\Source/tasks.c **** #define tskREADY_CHAR        ( 'R' )
 101:FreeRTOS\Source/tasks.c **** #define tskDELETED_CHAR      ( 'D' )
 102:FreeRTOS\Source/tasks.c **** #define tskSUSPENDED_CHAR    ( 'S' )
 103:FreeRTOS\Source/tasks.c **** 
 104:FreeRTOS\Source/tasks.c **** /*
 105:FreeRTOS\Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to to
 106:FreeRTOS\Source/tasks.c ****  * be global, rather than file scope.
 107:FreeRTOS\Source/tasks.c ****  */
 108:FreeRTOS\Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 109:FreeRTOS\Source/tasks.c ****     #define static
 110:FreeRTOS\Source/tasks.c **** #endif
 111:FreeRTOS\Source/tasks.c **** 
 112:FreeRTOS\Source/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 113:FreeRTOS\Source/tasks.c ****  * configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 114:FreeRTOS\Source/tasks.c **** #ifndef configIDLE_TASK_NAME
 115:FreeRTOS\Source/tasks.c ****     #define configIDLE_TASK_NAME    "IDLE"
 116:FreeRTOS\Source/tasks.c **** #endif
 117:FreeRTOS\Source/tasks.c **** 
 118:FreeRTOS\Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 119:FreeRTOS\Source/tasks.c **** 
 120:FreeRTOS\Source/tasks.c **** /* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 121:FreeRTOS\Source/tasks.c ****  * performed in a generic way that is not optimised to any particular
 122:FreeRTOS\Source/tasks.c ****  * microcontroller architecture. */
 123:FreeRTOS\Source/tasks.c **** 
 124:FreeRTOS\Source/tasks.c **** /* uxTopReadyPriority holds the priority of the highest priority ready
 125:FreeRTOS\Source/tasks.c ****  * state task. */
 126:FreeRTOS\Source/tasks.c ****     #define taskRECORD_READY_PRIORITY( uxPriority ) \
 127:FreeRTOS\Source/tasks.c ****     {                                               \
 128:FreeRTOS\Source/tasks.c ****         if( ( uxPriority ) > uxTopReadyPriority )   \
 129:FreeRTOS\Source/tasks.c ****         {                                           \
 130:FreeRTOS\Source/tasks.c ****             uxTopReadyPriority = ( uxPriority );    \
 131:FreeRTOS\Source/tasks.c ****         }                                           \
 132:FreeRTOS\Source/tasks.c ****     } /* taskRECORD_READY_PRIORITY */
 133:FreeRTOS\Source/tasks.c **** 
 134:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 135:FreeRTOS\Source/tasks.c **** 
 136:FreeRTOS\Source/tasks.c ****     #define taskSELECT_HIGHEST_PRIORITY_TASK()                                \
 137:FreeRTOS\Source/tasks.c ****     {                                                                         \
 138:FreeRTOS\Source/tasks.c ****         UBaseType_t uxTopPriority = uxTopReadyPriority;                       \
 139:FreeRTOS\Source/tasks.c ****                                                                               \
 140:FreeRTOS\Source/tasks.c ****         /* Find the highest priority queue that contains ready tasks. */      \
 141:FreeRTOS\Source/tasks.c ****         while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) ) \
 142:FreeRTOS\Source/tasks.c ****         {                                                                     \
 143:FreeRTOS\Source/tasks.c ****             configASSERT( uxTopPriority );                                    \
 144:FreeRTOS\Source/tasks.c ****             --uxTopPriority;                                                  \
 145:FreeRTOS\Source/tasks.c ****         }                                                                     \
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 4


 146:FreeRTOS\Source/tasks.c ****                                                                               \
 147:FreeRTOS\Source/tasks.c ****         /* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of \
 148:FreeRTOS\Source/tasks.c ****          * the  same priority get an equal share of the processor time. */                    \
 149:FreeRTOS\Source/tasks.c ****         listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) ); \
 150:FreeRTOS\Source/tasks.c ****         uxTopReadyPriority = uxTopPriority;                                                   \
 151:FreeRTOS\Source/tasks.c ****     } /* taskSELECT_HIGHEST_PRIORITY_TASK */
 152:FreeRTOS\Source/tasks.c **** 
 153:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 154:FreeRTOS\Source/tasks.c **** 
 155:FreeRTOS\Source/tasks.c **** /* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 156:FreeRTOS\Source/tasks.c ****  * they are only required when a port optimised method of task selection is
 157:FreeRTOS\Source/tasks.c ****  * being used. */
 158:FreeRTOS\Source/tasks.c ****     #define taskRESET_READY_PRIORITY( uxPriority )
 159:FreeRTOS\Source/tasks.c ****     #define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 160:FreeRTOS\Source/tasks.c **** 
 161:FreeRTOS\Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 162:FreeRTOS\Source/tasks.c **** 
 163:FreeRTOS\Source/tasks.c **** /* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 164:FreeRTOS\Source/tasks.c ****  * performed in a way that is tailored to the particular microcontroller
 165:FreeRTOS\Source/tasks.c ****  * architecture being used. */
 166:FreeRTOS\Source/tasks.c **** 
 167:FreeRTOS\Source/tasks.c **** /* A port optimised version is provided.  Call the port defined macros. */
 168:FreeRTOS\Source/tasks.c ****     #define taskRECORD_READY_PRIORITY( uxPriority )    portRECORD_READY_PRIORITY( ( uxPriority ), u
 169:FreeRTOS\Source/tasks.c **** 
 170:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 171:FreeRTOS\Source/tasks.c **** 
 172:FreeRTOS\Source/tasks.c ****     #define taskSELECT_HIGHEST_PRIORITY_TASK()                                                  \
 173:FreeRTOS\Source/tasks.c ****     {                                                                                           \
 174:FreeRTOS\Source/tasks.c ****         UBaseType_t uxTopPriority;                                                              \
 175:FreeRTOS\Source/tasks.c ****                                                                                                 \
 176:FreeRTOS\Source/tasks.c ****         /* Find the highest priority list that contains ready tasks. */                         \
 177:FreeRTOS\Source/tasks.c ****         portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );                          \
 178:FreeRTOS\Source/tasks.c ****         configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 ); \
 179:FreeRTOS\Source/tasks.c ****         listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );   \
 180:FreeRTOS\Source/tasks.c ****     } /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 181:FreeRTOS\Source/tasks.c **** 
 182:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 183:FreeRTOS\Source/tasks.c **** 
 184:FreeRTOS\Source/tasks.c **** /* A port optimised version is provided, call it only if the TCB being reset
 185:FreeRTOS\Source/tasks.c ****  * is being referenced from a ready list.  If it is referenced from a delayed
 186:FreeRTOS\Source/tasks.c ****  * or suspended list then it won't be in a ready list. */
 187:FreeRTOS\Source/tasks.c ****     #define taskRESET_READY_PRIORITY( uxPriority )                                                 
 188:FreeRTOS\Source/tasks.c ****     {                                                                                              
 189:FreeRTOS\Source/tasks.c ****         if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 
 190:FreeRTOS\Source/tasks.c ****         {                                                                                          
 191:FreeRTOS\Source/tasks.c ****             portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );                    
 192:FreeRTOS\Source/tasks.c ****         }                                                                                          
 193:FreeRTOS\Source/tasks.c ****     }
 194:FreeRTOS\Source/tasks.c **** 
 195:FreeRTOS\Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 196:FreeRTOS\Source/tasks.c **** 
 197:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 198:FreeRTOS\Source/tasks.c **** 
 199:FreeRTOS\Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 200:FreeRTOS\Source/tasks.c ****  * count overflows. */
 201:FreeRTOS\Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()                                                \
 202:FreeRTOS\Source/tasks.c ****     {                                                                             \
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 5


 203:FreeRTOS\Source/tasks.c ****         List_t * pxTemp;                                                          \
 204:FreeRTOS\Source/tasks.c ****                                                                                   \
 205:FreeRTOS\Source/tasks.c ****         /* The delayed tasks list should be empty when the lists are switched. */ \
 206:FreeRTOS\Source/tasks.c ****         configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );               \
 207:FreeRTOS\Source/tasks.c ****                                                                                   \
 208:FreeRTOS\Source/tasks.c ****         pxTemp = pxDelayedTaskList;                                               \
 209:FreeRTOS\Source/tasks.c ****         pxDelayedTaskList = pxOverflowDelayedTaskList;                            \
 210:FreeRTOS\Source/tasks.c ****         pxOverflowDelayedTaskList = pxTemp;                                       \
 211:FreeRTOS\Source/tasks.c ****         xNumOfOverflows++;                                                        \
 212:FreeRTOS\Source/tasks.c ****         prvResetNextTaskUnblockTime();                                            \
 213:FreeRTOS\Source/tasks.c ****     }
 214:FreeRTOS\Source/tasks.c **** 
 215:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 216:FreeRTOS\Source/tasks.c **** 
 217:FreeRTOS\Source/tasks.c **** /*
 218:FreeRTOS\Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 219:FreeRTOS\Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 220:FreeRTOS\Source/tasks.c ****  */
 221:FreeRTOS\Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )                                                             
 222:FreeRTOS\Source/tasks.c ****     traceMOVED_TASK_TO_READY_STATE( pxTCB );                                                       
 223:FreeRTOS\Source/tasks.c ****     taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );                                            
 224:FreeRTOS\Source/tasks.c ****     listINSERT_END( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem )
 225:FreeRTOS\Source/tasks.c ****     tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 226:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 227:FreeRTOS\Source/tasks.c **** 
 228:FreeRTOS\Source/tasks.c **** /*
 229:FreeRTOS\Source/tasks.c ****  * Several functions take a TaskHandle_t parameter that can optionally be NULL,
 230:FreeRTOS\Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 231:FreeRTOS\Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 232:FreeRTOS\Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 233:FreeRTOS\Source/tasks.c ****  */
 234:FreeRTOS\Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle )    ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle )
 235:FreeRTOS\Source/tasks.c **** 
 236:FreeRTOS\Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 237:FreeRTOS\Source/tasks.c ****  * of the task to which it belongs (coded to allow it to be held in reverse
 238:FreeRTOS\Source/tasks.c ****  * priority order).  However, it is occasionally borrowed for other purposes.  It
 239:FreeRTOS\Source/tasks.c ****  * is important its value is not updated due to a task priority change while it is
 240:FreeRTOS\Source/tasks.c ****  * being used for another purpose.  The following bit definition is used to inform
 241:FreeRTOS\Source/tasks.c ****  * the scheduler that the value should not be changed - in which case it is the
 242:FreeRTOS\Source/tasks.c ****  * responsibility of whichever module is using the value to ensure it gets set back
 243:FreeRTOS\Source/tasks.c ****  * to its original value when it is released. */
 244:FreeRTOS\Source/tasks.c **** #if ( configUSE_16_BIT_TICKS == 1 )
 245:FreeRTOS\Source/tasks.c ****     #define taskEVENT_LIST_ITEM_VALUE_IN_USE    0x8000U
 246:FreeRTOS\Source/tasks.c **** #else
 247:FreeRTOS\Source/tasks.c ****     #define taskEVENT_LIST_ITEM_VALUE_IN_USE    0x80000000UL
 248:FreeRTOS\Source/tasks.c **** #endif
 249:FreeRTOS\Source/tasks.c **** 
 250:FreeRTOS\Source/tasks.c **** /*
 251:FreeRTOS\Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 252:FreeRTOS\Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 253:FreeRTOS\Source/tasks.c ****  * (the task's run time environment, including register values)
 254:FreeRTOS\Source/tasks.c ****  */
 255:FreeRTOS\Source/tasks.c **** typedef struct tskTaskControlBlock       /* The old naming convention is used to prevent breaking k
 256:FreeRTOS\Source/tasks.c **** {
 257:FreeRTOS\Source/tasks.c ****     volatile StackType_t * pxTopOfStack; /*< Points to the location of the last item placed on the 
 258:FreeRTOS\Source/tasks.c **** 
 259:FreeRTOS\Source/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 6


 260:FreeRTOS\Source/tasks.c ****         xMPU_SETTINGS xMPUSettings; /*< The MPU settings are defined as part of the port layer.  TH
 261:FreeRTOS\Source/tasks.c ****     #endif
 262:FreeRTOS\Source/tasks.c **** 
 263:FreeRTOS\Source/tasks.c ****     ListItem_t xStateListItem;                  /*< The list that the state list item of a task is 
 264:FreeRTOS\Source/tasks.c ****     ListItem_t xEventListItem;                  /*< Used to reference a task from an event list. */
 265:FreeRTOS\Source/tasks.c ****     UBaseType_t uxPriority;                     /*< The priority of the task.  0 is the lowest prio
 266:FreeRTOS\Source/tasks.c ****     StackType_t * pxStack;                      /*< Points to the start of the stack. */
 267:FreeRTOS\Source/tasks.c ****     char pcTaskName[ configMAX_TASK_NAME_LEN ]; /*< Descriptive name given to the task when created
 268:FreeRTOS\Source/tasks.c **** 
 269:FreeRTOS\Source/tasks.c ****     #if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 270:FreeRTOS\Source/tasks.c ****         StackType_t * pxEndOfStack; /*< Points to the highest valid address for the stack. */
 271:FreeRTOS\Source/tasks.c ****     #endif
 272:FreeRTOS\Source/tasks.c **** 
 273:FreeRTOS\Source/tasks.c ****     #if ( portCRITICAL_NESTING_IN_TCB == 1 )
 274:FreeRTOS\Source/tasks.c ****         UBaseType_t uxCriticalNesting; /*< Holds the critical section nesting depth for ports that 
 275:FreeRTOS\Source/tasks.c ****     #endif
 276:FreeRTOS\Source/tasks.c **** 
 277:FreeRTOS\Source/tasks.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
 278:FreeRTOS\Source/tasks.c ****         UBaseType_t uxTCBNumber;  /*< Stores a number that increments each time a TCB is created.  
 279:FreeRTOS\Source/tasks.c ****         UBaseType_t uxTaskNumber; /*< Stores a number specifically for use by third party trace cod
 280:FreeRTOS\Source/tasks.c ****     #endif
 281:FreeRTOS\Source/tasks.c **** 
 282:FreeRTOS\Source/tasks.c ****     #if ( configUSE_MUTEXES == 1 )
 283:FreeRTOS\Source/tasks.c ****         UBaseType_t uxBasePriority; /*< The priority last assigned to the task - used by the priori
 284:FreeRTOS\Source/tasks.c ****         UBaseType_t uxMutexesHeld;
 285:FreeRTOS\Source/tasks.c ****     #endif
 286:FreeRTOS\Source/tasks.c **** 
 287:FreeRTOS\Source/tasks.c ****     #if ( configUSE_APPLICATION_TASK_TAG == 1 )
 288:FreeRTOS\Source/tasks.c ****         TaskHookFunction_t pxTaskTag;
 289:FreeRTOS\Source/tasks.c ****     #endif
 290:FreeRTOS\Source/tasks.c **** 
 291:FreeRTOS\Source/tasks.c ****     #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 292:FreeRTOS\Source/tasks.c ****         void * pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 293:FreeRTOS\Source/tasks.c ****     #endif
 294:FreeRTOS\Source/tasks.c **** 
 295:FreeRTOS\Source/tasks.c ****     #if ( configGENERATE_RUN_TIME_STATS == 1 )
 296:FreeRTOS\Source/tasks.c ****         configRUN_TIME_COUNTER_TYPE ulRunTimeCounter; /*< Stores the amount of time the task has sp
 297:FreeRTOS\Source/tasks.c ****     #endif
 298:FreeRTOS\Source/tasks.c **** 
 299:FreeRTOS\Source/tasks.c ****     #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
 300:FreeRTOS\Source/tasks.c ****         configTLS_BLOCK_TYPE xTLSBlock; /*< Memory block used as Thread Local Storage (TLS) Block f
 301:FreeRTOS\Source/tasks.c ****     #endif
 302:FreeRTOS\Source/tasks.c **** 
 303:FreeRTOS\Source/tasks.c ****     #if ( configUSE_TASK_NOTIFICATIONS == 1 )
 304:FreeRTOS\Source/tasks.c ****         volatile uint32_t ulNotifiedValue[ configTASK_NOTIFICATION_ARRAY_ENTRIES ];
 305:FreeRTOS\Source/tasks.c ****         volatile uint8_t ucNotifyState[ configTASK_NOTIFICATION_ARRAY_ENTRIES ];
 306:FreeRTOS\Source/tasks.c ****     #endif
 307:FreeRTOS\Source/tasks.c **** 
 308:FreeRTOS\Source/tasks.c ****     /* See the comments in FreeRTOS.h with the definition of
 309:FreeRTOS\Source/tasks.c ****      * tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 310:FreeRTOS\Source/tasks.c ****     #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been conso
 311:FreeRTOS\Source/tasks.c ****         uint8_t ucStaticallyAllocated;                     /*< Set to pdTRUE if the task is a stati
 312:FreeRTOS\Source/tasks.c ****     #endif
 313:FreeRTOS\Source/tasks.c **** 
 314:FreeRTOS\Source/tasks.c ****     #if ( INCLUDE_xTaskAbortDelay == 1 )
 315:FreeRTOS\Source/tasks.c ****         uint8_t ucDelayAborted;
 316:FreeRTOS\Source/tasks.c ****     #endif
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 7


 317:FreeRTOS\Source/tasks.c **** 
 318:FreeRTOS\Source/tasks.c ****     #if ( configUSE_POSIX_ERRNO == 1 )
 319:FreeRTOS\Source/tasks.c ****         int iTaskErrno;
 320:FreeRTOS\Source/tasks.c ****     #endif
 321:FreeRTOS\Source/tasks.c **** } tskTCB;
 322:FreeRTOS\Source/tasks.c **** 
 323:FreeRTOS\Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 324:FreeRTOS\Source/tasks.c ****  * below to enable the use of older kernel aware debuggers. */
 325:FreeRTOS\Source/tasks.c **** typedef tskTCB TCB_t;
 326:FreeRTOS\Source/tasks.c **** 
 327:FreeRTOS\Source/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 328:FreeRTOS\Source/tasks.c ****  * which static variables must be declared volatile. */
 329:FreeRTOS\Source/tasks.c **** portDONT_DISCARD PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 330:FreeRTOS\Source/tasks.c **** 
 331:FreeRTOS\Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------
 332:FreeRTOS\Source/tasks.c ****  * xDelayedTaskList1 and xDelayedTaskList2 could be moved to function scope but
 333:FreeRTOS\Source/tasks.c ****  * doing so breaks some kernel aware debuggers and debuggers that rely on removing
 334:FreeRTOS\Source/tasks.c ****  * the static qualifier. */
 335:FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ]; /*< Prioritised ready task
 336:FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;                         /*< Delayed tasks. */
 337:FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;                         /*< Delayed tasks (two lis
 338:FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;              /*< Points to the delayed 
 339:FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;      /*< Points to the delayed 
 340:FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;                         /*< Tasks that have been r
 341:FreeRTOS\Source/tasks.c **** 
 342:FreeRTOS\Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 343:FreeRTOS\Source/tasks.c **** 
 344:FreeRTOS\Source/tasks.c ****     PRIVILEGED_DATA static List_t xTasksWaitingTermination; /*< Tasks that have been deleted - but 
 345:FreeRTOS\Source/tasks.c ****     PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 346:FreeRTOS\Source/tasks.c **** 
 347:FreeRTOS\Source/tasks.c **** #endif
 348:FreeRTOS\Source/tasks.c **** 
 349:FreeRTOS\Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 350:FreeRTOS\Source/tasks.c **** 
 351:FreeRTOS\Source/tasks.c ****     PRIVILEGED_DATA static List_t xSuspendedTaskList; /*< Tasks that are currently suspended. */
 352:FreeRTOS\Source/tasks.c **** 
 353:FreeRTOS\Source/tasks.c **** #endif
 354:FreeRTOS\Source/tasks.c **** 
 355:FreeRTOS\Source/tasks.c **** /* Global POSIX errno. Its value is changed upon context switching to match
 356:FreeRTOS\Source/tasks.c ****  * the errno of the currently running task. */
 357:FreeRTOS\Source/tasks.c **** #if ( configUSE_POSIX_ERRNO == 1 )
 358:FreeRTOS\Source/tasks.c ****     int FreeRTOS_errno = 0;
 359:FreeRTOS\Source/tasks.c **** #endif
 360:FreeRTOS\Source/tasks.c **** 
 361:FreeRTOS\Source/tasks.c **** /* Other file private variables. --------------------------------*/
 362:FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks = ( UBaseType_t ) 0U;
 363:FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 364:FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority = tskIDLE_PRIORITY;
 365:FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning = pdFALSE;
 366:FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xPendedTicks = ( TickType_t ) 0U;
 367:FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending = pdFALSE;
 368:FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows = ( BaseType_t ) 0;
 369:FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber = ( UBaseType_t ) 0U;
 370:FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime = ( TickType_t ) 0U; /* Initialised
 371:FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle = NULL;                          /*< Holds the 
 372:FreeRTOS\Source/tasks.c **** 
 373:FreeRTOS\Source/tasks.c **** /* Improve support for OpenOCD. The kernel tracks Ready tasks via priority lists.
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 8


 374:FreeRTOS\Source/tasks.c ****  * For tracking the state of remote threads, OpenOCD uses uxTopUsedPriority
 375:FreeRTOS\Source/tasks.c ****  * to determine the number of priority lists to read back from the remote target. */
 376:FreeRTOS\Source/tasks.c **** const volatile UBaseType_t uxTopUsedPriority = configMAX_PRIORITIES - 1U;
 377:FreeRTOS\Source/tasks.c **** 
 378:FreeRTOS\Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 379:FreeRTOS\Source/tasks.c ****  * interrupts must not manipulate the xStateListItem of a TCB, or any of the
 380:FreeRTOS\Source/tasks.c ****  * lists the xStateListItem can be referenced from, if the scheduler is suspended.
 381:FreeRTOS\Source/tasks.c ****  * If an interrupt needs to unblock a task while the scheduler is suspended then it
 382:FreeRTOS\Source/tasks.c ****  * moves the task's event list item into the xPendingReadyList, ready for the
 383:FreeRTOS\Source/tasks.c ****  * kernel to move the task from the pending ready list into the real ready list
 384:FreeRTOS\Source/tasks.c ****  * when the scheduler is unsuspended.  The pending ready list itself can only be
 385:FreeRTOS\Source/tasks.c ****  * accessed from a critical section. */
 386:FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended = ( UBaseType_t ) pdFALSE;
 387:FreeRTOS\Source/tasks.c **** 
 388:FreeRTOS\Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 389:FreeRTOS\Source/tasks.c **** 
 390:FreeRTOS\Source/tasks.c **** /* Do not move these variables to function scope as doing so prevents the
 391:FreeRTOS\Source/tasks.c ****  * code working with debuggers that need to remove the static qualifier. */
 392:FreeRTOS\Source/tasks.c ****     PRIVILEGED_DATA static configRUN_TIME_COUNTER_TYPE ulTaskSwitchedInTime = 0UL;    /*< Holds the
 393:FreeRTOS\Source/tasks.c ****     PRIVILEGED_DATA static volatile configRUN_TIME_COUNTER_TYPE ulTotalRunTime = 0UL; /*< Holds the
 394:FreeRTOS\Source/tasks.c **** 
 395:FreeRTOS\Source/tasks.c **** #endif
 396:FreeRTOS\Source/tasks.c **** 
 397:FreeRTOS\Source/tasks.c **** /*lint -restore */
 398:FreeRTOS\Source/tasks.c **** 
 399:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 400:FreeRTOS\Source/tasks.c **** 
 401:FreeRTOS\Source/tasks.c **** /* File private functions. --------------------------------*/
 402:FreeRTOS\Source/tasks.c **** 
 403:FreeRTOS\Source/tasks.c **** /**
 404:FreeRTOS\Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 405:FreeRTOS\Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 406:FreeRTOS\Source/tasks.c ****  * is in any other state.
 407:FreeRTOS\Source/tasks.c ****  */
 408:FreeRTOS\Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 409:FreeRTOS\Source/tasks.c **** 
 410:FreeRTOS\Source/tasks.c ****     static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 411:FreeRTOS\Source/tasks.c **** 
 412:FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 413:FreeRTOS\Source/tasks.c **** 
 414:FreeRTOS\Source/tasks.c **** /*
 415:FreeRTOS\Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 416:FreeRTOS\Source/tasks.c ****  * automatically upon the creation of the first task.
 417:FreeRTOS\Source/tasks.c ****  */
 418:FreeRTOS\Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 419:FreeRTOS\Source/tasks.c **** 
 420:FreeRTOS\Source/tasks.c **** /*
 421:FreeRTOS\Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 422:FreeRTOS\Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 423:FreeRTOS\Source/tasks.c ****  * creation of the first user task.
 424:FreeRTOS\Source/tasks.c ****  *
 425:FreeRTOS\Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 426:FreeRTOS\Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 427:FreeRTOS\Source/tasks.c ****  *
 428:FreeRTOS\Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 429:FreeRTOS\Source/tasks.c ****  *
 430:FreeRTOS\Source/tasks.c ****  */
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 9


 431:FreeRTOS\Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters ) PRIVILEGED_FUNCTION;
 432:FreeRTOS\Source/tasks.c **** 
 433:FreeRTOS\Source/tasks.c **** /*
 434:FreeRTOS\Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 435:FreeRTOS\Source/tasks.c ****  * including the stack pointed to by the TCB.
 436:FreeRTOS\Source/tasks.c ****  *
 437:FreeRTOS\Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 438:FreeRTOS\Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 439:FreeRTOS\Source/tasks.c ****  */
 440:FreeRTOS\Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 441:FreeRTOS\Source/tasks.c **** 
 442:FreeRTOS\Source/tasks.c ****     static void prvDeleteTCB( TCB_t * pxTCB ) PRIVILEGED_FUNCTION;
 443:FreeRTOS\Source/tasks.c **** 
 444:FreeRTOS\Source/tasks.c **** #endif
 445:FreeRTOS\Source/tasks.c **** 
 446:FreeRTOS\Source/tasks.c **** /*
 447:FreeRTOS\Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 448:FreeRTOS\Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 449:FreeRTOS\Source/tasks.c ****  * and its TCB deleted.
 450:FreeRTOS\Source/tasks.c ****  */
 451:FreeRTOS\Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 452:FreeRTOS\Source/tasks.c **** 
 453:FreeRTOS\Source/tasks.c **** /*
 454:FreeRTOS\Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 455:FreeRTOS\Source/tasks.c ****  * either the current or the overflow delayed task list.
 456:FreeRTOS\Source/tasks.c ****  */
 457:FreeRTOS\Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
 458:FreeRTOS\Source/tasks.c ****                                             const BaseType_t xCanBlockIndefinitely ) PRIVILEGED_FUN
 459:FreeRTOS\Source/tasks.c **** 
 460:FreeRTOS\Source/tasks.c **** /*
 461:FreeRTOS\Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 462:FreeRTOS\Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 463:FreeRTOS\Source/tasks.c ****  * a suspended list, etc.).
 464:FreeRTOS\Source/tasks.c ****  *
 465:FreeRTOS\Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 466:FreeRTOS\Source/tasks.c ****  * NORMAL APPLICATION CODE.
 467:FreeRTOS\Source/tasks.c ****  */
 468:FreeRTOS\Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 469:FreeRTOS\Source/tasks.c **** 
 470:FreeRTOS\Source/tasks.c ****     static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t * pxTaskStatusArray,
 471:FreeRTOS\Source/tasks.c ****                                                      List_t * pxList,
 472:FreeRTOS\Source/tasks.c ****                                                      eTaskState eState ) PRIVILEGED_FUNCTION;
 473:FreeRTOS\Source/tasks.c **** 
 474:FreeRTOS\Source/tasks.c **** #endif
 475:FreeRTOS\Source/tasks.c **** 
 476:FreeRTOS\Source/tasks.c **** /*
 477:FreeRTOS\Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 478:FreeRTOS\Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 479:FreeRTOS\Source/tasks.c ****  */
 480:FreeRTOS\Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 481:FreeRTOS\Source/tasks.c **** 
 482:FreeRTOS\Source/tasks.c ****     static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
 483:FreeRTOS\Source/tasks.c ****                                                      const char pcNameToQuery[] ) PRIVILEGED_FUNCTI
 484:FreeRTOS\Source/tasks.c **** 
 485:FreeRTOS\Source/tasks.c **** #endif
 486:FreeRTOS\Source/tasks.c **** 
 487:FreeRTOS\Source/tasks.c **** /*
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 10


 488:FreeRTOS\Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 489:FreeRTOS\Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 490:FreeRTOS\Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 491:FreeRTOS\Source/tasks.c ****  */
 492:FreeRTOS\Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
 493:FreeRTOS\Source/tasks.c **** 
 494:FreeRTOS\Source/tasks.c ****     static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVIL
 495:FreeRTOS\Source/tasks.c **** 
 496:FreeRTOS\Source/tasks.c **** #endif
 497:FreeRTOS\Source/tasks.c **** 
 498:FreeRTOS\Source/tasks.c **** /*
 499:FreeRTOS\Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 500:FreeRTOS\Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 501:FreeRTOS\Source/tasks.c ****  *
 502:FreeRTOS\Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 503:FreeRTOS\Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 504:FreeRTOS\Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 505:FreeRTOS\Source/tasks.c ****  * set to a value other than 1.
 506:FreeRTOS\Source/tasks.c ****  */
 507:FreeRTOS\Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 508:FreeRTOS\Source/tasks.c **** 
 509:FreeRTOS\Source/tasks.c ****     static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 510:FreeRTOS\Source/tasks.c **** 
 511:FreeRTOS\Source/tasks.c **** #endif
 512:FreeRTOS\Source/tasks.c **** 
 513:FreeRTOS\Source/tasks.c **** /*
 514:FreeRTOS\Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 515:FreeRTOS\Source/tasks.c ****  * will exit the Blocked state.
 516:FreeRTOS\Source/tasks.c ****  */
 517:FreeRTOS\Source/tasks.c **** static void prvResetNextTaskUnblockTime( void ) PRIVILEGED_FUNCTION;
 518:FreeRTOS\Source/tasks.c **** 
 519:FreeRTOS\Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 )
 520:FreeRTOS\Source/tasks.c **** 
 521:FreeRTOS\Source/tasks.c **** /*
 522:FreeRTOS\Source/tasks.c ****  * Helper function used to pad task names with spaces when printing out
 523:FreeRTOS\Source/tasks.c ****  * human readable tables of task information.
 524:FreeRTOS\Source/tasks.c ****  */
 525:FreeRTOS\Source/tasks.c ****     static char * prvWriteNameToBuffer( char * pcBuffer,
 526:FreeRTOS\Source/tasks.c ****                                         const char * pcTaskName ) PRIVILEGED_FUNCTION;
 527:FreeRTOS\Source/tasks.c **** 
 528:FreeRTOS\Source/tasks.c **** #endif
 529:FreeRTOS\Source/tasks.c **** 
 530:FreeRTOS\Source/tasks.c **** /*
 531:FreeRTOS\Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 532:FreeRTOS\Source/tasks.c ****  * dynamically to fill in the structure's members.
 533:FreeRTOS\Source/tasks.c ****  */
 534:FreeRTOS\Source/tasks.c **** static void prvInitialiseNewTask( TaskFunction_t pxTaskCode,
 535:FreeRTOS\Source/tasks.c ****                                   const char * const pcName, /*lint !e971 Unqualified char types ar
 536:FreeRTOS\Source/tasks.c ****                                   const uint32_t ulStackDepth,
 537:FreeRTOS\Source/tasks.c ****                                   void * const pvParameters,
 538:FreeRTOS\Source/tasks.c ****                                   UBaseType_t uxPriority,
 539:FreeRTOS\Source/tasks.c ****                                   TaskHandle_t * const pxCreatedTask,
 540:FreeRTOS\Source/tasks.c ****                                   TCB_t * pxNewTCB,
 541:FreeRTOS\Source/tasks.c ****                                   const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 542:FreeRTOS\Source/tasks.c **** 
 543:FreeRTOS\Source/tasks.c **** /*
 544:FreeRTOS\Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 11


 545:FreeRTOS\Source/tasks.c ****  * under the control of the scheduler.
 546:FreeRTOS\Source/tasks.c ****  */
 547:FreeRTOS\Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB ) PRIVILEGED_FUNCTION;
 548:FreeRTOS\Source/tasks.c **** 
 549:FreeRTOS\Source/tasks.c **** /*
 550:FreeRTOS\Source/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 551:FreeRTOS\Source/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 552:FreeRTOS\Source/tasks.c ****  * called by the function.
 553:FreeRTOS\Source/tasks.c ****  */
 554:FreeRTOS\Source/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 555:FreeRTOS\Source/tasks.c **** 
 556:FreeRTOS\Source/tasks.c ****     static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 557:FreeRTOS\Source/tasks.c **** 
 558:FreeRTOS\Source/tasks.c **** #endif
 559:FreeRTOS\Source/tasks.c **** 
 560:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 561:FreeRTOS\Source/tasks.c **** 
 562:FreeRTOS\Source/tasks.c **** #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 563:FreeRTOS\Source/tasks.c **** 
 564:FreeRTOS\Source/tasks.c ****     TaskHandle_t xTaskCreateStatic( TaskFunction_t pxTaskCode,
 565:FreeRTOS\Source/tasks.c ****                                     const char * const pcName, /*lint !e971 Unqualified char types 
 566:FreeRTOS\Source/tasks.c ****                                     const uint32_t ulStackDepth,
 567:FreeRTOS\Source/tasks.c ****                                     void * const pvParameters,
 568:FreeRTOS\Source/tasks.c ****                                     UBaseType_t uxPriority,
 569:FreeRTOS\Source/tasks.c ****                                     StackType_t * const puxStackBuffer,
 570:FreeRTOS\Source/tasks.c ****                                     StaticTask_t * const pxTaskBuffer )
 571:FreeRTOS\Source/tasks.c ****     {
 572:FreeRTOS\Source/tasks.c ****         TCB_t * pxNewTCB;
 573:FreeRTOS\Source/tasks.c ****         TaskHandle_t xReturn;
 574:FreeRTOS\Source/tasks.c **** 
 575:FreeRTOS\Source/tasks.c ****         configASSERT( puxStackBuffer != NULL );
 576:FreeRTOS\Source/tasks.c ****         configASSERT( pxTaskBuffer != NULL );
 577:FreeRTOS\Source/tasks.c **** 
 578:FreeRTOS\Source/tasks.c ****         #if ( configASSERT_DEFINED == 1 )
 579:FreeRTOS\Source/tasks.c ****         {
 580:FreeRTOS\Source/tasks.c ****             /* Sanity check that the size of the structure used to declare a
 581:FreeRTOS\Source/tasks.c ****              * variable of type StaticTask_t equals the size of the real task
 582:FreeRTOS\Source/tasks.c ****              * structure. */
 583:FreeRTOS\Source/tasks.c ****             volatile size_t xSize = sizeof( StaticTask_t );
 584:FreeRTOS\Source/tasks.c ****             configASSERT( xSize == sizeof( TCB_t ) );
 585:FreeRTOS\Source/tasks.c ****             ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 586:FreeRTOS\Source/tasks.c ****         }
 587:FreeRTOS\Source/tasks.c ****         #endif /* configASSERT_DEFINED */
 588:FreeRTOS\Source/tasks.c **** 
 589:FreeRTOS\Source/tasks.c ****         if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 590:FreeRTOS\Source/tasks.c ****         {
 591:FreeRTOS\Source/tasks.c ****             /* The memory used for the task's TCB and stack are passed into this
 592:FreeRTOS\Source/tasks.c ****              * function - use them. */
 593:FreeRTOS\Source/tasks.c ****             pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the stru
 594:FreeRTOS\Source/tasks.c ****             memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 595:FreeRTOS\Source/tasks.c ****             pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 596:FreeRTOS\Source/tasks.c **** 
 597:FreeRTOS\Source/tasks.c ****             #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has be
 598:FreeRTOS\Source/tasks.c ****             {
 599:FreeRTOS\Source/tasks.c ****                 /* Tasks can be created statically or dynamically, so note this
 600:FreeRTOS\Source/tasks.c ****                  * task was created statically in case the task is later deleted. */
 601:FreeRTOS\Source/tasks.c ****                 pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 12


 602:FreeRTOS\Source/tasks.c ****             }
 603:FreeRTOS\Source/tasks.c ****             #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 604:FreeRTOS\Source/tasks.c **** 
 605:FreeRTOS\Source/tasks.c ****             prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xRet
 606:FreeRTOS\Source/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
 607:FreeRTOS\Source/tasks.c ****         }
 608:FreeRTOS\Source/tasks.c ****         else
 609:FreeRTOS\Source/tasks.c ****         {
 610:FreeRTOS\Source/tasks.c ****             xReturn = NULL;
 611:FreeRTOS\Source/tasks.c ****         }
 612:FreeRTOS\Source/tasks.c **** 
 613:FreeRTOS\Source/tasks.c ****         return xReturn;
 614:FreeRTOS\Source/tasks.c ****     }
 615:FreeRTOS\Source/tasks.c **** 
 616:FreeRTOS\Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 617:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 618:FreeRTOS\Source/tasks.c **** 
 619:FreeRTOS\Source/tasks.c **** #if ( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 620:FreeRTOS\Source/tasks.c **** 
 621:FreeRTOS\Source/tasks.c ****     BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition,
 622:FreeRTOS\Source/tasks.c ****                                             TaskHandle_t * pxCreatedTask )
 623:FreeRTOS\Source/tasks.c ****     {
 624:FreeRTOS\Source/tasks.c ****         TCB_t * pxNewTCB;
 625:FreeRTOS\Source/tasks.c ****         BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 626:FreeRTOS\Source/tasks.c **** 
 627:FreeRTOS\Source/tasks.c ****         configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 628:FreeRTOS\Source/tasks.c ****         configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 629:FreeRTOS\Source/tasks.c **** 
 630:FreeRTOS\Source/tasks.c ****         if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NUL
 631:FreeRTOS\Source/tasks.c ****         {
 632:FreeRTOS\Source/tasks.c ****             /* Allocate space for the TCB.  Where the memory comes from depends
 633:FreeRTOS\Source/tasks.c ****              * on the implementation of the port malloc function and whether or
 634:FreeRTOS\Source/tasks.c ****              * not static allocation is being used. */
 635:FreeRTOS\Source/tasks.c ****             pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 636:FreeRTOS\Source/tasks.c ****             memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 637:FreeRTOS\Source/tasks.c **** 
 638:FreeRTOS\Source/tasks.c ****             /* Store the stack location in the TCB. */
 639:FreeRTOS\Source/tasks.c ****             pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 640:FreeRTOS\Source/tasks.c **** 
 641:FreeRTOS\Source/tasks.c ****             #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 642:FreeRTOS\Source/tasks.c ****             {
 643:FreeRTOS\Source/tasks.c ****                 /* Tasks can be created statically or dynamically, so note this
 644:FreeRTOS\Source/tasks.c ****                  * task was created statically in case the task is later deleted. */
 645:FreeRTOS\Source/tasks.c ****                 pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 646:FreeRTOS\Source/tasks.c ****             }
 647:FreeRTOS\Source/tasks.c ****             #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 648:FreeRTOS\Source/tasks.c **** 
 649:FreeRTOS\Source/tasks.c ****             prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 650:FreeRTOS\Source/tasks.c ****                                   pxTaskDefinition->pcName,
 651:FreeRTOS\Source/tasks.c ****                                   ( uint32_t ) pxTaskDefinition->usStackDepth,
 652:FreeRTOS\Source/tasks.c ****                                   pxTaskDefinition->pvParameters,
 653:FreeRTOS\Source/tasks.c ****                                   pxTaskDefinition->uxPriority,
 654:FreeRTOS\Source/tasks.c ****                                   pxCreatedTask, pxNewTCB,
 655:FreeRTOS\Source/tasks.c ****                                   pxTaskDefinition->xRegions );
 656:FreeRTOS\Source/tasks.c **** 
 657:FreeRTOS\Source/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
 658:FreeRTOS\Source/tasks.c ****             xReturn = pdPASS;
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 13


 659:FreeRTOS\Source/tasks.c ****         }
 660:FreeRTOS\Source/tasks.c **** 
 661:FreeRTOS\Source/tasks.c ****         return xReturn;
 662:FreeRTOS\Source/tasks.c ****     }
 663:FreeRTOS\Source/tasks.c **** 
 664:FreeRTOS\Source/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 665:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 666:FreeRTOS\Source/tasks.c **** 
 667:FreeRTOS\Source/tasks.c **** #if ( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 668:FreeRTOS\Source/tasks.c **** 
 669:FreeRTOS\Source/tasks.c ****     BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition,
 670:FreeRTOS\Source/tasks.c ****                                       TaskHandle_t * pxCreatedTask )
 671:FreeRTOS\Source/tasks.c ****     {
 672:FreeRTOS\Source/tasks.c ****         TCB_t * pxNewTCB;
 673:FreeRTOS\Source/tasks.c ****         BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 674:FreeRTOS\Source/tasks.c **** 
 675:FreeRTOS\Source/tasks.c ****         configASSERT( pxTaskDefinition->puxStackBuffer );
 676:FreeRTOS\Source/tasks.c **** 
 677:FreeRTOS\Source/tasks.c ****         if( pxTaskDefinition->puxStackBuffer != NULL )
 678:FreeRTOS\Source/tasks.c ****         {
 679:FreeRTOS\Source/tasks.c ****             /* Allocate space for the TCB.  Where the memory comes from depends
 680:FreeRTOS\Source/tasks.c ****              * on the implementation of the port malloc function and whether or
 681:FreeRTOS\Source/tasks.c ****              * not static allocation is being used. */
 682:FreeRTOS\Source/tasks.c ****             pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 683:FreeRTOS\Source/tasks.c **** 
 684:FreeRTOS\Source/tasks.c ****             if( pxNewTCB != NULL )
 685:FreeRTOS\Source/tasks.c ****             {
 686:FreeRTOS\Source/tasks.c ****                 memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 687:FreeRTOS\Source/tasks.c **** 
 688:FreeRTOS\Source/tasks.c ****                 /* Store the stack location in the TCB. */
 689:FreeRTOS\Source/tasks.c ****                 pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 690:FreeRTOS\Source/tasks.c **** 
 691:FreeRTOS\Source/tasks.c ****                 #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 692:FreeRTOS\Source/tasks.c ****                 {
 693:FreeRTOS\Source/tasks.c ****                     /* Tasks can be created statically or dynamically, so note
 694:FreeRTOS\Source/tasks.c ****                      * this task had a statically allocated stack in case it is
 695:FreeRTOS\Source/tasks.c ****                      * later deleted.  The TCB was allocated dynamically. */
 696:FreeRTOS\Source/tasks.c ****                     pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 697:FreeRTOS\Source/tasks.c ****                 }
 698:FreeRTOS\Source/tasks.c ****                 #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 699:FreeRTOS\Source/tasks.c **** 
 700:FreeRTOS\Source/tasks.c ****                 prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 701:FreeRTOS\Source/tasks.c ****                                       pxTaskDefinition->pcName,
 702:FreeRTOS\Source/tasks.c ****                                       ( uint32_t ) pxTaskDefinition->usStackDepth,
 703:FreeRTOS\Source/tasks.c ****                                       pxTaskDefinition->pvParameters,
 704:FreeRTOS\Source/tasks.c ****                                       pxTaskDefinition->uxPriority,
 705:FreeRTOS\Source/tasks.c ****                                       pxCreatedTask, pxNewTCB,
 706:FreeRTOS\Source/tasks.c ****                                       pxTaskDefinition->xRegions );
 707:FreeRTOS\Source/tasks.c **** 
 708:FreeRTOS\Source/tasks.c ****                 prvAddNewTaskToReadyList( pxNewTCB );
 709:FreeRTOS\Source/tasks.c ****                 xReturn = pdPASS;
 710:FreeRTOS\Source/tasks.c ****             }
 711:FreeRTOS\Source/tasks.c ****         }
 712:FreeRTOS\Source/tasks.c **** 
 713:FreeRTOS\Source/tasks.c ****         return xReturn;
 714:FreeRTOS\Source/tasks.c ****     }
 715:FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 14


 716:FreeRTOS\Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 717:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 718:FreeRTOS\Source/tasks.c **** 
 719:FreeRTOS\Source/tasks.c **** #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 720:FreeRTOS\Source/tasks.c **** 
 721:FreeRTOS\Source/tasks.c ****     BaseType_t xTaskCreate( TaskFunction_t pxTaskCode,
 722:FreeRTOS\Source/tasks.c ****                             const char * const pcName, /*lint !e971 Unqualified char types are allo
 723:FreeRTOS\Source/tasks.c ****                             const configSTACK_DEPTH_TYPE usStackDepth,
 724:FreeRTOS\Source/tasks.c ****                             void * const pvParameters,
 725:FreeRTOS\Source/tasks.c ****                             UBaseType_t uxPriority,
 726:FreeRTOS\Source/tasks.c ****                             TaskHandle_t * const pxCreatedTask )
 727:FreeRTOS\Source/tasks.c ****     {
 728:FreeRTOS\Source/tasks.c ****         TCB_t * pxNewTCB;
 729:FreeRTOS\Source/tasks.c ****         BaseType_t xReturn;
 730:FreeRTOS\Source/tasks.c **** 
 731:FreeRTOS\Source/tasks.c ****         /* If the stack grows down then allocate the stack then the TCB so the stack
 732:FreeRTOS\Source/tasks.c ****          * does not grow into the TCB.  Likewise if the stack grows up then allocate
 733:FreeRTOS\Source/tasks.c ****          * the TCB then the stack. */
 734:FreeRTOS\Source/tasks.c ****         #if ( portSTACK_GROWTH > 0 )
 735:FreeRTOS\Source/tasks.c ****         {
 736:FreeRTOS\Source/tasks.c ****             /* Allocate space for the TCB.  Where the memory comes from depends on
 737:FreeRTOS\Source/tasks.c ****              * the implementation of the port malloc function and whether or not static
 738:FreeRTOS\Source/tasks.c ****              * allocation is being used. */
 739:FreeRTOS\Source/tasks.c ****             pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 740:FreeRTOS\Source/tasks.c **** 
 741:FreeRTOS\Source/tasks.c ****             if( pxNewTCB != NULL )
 742:FreeRTOS\Source/tasks.c ****             {
 743:FreeRTOS\Source/tasks.c ****                 memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 744:FreeRTOS\Source/tasks.c **** 
 745:FreeRTOS\Source/tasks.c ****                 /* Allocate space for the stack used by the task being created.
 746:FreeRTOS\Source/tasks.c ****                  * The base of the stack memory stored in the TCB so the task can
 747:FreeRTOS\Source/tasks.c ****                  * be deleted later if required. */
 748:FreeRTOS\Source/tasks.c ****                 pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocStack( ( ( ( size_t ) usStackDept
 749:FreeRTOS\Source/tasks.c **** 
 750:FreeRTOS\Source/tasks.c ****                 if( pxNewTCB->pxStack == NULL )
 751:FreeRTOS\Source/tasks.c ****                 {
 752:FreeRTOS\Source/tasks.c ****                     /* Could not allocate the stack.  Delete the allocated TCB. */
 753:FreeRTOS\Source/tasks.c ****                     vPortFree( pxNewTCB );
 754:FreeRTOS\Source/tasks.c ****                     pxNewTCB = NULL;
 755:FreeRTOS\Source/tasks.c ****                 }
 756:FreeRTOS\Source/tasks.c ****             }
 757:FreeRTOS\Source/tasks.c ****         }
 758:FreeRTOS\Source/tasks.c ****         #else /* portSTACK_GROWTH */
 759:FreeRTOS\Source/tasks.c ****         {
 760:FreeRTOS\Source/tasks.c ****             StackType_t * pxStack;
 761:FreeRTOS\Source/tasks.c **** 
 762:FreeRTOS\Source/tasks.c ****             /* Allocate space for the stack used by the task being created. */
 763:FreeRTOS\Source/tasks.c ****             pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) );
 764:FreeRTOS\Source/tasks.c **** 
 765:FreeRTOS\Source/tasks.c ****             if( pxStack != NULL )
 766:FreeRTOS\Source/tasks.c ****             {
 767:FreeRTOS\Source/tasks.c ****                 /* Allocate space for the TCB. */
 768:FreeRTOS\Source/tasks.c ****                 pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All va
 769:FreeRTOS\Source/tasks.c **** 
 770:FreeRTOS\Source/tasks.c ****                 if( pxNewTCB != NULL )
 771:FreeRTOS\Source/tasks.c ****                 {
 772:FreeRTOS\Source/tasks.c ****                     memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 15


 773:FreeRTOS\Source/tasks.c **** 
 774:FreeRTOS\Source/tasks.c ****                     /* Store the stack location in the TCB. */
 775:FreeRTOS\Source/tasks.c ****                     pxNewTCB->pxStack = pxStack;
 776:FreeRTOS\Source/tasks.c ****                 }
 777:FreeRTOS\Source/tasks.c ****                 else
 778:FreeRTOS\Source/tasks.c ****                 {
 779:FreeRTOS\Source/tasks.c ****                     /* The stack cannot be used as the TCB was not created.  Free
 780:FreeRTOS\Source/tasks.c ****                      * it again. */
 781:FreeRTOS\Source/tasks.c ****                     vPortFreeStack( pxStack );
 782:FreeRTOS\Source/tasks.c ****                 }
 783:FreeRTOS\Source/tasks.c ****             }
 784:FreeRTOS\Source/tasks.c ****             else
 785:FreeRTOS\Source/tasks.c ****             {
 786:FreeRTOS\Source/tasks.c ****                 pxNewTCB = NULL;
 787:FreeRTOS\Source/tasks.c ****             }
 788:FreeRTOS\Source/tasks.c ****         }
 789:FreeRTOS\Source/tasks.c ****         #endif /* portSTACK_GROWTH */
 790:FreeRTOS\Source/tasks.c **** 
 791:FreeRTOS\Source/tasks.c ****         if( pxNewTCB != NULL )
 792:FreeRTOS\Source/tasks.c ****         {
 793:FreeRTOS\Source/tasks.c ****             #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has be
 794:FreeRTOS\Source/tasks.c ****             {
 795:FreeRTOS\Source/tasks.c ****                 /* Tasks can be created statically or dynamically, so note this
 796:FreeRTOS\Source/tasks.c ****                  * task was created dynamically in case it is later deleted. */
 797:FreeRTOS\Source/tasks.c ****                 pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 798:FreeRTOS\Source/tasks.c ****             }
 799:FreeRTOS\Source/tasks.c ****             #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 800:FreeRTOS\Source/tasks.c **** 
 801:FreeRTOS\Source/tasks.c ****             prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPr
 802:FreeRTOS\Source/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
 803:FreeRTOS\Source/tasks.c ****             xReturn = pdPASS;
 804:FreeRTOS\Source/tasks.c ****         }
 805:FreeRTOS\Source/tasks.c ****         else
 806:FreeRTOS\Source/tasks.c ****         {
 807:FreeRTOS\Source/tasks.c ****             xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 808:FreeRTOS\Source/tasks.c ****         }
 809:FreeRTOS\Source/tasks.c **** 
 810:FreeRTOS\Source/tasks.c ****         return xReturn;
 811:FreeRTOS\Source/tasks.c ****     }
 812:FreeRTOS\Source/tasks.c **** 
 813:FreeRTOS\Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 814:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 815:FreeRTOS\Source/tasks.c **** 
 816:FreeRTOS\Source/tasks.c **** static void prvInitialiseNewTask( TaskFunction_t pxTaskCode,
 817:FreeRTOS\Source/tasks.c ****                                   const char * const pcName, /*lint !e971 Unqualified char types ar
 818:FreeRTOS\Source/tasks.c ****                                   const uint32_t ulStackDepth,
 819:FreeRTOS\Source/tasks.c ****                                   void * const pvParameters,
 820:FreeRTOS\Source/tasks.c ****                                   UBaseType_t uxPriority,
 821:FreeRTOS\Source/tasks.c ****                                   TaskHandle_t * const pxCreatedTask,
 822:FreeRTOS\Source/tasks.c ****                                   TCB_t * pxNewTCB,
 823:FreeRTOS\Source/tasks.c ****                                   const MemoryRegion_t * const xRegions )
 824:FreeRTOS\Source/tasks.c **** {
 825:FreeRTOS\Source/tasks.c ****     StackType_t * pxTopOfStack;
 826:FreeRTOS\Source/tasks.c ****     UBaseType_t x;
 827:FreeRTOS\Source/tasks.c **** 
 828:FreeRTOS\Source/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
 829:FreeRTOS\Source/tasks.c ****         /* Should the task be created in privileged mode? */
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 16


 830:FreeRTOS\Source/tasks.c ****         BaseType_t xRunPrivileged;
 831:FreeRTOS\Source/tasks.c **** 
 832:FreeRTOS\Source/tasks.c ****         if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 833:FreeRTOS\Source/tasks.c ****         {
 834:FreeRTOS\Source/tasks.c ****             xRunPrivileged = pdTRUE;
 835:FreeRTOS\Source/tasks.c ****         }
 836:FreeRTOS\Source/tasks.c ****         else
 837:FreeRTOS\Source/tasks.c ****         {
 838:FreeRTOS\Source/tasks.c ****             xRunPrivileged = pdFALSE;
 839:FreeRTOS\Source/tasks.c ****         }
 840:FreeRTOS\Source/tasks.c ****         uxPriority &= ~portPRIVILEGE_BIT;
 841:FreeRTOS\Source/tasks.c ****     #endif /* portUSING_MPU_WRAPPERS == 1 */
 842:FreeRTOS\Source/tasks.c **** 
 843:FreeRTOS\Source/tasks.c ****     /* Avoid dependency on memset() if it is not required. */
 844:FreeRTOS\Source/tasks.c ****     #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 845:FreeRTOS\Source/tasks.c ****     {
 846:FreeRTOS\Source/tasks.c ****         /* Fill the stack with a known value to assist debugging. */
 847:FreeRTOS\Source/tasks.c ****         ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * s
 848:FreeRTOS\Source/tasks.c ****     }
 849:FreeRTOS\Source/tasks.c ****     #endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 850:FreeRTOS\Source/tasks.c **** 
 851:FreeRTOS\Source/tasks.c ****     /* Calculate the top of stack address.  This depends on whether the stack
 852:FreeRTOS\Source/tasks.c ****      * grows from high memory to low (as per the 80x86) or vice versa.
 853:FreeRTOS\Source/tasks.c ****      * portSTACK_GROWTH is used to make the result positive or negative as required
 854:FreeRTOS\Source/tasks.c ****      * by the port. */
 855:FreeRTOS\Source/tasks.c ****     #if ( portSTACK_GROWTH < 0 )
 856:FreeRTOS\Source/tasks.c ****     {
 857:FreeRTOS\Source/tasks.c ****         pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 858:FreeRTOS\Source/tasks.c ****         pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( port
 859:FreeRTOS\Source/tasks.c **** 
 860:FreeRTOS\Source/tasks.c ****         /* Check the alignment of the calculated top of stack is correct. */
 861:FreeRTOS\Source/tasks.c ****         configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBY
 862:FreeRTOS\Source/tasks.c **** 
 863:FreeRTOS\Source/tasks.c ****         #if ( configRECORD_STACK_HIGH_ADDRESS == 1 )
 864:FreeRTOS\Source/tasks.c ****         {
 865:FreeRTOS\Source/tasks.c ****             /* Also record the stack's high address, which may assist
 866:FreeRTOS\Source/tasks.c ****              * debugging. */
 867:FreeRTOS\Source/tasks.c ****             pxNewTCB->pxEndOfStack = pxTopOfStack;
 868:FreeRTOS\Source/tasks.c ****         }
 869:FreeRTOS\Source/tasks.c ****         #endif /* configRECORD_STACK_HIGH_ADDRESS */
 870:FreeRTOS\Source/tasks.c ****     }
 871:FreeRTOS\Source/tasks.c ****     #else /* portSTACK_GROWTH */
 872:FreeRTOS\Source/tasks.c ****     {
 873:FreeRTOS\Source/tasks.c ****         pxTopOfStack = pxNewTCB->pxStack;
 874:FreeRTOS\Source/tasks.c **** 
 875:FreeRTOS\Source/tasks.c ****         /* Check the alignment of the stack buffer is correct. */
 876:FreeRTOS\Source/tasks.c ****         configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) p
 877:FreeRTOS\Source/tasks.c **** 
 878:FreeRTOS\Source/tasks.c ****         /* The other extreme of the stack space is required if stack checking is
 879:FreeRTOS\Source/tasks.c ****          * performed. */
 880:FreeRTOS\Source/tasks.c ****         pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 881:FreeRTOS\Source/tasks.c ****     }
 882:FreeRTOS\Source/tasks.c ****     #endif /* portSTACK_GROWTH */
 883:FreeRTOS\Source/tasks.c **** 
 884:FreeRTOS\Source/tasks.c ****     /* Store the task name in the TCB. */
 885:FreeRTOS\Source/tasks.c ****     if( pcName != NULL )
 886:FreeRTOS\Source/tasks.c ****     {
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 17


 887:FreeRTOS\Source/tasks.c ****         for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 888:FreeRTOS\Source/tasks.c ****         {
 889:FreeRTOS\Source/tasks.c ****             pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 890:FreeRTOS\Source/tasks.c **** 
 891:FreeRTOS\Source/tasks.c ****             /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 892:FreeRTOS\Source/tasks.c ****              * configMAX_TASK_NAME_LEN characters just in case the memory after the
 893:FreeRTOS\Source/tasks.c ****              * string is not accessible (extremely unlikely). */
 894:FreeRTOS\Source/tasks.c ****             if( pcName[ x ] == ( char ) 0x00 )
 895:FreeRTOS\Source/tasks.c ****             {
 896:FreeRTOS\Source/tasks.c ****                 break;
 897:FreeRTOS\Source/tasks.c ****             }
 898:FreeRTOS\Source/tasks.c ****             else
 899:FreeRTOS\Source/tasks.c ****             {
 900:FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
 901:FreeRTOS\Source/tasks.c ****             }
 902:FreeRTOS\Source/tasks.c ****         }
 903:FreeRTOS\Source/tasks.c **** 
 904:FreeRTOS\Source/tasks.c ****         /* Ensure the name string is terminated in the case that the string length
 905:FreeRTOS\Source/tasks.c ****          * was greater or equal to configMAX_TASK_NAME_LEN. */
 906:FreeRTOS\Source/tasks.c ****         pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 907:FreeRTOS\Source/tasks.c ****     }
 908:FreeRTOS\Source/tasks.c ****     else
 909:FreeRTOS\Source/tasks.c ****     {
 910:FreeRTOS\Source/tasks.c ****         mtCOVERAGE_TEST_MARKER();
 911:FreeRTOS\Source/tasks.c ****     }
 912:FreeRTOS\Source/tasks.c **** 
 913:FreeRTOS\Source/tasks.c ****     /* This is used as an array index so must ensure it's not too large. */
 914:FreeRTOS\Source/tasks.c ****     configASSERT( uxPriority < configMAX_PRIORITIES );
 915:FreeRTOS\Source/tasks.c **** 
 916:FreeRTOS\Source/tasks.c ****     if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 917:FreeRTOS\Source/tasks.c ****     {
 918:FreeRTOS\Source/tasks.c ****         uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 919:FreeRTOS\Source/tasks.c ****     }
 920:FreeRTOS\Source/tasks.c ****     else
 921:FreeRTOS\Source/tasks.c ****     {
 922:FreeRTOS\Source/tasks.c ****         mtCOVERAGE_TEST_MARKER();
 923:FreeRTOS\Source/tasks.c ****     }
 924:FreeRTOS\Source/tasks.c **** 
 925:FreeRTOS\Source/tasks.c ****     pxNewTCB->uxPriority = uxPriority;
 926:FreeRTOS\Source/tasks.c ****     #if ( configUSE_MUTEXES == 1 )
 927:FreeRTOS\Source/tasks.c ****     {
 928:FreeRTOS\Source/tasks.c ****         pxNewTCB->uxBasePriority = uxPriority;
 929:FreeRTOS\Source/tasks.c ****     }
 930:FreeRTOS\Source/tasks.c ****     #endif /* configUSE_MUTEXES */
 931:FreeRTOS\Source/tasks.c **** 
 932:FreeRTOS\Source/tasks.c ****     vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 933:FreeRTOS\Source/tasks.c ****     vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 934:FreeRTOS\Source/tasks.c **** 
 935:FreeRTOS\Source/tasks.c ****     /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 936:FreeRTOS\Source/tasks.c ****      * back to  the containing TCB from a generic item in a list. */
 937:FreeRTOS\Source/tasks.c ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 938:FreeRTOS\Source/tasks.c **** 
 939:FreeRTOS\Source/tasks.c ****     /* Event lists are always in priority order. */
 940:FreeRTOS\Source/tasks.c ****     listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - (
 941:FreeRTOS\Source/tasks.c ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 942:FreeRTOS\Source/tasks.c **** 
 943:FreeRTOS\Source/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 18


 944:FreeRTOS\Source/tasks.c ****     {
 945:FreeRTOS\Source/tasks.c ****         vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStac
 946:FreeRTOS\Source/tasks.c ****     }
 947:FreeRTOS\Source/tasks.c ****     #else
 948:FreeRTOS\Source/tasks.c ****     {
 949:FreeRTOS\Source/tasks.c ****         /* Avoid compiler warning about unreferenced parameter. */
 950:FreeRTOS\Source/tasks.c ****         ( void ) xRegions;
 951:FreeRTOS\Source/tasks.c ****     }
 952:FreeRTOS\Source/tasks.c ****     #endif
 953:FreeRTOS\Source/tasks.c **** 
 954:FreeRTOS\Source/tasks.c ****     #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
 955:FreeRTOS\Source/tasks.c ****     {
 956:FreeRTOS\Source/tasks.c ****         /* Allocate and initialize memory for the task's TLS Block. */
 957:FreeRTOS\Source/tasks.c ****         configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock );
 958:FreeRTOS\Source/tasks.c ****     }
 959:FreeRTOS\Source/tasks.c ****     #endif
 960:FreeRTOS\Source/tasks.c **** 
 961:FreeRTOS\Source/tasks.c ****     /* Initialize the TCB stack to look as if the task was already running,
 962:FreeRTOS\Source/tasks.c ****      * but had been interrupted by the scheduler.  The return address is set
 963:FreeRTOS\Source/tasks.c ****      * to the start of the task function. Once the stack has been initialised
 964:FreeRTOS\Source/tasks.c ****      * the top of stack variable is updated. */
 965:FreeRTOS\Source/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
 966:FreeRTOS\Source/tasks.c ****     {
 967:FreeRTOS\Source/tasks.c ****         /* If the port has capability to detect stack overflow,
 968:FreeRTOS\Source/tasks.c ****          * pass the stack end address to the stack initialization
 969:FreeRTOS\Source/tasks.c ****          * function as well. */
 970:FreeRTOS\Source/tasks.c ****         #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
 971:FreeRTOS\Source/tasks.c ****         {
 972:FreeRTOS\Source/tasks.c ****             #if ( portSTACK_GROWTH < 0 )
 973:FreeRTOS\Source/tasks.c ****             {
 974:FreeRTOS\Source/tasks.c ****                 pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, px
 975:FreeRTOS\Source/tasks.c ****             }
 976:FreeRTOS\Source/tasks.c ****             #else /* portSTACK_GROWTH */
 977:FreeRTOS\Source/tasks.c ****             {
 978:FreeRTOS\Source/tasks.c ****                 pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStac
 979:FreeRTOS\Source/tasks.c ****             }
 980:FreeRTOS\Source/tasks.c ****             #endif /* portSTACK_GROWTH */
 981:FreeRTOS\Source/tasks.c ****         }
 982:FreeRTOS\Source/tasks.c ****         #else /* portHAS_STACK_OVERFLOW_CHECKING */
 983:FreeRTOS\Source/tasks.c ****         {
 984:FreeRTOS\Source/tasks.c ****             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters,
 985:FreeRTOS\Source/tasks.c ****         }
 986:FreeRTOS\Source/tasks.c ****         #endif /* portHAS_STACK_OVERFLOW_CHECKING */
 987:FreeRTOS\Source/tasks.c ****     }
 988:FreeRTOS\Source/tasks.c ****     #else /* portUSING_MPU_WRAPPERS */
 989:FreeRTOS\Source/tasks.c ****     {
 990:FreeRTOS\Source/tasks.c ****         /* If the port has capability to detect stack overflow,
 991:FreeRTOS\Source/tasks.c ****          * pass the stack end address to the stack initialization
 992:FreeRTOS\Source/tasks.c ****          * function as well. */
 993:FreeRTOS\Source/tasks.c ****         #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
 994:FreeRTOS\Source/tasks.c ****         {
 995:FreeRTOS\Source/tasks.c ****             #if ( portSTACK_GROWTH < 0 )
 996:FreeRTOS\Source/tasks.c ****             {
 997:FreeRTOS\Source/tasks.c ****                 pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, px
 998:FreeRTOS\Source/tasks.c ****             }
 999:FreeRTOS\Source/tasks.c ****             #else /* portSTACK_GROWTH */
1000:FreeRTOS\Source/tasks.c ****             {
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 19


1001:FreeRTOS\Source/tasks.c ****                 pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStac
1002:FreeRTOS\Source/tasks.c ****             }
1003:FreeRTOS\Source/tasks.c ****             #endif /* portSTACK_GROWTH */
1004:FreeRTOS\Source/tasks.c ****         }
1005:FreeRTOS\Source/tasks.c ****         #else /* portHAS_STACK_OVERFLOW_CHECKING */
1006:FreeRTOS\Source/tasks.c ****         {
1007:FreeRTOS\Source/tasks.c ****             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters 
1008:FreeRTOS\Source/tasks.c ****         }
1009:FreeRTOS\Source/tasks.c ****         #endif /* portHAS_STACK_OVERFLOW_CHECKING */
1010:FreeRTOS\Source/tasks.c ****     }
1011:FreeRTOS\Source/tasks.c ****     #endif /* portUSING_MPU_WRAPPERS */
1012:FreeRTOS\Source/tasks.c **** 
1013:FreeRTOS\Source/tasks.c ****     if( pxCreatedTask != NULL )
1014:FreeRTOS\Source/tasks.c ****     {
1015:FreeRTOS\Source/tasks.c ****         /* Pass the handle out in an anonymous way.  The handle can be used to
1016:FreeRTOS\Source/tasks.c ****          * change the created task's priority, delete the created task, etc.*/
1017:FreeRTOS\Source/tasks.c ****         *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1018:FreeRTOS\Source/tasks.c ****     }
1019:FreeRTOS\Source/tasks.c ****     else
1020:FreeRTOS\Source/tasks.c ****     {
1021:FreeRTOS\Source/tasks.c ****         mtCOVERAGE_TEST_MARKER();
1022:FreeRTOS\Source/tasks.c ****     }
1023:FreeRTOS\Source/tasks.c **** }
1024:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1025:FreeRTOS\Source/tasks.c **** 
1026:FreeRTOS\Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
1027:FreeRTOS\Source/tasks.c **** {
1028:FreeRTOS\Source/tasks.c ****     /* Ensure interrupts don't access the task lists while the lists are being
1029:FreeRTOS\Source/tasks.c ****      * updated. */
1030:FreeRTOS\Source/tasks.c ****     taskENTER_CRITICAL();
1031:FreeRTOS\Source/tasks.c ****     {
1032:FreeRTOS\Source/tasks.c ****         uxCurrentNumberOfTasks++;
1033:FreeRTOS\Source/tasks.c **** 
1034:FreeRTOS\Source/tasks.c ****         if( pxCurrentTCB == NULL )
1035:FreeRTOS\Source/tasks.c ****         {
1036:FreeRTOS\Source/tasks.c ****             /* There are no other tasks, or all the other tasks are in
1037:FreeRTOS\Source/tasks.c ****              * the suspended state - make this the current task. */
1038:FreeRTOS\Source/tasks.c ****             pxCurrentTCB = pxNewTCB;
1039:FreeRTOS\Source/tasks.c **** 
1040:FreeRTOS\Source/tasks.c ****             if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1041:FreeRTOS\Source/tasks.c ****             {
1042:FreeRTOS\Source/tasks.c ****                 /* This is the first task to be created so do the preliminary
1043:FreeRTOS\Source/tasks.c ****                  * initialisation required.  We will not recover if this call
1044:FreeRTOS\Source/tasks.c ****                  * fails, but we will report the failure. */
1045:FreeRTOS\Source/tasks.c ****                 prvInitialiseTaskLists();
1046:FreeRTOS\Source/tasks.c ****             }
1047:FreeRTOS\Source/tasks.c ****             else
1048:FreeRTOS\Source/tasks.c ****             {
1049:FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1050:FreeRTOS\Source/tasks.c ****             }
1051:FreeRTOS\Source/tasks.c ****         }
1052:FreeRTOS\Source/tasks.c ****         else
1053:FreeRTOS\Source/tasks.c ****         {
1054:FreeRTOS\Source/tasks.c ****             /* If the scheduler is not already running, make this task the
1055:FreeRTOS\Source/tasks.c ****              * current task if it is the highest priority task to be created
1056:FreeRTOS\Source/tasks.c ****              * so far. */
1057:FreeRTOS\Source/tasks.c ****             if( xSchedulerRunning == pdFALSE )
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 20


1058:FreeRTOS\Source/tasks.c ****             {
1059:FreeRTOS\Source/tasks.c ****                 if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1060:FreeRTOS\Source/tasks.c ****                 {
1061:FreeRTOS\Source/tasks.c ****                     pxCurrentTCB = pxNewTCB;
1062:FreeRTOS\Source/tasks.c ****                 }
1063:FreeRTOS\Source/tasks.c ****                 else
1064:FreeRTOS\Source/tasks.c ****                 {
1065:FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1066:FreeRTOS\Source/tasks.c ****                 }
1067:FreeRTOS\Source/tasks.c ****             }
1068:FreeRTOS\Source/tasks.c ****             else
1069:FreeRTOS\Source/tasks.c ****             {
1070:FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1071:FreeRTOS\Source/tasks.c ****             }
1072:FreeRTOS\Source/tasks.c ****         }
1073:FreeRTOS\Source/tasks.c **** 
1074:FreeRTOS\Source/tasks.c ****         uxTaskNumber++;
1075:FreeRTOS\Source/tasks.c **** 
1076:FreeRTOS\Source/tasks.c ****         #if ( configUSE_TRACE_FACILITY == 1 )
1077:FreeRTOS\Source/tasks.c ****         {
1078:FreeRTOS\Source/tasks.c ****             /* Add a counter into the TCB for tracing only. */
1079:FreeRTOS\Source/tasks.c ****             pxNewTCB->uxTCBNumber = uxTaskNumber;
1080:FreeRTOS\Source/tasks.c ****         }
1081:FreeRTOS\Source/tasks.c ****         #endif /* configUSE_TRACE_FACILITY */
1082:FreeRTOS\Source/tasks.c ****         traceTASK_CREATE( pxNewTCB );
1083:FreeRTOS\Source/tasks.c **** 
1084:FreeRTOS\Source/tasks.c ****         prvAddTaskToReadyList( pxNewTCB );
1085:FreeRTOS\Source/tasks.c **** 
1086:FreeRTOS\Source/tasks.c ****         portSETUP_TCB( pxNewTCB );
1087:FreeRTOS\Source/tasks.c ****     }
1088:FreeRTOS\Source/tasks.c ****     taskEXIT_CRITICAL();
1089:FreeRTOS\Source/tasks.c **** 
1090:FreeRTOS\Source/tasks.c ****     if( xSchedulerRunning != pdFALSE )
1091:FreeRTOS\Source/tasks.c ****     {
1092:FreeRTOS\Source/tasks.c ****         /* If the created task is of a higher priority than the current task
1093:FreeRTOS\Source/tasks.c ****          * then it should run now. */
1094:FreeRTOS\Source/tasks.c ****         if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1095:FreeRTOS\Source/tasks.c ****         {
1096:FreeRTOS\Source/tasks.c ****             taskYIELD_IF_USING_PREEMPTION();
1097:FreeRTOS\Source/tasks.c ****         }
1098:FreeRTOS\Source/tasks.c ****         else
1099:FreeRTOS\Source/tasks.c ****         {
1100:FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1101:FreeRTOS\Source/tasks.c ****         }
1102:FreeRTOS\Source/tasks.c ****     }
1103:FreeRTOS\Source/tasks.c ****     else
1104:FreeRTOS\Source/tasks.c ****     {
1105:FreeRTOS\Source/tasks.c ****         mtCOVERAGE_TEST_MARKER();
1106:FreeRTOS\Source/tasks.c ****     }
1107:FreeRTOS\Source/tasks.c **** }
1108:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1109:FreeRTOS\Source/tasks.c **** 
1110:FreeRTOS\Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1111:FreeRTOS\Source/tasks.c **** 
1112:FreeRTOS\Source/tasks.c ****     void vTaskDelete( TaskHandle_t xTaskToDelete )
1113:FreeRTOS\Source/tasks.c ****     {
1114:FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 21


1115:FreeRTOS\Source/tasks.c **** 
1116:FreeRTOS\Source/tasks.c ****         taskENTER_CRITICAL();
1117:FreeRTOS\Source/tasks.c ****         {
1118:FreeRTOS\Source/tasks.c ****             /* If null is passed in here then it is the calling task that is
1119:FreeRTOS\Source/tasks.c ****              * being deleted. */
1120:FreeRTOS\Source/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1121:FreeRTOS\Source/tasks.c **** 
1122:FreeRTOS\Source/tasks.c ****             /* Remove task from the ready/delayed list. */
1123:FreeRTOS\Source/tasks.c ****             if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1124:FreeRTOS\Source/tasks.c ****             {
1125:FreeRTOS\Source/tasks.c ****                 taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1126:FreeRTOS\Source/tasks.c ****             }
1127:FreeRTOS\Source/tasks.c ****             else
1128:FreeRTOS\Source/tasks.c ****             {
1129:FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1130:FreeRTOS\Source/tasks.c ****             }
1131:FreeRTOS\Source/tasks.c **** 
1132:FreeRTOS\Source/tasks.c ****             /* Is the task waiting on an event also? */
1133:FreeRTOS\Source/tasks.c ****             if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1134:FreeRTOS\Source/tasks.c ****             {
1135:FreeRTOS\Source/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1136:FreeRTOS\Source/tasks.c ****             }
1137:FreeRTOS\Source/tasks.c ****             else
1138:FreeRTOS\Source/tasks.c ****             {
1139:FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1140:FreeRTOS\Source/tasks.c ****             }
1141:FreeRTOS\Source/tasks.c **** 
1142:FreeRTOS\Source/tasks.c ****             /* Increment the uxTaskNumber also so kernel aware debuggers can
1143:FreeRTOS\Source/tasks.c ****              * detect that the task lists need re-generating.  This is done before
1144:FreeRTOS\Source/tasks.c ****              * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1145:FreeRTOS\Source/tasks.c ****              * not return. */
1146:FreeRTOS\Source/tasks.c ****             uxTaskNumber++;
1147:FreeRTOS\Source/tasks.c **** 
1148:FreeRTOS\Source/tasks.c ****             if( pxTCB == pxCurrentTCB )
1149:FreeRTOS\Source/tasks.c ****             {
1150:FreeRTOS\Source/tasks.c ****                 /* A task is deleting itself.  This cannot complete within the
1151:FreeRTOS\Source/tasks.c ****                  * task itself, as a context switch to another task is required.
1152:FreeRTOS\Source/tasks.c ****                  * Place the task in the termination list.  The idle task will
1153:FreeRTOS\Source/tasks.c ****                  * check the termination list and free up any memory allocated by
1154:FreeRTOS\Source/tasks.c ****                  * the scheduler for the TCB and stack of the deleted task. */
1155:FreeRTOS\Source/tasks.c ****                 vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1156:FreeRTOS\Source/tasks.c **** 
1157:FreeRTOS\Source/tasks.c ****                 /* Increment the ucTasksDeleted variable so the idle task knows
1158:FreeRTOS\Source/tasks.c ****                  * there is a task that has been deleted and that it should therefore
1159:FreeRTOS\Source/tasks.c ****                  * check the xTasksWaitingTermination list. */
1160:FreeRTOS\Source/tasks.c ****                 ++uxDeletedTasksWaitingCleanUp;
1161:FreeRTOS\Source/tasks.c **** 
1162:FreeRTOS\Source/tasks.c ****                 /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
1163:FreeRTOS\Source/tasks.c ****                  * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
1164:FreeRTOS\Source/tasks.c ****                 traceTASK_DELETE( pxTCB );
1165:FreeRTOS\Source/tasks.c **** 
1166:FreeRTOS\Source/tasks.c ****                 /* The pre-delete hook is primarily for the Windows simulator,
1167:FreeRTOS\Source/tasks.c ****                  * in which Windows specific clean up operations are performed,
1168:FreeRTOS\Source/tasks.c ****                  * after which it is not possible to yield away from this task -
1169:FreeRTOS\Source/tasks.c ****                  * hence xYieldPending is used to latch that a context switch is
1170:FreeRTOS\Source/tasks.c ****                  * required. */
1171:FreeRTOS\Source/tasks.c ****                 portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 22


1172:FreeRTOS\Source/tasks.c ****             }
1173:FreeRTOS\Source/tasks.c ****             else
1174:FreeRTOS\Source/tasks.c ****             {
1175:FreeRTOS\Source/tasks.c ****                 --uxCurrentNumberOfTasks;
1176:FreeRTOS\Source/tasks.c ****                 traceTASK_DELETE( pxTCB );
1177:FreeRTOS\Source/tasks.c **** 
1178:FreeRTOS\Source/tasks.c ****                 /* Reset the next expected unblock time in case it referred to
1179:FreeRTOS\Source/tasks.c ****                  * the task that has just been deleted. */
1180:FreeRTOS\Source/tasks.c ****                 prvResetNextTaskUnblockTime();
1181:FreeRTOS\Source/tasks.c ****             }
1182:FreeRTOS\Source/tasks.c ****         }
1183:FreeRTOS\Source/tasks.c ****         taskEXIT_CRITICAL();
1184:FreeRTOS\Source/tasks.c **** 
1185:FreeRTOS\Source/tasks.c ****         /* If the task is not deleting itself, call prvDeleteTCB from outside of
1186:FreeRTOS\Source/tasks.c ****          * critical section. If a task deletes itself, prvDeleteTCB is called
1187:FreeRTOS\Source/tasks.c ****          * from prvCheckTasksWaitingTermination which is called from Idle task. */
1188:FreeRTOS\Source/tasks.c ****         if( pxTCB != pxCurrentTCB )
1189:FreeRTOS\Source/tasks.c ****         {
1190:FreeRTOS\Source/tasks.c ****             prvDeleteTCB( pxTCB );
1191:FreeRTOS\Source/tasks.c ****         }
1192:FreeRTOS\Source/tasks.c **** 
1193:FreeRTOS\Source/tasks.c ****         /* Force a reschedule if it is the currently running task that has just
1194:FreeRTOS\Source/tasks.c ****          * been deleted. */
1195:FreeRTOS\Source/tasks.c ****         if( xSchedulerRunning != pdFALSE )
1196:FreeRTOS\Source/tasks.c ****         {
1197:FreeRTOS\Source/tasks.c ****             if( pxTCB == pxCurrentTCB )
1198:FreeRTOS\Source/tasks.c ****             {
1199:FreeRTOS\Source/tasks.c ****                 configASSERT( uxSchedulerSuspended == 0 );
1200:FreeRTOS\Source/tasks.c ****                 portYIELD_WITHIN_API();
1201:FreeRTOS\Source/tasks.c ****             }
1202:FreeRTOS\Source/tasks.c ****             else
1203:FreeRTOS\Source/tasks.c ****             {
1204:FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1205:FreeRTOS\Source/tasks.c ****             }
1206:FreeRTOS\Source/tasks.c ****         }
1207:FreeRTOS\Source/tasks.c ****     }
1208:FreeRTOS\Source/tasks.c **** 
1209:FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1210:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1211:FreeRTOS\Source/tasks.c **** 
1212:FreeRTOS\Source/tasks.c **** #if ( INCLUDE_xTaskDelayUntil == 1 )
1213:FreeRTOS\Source/tasks.c **** 
1214:FreeRTOS\Source/tasks.c ****     BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
1215:FreeRTOS\Source/tasks.c ****                                 const TickType_t xTimeIncrement )
1216:FreeRTOS\Source/tasks.c ****     {
1217:FreeRTOS\Source/tasks.c ****         TickType_t xTimeToWake;
1218:FreeRTOS\Source/tasks.c ****         BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1219:FreeRTOS\Source/tasks.c **** 
1220:FreeRTOS\Source/tasks.c ****         configASSERT( pxPreviousWakeTime );
1221:FreeRTOS\Source/tasks.c ****         configASSERT( ( xTimeIncrement > 0U ) );
1222:FreeRTOS\Source/tasks.c ****         configASSERT( uxSchedulerSuspended == 0 );
1223:FreeRTOS\Source/tasks.c **** 
1224:FreeRTOS\Source/tasks.c ****         vTaskSuspendAll();
1225:FreeRTOS\Source/tasks.c ****         {
1226:FreeRTOS\Source/tasks.c ****             /* Minor optimisation.  The tick count cannot change in this
1227:FreeRTOS\Source/tasks.c ****              * block. */
1228:FreeRTOS\Source/tasks.c ****             const TickType_t xConstTickCount = xTickCount;
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 23


1229:FreeRTOS\Source/tasks.c **** 
1230:FreeRTOS\Source/tasks.c ****             /* Generate the tick time at which the task wants to wake. */
1231:FreeRTOS\Source/tasks.c ****             xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1232:FreeRTOS\Source/tasks.c **** 
1233:FreeRTOS\Source/tasks.c ****             if( xConstTickCount < *pxPreviousWakeTime )
1234:FreeRTOS\Source/tasks.c ****             {
1235:FreeRTOS\Source/tasks.c ****                 /* The tick count has overflowed since this function was
1236:FreeRTOS\Source/tasks.c ****                  * lasted called.  In this case the only time we should ever
1237:FreeRTOS\Source/tasks.c ****                  * actually delay is if the wake time has also  overflowed,
1238:FreeRTOS\Source/tasks.c ****                  * and the wake time is greater than the tick time.  When this
1239:FreeRTOS\Source/tasks.c ****                  * is the case it is as if neither time had overflowed. */
1240:FreeRTOS\Source/tasks.c ****                 if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1241:FreeRTOS\Source/tasks.c ****                 {
1242:FreeRTOS\Source/tasks.c ****                     xShouldDelay = pdTRUE;
1243:FreeRTOS\Source/tasks.c ****                 }
1244:FreeRTOS\Source/tasks.c ****                 else
1245:FreeRTOS\Source/tasks.c ****                 {
1246:FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1247:FreeRTOS\Source/tasks.c ****                 }
1248:FreeRTOS\Source/tasks.c ****             }
1249:FreeRTOS\Source/tasks.c ****             else
1250:FreeRTOS\Source/tasks.c ****             {
1251:FreeRTOS\Source/tasks.c ****                 /* The tick time has not overflowed.  In this case we will
1252:FreeRTOS\Source/tasks.c ****                  * delay if either the wake time has overflowed, and/or the
1253:FreeRTOS\Source/tasks.c ****                  * tick time is less than the wake time. */
1254:FreeRTOS\Source/tasks.c ****                 if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1255:FreeRTOS\Source/tasks.c ****                 {
1256:FreeRTOS\Source/tasks.c ****                     xShouldDelay = pdTRUE;
1257:FreeRTOS\Source/tasks.c ****                 }
1258:FreeRTOS\Source/tasks.c ****                 else
1259:FreeRTOS\Source/tasks.c ****                 {
1260:FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1261:FreeRTOS\Source/tasks.c ****                 }
1262:FreeRTOS\Source/tasks.c ****             }
1263:FreeRTOS\Source/tasks.c **** 
1264:FreeRTOS\Source/tasks.c ****             /* Update the wake time ready for the next call. */
1265:FreeRTOS\Source/tasks.c ****             *pxPreviousWakeTime = xTimeToWake;
1266:FreeRTOS\Source/tasks.c **** 
1267:FreeRTOS\Source/tasks.c ****             if( xShouldDelay != pdFALSE )
1268:FreeRTOS\Source/tasks.c ****             {
1269:FreeRTOS\Source/tasks.c ****                 traceTASK_DELAY_UNTIL( xTimeToWake );
1270:FreeRTOS\Source/tasks.c **** 
1271:FreeRTOS\Source/tasks.c ****                 /* prvAddCurrentTaskToDelayedList() needs the block time, not
1272:FreeRTOS\Source/tasks.c ****                  * the time to wake, so subtract the current tick count. */
1273:FreeRTOS\Source/tasks.c ****                 prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1274:FreeRTOS\Source/tasks.c ****             }
1275:FreeRTOS\Source/tasks.c ****             else
1276:FreeRTOS\Source/tasks.c ****             {
1277:FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1278:FreeRTOS\Source/tasks.c ****             }
1279:FreeRTOS\Source/tasks.c ****         }
1280:FreeRTOS\Source/tasks.c ****         xAlreadyYielded = xTaskResumeAll();
1281:FreeRTOS\Source/tasks.c **** 
1282:FreeRTOS\Source/tasks.c ****         /* Force a reschedule if xTaskResumeAll has not already done so, we may
1283:FreeRTOS\Source/tasks.c ****          * have put ourselves to sleep. */
1284:FreeRTOS\Source/tasks.c ****         if( xAlreadyYielded == pdFALSE )
1285:FreeRTOS\Source/tasks.c ****         {
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 24


1286:FreeRTOS\Source/tasks.c ****             portYIELD_WITHIN_API();
1287:FreeRTOS\Source/tasks.c ****         }
1288:FreeRTOS\Source/tasks.c ****         else
1289:FreeRTOS\Source/tasks.c ****         {
1290:FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1291:FreeRTOS\Source/tasks.c ****         }
1292:FreeRTOS\Source/tasks.c **** 
1293:FreeRTOS\Source/tasks.c ****         return xShouldDelay;
1294:FreeRTOS\Source/tasks.c ****     }
1295:FreeRTOS\Source/tasks.c **** 
1296:FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_xTaskDelayUntil */
1297:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1298:FreeRTOS\Source/tasks.c **** 
1299:FreeRTOS\Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1300:FreeRTOS\Source/tasks.c **** 
1301:FreeRTOS\Source/tasks.c ****     void vTaskDelay( const TickType_t xTicksToDelay )
1302:FreeRTOS\Source/tasks.c ****     {
1303:FreeRTOS\Source/tasks.c ****         BaseType_t xAlreadyYielded = pdFALSE;
1304:FreeRTOS\Source/tasks.c **** 
1305:FreeRTOS\Source/tasks.c ****         /* A delay time of zero just forces a reschedule. */
1306:FreeRTOS\Source/tasks.c ****         if( xTicksToDelay > ( TickType_t ) 0U )
1307:FreeRTOS\Source/tasks.c ****         {
1308:FreeRTOS\Source/tasks.c ****             configASSERT( uxSchedulerSuspended == 0 );
1309:FreeRTOS\Source/tasks.c ****             vTaskSuspendAll();
1310:FreeRTOS\Source/tasks.c ****             {
1311:FreeRTOS\Source/tasks.c ****                 traceTASK_DELAY();
1312:FreeRTOS\Source/tasks.c **** 
1313:FreeRTOS\Source/tasks.c ****                 /* A task that is removed from the event list while the
1314:FreeRTOS\Source/tasks.c ****                  * scheduler is suspended will not get placed in the ready
1315:FreeRTOS\Source/tasks.c ****                  * list or removed from the blocked list until the scheduler
1316:FreeRTOS\Source/tasks.c ****                  * is resumed.
1317:FreeRTOS\Source/tasks.c ****                  *
1318:FreeRTOS\Source/tasks.c ****                  * This task cannot be in an event list as it is the currently
1319:FreeRTOS\Source/tasks.c ****                  * executing task. */
1320:FreeRTOS\Source/tasks.c ****                 prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1321:FreeRTOS\Source/tasks.c ****             }
1322:FreeRTOS\Source/tasks.c ****             xAlreadyYielded = xTaskResumeAll();
1323:FreeRTOS\Source/tasks.c ****         }
1324:FreeRTOS\Source/tasks.c ****         else
1325:FreeRTOS\Source/tasks.c ****         {
1326:FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1327:FreeRTOS\Source/tasks.c ****         }
1328:FreeRTOS\Source/tasks.c **** 
1329:FreeRTOS\Source/tasks.c ****         /* Force a reschedule if xTaskResumeAll has not already done so, we may
1330:FreeRTOS\Source/tasks.c ****          * have put ourselves to sleep. */
1331:FreeRTOS\Source/tasks.c ****         if( xAlreadyYielded == pdFALSE )
1332:FreeRTOS\Source/tasks.c ****         {
1333:FreeRTOS\Source/tasks.c ****             portYIELD_WITHIN_API();
1334:FreeRTOS\Source/tasks.c ****         }
1335:FreeRTOS\Source/tasks.c ****         else
1336:FreeRTOS\Source/tasks.c ****         {
1337:FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1338:FreeRTOS\Source/tasks.c ****         }
1339:FreeRTOS\Source/tasks.c ****     }
1340:FreeRTOS\Source/tasks.c **** 
1341:FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1342:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 25


1343:FreeRTOS\Source/tasks.c **** 
1344:FreeRTOS\Source/tasks.c **** #if ( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDe
1345:FreeRTOS\Source/tasks.c **** 
1346:FreeRTOS\Source/tasks.c ****     eTaskState eTaskGetState( TaskHandle_t xTask )
1347:FreeRTOS\Source/tasks.c ****     {
1348:FreeRTOS\Source/tasks.c ****         eTaskState eReturn;
1349:FreeRTOS\Source/tasks.c ****         List_t const * pxStateList;
1350:FreeRTOS\Source/tasks.c ****         List_t const * pxDelayedList;
1351:FreeRTOS\Source/tasks.c ****         List_t const * pxOverflowedDelayedList;
1352:FreeRTOS\Source/tasks.c ****         const TCB_t * const pxTCB = xTask;
1353:FreeRTOS\Source/tasks.c **** 
1354:FreeRTOS\Source/tasks.c ****         configASSERT( pxTCB );
1355:FreeRTOS\Source/tasks.c **** 
1356:FreeRTOS\Source/tasks.c ****         if( pxTCB == pxCurrentTCB )
1357:FreeRTOS\Source/tasks.c ****         {
1358:FreeRTOS\Source/tasks.c ****             /* The task calling this function is querying its own state. */
1359:FreeRTOS\Source/tasks.c ****             eReturn = eRunning;
1360:FreeRTOS\Source/tasks.c ****         }
1361:FreeRTOS\Source/tasks.c ****         else
1362:FreeRTOS\Source/tasks.c ****         {
1363:FreeRTOS\Source/tasks.c ****             taskENTER_CRITICAL();
1364:FreeRTOS\Source/tasks.c ****             {
1365:FreeRTOS\Source/tasks.c ****                 pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1366:FreeRTOS\Source/tasks.c ****                 pxDelayedList = pxDelayedTaskList;
1367:FreeRTOS\Source/tasks.c ****                 pxOverflowedDelayedList = pxOverflowDelayedTaskList;
1368:FreeRTOS\Source/tasks.c ****             }
1369:FreeRTOS\Source/tasks.c ****             taskEXIT_CRITICAL();
1370:FreeRTOS\Source/tasks.c **** 
1371:FreeRTOS\Source/tasks.c ****             if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
1372:FreeRTOS\Source/tasks.c ****             {
1373:FreeRTOS\Source/tasks.c ****                 /* The task being queried is referenced from one of the Blocked
1374:FreeRTOS\Source/tasks.c ****                  * lists. */
1375:FreeRTOS\Source/tasks.c ****                 eReturn = eBlocked;
1376:FreeRTOS\Source/tasks.c ****             }
1377:FreeRTOS\Source/tasks.c **** 
1378:FreeRTOS\Source/tasks.c ****             #if ( INCLUDE_vTaskSuspend == 1 )
1379:FreeRTOS\Source/tasks.c ****                 else if( pxStateList == &xSuspendedTaskList )
1380:FreeRTOS\Source/tasks.c ****                 {
1381:FreeRTOS\Source/tasks.c ****                     /* The task being queried is referenced from the suspended
1382:FreeRTOS\Source/tasks.c ****                      * list.  Is it genuinely suspended or is it blocked
1383:FreeRTOS\Source/tasks.c ****                      * indefinitely? */
1384:FreeRTOS\Source/tasks.c ****                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1385:FreeRTOS\Source/tasks.c ****                     {
1386:FreeRTOS\Source/tasks.c ****                         #if ( configUSE_TASK_NOTIFICATIONS == 1 )
1387:FreeRTOS\Source/tasks.c ****                         {
1388:FreeRTOS\Source/tasks.c ****                             BaseType_t x;
1389:FreeRTOS\Source/tasks.c **** 
1390:FreeRTOS\Source/tasks.c ****                             /* The task does not appear on the event list item of
1391:FreeRTOS\Source/tasks.c ****                              * and of the RTOS objects, but could still be in the
1392:FreeRTOS\Source/tasks.c ****                              * blocked state if it is waiting on its notification
1393:FreeRTOS\Source/tasks.c ****                              * rather than waiting on an object.  If not, is
1394:FreeRTOS\Source/tasks.c ****                              * suspended. */
1395:FreeRTOS\Source/tasks.c ****                             eReturn = eSuspended;
1396:FreeRTOS\Source/tasks.c **** 
1397:FreeRTOS\Source/tasks.c ****                             for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
1398:FreeRTOS\Source/tasks.c ****                             {
1399:FreeRTOS\Source/tasks.c ****                                 if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 26


1400:FreeRTOS\Source/tasks.c ****                                 {
1401:FreeRTOS\Source/tasks.c ****                                     eReturn = eBlocked;
1402:FreeRTOS\Source/tasks.c ****                                     break;
1403:FreeRTOS\Source/tasks.c ****                                 }
1404:FreeRTOS\Source/tasks.c ****                             }
1405:FreeRTOS\Source/tasks.c ****                         }
1406:FreeRTOS\Source/tasks.c ****                         #else /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
1407:FreeRTOS\Source/tasks.c ****                         {
1408:FreeRTOS\Source/tasks.c ****                             eReturn = eSuspended;
1409:FreeRTOS\Source/tasks.c ****                         }
1410:FreeRTOS\Source/tasks.c ****                         #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
1411:FreeRTOS\Source/tasks.c ****                     }
1412:FreeRTOS\Source/tasks.c ****                     else
1413:FreeRTOS\Source/tasks.c ****                     {
1414:FreeRTOS\Source/tasks.c ****                         eReturn = eBlocked;
1415:FreeRTOS\Source/tasks.c ****                     }
1416:FreeRTOS\Source/tasks.c ****                 }
1417:FreeRTOS\Source/tasks.c ****             #endif /* if ( INCLUDE_vTaskSuspend == 1 ) */
1418:FreeRTOS\Source/tasks.c **** 
1419:FreeRTOS\Source/tasks.c ****             #if ( INCLUDE_vTaskDelete == 1 )
1420:FreeRTOS\Source/tasks.c ****                 else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1421:FreeRTOS\Source/tasks.c ****                 {
1422:FreeRTOS\Source/tasks.c ****                     /* The task being queried is referenced from the deleted
1423:FreeRTOS\Source/tasks.c ****                      * tasks list, or it is not referenced from any lists at
1424:FreeRTOS\Source/tasks.c ****                      * all. */
1425:FreeRTOS\Source/tasks.c ****                     eReturn = eDeleted;
1426:FreeRTOS\Source/tasks.c ****                 }
1427:FreeRTOS\Source/tasks.c ****             #endif
1428:FreeRTOS\Source/tasks.c **** 
1429:FreeRTOS\Source/tasks.c ****             else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer
1430:FreeRTOS\Source/tasks.c ****             {
1431:FreeRTOS\Source/tasks.c ****                 /* If the task is not in any other state, it must be in the
1432:FreeRTOS\Source/tasks.c ****                  * Ready (including pending ready) state. */
1433:FreeRTOS\Source/tasks.c ****                 eReturn = eReady;
1434:FreeRTOS\Source/tasks.c ****             }
1435:FreeRTOS\Source/tasks.c ****         }
1436:FreeRTOS\Source/tasks.c **** 
1437:FreeRTOS\Source/tasks.c ****         return eReturn;
1438:FreeRTOS\Source/tasks.c ****     } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1439:FreeRTOS\Source/tasks.c **** 
1440:FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1441:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1442:FreeRTOS\Source/tasks.c **** 
1443:FreeRTOS\Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1444:FreeRTOS\Source/tasks.c **** 
1445:FreeRTOS\Source/tasks.c ****     UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1446:FreeRTOS\Source/tasks.c ****     {
1447:FreeRTOS\Source/tasks.c ****         TCB_t const * pxTCB;
1448:FreeRTOS\Source/tasks.c ****         UBaseType_t uxReturn;
1449:FreeRTOS\Source/tasks.c **** 
1450:FreeRTOS\Source/tasks.c ****         taskENTER_CRITICAL();
1451:FreeRTOS\Source/tasks.c ****         {
1452:FreeRTOS\Source/tasks.c ****             /* If null is passed in here then it is the priority of the task
1453:FreeRTOS\Source/tasks.c ****              * that called uxTaskPriorityGet() that is being queried. */
1454:FreeRTOS\Source/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
1455:FreeRTOS\Source/tasks.c ****             uxReturn = pxTCB->uxPriority;
1456:FreeRTOS\Source/tasks.c ****         }
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 27


1457:FreeRTOS\Source/tasks.c ****         taskEXIT_CRITICAL();
1458:FreeRTOS\Source/tasks.c **** 
1459:FreeRTOS\Source/tasks.c ****         return uxReturn;
1460:FreeRTOS\Source/tasks.c ****     }
1461:FreeRTOS\Source/tasks.c **** 
1462:FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1463:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1464:FreeRTOS\Source/tasks.c **** 
1465:FreeRTOS\Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1466:FreeRTOS\Source/tasks.c **** 
1467:FreeRTOS\Source/tasks.c ****     UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
1468:FreeRTOS\Source/tasks.c ****     {
1469:FreeRTOS\Source/tasks.c ****         TCB_t const * pxTCB;
1470:FreeRTOS\Source/tasks.c ****         UBaseType_t uxReturn, uxSavedInterruptState;
1471:FreeRTOS\Source/tasks.c **** 
1472:FreeRTOS\Source/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
1473:FreeRTOS\Source/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
1474:FreeRTOS\Source/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
1475:FreeRTOS\Source/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
1476:FreeRTOS\Source/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1477:FreeRTOS\Source/tasks.c ****          * is defined in FreeRTOSConfig.h then
1478:FreeRTOS\Source/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1479:FreeRTOS\Source/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
1480:FreeRTOS\Source/tasks.c ****          * been assigned a priority above the configured maximum system call
1481:FreeRTOS\Source/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
1482:FreeRTOS\Source/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
1483:FreeRTOS\Source/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
1484:FreeRTOS\Source/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
1485:FreeRTOS\Source/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
1486:FreeRTOS\Source/tasks.c ****          * provided on the following link:
1487:FreeRTOS\Source/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1488:FreeRTOS\Source/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1489:FreeRTOS\Source/tasks.c **** 
1490:FreeRTOS\Source/tasks.c ****         uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1491:FreeRTOS\Source/tasks.c ****         {
1492:FreeRTOS\Source/tasks.c ****             /* If null is passed in here then it is the priority of the calling
1493:FreeRTOS\Source/tasks.c ****              * task that is being queried. */
1494:FreeRTOS\Source/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
1495:FreeRTOS\Source/tasks.c ****             uxReturn = pxTCB->uxPriority;
1496:FreeRTOS\Source/tasks.c ****         }
1497:FreeRTOS\Source/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1498:FreeRTOS\Source/tasks.c **** 
1499:FreeRTOS\Source/tasks.c ****         return uxReturn;
1500:FreeRTOS\Source/tasks.c ****     }
1501:FreeRTOS\Source/tasks.c **** 
1502:FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1503:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1504:FreeRTOS\Source/tasks.c **** 
1505:FreeRTOS\Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1506:FreeRTOS\Source/tasks.c **** 
1507:FreeRTOS\Source/tasks.c ****     void vTaskPrioritySet( TaskHandle_t xTask,
1508:FreeRTOS\Source/tasks.c ****                            UBaseType_t uxNewPriority )
1509:FreeRTOS\Source/tasks.c ****     {
1510:FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
1511:FreeRTOS\Source/tasks.c ****         UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1512:FreeRTOS\Source/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
1513:FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 28


1514:FreeRTOS\Source/tasks.c ****         configASSERT( uxNewPriority < configMAX_PRIORITIES );
1515:FreeRTOS\Source/tasks.c **** 
1516:FreeRTOS\Source/tasks.c ****         /* Ensure the new priority is valid. */
1517:FreeRTOS\Source/tasks.c ****         if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1518:FreeRTOS\Source/tasks.c ****         {
1519:FreeRTOS\Source/tasks.c ****             uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1520:FreeRTOS\Source/tasks.c ****         }
1521:FreeRTOS\Source/tasks.c ****         else
1522:FreeRTOS\Source/tasks.c ****         {
1523:FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1524:FreeRTOS\Source/tasks.c ****         }
1525:FreeRTOS\Source/tasks.c **** 
1526:FreeRTOS\Source/tasks.c ****         taskENTER_CRITICAL();
1527:FreeRTOS\Source/tasks.c ****         {
1528:FreeRTOS\Source/tasks.c ****             /* If null is passed in here then it is the priority of the calling
1529:FreeRTOS\Source/tasks.c ****              * task that is being changed. */
1530:FreeRTOS\Source/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
1531:FreeRTOS\Source/tasks.c **** 
1532:FreeRTOS\Source/tasks.c ****             traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1533:FreeRTOS\Source/tasks.c **** 
1534:FreeRTOS\Source/tasks.c ****             #if ( configUSE_MUTEXES == 1 )
1535:FreeRTOS\Source/tasks.c ****             {
1536:FreeRTOS\Source/tasks.c ****                 uxCurrentBasePriority = pxTCB->uxBasePriority;
1537:FreeRTOS\Source/tasks.c ****             }
1538:FreeRTOS\Source/tasks.c ****             #else
1539:FreeRTOS\Source/tasks.c ****             {
1540:FreeRTOS\Source/tasks.c ****                 uxCurrentBasePriority = pxTCB->uxPriority;
1541:FreeRTOS\Source/tasks.c ****             }
1542:FreeRTOS\Source/tasks.c ****             #endif
1543:FreeRTOS\Source/tasks.c **** 
1544:FreeRTOS\Source/tasks.c ****             if( uxCurrentBasePriority != uxNewPriority )
1545:FreeRTOS\Source/tasks.c ****             {
1546:FreeRTOS\Source/tasks.c ****                 /* The priority change may have readied a task of higher
1547:FreeRTOS\Source/tasks.c ****                  * priority than the calling task. */
1548:FreeRTOS\Source/tasks.c ****                 if( uxNewPriority > uxCurrentBasePriority )
1549:FreeRTOS\Source/tasks.c ****                 {
1550:FreeRTOS\Source/tasks.c ****                     if( pxTCB != pxCurrentTCB )
1551:FreeRTOS\Source/tasks.c ****                     {
1552:FreeRTOS\Source/tasks.c ****                         /* The priority of a task other than the currently
1553:FreeRTOS\Source/tasks.c ****                          * running task is being raised.  Is the priority being
1554:FreeRTOS\Source/tasks.c ****                          * raised above that of the running task? */
1555:FreeRTOS\Source/tasks.c ****                         if( uxNewPriority >= pxCurrentTCB->uxPriority )
1556:FreeRTOS\Source/tasks.c ****                         {
1557:FreeRTOS\Source/tasks.c ****                             xYieldRequired = pdTRUE;
1558:FreeRTOS\Source/tasks.c ****                         }
1559:FreeRTOS\Source/tasks.c ****                         else
1560:FreeRTOS\Source/tasks.c ****                         {
1561:FreeRTOS\Source/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
1562:FreeRTOS\Source/tasks.c ****                         }
1563:FreeRTOS\Source/tasks.c ****                     }
1564:FreeRTOS\Source/tasks.c ****                     else
1565:FreeRTOS\Source/tasks.c ****                     {
1566:FreeRTOS\Source/tasks.c ****                         /* The priority of the running task is being raised,
1567:FreeRTOS\Source/tasks.c ****                          * but the running task must already be the highest
1568:FreeRTOS\Source/tasks.c ****                          * priority task able to run so no yield is required. */
1569:FreeRTOS\Source/tasks.c ****                     }
1570:FreeRTOS\Source/tasks.c ****                 }
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 29


1571:FreeRTOS\Source/tasks.c ****                 else if( pxTCB == pxCurrentTCB )
1572:FreeRTOS\Source/tasks.c ****                 {
1573:FreeRTOS\Source/tasks.c ****                     /* Setting the priority of the running task down means
1574:FreeRTOS\Source/tasks.c ****                      * there may now be another task of higher priority that
1575:FreeRTOS\Source/tasks.c ****                      * is ready to execute. */
1576:FreeRTOS\Source/tasks.c ****                     xYieldRequired = pdTRUE;
1577:FreeRTOS\Source/tasks.c ****                 }
1578:FreeRTOS\Source/tasks.c ****                 else
1579:FreeRTOS\Source/tasks.c ****                 {
1580:FreeRTOS\Source/tasks.c ****                     /* Setting the priority of any other task down does not
1581:FreeRTOS\Source/tasks.c ****                      * require a yield as the running task must be above the
1582:FreeRTOS\Source/tasks.c ****                      * new priority of the task being modified. */
1583:FreeRTOS\Source/tasks.c ****                 }
1584:FreeRTOS\Source/tasks.c **** 
1585:FreeRTOS\Source/tasks.c ****                 /* Remember the ready list the task might be referenced from
1586:FreeRTOS\Source/tasks.c ****                  * before its uxPriority member is changed so the
1587:FreeRTOS\Source/tasks.c ****                  * taskRESET_READY_PRIORITY() macro can function correctly. */
1588:FreeRTOS\Source/tasks.c ****                 uxPriorityUsedOnEntry = pxTCB->uxPriority;
1589:FreeRTOS\Source/tasks.c **** 
1590:FreeRTOS\Source/tasks.c ****                 #if ( configUSE_MUTEXES == 1 )
1591:FreeRTOS\Source/tasks.c ****                 {
1592:FreeRTOS\Source/tasks.c ****                     /* Only change the priority being used if the task is not
1593:FreeRTOS\Source/tasks.c ****                      * currently using an inherited priority. */
1594:FreeRTOS\Source/tasks.c ****                     if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1595:FreeRTOS\Source/tasks.c ****                     {
1596:FreeRTOS\Source/tasks.c ****                         pxTCB->uxPriority = uxNewPriority;
1597:FreeRTOS\Source/tasks.c ****                     }
1598:FreeRTOS\Source/tasks.c ****                     else
1599:FreeRTOS\Source/tasks.c ****                     {
1600:FreeRTOS\Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
1601:FreeRTOS\Source/tasks.c ****                     }
1602:FreeRTOS\Source/tasks.c **** 
1603:FreeRTOS\Source/tasks.c ****                     /* The base priority gets set whatever. */
1604:FreeRTOS\Source/tasks.c ****                     pxTCB->uxBasePriority = uxNewPriority;
1605:FreeRTOS\Source/tasks.c ****                 }
1606:FreeRTOS\Source/tasks.c ****                 #else /* if ( configUSE_MUTEXES == 1 ) */
1607:FreeRTOS\Source/tasks.c ****                 {
1608:FreeRTOS\Source/tasks.c ****                     pxTCB->uxPriority = uxNewPriority;
1609:FreeRTOS\Source/tasks.c ****                 }
1610:FreeRTOS\Source/tasks.c ****                 #endif /* if ( configUSE_MUTEXES == 1 ) */
1611:FreeRTOS\Source/tasks.c **** 
1612:FreeRTOS\Source/tasks.c ****                 /* Only reset the event list item value if the value is not
1613:FreeRTOS\Source/tasks.c ****                  * being used for anything else. */
1614:FreeRTOS\Source/tasks.c ****                 if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_V
1615:FreeRTOS\Source/tasks.c ****                 {
1616:FreeRTOS\Source/tasks.c ****                     listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX
1617:FreeRTOS\Source/tasks.c ****                 }
1618:FreeRTOS\Source/tasks.c ****                 else
1619:FreeRTOS\Source/tasks.c ****                 {
1620:FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1621:FreeRTOS\Source/tasks.c ****                 }
1622:FreeRTOS\Source/tasks.c **** 
1623:FreeRTOS\Source/tasks.c ****                 /* If the task is in the blocked or suspended list we need do
1624:FreeRTOS\Source/tasks.c ****                  * nothing more than change its priority variable. However, if
1625:FreeRTOS\Source/tasks.c ****                  * the task is in a ready list it needs to be removed and placed
1626:FreeRTOS\Source/tasks.c ****                  * in the list appropriate to its new priority. */
1627:FreeRTOS\Source/tasks.c ****                 if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( px
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 30


1628:FreeRTOS\Source/tasks.c ****                 {
1629:FreeRTOS\Source/tasks.c ****                     /* The task is currently in its ready list - remove before
1630:FreeRTOS\Source/tasks.c ****                      * adding it to its new ready list.  As we are in a critical
1631:FreeRTOS\Source/tasks.c ****                      * section we can do this even if the scheduler is suspended. */
1632:FreeRTOS\Source/tasks.c ****                     if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1633:FreeRTOS\Source/tasks.c ****                     {
1634:FreeRTOS\Source/tasks.c ****                         /* It is known that the task is in its ready list so
1635:FreeRTOS\Source/tasks.c ****                          * there is no need to check again and the port level
1636:FreeRTOS\Source/tasks.c ****                          * reset macro can be called directly. */
1637:FreeRTOS\Source/tasks.c ****                         portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1638:FreeRTOS\Source/tasks.c ****                     }
1639:FreeRTOS\Source/tasks.c ****                     else
1640:FreeRTOS\Source/tasks.c ****                     {
1641:FreeRTOS\Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
1642:FreeRTOS\Source/tasks.c ****                     }
1643:FreeRTOS\Source/tasks.c **** 
1644:FreeRTOS\Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
1645:FreeRTOS\Source/tasks.c ****                 }
1646:FreeRTOS\Source/tasks.c ****                 else
1647:FreeRTOS\Source/tasks.c ****                 {
1648:FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1649:FreeRTOS\Source/tasks.c ****                 }
1650:FreeRTOS\Source/tasks.c **** 
1651:FreeRTOS\Source/tasks.c ****                 if( xYieldRequired != pdFALSE )
1652:FreeRTOS\Source/tasks.c ****                 {
1653:FreeRTOS\Source/tasks.c ****                     taskYIELD_IF_USING_PREEMPTION();
1654:FreeRTOS\Source/tasks.c ****                 }
1655:FreeRTOS\Source/tasks.c ****                 else
1656:FreeRTOS\Source/tasks.c ****                 {
1657:FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1658:FreeRTOS\Source/tasks.c ****                 }
1659:FreeRTOS\Source/tasks.c **** 
1660:FreeRTOS\Source/tasks.c ****                 /* Remove compiler warning about unused variables when the port
1661:FreeRTOS\Source/tasks.c ****                  * optimised task selection is not being used. */
1662:FreeRTOS\Source/tasks.c ****                 ( void ) uxPriorityUsedOnEntry;
1663:FreeRTOS\Source/tasks.c ****             }
1664:FreeRTOS\Source/tasks.c ****         }
1665:FreeRTOS\Source/tasks.c ****         taskEXIT_CRITICAL();
1666:FreeRTOS\Source/tasks.c ****     }
1667:FreeRTOS\Source/tasks.c **** 
1668:FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1669:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1670:FreeRTOS\Source/tasks.c **** 
1671:FreeRTOS\Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1672:FreeRTOS\Source/tasks.c **** 
1673:FreeRTOS\Source/tasks.c ****     void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1674:FreeRTOS\Source/tasks.c ****     {
1675:FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
1676:FreeRTOS\Source/tasks.c **** 
1677:FreeRTOS\Source/tasks.c ****         taskENTER_CRITICAL();
1678:FreeRTOS\Source/tasks.c ****         {
1679:FreeRTOS\Source/tasks.c ****             /* If null is passed in here then it is the running task that is
1680:FreeRTOS\Source/tasks.c ****              * being suspended. */
1681:FreeRTOS\Source/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1682:FreeRTOS\Source/tasks.c **** 
1683:FreeRTOS\Source/tasks.c ****             traceTASK_SUSPEND( pxTCB );
1684:FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 31


1685:FreeRTOS\Source/tasks.c ****             /* Remove task from the ready/delayed list and place in the
1686:FreeRTOS\Source/tasks.c ****              * suspended list. */
1687:FreeRTOS\Source/tasks.c ****             if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1688:FreeRTOS\Source/tasks.c ****             {
1689:FreeRTOS\Source/tasks.c ****                 taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1690:FreeRTOS\Source/tasks.c ****             }
1691:FreeRTOS\Source/tasks.c ****             else
1692:FreeRTOS\Source/tasks.c ****             {
1693:FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1694:FreeRTOS\Source/tasks.c ****             }
1695:FreeRTOS\Source/tasks.c **** 
1696:FreeRTOS\Source/tasks.c ****             /* Is the task waiting on an event also? */
1697:FreeRTOS\Source/tasks.c ****             if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1698:FreeRTOS\Source/tasks.c ****             {
1699:FreeRTOS\Source/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1700:FreeRTOS\Source/tasks.c ****             }
1701:FreeRTOS\Source/tasks.c ****             else
1702:FreeRTOS\Source/tasks.c ****             {
1703:FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1704:FreeRTOS\Source/tasks.c ****             }
1705:FreeRTOS\Source/tasks.c **** 
1706:FreeRTOS\Source/tasks.c ****             vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1707:FreeRTOS\Source/tasks.c **** 
1708:FreeRTOS\Source/tasks.c ****             #if ( configUSE_TASK_NOTIFICATIONS == 1 )
1709:FreeRTOS\Source/tasks.c ****             {
1710:FreeRTOS\Source/tasks.c ****                 BaseType_t x;
1711:FreeRTOS\Source/tasks.c **** 
1712:FreeRTOS\Source/tasks.c ****                 for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
1713:FreeRTOS\Source/tasks.c ****                 {
1714:FreeRTOS\Source/tasks.c ****                     if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
1715:FreeRTOS\Source/tasks.c ****                     {
1716:FreeRTOS\Source/tasks.c ****                         /* The task was blocked to wait for a notification, but is
1717:FreeRTOS\Source/tasks.c ****                          * now suspended, so no notification was received. */
1718:FreeRTOS\Source/tasks.c ****                         pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
1719:FreeRTOS\Source/tasks.c ****                     }
1720:FreeRTOS\Source/tasks.c ****                 }
1721:FreeRTOS\Source/tasks.c ****             }
1722:FreeRTOS\Source/tasks.c ****             #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
1723:FreeRTOS\Source/tasks.c ****         }
1724:FreeRTOS\Source/tasks.c ****         taskEXIT_CRITICAL();
1725:FreeRTOS\Source/tasks.c **** 
1726:FreeRTOS\Source/tasks.c ****         if( xSchedulerRunning != pdFALSE )
1727:FreeRTOS\Source/tasks.c ****         {
1728:FreeRTOS\Source/tasks.c ****             /* Reset the next expected unblock time in case it referred to the
1729:FreeRTOS\Source/tasks.c ****              * task that is now in the Suspended state. */
1730:FreeRTOS\Source/tasks.c ****             taskENTER_CRITICAL();
1731:FreeRTOS\Source/tasks.c ****             {
1732:FreeRTOS\Source/tasks.c ****                 prvResetNextTaskUnblockTime();
1733:FreeRTOS\Source/tasks.c ****             }
1734:FreeRTOS\Source/tasks.c ****             taskEXIT_CRITICAL();
1735:FreeRTOS\Source/tasks.c ****         }
1736:FreeRTOS\Source/tasks.c ****         else
1737:FreeRTOS\Source/tasks.c ****         {
1738:FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1739:FreeRTOS\Source/tasks.c ****         }
1740:FreeRTOS\Source/tasks.c **** 
1741:FreeRTOS\Source/tasks.c ****         if( pxTCB == pxCurrentTCB )
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 32


1742:FreeRTOS\Source/tasks.c ****         {
1743:FreeRTOS\Source/tasks.c ****             if( xSchedulerRunning != pdFALSE )
1744:FreeRTOS\Source/tasks.c ****             {
1745:FreeRTOS\Source/tasks.c ****                 /* The current task has just been suspended. */
1746:FreeRTOS\Source/tasks.c ****                 configASSERT( uxSchedulerSuspended == 0 );
1747:FreeRTOS\Source/tasks.c ****                 portYIELD_WITHIN_API();
1748:FreeRTOS\Source/tasks.c ****             }
1749:FreeRTOS\Source/tasks.c ****             else
1750:FreeRTOS\Source/tasks.c ****             {
1751:FreeRTOS\Source/tasks.c ****                 /* The scheduler is not running, but the task that was pointed
1752:FreeRTOS\Source/tasks.c ****                  * to by pxCurrentTCB has just been suspended and pxCurrentTCB
1753:FreeRTOS\Source/tasks.c ****                  * must be adjusted to point to a different task. */
1754:FreeRTOS\Source/tasks.c ****                 if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*li
1755:FreeRTOS\Source/tasks.c ****                 {
1756:FreeRTOS\Source/tasks.c ****                     /* No other tasks are ready, so set pxCurrentTCB back to
1757:FreeRTOS\Source/tasks.c ****                      * NULL so when the next task is created pxCurrentTCB will
1758:FreeRTOS\Source/tasks.c ****                      * be set to point to it no matter what its relative priority
1759:FreeRTOS\Source/tasks.c ****                      * is. */
1760:FreeRTOS\Source/tasks.c ****                     pxCurrentTCB = NULL;
1761:FreeRTOS\Source/tasks.c ****                 }
1762:FreeRTOS\Source/tasks.c ****                 else
1763:FreeRTOS\Source/tasks.c ****                 {
1764:FreeRTOS\Source/tasks.c ****                     vTaskSwitchContext();
1765:FreeRTOS\Source/tasks.c ****                 }
1766:FreeRTOS\Source/tasks.c ****             }
1767:FreeRTOS\Source/tasks.c ****         }
1768:FreeRTOS\Source/tasks.c ****         else
1769:FreeRTOS\Source/tasks.c ****         {
1770:FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1771:FreeRTOS\Source/tasks.c ****         }
1772:FreeRTOS\Source/tasks.c ****     }
1773:FreeRTOS\Source/tasks.c **** 
1774:FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1775:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1776:FreeRTOS\Source/tasks.c **** 
1777:FreeRTOS\Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1778:FreeRTOS\Source/tasks.c **** 
1779:FreeRTOS\Source/tasks.c ****     static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1780:FreeRTOS\Source/tasks.c ****     {
  27              		.loc 1 1780 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
1781:FreeRTOS\Source/tasks.c ****         BaseType_t xReturn = pdFALSE;
1782:FreeRTOS\Source/tasks.c ****         const TCB_t * const pxTCB = xTask;
1783:FreeRTOS\Source/tasks.c **** 
1784:FreeRTOS\Source/tasks.c ****         /* Accesses xPendingReadyList so must be called from a critical
1785:FreeRTOS\Source/tasks.c ****          * section. */
1786:FreeRTOS\Source/tasks.c **** 
1787:FreeRTOS\Source/tasks.c ****         /* It does not make sense to check if the calling task is suspended. */
1788:FreeRTOS\Source/tasks.c ****         configASSERT( xTask );
1789:FreeRTOS\Source/tasks.c **** 
1790:FreeRTOS\Source/tasks.c ****         /* Is the task being resumed actually in the suspended list? */
1791:FreeRTOS\Source/tasks.c ****         if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  33              		.loc 1 1791 0
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 33


  34 0000 084B     		ldr	r3, .L6
  35 0002 4269     		ldr	r2, [r0, #20]
  36 0004 9A42     		cmp	r2, r3
  37 0006 07D1     		bne	.L3
1792:FreeRTOS\Source/tasks.c ****         {
1793:FreeRTOS\Source/tasks.c ****             /* Has the task already been resumed from within an ISR? */
1794:FreeRTOS\Source/tasks.c ****             if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALS
  38              		.loc 1 1794 0
  39 0008 826A     		ldr	r2, [r0, #40]
  40 000a 1433     		adds	r3, r3, #20
  41 000c 9A42     		cmp	r2, r3
  42 000e 05D0     		beq	.L4
1795:FreeRTOS\Source/tasks.c ****             {
1796:FreeRTOS\Source/tasks.c ****                 /* Is it in the suspended list because it is in the Suspended
1797:FreeRTOS\Source/tasks.c ****                  * state, or because is is blocked with no timeout? */
1798:FreeRTOS\Source/tasks.c ****                 if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint
  43              		.loc 1 1798 0
  44 0010 002A     		cmp	r2, #0
  45 0012 05D0     		beq	.L5
1781:FreeRTOS\Source/tasks.c ****         const TCB_t * const pxTCB = xTask;
  46              		.loc 1 1781 0
  47 0014 0020     		movs	r0, #0
  48              	.LVL1:
  49 0016 04E0     		b	.L2
  50              	.LVL2:
  51              	.L3:
  52 0018 0020     		movs	r0, #0
  53              	.LVL3:
  54 001a 02E0     		b	.L2
  55              	.LVL4:
  56              	.L4:
  57 001c 0020     		movs	r0, #0
  58              	.LVL5:
  59 001e 00E0     		b	.L2
  60              	.LVL6:
  61              	.L5:
1799:FreeRTOS\Source/tasks.c ****                 {
1800:FreeRTOS\Source/tasks.c ****                     xReturn = pdTRUE;
  62              		.loc 1 1800 0
  63 0020 0120     		movs	r0, #1
  64              	.LVL7:
  65              	.L2:
1801:FreeRTOS\Source/tasks.c ****                 }
1802:FreeRTOS\Source/tasks.c ****                 else
1803:FreeRTOS\Source/tasks.c ****                 {
1804:FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1805:FreeRTOS\Source/tasks.c ****                 }
1806:FreeRTOS\Source/tasks.c ****             }
1807:FreeRTOS\Source/tasks.c ****             else
1808:FreeRTOS\Source/tasks.c ****             {
1809:FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1810:FreeRTOS\Source/tasks.c ****             }
1811:FreeRTOS\Source/tasks.c ****         }
1812:FreeRTOS\Source/tasks.c ****         else
1813:FreeRTOS\Source/tasks.c ****         {
1814:FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1815:FreeRTOS\Source/tasks.c ****         }
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 34


1816:FreeRTOS\Source/tasks.c **** 
1817:FreeRTOS\Source/tasks.c ****         return xReturn;
1818:FreeRTOS\Source/tasks.c ****     } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
  66              		.loc 1 1818 0
  67              		@ sp needed
  68 0022 7047     		bx	lr
  69              	.L7:
  70              		.align	2
  71              	.L6:
  72 0024 00000000 		.word	.LANCHOR0
  73              		.cfi_endproc
  74              	.LFE44:
  75              		.size	prvTaskIsTaskSuspended, .-prvTaskIsTaskSuspended
  76              		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
  77              		.align	2
  78              		.code	16
  79              		.thumb_func
  80              		.type	prvTaskCheckFreeStackSpace, %function
  81              	prvTaskCheckFreeStackSpace:
  82              	.LFB69:
1819:FreeRTOS\Source/tasks.c **** 
1820:FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1821:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1822:FreeRTOS\Source/tasks.c **** 
1823:FreeRTOS\Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1824:FreeRTOS\Source/tasks.c **** 
1825:FreeRTOS\Source/tasks.c ****     void vTaskResume( TaskHandle_t xTaskToResume )
1826:FreeRTOS\Source/tasks.c ****     {
1827:FreeRTOS\Source/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
1828:FreeRTOS\Source/tasks.c **** 
1829:FreeRTOS\Source/tasks.c ****         /* It does not make sense to resume the calling task. */
1830:FreeRTOS\Source/tasks.c ****         configASSERT( xTaskToResume );
1831:FreeRTOS\Source/tasks.c **** 
1832:FreeRTOS\Source/tasks.c ****         /* The parameter cannot be NULL as it is impossible to resume the
1833:FreeRTOS\Source/tasks.c ****          * currently executing task. */
1834:FreeRTOS\Source/tasks.c ****         if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
1835:FreeRTOS\Source/tasks.c ****         {
1836:FreeRTOS\Source/tasks.c ****             taskENTER_CRITICAL();
1837:FreeRTOS\Source/tasks.c ****             {
1838:FreeRTOS\Source/tasks.c ****                 if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1839:FreeRTOS\Source/tasks.c ****                 {
1840:FreeRTOS\Source/tasks.c ****                     traceTASK_RESUME( pxTCB );
1841:FreeRTOS\Source/tasks.c **** 
1842:FreeRTOS\Source/tasks.c ****                     /* The ready list can be accessed even if the scheduler is
1843:FreeRTOS\Source/tasks.c ****                      * suspended because this is inside a critical section. */
1844:FreeRTOS\Source/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1845:FreeRTOS\Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
1846:FreeRTOS\Source/tasks.c **** 
1847:FreeRTOS\Source/tasks.c ****                     /* A higher priority task may have just been resumed. */
1848:FreeRTOS\Source/tasks.c ****                     if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1849:FreeRTOS\Source/tasks.c ****                     {
1850:FreeRTOS\Source/tasks.c ****                         /* This yield may not cause the task just resumed to run,
1851:FreeRTOS\Source/tasks.c ****                          * but will leave the lists in the correct state for the
1852:FreeRTOS\Source/tasks.c ****                          * next yield. */
1853:FreeRTOS\Source/tasks.c ****                         taskYIELD_IF_USING_PREEMPTION();
1854:FreeRTOS\Source/tasks.c ****                     }
1855:FreeRTOS\Source/tasks.c ****                     else
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 35


1856:FreeRTOS\Source/tasks.c ****                     {
1857:FreeRTOS\Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
1858:FreeRTOS\Source/tasks.c ****                     }
1859:FreeRTOS\Source/tasks.c ****                 }
1860:FreeRTOS\Source/tasks.c ****                 else
1861:FreeRTOS\Source/tasks.c ****                 {
1862:FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1863:FreeRTOS\Source/tasks.c ****                 }
1864:FreeRTOS\Source/tasks.c ****             }
1865:FreeRTOS\Source/tasks.c ****             taskEXIT_CRITICAL();
1866:FreeRTOS\Source/tasks.c ****         }
1867:FreeRTOS\Source/tasks.c ****         else
1868:FreeRTOS\Source/tasks.c ****         {
1869:FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1870:FreeRTOS\Source/tasks.c ****         }
1871:FreeRTOS\Source/tasks.c ****     }
1872:FreeRTOS\Source/tasks.c **** 
1873:FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1874:FreeRTOS\Source/tasks.c **** 
1875:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1876:FreeRTOS\Source/tasks.c **** 
1877:FreeRTOS\Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1878:FreeRTOS\Source/tasks.c **** 
1879:FreeRTOS\Source/tasks.c ****     BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1880:FreeRTOS\Source/tasks.c ****     {
1881:FreeRTOS\Source/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
1882:FreeRTOS\Source/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
1883:FreeRTOS\Source/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
1884:FreeRTOS\Source/tasks.c **** 
1885:FreeRTOS\Source/tasks.c ****         configASSERT( xTaskToResume );
1886:FreeRTOS\Source/tasks.c **** 
1887:FreeRTOS\Source/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
1888:FreeRTOS\Source/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
1889:FreeRTOS\Source/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
1890:FreeRTOS\Source/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
1891:FreeRTOS\Source/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1892:FreeRTOS\Source/tasks.c ****          * is defined in FreeRTOSConfig.h then
1893:FreeRTOS\Source/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1894:FreeRTOS\Source/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
1895:FreeRTOS\Source/tasks.c ****          * been assigned a priority above the configured maximum system call
1896:FreeRTOS\Source/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
1897:FreeRTOS\Source/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
1898:FreeRTOS\Source/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
1899:FreeRTOS\Source/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
1900:FreeRTOS\Source/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
1901:FreeRTOS\Source/tasks.c ****          * provided on the following link:
1902:FreeRTOS\Source/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1903:FreeRTOS\Source/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1904:FreeRTOS\Source/tasks.c **** 
1905:FreeRTOS\Source/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1906:FreeRTOS\Source/tasks.c ****         {
1907:FreeRTOS\Source/tasks.c ****             if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1908:FreeRTOS\Source/tasks.c ****             {
1909:FreeRTOS\Source/tasks.c ****                 traceTASK_RESUME_FROM_ISR( pxTCB );
1910:FreeRTOS\Source/tasks.c **** 
1911:FreeRTOS\Source/tasks.c ****                 /* Check the ready lists can be accessed. */
1912:FreeRTOS\Source/tasks.c ****                 if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 36


1913:FreeRTOS\Source/tasks.c ****                 {
1914:FreeRTOS\Source/tasks.c ****                     /* Ready lists can be accessed so move the task from the
1915:FreeRTOS\Source/tasks.c ****                      * suspended list to the ready list directly. */
1916:FreeRTOS\Source/tasks.c ****                     if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1917:FreeRTOS\Source/tasks.c ****                     {
1918:FreeRTOS\Source/tasks.c ****                         xYieldRequired = pdTRUE;
1919:FreeRTOS\Source/tasks.c **** 
1920:FreeRTOS\Source/tasks.c ****                         /* Mark that a yield is pending in case the user is not
1921:FreeRTOS\Source/tasks.c ****                          * using the return value to initiate a context switch
1922:FreeRTOS\Source/tasks.c ****                          * from the ISR using portYIELD_FROM_ISR. */
1923:FreeRTOS\Source/tasks.c ****                         xYieldPending = pdTRUE;
1924:FreeRTOS\Source/tasks.c ****                     }
1925:FreeRTOS\Source/tasks.c ****                     else
1926:FreeRTOS\Source/tasks.c ****                     {
1927:FreeRTOS\Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
1928:FreeRTOS\Source/tasks.c ****                     }
1929:FreeRTOS\Source/tasks.c **** 
1930:FreeRTOS\Source/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1931:FreeRTOS\Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
1932:FreeRTOS\Source/tasks.c ****                 }
1933:FreeRTOS\Source/tasks.c ****                 else
1934:FreeRTOS\Source/tasks.c ****                 {
1935:FreeRTOS\Source/tasks.c ****                     /* The delayed or ready lists cannot be accessed so the task
1936:FreeRTOS\Source/tasks.c ****                      * is held in the pending ready list until the scheduler is
1937:FreeRTOS\Source/tasks.c ****                      * unsuspended. */
1938:FreeRTOS\Source/tasks.c ****                     vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1939:FreeRTOS\Source/tasks.c ****                 }
1940:FreeRTOS\Source/tasks.c ****             }
1941:FreeRTOS\Source/tasks.c ****             else
1942:FreeRTOS\Source/tasks.c ****             {
1943:FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1944:FreeRTOS\Source/tasks.c ****             }
1945:FreeRTOS\Source/tasks.c ****         }
1946:FreeRTOS\Source/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1947:FreeRTOS\Source/tasks.c **** 
1948:FreeRTOS\Source/tasks.c ****         return xYieldRequired;
1949:FreeRTOS\Source/tasks.c ****     }
1950:FreeRTOS\Source/tasks.c **** 
1951:FreeRTOS\Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1952:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1953:FreeRTOS\Source/tasks.c **** 
1954:FreeRTOS\Source/tasks.c **** void vTaskStartScheduler( void )
1955:FreeRTOS\Source/tasks.c **** {
1956:FreeRTOS\Source/tasks.c ****     BaseType_t xReturn;
1957:FreeRTOS\Source/tasks.c **** 
1958:FreeRTOS\Source/tasks.c ****     /* Add the idle task at the lowest priority. */
1959:FreeRTOS\Source/tasks.c ****     #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
1960:FreeRTOS\Source/tasks.c ****     {
1961:FreeRTOS\Source/tasks.c ****         StaticTask_t * pxIdleTaskTCBBuffer = NULL;
1962:FreeRTOS\Source/tasks.c ****         StackType_t * pxIdleTaskStackBuffer = NULL;
1963:FreeRTOS\Source/tasks.c ****         uint32_t ulIdleTaskStackSize;
1964:FreeRTOS\Source/tasks.c **** 
1965:FreeRTOS\Source/tasks.c ****         /* The Idle task is created using user provided RAM - obtain the
1966:FreeRTOS\Source/tasks.c ****          * address of the RAM then create the idle task. */
1967:FreeRTOS\Source/tasks.c ****         vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskSta
1968:FreeRTOS\Source/tasks.c ****         xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
1969:FreeRTOS\Source/tasks.c ****                                              configIDLE_TASK_NAME,
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 37


1970:FreeRTOS\Source/tasks.c ****                                              ulIdleTaskStackSize,
1971:FreeRTOS\Source/tasks.c ****                                              ( void * ) NULL,       /*lint !e961.  The cast is not 
1972:FreeRTOS\Source/tasks.c ****                                              portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY
1973:FreeRTOS\Source/tasks.c ****                                              pxIdleTaskStackBuffer,
1974:FreeRTOS\Source/tasks.c ****                                              pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, j
1975:FreeRTOS\Source/tasks.c **** 
1976:FreeRTOS\Source/tasks.c ****         if( xIdleTaskHandle != NULL )
1977:FreeRTOS\Source/tasks.c ****         {
1978:FreeRTOS\Source/tasks.c ****             xReturn = pdPASS;
1979:FreeRTOS\Source/tasks.c ****         }
1980:FreeRTOS\Source/tasks.c ****         else
1981:FreeRTOS\Source/tasks.c ****         {
1982:FreeRTOS\Source/tasks.c ****             xReturn = pdFAIL;
1983:FreeRTOS\Source/tasks.c ****         }
1984:FreeRTOS\Source/tasks.c ****     }
1985:FreeRTOS\Source/tasks.c ****     #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
1986:FreeRTOS\Source/tasks.c ****     {
1987:FreeRTOS\Source/tasks.c ****         /* The Idle task is being created using dynamically allocated RAM. */
1988:FreeRTOS\Source/tasks.c ****         xReturn = xTaskCreate( prvIdleTask,
1989:FreeRTOS\Source/tasks.c ****                                configIDLE_TASK_NAME,
1990:FreeRTOS\Source/tasks.c ****                                configMINIMAL_STACK_SIZE,
1991:FreeRTOS\Source/tasks.c ****                                ( void * ) NULL,
1992:FreeRTOS\Source/tasks.c ****                                portPRIVILEGE_BIT,  /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_
1993:FreeRTOS\Source/tasks.c ****                                &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is
1994:FreeRTOS\Source/tasks.c ****     }
1995:FreeRTOS\Source/tasks.c ****     #endif /* configSUPPORT_STATIC_ALLOCATION */
1996:FreeRTOS\Source/tasks.c **** 
1997:FreeRTOS\Source/tasks.c ****     #if ( configUSE_TIMERS == 1 )
1998:FreeRTOS\Source/tasks.c ****     {
1999:FreeRTOS\Source/tasks.c ****         if( xReturn == pdPASS )
2000:FreeRTOS\Source/tasks.c ****         {
2001:FreeRTOS\Source/tasks.c ****             xReturn = xTimerCreateTimerTask();
2002:FreeRTOS\Source/tasks.c ****         }
2003:FreeRTOS\Source/tasks.c ****         else
2004:FreeRTOS\Source/tasks.c ****         {
2005:FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2006:FreeRTOS\Source/tasks.c ****         }
2007:FreeRTOS\Source/tasks.c ****     }
2008:FreeRTOS\Source/tasks.c ****     #endif /* configUSE_TIMERS */
2009:FreeRTOS\Source/tasks.c **** 
2010:FreeRTOS\Source/tasks.c ****     if( xReturn == pdPASS )
2011:FreeRTOS\Source/tasks.c ****     {
2012:FreeRTOS\Source/tasks.c ****         /* freertos_tasks_c_additions_init() should only be called if the user
2013:FreeRTOS\Source/tasks.c ****          * definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
2014:FreeRTOS\Source/tasks.c ****          * the only macro called by the function. */
2015:FreeRTOS\Source/tasks.c ****         #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
2016:FreeRTOS\Source/tasks.c ****         {
2017:FreeRTOS\Source/tasks.c ****             freertos_tasks_c_additions_init();
2018:FreeRTOS\Source/tasks.c ****         }
2019:FreeRTOS\Source/tasks.c ****         #endif
2020:FreeRTOS\Source/tasks.c **** 
2021:FreeRTOS\Source/tasks.c ****         /* Interrupts are turned off here, to ensure a tick does not occur
2022:FreeRTOS\Source/tasks.c ****          * before or during the call to xPortStartScheduler().  The stacks of
2023:FreeRTOS\Source/tasks.c ****          * the created tasks contain a status word with interrupts switched on
2024:FreeRTOS\Source/tasks.c ****          * so interrupts will automatically get re-enabled when the first task
2025:FreeRTOS\Source/tasks.c ****          * starts to run. */
2026:FreeRTOS\Source/tasks.c ****         portDISABLE_INTERRUPTS();
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 38


2027:FreeRTOS\Source/tasks.c **** 
2028:FreeRTOS\Source/tasks.c ****         #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
2029:FreeRTOS\Source/tasks.c ****         {
2030:FreeRTOS\Source/tasks.c ****             /* Switch C-Runtime's TLS Block to point to the TLS
2031:FreeRTOS\Source/tasks.c ****              * block specific to the task that will run first. */
2032:FreeRTOS\Source/tasks.c ****             configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
2033:FreeRTOS\Source/tasks.c ****         }
2034:FreeRTOS\Source/tasks.c ****         #endif
2035:FreeRTOS\Source/tasks.c **** 
2036:FreeRTOS\Source/tasks.c ****         xNextTaskUnblockTime = portMAX_DELAY;
2037:FreeRTOS\Source/tasks.c ****         xSchedulerRunning = pdTRUE;
2038:FreeRTOS\Source/tasks.c ****         xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
2039:FreeRTOS\Source/tasks.c **** 
2040:FreeRTOS\Source/tasks.c ****         /* If configGENERATE_RUN_TIME_STATS is defined then the following
2041:FreeRTOS\Source/tasks.c ****          * macro must be defined to configure the timer/counter used to generate
2042:FreeRTOS\Source/tasks.c ****          * the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
2043:FreeRTOS\Source/tasks.c ****          * is set to 0 and the following line fails to build then ensure you do not
2044:FreeRTOS\Source/tasks.c ****          * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
2045:FreeRTOS\Source/tasks.c ****          * FreeRTOSConfig.h file. */
2046:FreeRTOS\Source/tasks.c ****         portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
2047:FreeRTOS\Source/tasks.c **** 
2048:FreeRTOS\Source/tasks.c ****         traceTASK_SWITCHED_IN();
2049:FreeRTOS\Source/tasks.c **** 
2050:FreeRTOS\Source/tasks.c ****         /* Setting up the timer tick is hardware specific and thus in the
2051:FreeRTOS\Source/tasks.c ****          * portable interface. */
2052:FreeRTOS\Source/tasks.c ****         xPortStartScheduler();
2053:FreeRTOS\Source/tasks.c **** 
2054:FreeRTOS\Source/tasks.c ****         /* In most cases, xPortStartScheduler() will not return. If it
2055:FreeRTOS\Source/tasks.c ****          * returns pdTRUE then there was not enough heap memory available
2056:FreeRTOS\Source/tasks.c ****          * to create either the Idle or the Timer task. If it returned
2057:FreeRTOS\Source/tasks.c ****          * pdFALSE, then the application called xTaskEndScheduler().
2058:FreeRTOS\Source/tasks.c ****          * Most ports don't implement xTaskEndScheduler() as there is
2059:FreeRTOS\Source/tasks.c ****          * nothing to return to. */
2060:FreeRTOS\Source/tasks.c ****     }
2061:FreeRTOS\Source/tasks.c ****     else
2062:FreeRTOS\Source/tasks.c ****     {
2063:FreeRTOS\Source/tasks.c ****         /* This line will only be reached if the kernel could not be started,
2064:FreeRTOS\Source/tasks.c ****          * because there was not enough FreeRTOS heap to create the idle task
2065:FreeRTOS\Source/tasks.c ****          * or the timer task. */
2066:FreeRTOS\Source/tasks.c ****         configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2067:FreeRTOS\Source/tasks.c ****     }
2068:FreeRTOS\Source/tasks.c **** 
2069:FreeRTOS\Source/tasks.c ****     /* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2070:FreeRTOS\Source/tasks.c ****      * meaning xIdleTaskHandle is not used anywhere else. */
2071:FreeRTOS\Source/tasks.c ****     ( void ) xIdleTaskHandle;
2072:FreeRTOS\Source/tasks.c **** 
2073:FreeRTOS\Source/tasks.c ****     /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
2074:FreeRTOS\Source/tasks.c ****      * from getting optimized out as it is no longer used by the kernel. */
2075:FreeRTOS\Source/tasks.c ****     ( void ) uxTopUsedPriority;
2076:FreeRTOS\Source/tasks.c **** }
2077:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2078:FreeRTOS\Source/tasks.c **** 
2079:FreeRTOS\Source/tasks.c **** void vTaskEndScheduler( void )
2080:FreeRTOS\Source/tasks.c **** {
2081:FreeRTOS\Source/tasks.c ****     /* Stop the scheduler interrupts and call the portable scheduler end
2082:FreeRTOS\Source/tasks.c ****      * routine so the original ISRs can be restored if necessary.  The port
2083:FreeRTOS\Source/tasks.c ****      * layer must ensure interrupts enable  bit is left in the correct state. */
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 39


2084:FreeRTOS\Source/tasks.c ****     portDISABLE_INTERRUPTS();
2085:FreeRTOS\Source/tasks.c ****     xSchedulerRunning = pdFALSE;
2086:FreeRTOS\Source/tasks.c ****     vPortEndScheduler();
2087:FreeRTOS\Source/tasks.c **** }
2088:FreeRTOS\Source/tasks.c **** /*----------------------------------------------------------*/
2089:FreeRTOS\Source/tasks.c **** 
2090:FreeRTOS\Source/tasks.c **** void vTaskSuspendAll( void )
2091:FreeRTOS\Source/tasks.c **** {
2092:FreeRTOS\Source/tasks.c ****     /* A critical section is not required as the variable is of type
2093:FreeRTOS\Source/tasks.c ****      * BaseType_t.  Please read Richard Barry's reply in the following link to a
2094:FreeRTOS\Source/tasks.c ****      * post in the FreeRTOS support forum before reporting this as a bug! -
2095:FreeRTOS\Source/tasks.c ****      * https://goo.gl/wu4acr */
2096:FreeRTOS\Source/tasks.c **** 
2097:FreeRTOS\Source/tasks.c ****     /* portSOFTWARE_BARRIER() is only implemented for emulated/simulated ports that
2098:FreeRTOS\Source/tasks.c ****      * do not otherwise exhibit real time behaviour. */
2099:FreeRTOS\Source/tasks.c ****     portSOFTWARE_BARRIER();
2100:FreeRTOS\Source/tasks.c **** 
2101:FreeRTOS\Source/tasks.c ****     /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
2102:FreeRTOS\Source/tasks.c ****      * is used to allow calls to vTaskSuspendAll() to nest. */
2103:FreeRTOS\Source/tasks.c ****     ++uxSchedulerSuspended;
2104:FreeRTOS\Source/tasks.c **** 
2105:FreeRTOS\Source/tasks.c ****     /* Enforces ordering for ports and optimised compilers that may otherwise place
2106:FreeRTOS\Source/tasks.c ****      * the above increment elsewhere. */
2107:FreeRTOS\Source/tasks.c ****     portMEMORY_BARRIER();
2108:FreeRTOS\Source/tasks.c **** }
2109:FreeRTOS\Source/tasks.c **** /*----------------------------------------------------------*/
2110:FreeRTOS\Source/tasks.c **** 
2111:FreeRTOS\Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2112:FreeRTOS\Source/tasks.c **** 
2113:FreeRTOS\Source/tasks.c ****     static TickType_t prvGetExpectedIdleTime( void )
2114:FreeRTOS\Source/tasks.c ****     {
2115:FreeRTOS\Source/tasks.c ****         TickType_t xReturn;
2116:FreeRTOS\Source/tasks.c ****         UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2117:FreeRTOS\Source/tasks.c **** 
2118:FreeRTOS\Source/tasks.c ****         /* uxHigherPriorityReadyTasks takes care of the case where
2119:FreeRTOS\Source/tasks.c ****          * configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2120:FreeRTOS\Source/tasks.c ****          * task that are in the Ready state, even though the idle task is
2121:FreeRTOS\Source/tasks.c ****          * running. */
2122:FreeRTOS\Source/tasks.c ****         #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2123:FreeRTOS\Source/tasks.c ****         {
2124:FreeRTOS\Source/tasks.c ****             if( uxTopReadyPriority > tskIDLE_PRIORITY )
2125:FreeRTOS\Source/tasks.c ****             {
2126:FreeRTOS\Source/tasks.c ****                 uxHigherPriorityReadyTasks = pdTRUE;
2127:FreeRTOS\Source/tasks.c ****             }
2128:FreeRTOS\Source/tasks.c ****         }
2129:FreeRTOS\Source/tasks.c ****         #else
2130:FreeRTOS\Source/tasks.c ****         {
2131:FreeRTOS\Source/tasks.c ****             const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2132:FreeRTOS\Source/tasks.c **** 
2133:FreeRTOS\Source/tasks.c ****             /* When port optimised task selection is used the uxTopReadyPriority
2134:FreeRTOS\Source/tasks.c ****              * variable is used as a bit map.  If bits other than the least
2135:FreeRTOS\Source/tasks.c ****              * significant bit are set then there are tasks that have a priority
2136:FreeRTOS\Source/tasks.c ****              * above the idle priority that are in the Ready state.  This takes
2137:FreeRTOS\Source/tasks.c ****              * care of the case where the co-operative scheduler is in use. */
2138:FreeRTOS\Source/tasks.c ****             if( uxTopReadyPriority > uxLeastSignificantBit )
2139:FreeRTOS\Source/tasks.c ****             {
2140:FreeRTOS\Source/tasks.c ****                 uxHigherPriorityReadyTasks = pdTRUE;
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 40


2141:FreeRTOS\Source/tasks.c ****             }
2142:FreeRTOS\Source/tasks.c ****         }
2143:FreeRTOS\Source/tasks.c ****         #endif /* if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 ) */
2144:FreeRTOS\Source/tasks.c **** 
2145:FreeRTOS\Source/tasks.c ****         if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2146:FreeRTOS\Source/tasks.c ****         {
2147:FreeRTOS\Source/tasks.c ****             xReturn = 0;
2148:FreeRTOS\Source/tasks.c ****         }
2149:FreeRTOS\Source/tasks.c ****         else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2150:FreeRTOS\Source/tasks.c ****         {
2151:FreeRTOS\Source/tasks.c ****             /* There are other idle priority tasks in the ready state.  If
2152:FreeRTOS\Source/tasks.c ****              * time slicing is used then the very next tick interrupt must be
2153:FreeRTOS\Source/tasks.c ****              * processed. */
2154:FreeRTOS\Source/tasks.c ****             xReturn = 0;
2155:FreeRTOS\Source/tasks.c ****         }
2156:FreeRTOS\Source/tasks.c ****         else if( uxHigherPriorityReadyTasks != pdFALSE )
2157:FreeRTOS\Source/tasks.c ****         {
2158:FreeRTOS\Source/tasks.c ****             /* There are tasks in the Ready state that have a priority above the
2159:FreeRTOS\Source/tasks.c ****              * idle priority.  This path can only be reached if
2160:FreeRTOS\Source/tasks.c ****              * configUSE_PREEMPTION is 0. */
2161:FreeRTOS\Source/tasks.c ****             xReturn = 0;
2162:FreeRTOS\Source/tasks.c ****         }
2163:FreeRTOS\Source/tasks.c ****         else
2164:FreeRTOS\Source/tasks.c ****         {
2165:FreeRTOS\Source/tasks.c ****             xReturn = xNextTaskUnblockTime - xTickCount;
2166:FreeRTOS\Source/tasks.c ****         }
2167:FreeRTOS\Source/tasks.c **** 
2168:FreeRTOS\Source/tasks.c ****         return xReturn;
2169:FreeRTOS\Source/tasks.c ****     }
2170:FreeRTOS\Source/tasks.c **** 
2171:FreeRTOS\Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2172:FreeRTOS\Source/tasks.c **** /*----------------------------------------------------------*/
2173:FreeRTOS\Source/tasks.c **** 
2174:FreeRTOS\Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2175:FreeRTOS\Source/tasks.c **** {
2176:FreeRTOS\Source/tasks.c ****     TCB_t * pxTCB = NULL;
2177:FreeRTOS\Source/tasks.c ****     BaseType_t xAlreadyYielded = pdFALSE;
2178:FreeRTOS\Source/tasks.c **** 
2179:FreeRTOS\Source/tasks.c ****     /* If uxSchedulerSuspended is zero then this function does not match a
2180:FreeRTOS\Source/tasks.c ****      * previous call to vTaskSuspendAll(). */
2181:FreeRTOS\Source/tasks.c ****     configASSERT( uxSchedulerSuspended );
2182:FreeRTOS\Source/tasks.c **** 
2183:FreeRTOS\Source/tasks.c ****     /* It is possible that an ISR caused a task to be removed from an event
2184:FreeRTOS\Source/tasks.c ****      * list while the scheduler was suspended.  If this was the case then the
2185:FreeRTOS\Source/tasks.c ****      * removed task will have been added to the xPendingReadyList.  Once the
2186:FreeRTOS\Source/tasks.c ****      * scheduler has been resumed it is safe to move all the pending ready
2187:FreeRTOS\Source/tasks.c ****      * tasks from this list into their appropriate ready list. */
2188:FreeRTOS\Source/tasks.c ****     taskENTER_CRITICAL();
2189:FreeRTOS\Source/tasks.c ****     {
2190:FreeRTOS\Source/tasks.c ****         --uxSchedulerSuspended;
2191:FreeRTOS\Source/tasks.c **** 
2192:FreeRTOS\Source/tasks.c ****         if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2193:FreeRTOS\Source/tasks.c ****         {
2194:FreeRTOS\Source/tasks.c ****             if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2195:FreeRTOS\Source/tasks.c ****             {
2196:FreeRTOS\Source/tasks.c ****                 /* Move any readied tasks from the pending list into the
2197:FreeRTOS\Source/tasks.c ****                  * appropriate ready list. */
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 41


2198:FreeRTOS\Source/tasks.c ****                 while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2199:FreeRTOS\Source/tasks.c ****                 {
2200:FreeRTOS\Source/tasks.c ****                     pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 vo
2201:FreeRTOS\Source/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
2202:FreeRTOS\Source/tasks.c ****                     portMEMORY_BARRIER();
2203:FreeRTOS\Source/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
2204:FreeRTOS\Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
2205:FreeRTOS\Source/tasks.c **** 
2206:FreeRTOS\Source/tasks.c ****                     /* If the moved task has a priority higher than or equal to
2207:FreeRTOS\Source/tasks.c ****                      * the current task then a yield must be performed. */
2208:FreeRTOS\Source/tasks.c ****                     if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2209:FreeRTOS\Source/tasks.c ****                     {
2210:FreeRTOS\Source/tasks.c ****                         xYieldPending = pdTRUE;
2211:FreeRTOS\Source/tasks.c ****                     }
2212:FreeRTOS\Source/tasks.c ****                     else
2213:FreeRTOS\Source/tasks.c ****                     {
2214:FreeRTOS\Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2215:FreeRTOS\Source/tasks.c ****                     }
2216:FreeRTOS\Source/tasks.c ****                 }
2217:FreeRTOS\Source/tasks.c **** 
2218:FreeRTOS\Source/tasks.c ****                 if( pxTCB != NULL )
2219:FreeRTOS\Source/tasks.c ****                 {
2220:FreeRTOS\Source/tasks.c ****                     /* A task was unblocked while the scheduler was suspended,
2221:FreeRTOS\Source/tasks.c ****                      * which may have prevented the next unblock time from being
2222:FreeRTOS\Source/tasks.c ****                      * re-calculated, in which case re-calculate it now.  Mainly
2223:FreeRTOS\Source/tasks.c ****                      * important for low power tickless implementations, where
2224:FreeRTOS\Source/tasks.c ****                      * this can prevent an unnecessary exit from low power
2225:FreeRTOS\Source/tasks.c ****                      * state. */
2226:FreeRTOS\Source/tasks.c ****                     prvResetNextTaskUnblockTime();
2227:FreeRTOS\Source/tasks.c ****                 }
2228:FreeRTOS\Source/tasks.c **** 
2229:FreeRTOS\Source/tasks.c ****                 /* If any ticks occurred while the scheduler was suspended then
2230:FreeRTOS\Source/tasks.c ****                  * they should be processed now.  This ensures the tick count does
2231:FreeRTOS\Source/tasks.c ****                  * not  slip, and that any delayed tasks are resumed at the correct
2232:FreeRTOS\Source/tasks.c ****                  * time. */
2233:FreeRTOS\Source/tasks.c ****                 {
2234:FreeRTOS\Source/tasks.c ****                     TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
2235:FreeRTOS\Source/tasks.c **** 
2236:FreeRTOS\Source/tasks.c ****                     if( xPendedCounts > ( TickType_t ) 0U )
2237:FreeRTOS\Source/tasks.c ****                     {
2238:FreeRTOS\Source/tasks.c ****                         do
2239:FreeRTOS\Source/tasks.c ****                         {
2240:FreeRTOS\Source/tasks.c ****                             if( xTaskIncrementTick() != pdFALSE )
2241:FreeRTOS\Source/tasks.c ****                             {
2242:FreeRTOS\Source/tasks.c ****                                 xYieldPending = pdTRUE;
2243:FreeRTOS\Source/tasks.c ****                             }
2244:FreeRTOS\Source/tasks.c ****                             else
2245:FreeRTOS\Source/tasks.c ****                             {
2246:FreeRTOS\Source/tasks.c ****                                 mtCOVERAGE_TEST_MARKER();
2247:FreeRTOS\Source/tasks.c ****                             }
2248:FreeRTOS\Source/tasks.c **** 
2249:FreeRTOS\Source/tasks.c ****                             --xPendedCounts;
2250:FreeRTOS\Source/tasks.c ****                         } while( xPendedCounts > ( TickType_t ) 0U );
2251:FreeRTOS\Source/tasks.c **** 
2252:FreeRTOS\Source/tasks.c ****                         xPendedTicks = 0;
2253:FreeRTOS\Source/tasks.c ****                     }
2254:FreeRTOS\Source/tasks.c ****                     else
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 42


2255:FreeRTOS\Source/tasks.c ****                     {
2256:FreeRTOS\Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2257:FreeRTOS\Source/tasks.c ****                     }
2258:FreeRTOS\Source/tasks.c ****                 }
2259:FreeRTOS\Source/tasks.c **** 
2260:FreeRTOS\Source/tasks.c ****                 if( xYieldPending != pdFALSE )
2261:FreeRTOS\Source/tasks.c ****                 {
2262:FreeRTOS\Source/tasks.c ****                     #if ( configUSE_PREEMPTION != 0 )
2263:FreeRTOS\Source/tasks.c ****                     {
2264:FreeRTOS\Source/tasks.c ****                         xAlreadyYielded = pdTRUE;
2265:FreeRTOS\Source/tasks.c ****                     }
2266:FreeRTOS\Source/tasks.c ****                     #endif
2267:FreeRTOS\Source/tasks.c ****                     taskYIELD_IF_USING_PREEMPTION();
2268:FreeRTOS\Source/tasks.c ****                 }
2269:FreeRTOS\Source/tasks.c ****                 else
2270:FreeRTOS\Source/tasks.c ****                 {
2271:FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
2272:FreeRTOS\Source/tasks.c ****                 }
2273:FreeRTOS\Source/tasks.c ****             }
2274:FreeRTOS\Source/tasks.c ****         }
2275:FreeRTOS\Source/tasks.c ****         else
2276:FreeRTOS\Source/tasks.c ****         {
2277:FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2278:FreeRTOS\Source/tasks.c ****         }
2279:FreeRTOS\Source/tasks.c ****     }
2280:FreeRTOS\Source/tasks.c ****     taskEXIT_CRITICAL();
2281:FreeRTOS\Source/tasks.c **** 
2282:FreeRTOS\Source/tasks.c ****     return xAlreadyYielded;
2283:FreeRTOS\Source/tasks.c **** }
2284:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2285:FreeRTOS\Source/tasks.c **** 
2286:FreeRTOS\Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2287:FreeRTOS\Source/tasks.c **** {
2288:FreeRTOS\Source/tasks.c ****     TickType_t xTicks;
2289:FreeRTOS\Source/tasks.c **** 
2290:FreeRTOS\Source/tasks.c ****     /* Critical section required if running on a 16 bit processor. */
2291:FreeRTOS\Source/tasks.c ****     portTICK_TYPE_ENTER_CRITICAL();
2292:FreeRTOS\Source/tasks.c ****     {
2293:FreeRTOS\Source/tasks.c ****         xTicks = xTickCount;
2294:FreeRTOS\Source/tasks.c ****     }
2295:FreeRTOS\Source/tasks.c ****     portTICK_TYPE_EXIT_CRITICAL();
2296:FreeRTOS\Source/tasks.c **** 
2297:FreeRTOS\Source/tasks.c ****     return xTicks;
2298:FreeRTOS\Source/tasks.c **** }
2299:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2300:FreeRTOS\Source/tasks.c **** 
2301:FreeRTOS\Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2302:FreeRTOS\Source/tasks.c **** {
2303:FreeRTOS\Source/tasks.c ****     TickType_t xReturn;
2304:FreeRTOS\Source/tasks.c ****     UBaseType_t uxSavedInterruptStatus;
2305:FreeRTOS\Source/tasks.c **** 
2306:FreeRTOS\Source/tasks.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
2307:FreeRTOS\Source/tasks.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
2308:FreeRTOS\Source/tasks.c ****      * above the maximum system call priority are kept permanently enabled, even
2309:FreeRTOS\Source/tasks.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
2310:FreeRTOS\Source/tasks.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2311:FreeRTOS\Source/tasks.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 43


2312:FreeRTOS\Source/tasks.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
2313:FreeRTOS\Source/tasks.c ****      * assigned a priority above the configured maximum system call priority.
2314:FreeRTOS\Source/tasks.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
2315:FreeRTOS\Source/tasks.c ****      * that have been assigned a priority at or (logically) below the maximum
2316:FreeRTOS\Source/tasks.c ****      * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
2317:FreeRTOS\Source/tasks.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
2318:FreeRTOS\Source/tasks.c ****      * More information (albeit Cortex-M specific) is provided on the following
2319:FreeRTOS\Source/tasks.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
2320:FreeRTOS\Source/tasks.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2321:FreeRTOS\Source/tasks.c **** 
2322:FreeRTOS\Source/tasks.c ****     uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2323:FreeRTOS\Source/tasks.c ****     {
2324:FreeRTOS\Source/tasks.c ****         xReturn = xTickCount;
2325:FreeRTOS\Source/tasks.c ****     }
2326:FreeRTOS\Source/tasks.c ****     portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2327:FreeRTOS\Source/tasks.c **** 
2328:FreeRTOS\Source/tasks.c ****     return xReturn;
2329:FreeRTOS\Source/tasks.c **** }
2330:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2331:FreeRTOS\Source/tasks.c **** 
2332:FreeRTOS\Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2333:FreeRTOS\Source/tasks.c **** {
2334:FreeRTOS\Source/tasks.c ****     /* A critical section is not required because the variables are of type
2335:FreeRTOS\Source/tasks.c ****      * BaseType_t. */
2336:FreeRTOS\Source/tasks.c ****     return uxCurrentNumberOfTasks;
2337:FreeRTOS\Source/tasks.c **** }
2338:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2339:FreeRTOS\Source/tasks.c **** 
2340:FreeRTOS\Source/tasks.c **** char * pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed f
2341:FreeRTOS\Source/tasks.c **** {
2342:FreeRTOS\Source/tasks.c ****     TCB_t * pxTCB;
2343:FreeRTOS\Source/tasks.c **** 
2344:FreeRTOS\Source/tasks.c ****     /* If null is passed in here then the name of the calling task is being
2345:FreeRTOS\Source/tasks.c ****      * queried. */
2346:FreeRTOS\Source/tasks.c ****     pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2347:FreeRTOS\Source/tasks.c ****     configASSERT( pxTCB );
2348:FreeRTOS\Source/tasks.c ****     return &( pxTCB->pcTaskName[ 0 ] );
2349:FreeRTOS\Source/tasks.c **** }
2350:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2351:FreeRTOS\Source/tasks.c **** 
2352:FreeRTOS\Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2353:FreeRTOS\Source/tasks.c **** 
2354:FreeRTOS\Source/tasks.c ****     static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
2355:FreeRTOS\Source/tasks.c ****                                                      const char pcNameToQuery[] )
2356:FreeRTOS\Source/tasks.c ****     {
2357:FreeRTOS\Source/tasks.c ****         TCB_t * pxNextTCB;
2358:FreeRTOS\Source/tasks.c ****         TCB_t * pxFirstTCB;
2359:FreeRTOS\Source/tasks.c ****         TCB_t * pxReturn = NULL;
2360:FreeRTOS\Source/tasks.c ****         UBaseType_t x;
2361:FreeRTOS\Source/tasks.c ****         char cNextChar;
2362:FreeRTOS\Source/tasks.c ****         BaseType_t xBreakLoop;
2363:FreeRTOS\Source/tasks.c **** 
2364:FreeRTOS\Source/tasks.c ****         /* This function is called with the scheduler suspended. */
2365:FreeRTOS\Source/tasks.c **** 
2366:FreeRTOS\Source/tasks.c ****         if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2367:FreeRTOS\Source/tasks.c ****         {
2368:FreeRTOS\Source/tasks.c ****             listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 44


2369:FreeRTOS\Source/tasks.c **** 
2370:FreeRTOS\Source/tasks.c ****             do
2371:FreeRTOS\Source/tasks.c ****             {
2372:FreeRTOS\Source/tasks.c ****                 listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as t
2373:FreeRTOS\Source/tasks.c **** 
2374:FreeRTOS\Source/tasks.c ****                 /* Check each character in the name looking for a match or
2375:FreeRTOS\Source/tasks.c ****                  * mismatch. */
2376:FreeRTOS\Source/tasks.c ****                 xBreakLoop = pdFALSE;
2377:FreeRTOS\Source/tasks.c **** 
2378:FreeRTOS\Source/tasks.c ****                 for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2379:FreeRTOS\Source/tasks.c ****                 {
2380:FreeRTOS\Source/tasks.c ****                     cNextChar = pxNextTCB->pcTaskName[ x ];
2381:FreeRTOS\Source/tasks.c **** 
2382:FreeRTOS\Source/tasks.c ****                     if( cNextChar != pcNameToQuery[ x ] )
2383:FreeRTOS\Source/tasks.c ****                     {
2384:FreeRTOS\Source/tasks.c ****                         /* Characters didn't match. */
2385:FreeRTOS\Source/tasks.c ****                         xBreakLoop = pdTRUE;
2386:FreeRTOS\Source/tasks.c ****                     }
2387:FreeRTOS\Source/tasks.c ****                     else if( cNextChar == ( char ) 0x00 )
2388:FreeRTOS\Source/tasks.c ****                     {
2389:FreeRTOS\Source/tasks.c ****                         /* Both strings terminated, a match must have been
2390:FreeRTOS\Source/tasks.c ****                          * found. */
2391:FreeRTOS\Source/tasks.c ****                         pxReturn = pxNextTCB;
2392:FreeRTOS\Source/tasks.c ****                         xBreakLoop = pdTRUE;
2393:FreeRTOS\Source/tasks.c ****                     }
2394:FreeRTOS\Source/tasks.c ****                     else
2395:FreeRTOS\Source/tasks.c ****                     {
2396:FreeRTOS\Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2397:FreeRTOS\Source/tasks.c ****                     }
2398:FreeRTOS\Source/tasks.c **** 
2399:FreeRTOS\Source/tasks.c ****                     if( xBreakLoop != pdFALSE )
2400:FreeRTOS\Source/tasks.c ****                     {
2401:FreeRTOS\Source/tasks.c ****                         break;
2402:FreeRTOS\Source/tasks.c ****                     }
2403:FreeRTOS\Source/tasks.c ****                 }
2404:FreeRTOS\Source/tasks.c **** 
2405:FreeRTOS\Source/tasks.c ****                 if( pxReturn != NULL )
2406:FreeRTOS\Source/tasks.c ****                 {
2407:FreeRTOS\Source/tasks.c ****                     /* The handle has been found. */
2408:FreeRTOS\Source/tasks.c ****                     break;
2409:FreeRTOS\Source/tasks.c ****                 }
2410:FreeRTOS\Source/tasks.c ****             } while( pxNextTCB != pxFirstTCB );
2411:FreeRTOS\Source/tasks.c ****         }
2412:FreeRTOS\Source/tasks.c ****         else
2413:FreeRTOS\Source/tasks.c ****         {
2414:FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2415:FreeRTOS\Source/tasks.c ****         }
2416:FreeRTOS\Source/tasks.c **** 
2417:FreeRTOS\Source/tasks.c ****         return pxReturn;
2418:FreeRTOS\Source/tasks.c ****     }
2419:FreeRTOS\Source/tasks.c **** 
2420:FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2421:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2422:FreeRTOS\Source/tasks.c **** 
2423:FreeRTOS\Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2424:FreeRTOS\Source/tasks.c **** 
2425:FreeRTOS\Source/tasks.c ****     TaskHandle_t xTaskGetHandle( const char * pcNameToQuery ) /*lint !e971 Unqualified char types a
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 45


2426:FreeRTOS\Source/tasks.c ****     {
2427:FreeRTOS\Source/tasks.c ****         UBaseType_t uxQueue = configMAX_PRIORITIES;
2428:FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
2429:FreeRTOS\Source/tasks.c **** 
2430:FreeRTOS\Source/tasks.c ****         /* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2431:FreeRTOS\Source/tasks.c ****         configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2432:FreeRTOS\Source/tasks.c **** 
2433:FreeRTOS\Source/tasks.c ****         vTaskSuspendAll();
2434:FreeRTOS\Source/tasks.c ****         {
2435:FreeRTOS\Source/tasks.c ****             /* Search the ready lists. */
2436:FreeRTOS\Source/tasks.c ****             do
2437:FreeRTOS\Source/tasks.c ****             {
2438:FreeRTOS\Source/tasks.c ****                 uxQueue--;
2439:FreeRTOS\Source/tasks.c ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueu
2440:FreeRTOS\Source/tasks.c **** 
2441:FreeRTOS\Source/tasks.c ****                 if( pxTCB != NULL )
2442:FreeRTOS\Source/tasks.c ****                 {
2443:FreeRTOS\Source/tasks.c ****                     /* Found the handle. */
2444:FreeRTOS\Source/tasks.c ****                     break;
2445:FreeRTOS\Source/tasks.c ****                 }
2446:FreeRTOS\Source/tasks.c ****             } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as 
2447:FreeRTOS\Source/tasks.c **** 
2448:FreeRTOS\Source/tasks.c ****             /* Search the delayed lists. */
2449:FreeRTOS\Source/tasks.c ****             if( pxTCB == NULL )
2450:FreeRTOS\Source/tasks.c ****             {
2451:FreeRTOS\Source/tasks.c ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQ
2452:FreeRTOS\Source/tasks.c ****             }
2453:FreeRTOS\Source/tasks.c **** 
2454:FreeRTOS\Source/tasks.c ****             if( pxTCB == NULL )
2455:FreeRTOS\Source/tasks.c ****             {
2456:FreeRTOS\Source/tasks.c ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, p
2457:FreeRTOS\Source/tasks.c ****             }
2458:FreeRTOS\Source/tasks.c **** 
2459:FreeRTOS\Source/tasks.c ****             #if ( INCLUDE_vTaskSuspend == 1 )
2460:FreeRTOS\Source/tasks.c ****             {
2461:FreeRTOS\Source/tasks.c ****                 if( pxTCB == NULL )
2462:FreeRTOS\Source/tasks.c ****                 {
2463:FreeRTOS\Source/tasks.c ****                     /* Search the suspended list. */
2464:FreeRTOS\Source/tasks.c ****                     pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2465:FreeRTOS\Source/tasks.c ****                 }
2466:FreeRTOS\Source/tasks.c ****             }
2467:FreeRTOS\Source/tasks.c ****             #endif
2468:FreeRTOS\Source/tasks.c **** 
2469:FreeRTOS\Source/tasks.c ****             #if ( INCLUDE_vTaskDelete == 1 )
2470:FreeRTOS\Source/tasks.c ****             {
2471:FreeRTOS\Source/tasks.c ****                 if( pxTCB == NULL )
2472:FreeRTOS\Source/tasks.c ****                 {
2473:FreeRTOS\Source/tasks.c ****                     /* Search the deleted list. */
2474:FreeRTOS\Source/tasks.c ****                     pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQu
2475:FreeRTOS\Source/tasks.c ****                 }
2476:FreeRTOS\Source/tasks.c ****             }
2477:FreeRTOS\Source/tasks.c ****             #endif
2478:FreeRTOS\Source/tasks.c ****         }
2479:FreeRTOS\Source/tasks.c ****         ( void ) xTaskResumeAll();
2480:FreeRTOS\Source/tasks.c **** 
2481:FreeRTOS\Source/tasks.c ****         return pxTCB;
2482:FreeRTOS\Source/tasks.c ****     }
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 46


2483:FreeRTOS\Source/tasks.c **** 
2484:FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2485:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2486:FreeRTOS\Source/tasks.c **** 
2487:FreeRTOS\Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2488:FreeRTOS\Source/tasks.c **** 
2489:FreeRTOS\Source/tasks.c ****     UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray,
2490:FreeRTOS\Source/tasks.c ****                                       const UBaseType_t uxArraySize,
2491:FreeRTOS\Source/tasks.c ****                                       configRUN_TIME_COUNTER_TYPE * const pulTotalRunTime )
2492:FreeRTOS\Source/tasks.c ****     {
2493:FreeRTOS\Source/tasks.c ****         UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2494:FreeRTOS\Source/tasks.c **** 
2495:FreeRTOS\Source/tasks.c ****         vTaskSuspendAll();
2496:FreeRTOS\Source/tasks.c ****         {
2497:FreeRTOS\Source/tasks.c ****             /* Is there a space in the array for each task in the system? */
2498:FreeRTOS\Source/tasks.c ****             if( uxArraySize >= uxCurrentNumberOfTasks )
2499:FreeRTOS\Source/tasks.c ****             {
2500:FreeRTOS\Source/tasks.c ****                 /* Fill in an TaskStatus_t structure with information on each
2501:FreeRTOS\Source/tasks.c ****                  * task in the Ready state. */
2502:FreeRTOS\Source/tasks.c ****                 do
2503:FreeRTOS\Source/tasks.c ****                 {
2504:FreeRTOS\Source/tasks.c ****                     uxQueue--;
2505:FreeRTOS\Source/tasks.c ****                     uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( px
2506:FreeRTOS\Source/tasks.c ****                 } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception
2507:FreeRTOS\Source/tasks.c **** 
2508:FreeRTOS\Source/tasks.c ****                 /* Fill in an TaskStatus_t structure with information on each
2509:FreeRTOS\Source/tasks.c ****                  * task in the Blocked state. */
2510:FreeRTOS\Source/tasks.c ****                 uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t 
2511:FreeRTOS\Source/tasks.c ****                 uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t 
2512:FreeRTOS\Source/tasks.c **** 
2513:FreeRTOS\Source/tasks.c ****                 #if ( INCLUDE_vTaskDelete == 1 )
2514:FreeRTOS\Source/tasks.c ****                 {
2515:FreeRTOS\Source/tasks.c ****                     /* Fill in an TaskStatus_t structure with information on
2516:FreeRTOS\Source/tasks.c ****                      * each task that has been deleted but not yet cleaned up. */
2517:FreeRTOS\Source/tasks.c ****                     uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTas
2518:FreeRTOS\Source/tasks.c ****                 }
2519:FreeRTOS\Source/tasks.c ****                 #endif
2520:FreeRTOS\Source/tasks.c **** 
2521:FreeRTOS\Source/tasks.c ****                 #if ( INCLUDE_vTaskSuspend == 1 )
2522:FreeRTOS\Source/tasks.c ****                 {
2523:FreeRTOS\Source/tasks.c ****                     /* Fill in an TaskStatus_t structure with information on
2524:FreeRTOS\Source/tasks.c ****                      * each task in the Suspended state. */
2525:FreeRTOS\Source/tasks.c ****                     uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSus
2526:FreeRTOS\Source/tasks.c ****                 }
2527:FreeRTOS\Source/tasks.c ****                 #endif
2528:FreeRTOS\Source/tasks.c **** 
2529:FreeRTOS\Source/tasks.c ****                 #if ( configGENERATE_RUN_TIME_STATS == 1 )
2530:FreeRTOS\Source/tasks.c ****                 {
2531:FreeRTOS\Source/tasks.c ****                     if( pulTotalRunTime != NULL )
2532:FreeRTOS\Source/tasks.c ****                     {
2533:FreeRTOS\Source/tasks.c ****                         #ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2534:FreeRTOS\Source/tasks.c ****                             portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2535:FreeRTOS\Source/tasks.c ****                         #else
2536:FreeRTOS\Source/tasks.c ****                             *pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2537:FreeRTOS\Source/tasks.c ****                         #endif
2538:FreeRTOS\Source/tasks.c ****                     }
2539:FreeRTOS\Source/tasks.c ****                 }
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 47


2540:FreeRTOS\Source/tasks.c ****                 #else /* if ( configGENERATE_RUN_TIME_STATS == 1 ) */
2541:FreeRTOS\Source/tasks.c ****                 {
2542:FreeRTOS\Source/tasks.c ****                     if( pulTotalRunTime != NULL )
2543:FreeRTOS\Source/tasks.c ****                     {
2544:FreeRTOS\Source/tasks.c ****                         *pulTotalRunTime = 0;
2545:FreeRTOS\Source/tasks.c ****                     }
2546:FreeRTOS\Source/tasks.c ****                 }
2547:FreeRTOS\Source/tasks.c ****                 #endif /* if ( configGENERATE_RUN_TIME_STATS == 1 ) */
2548:FreeRTOS\Source/tasks.c ****             }
2549:FreeRTOS\Source/tasks.c ****             else
2550:FreeRTOS\Source/tasks.c ****             {
2551:FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
2552:FreeRTOS\Source/tasks.c ****             }
2553:FreeRTOS\Source/tasks.c ****         }
2554:FreeRTOS\Source/tasks.c ****         ( void ) xTaskResumeAll();
2555:FreeRTOS\Source/tasks.c **** 
2556:FreeRTOS\Source/tasks.c ****         return uxTask;
2557:FreeRTOS\Source/tasks.c ****     }
2558:FreeRTOS\Source/tasks.c **** 
2559:FreeRTOS\Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2560:FreeRTOS\Source/tasks.c **** /*----------------------------------------------------------*/
2561:FreeRTOS\Source/tasks.c **** 
2562:FreeRTOS\Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2563:FreeRTOS\Source/tasks.c **** 
2564:FreeRTOS\Source/tasks.c ****     TaskHandle_t xTaskGetIdleTaskHandle( void )
2565:FreeRTOS\Source/tasks.c ****     {
2566:FreeRTOS\Source/tasks.c ****         /* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2567:FreeRTOS\Source/tasks.c ****          * started, then xIdleTaskHandle will be NULL. */
2568:FreeRTOS\Source/tasks.c ****         configASSERT( ( xIdleTaskHandle != NULL ) );
2569:FreeRTOS\Source/tasks.c ****         return xIdleTaskHandle;
2570:FreeRTOS\Source/tasks.c ****     }
2571:FreeRTOS\Source/tasks.c **** 
2572:FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2573:FreeRTOS\Source/tasks.c **** /*----------------------------------------------------------*/
2574:FreeRTOS\Source/tasks.c **** 
2575:FreeRTOS\Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2576:FreeRTOS\Source/tasks.c ****  * This is to ensure vTaskStepTick() is available when user defined low power mode
2577:FreeRTOS\Source/tasks.c ****  * implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2578:FreeRTOS\Source/tasks.c ****  * 1. */
2579:FreeRTOS\Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2580:FreeRTOS\Source/tasks.c **** 
2581:FreeRTOS\Source/tasks.c ****     void vTaskStepTick( TickType_t xTicksToJump )
2582:FreeRTOS\Source/tasks.c ****     {
2583:FreeRTOS\Source/tasks.c ****         /* Correct the tick count value after a period during which the tick
2584:FreeRTOS\Source/tasks.c ****          * was suppressed.  Note this does *not* call the tick hook function for
2585:FreeRTOS\Source/tasks.c ****          * each stepped tick. */
2586:FreeRTOS\Source/tasks.c ****         configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2587:FreeRTOS\Source/tasks.c **** 
2588:FreeRTOS\Source/tasks.c ****         if( ( xTickCount + xTicksToJump ) == xNextTaskUnblockTime )
2589:FreeRTOS\Source/tasks.c ****         {
2590:FreeRTOS\Source/tasks.c ****             /* Arrange for xTickCount to reach xNextTaskUnblockTime in
2591:FreeRTOS\Source/tasks.c ****              * xTaskIncrementTick() when the scheduler resumes.  This ensures
2592:FreeRTOS\Source/tasks.c ****              * that any delayed tasks are resumed at the correct time. */
2593:FreeRTOS\Source/tasks.c ****             configASSERT( uxSchedulerSuspended );
2594:FreeRTOS\Source/tasks.c ****             configASSERT( xTicksToJump != ( TickType_t ) 0 );
2595:FreeRTOS\Source/tasks.c **** 
2596:FreeRTOS\Source/tasks.c ****             /* Prevent the tick interrupt modifying xPendedTicks simultaneously. */
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 48


2597:FreeRTOS\Source/tasks.c ****             taskENTER_CRITICAL();
2598:FreeRTOS\Source/tasks.c ****             {
2599:FreeRTOS\Source/tasks.c ****                 xPendedTicks++;
2600:FreeRTOS\Source/tasks.c ****             }
2601:FreeRTOS\Source/tasks.c ****             taskEXIT_CRITICAL();
2602:FreeRTOS\Source/tasks.c ****             xTicksToJump--;
2603:FreeRTOS\Source/tasks.c ****         }
2604:FreeRTOS\Source/tasks.c ****         else
2605:FreeRTOS\Source/tasks.c ****         {
2606:FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2607:FreeRTOS\Source/tasks.c ****         }
2608:FreeRTOS\Source/tasks.c **** 
2609:FreeRTOS\Source/tasks.c ****         xTickCount += xTicksToJump;
2610:FreeRTOS\Source/tasks.c ****         traceINCREASE_TICK_COUNT( xTicksToJump );
2611:FreeRTOS\Source/tasks.c ****     }
2612:FreeRTOS\Source/tasks.c **** 
2613:FreeRTOS\Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2614:FreeRTOS\Source/tasks.c **** /*----------------------------------------------------------*/
2615:FreeRTOS\Source/tasks.c **** 
2616:FreeRTOS\Source/tasks.c **** BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
2617:FreeRTOS\Source/tasks.c **** {
2618:FreeRTOS\Source/tasks.c ****     BaseType_t xYieldOccurred;
2619:FreeRTOS\Source/tasks.c **** 
2620:FreeRTOS\Source/tasks.c ****     /* Must not be called with the scheduler suspended as the implementation
2621:FreeRTOS\Source/tasks.c ****      * relies on xPendedTicks being wound down to 0 in xTaskResumeAll(). */
2622:FreeRTOS\Source/tasks.c ****     configASSERT( uxSchedulerSuspended == 0 );
2623:FreeRTOS\Source/tasks.c **** 
2624:FreeRTOS\Source/tasks.c ****     /* Use xPendedTicks to mimic xTicksToCatchUp number of ticks occurring when
2625:FreeRTOS\Source/tasks.c ****      * the scheduler is suspended so the ticks are executed in xTaskResumeAll(). */
2626:FreeRTOS\Source/tasks.c ****     vTaskSuspendAll();
2627:FreeRTOS\Source/tasks.c **** 
2628:FreeRTOS\Source/tasks.c ****     /* Prevent the tick interrupt modifying xPendedTicks simultaneously. */
2629:FreeRTOS\Source/tasks.c ****     taskENTER_CRITICAL();
2630:FreeRTOS\Source/tasks.c ****     {
2631:FreeRTOS\Source/tasks.c ****         xPendedTicks += xTicksToCatchUp;
2632:FreeRTOS\Source/tasks.c ****     }
2633:FreeRTOS\Source/tasks.c ****     taskEXIT_CRITICAL();
2634:FreeRTOS\Source/tasks.c ****     xYieldOccurred = xTaskResumeAll();
2635:FreeRTOS\Source/tasks.c **** 
2636:FreeRTOS\Source/tasks.c ****     return xYieldOccurred;
2637:FreeRTOS\Source/tasks.c **** }
2638:FreeRTOS\Source/tasks.c **** /*----------------------------------------------------------*/
2639:FreeRTOS\Source/tasks.c **** 
2640:FreeRTOS\Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2641:FreeRTOS\Source/tasks.c **** 
2642:FreeRTOS\Source/tasks.c ****     BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2643:FreeRTOS\Source/tasks.c ****     {
2644:FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB = xTask;
2645:FreeRTOS\Source/tasks.c ****         BaseType_t xReturn;
2646:FreeRTOS\Source/tasks.c **** 
2647:FreeRTOS\Source/tasks.c ****         configASSERT( pxTCB );
2648:FreeRTOS\Source/tasks.c **** 
2649:FreeRTOS\Source/tasks.c ****         vTaskSuspendAll();
2650:FreeRTOS\Source/tasks.c ****         {
2651:FreeRTOS\Source/tasks.c ****             /* A task can only be prematurely removed from the Blocked state if
2652:FreeRTOS\Source/tasks.c ****              * it is actually in the Blocked state. */
2653:FreeRTOS\Source/tasks.c ****             if( eTaskGetState( xTask ) == eBlocked )
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 49


2654:FreeRTOS\Source/tasks.c ****             {
2655:FreeRTOS\Source/tasks.c ****                 xReturn = pdPASS;
2656:FreeRTOS\Source/tasks.c **** 
2657:FreeRTOS\Source/tasks.c ****                 /* Remove the reference to the task from the blocked list.  An
2658:FreeRTOS\Source/tasks.c ****                  * interrupt won't touch the xStateListItem because the
2659:FreeRTOS\Source/tasks.c ****                  * scheduler is suspended. */
2660:FreeRTOS\Source/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2661:FreeRTOS\Source/tasks.c **** 
2662:FreeRTOS\Source/tasks.c ****                 /* Is the task waiting on an event also?  If so remove it from
2663:FreeRTOS\Source/tasks.c ****                  * the event list too.  Interrupts can touch the event list item,
2664:FreeRTOS\Source/tasks.c ****                  * even though the scheduler is suspended, so a critical section
2665:FreeRTOS\Source/tasks.c ****                  * is used. */
2666:FreeRTOS\Source/tasks.c ****                 taskENTER_CRITICAL();
2667:FreeRTOS\Source/tasks.c ****                 {
2668:FreeRTOS\Source/tasks.c ****                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2669:FreeRTOS\Source/tasks.c ****                     {
2670:FreeRTOS\Source/tasks.c ****                         ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2671:FreeRTOS\Source/tasks.c **** 
2672:FreeRTOS\Source/tasks.c ****                         /* This lets the task know it was forcibly removed from the
2673:FreeRTOS\Source/tasks.c ****                          * blocked state so it should not re-evaluate its block time and
2674:FreeRTOS\Source/tasks.c ****                          * then block again. */
2675:FreeRTOS\Source/tasks.c ****                         pxTCB->ucDelayAborted = pdTRUE;
2676:FreeRTOS\Source/tasks.c ****                     }
2677:FreeRTOS\Source/tasks.c ****                     else
2678:FreeRTOS\Source/tasks.c ****                     {
2679:FreeRTOS\Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2680:FreeRTOS\Source/tasks.c ****                     }
2681:FreeRTOS\Source/tasks.c ****                 }
2682:FreeRTOS\Source/tasks.c ****                 taskEXIT_CRITICAL();
2683:FreeRTOS\Source/tasks.c **** 
2684:FreeRTOS\Source/tasks.c ****                 /* Place the unblocked task into the appropriate ready list. */
2685:FreeRTOS\Source/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
2686:FreeRTOS\Source/tasks.c **** 
2687:FreeRTOS\Source/tasks.c ****                 /* A task being unblocked cannot cause an immediate context
2688:FreeRTOS\Source/tasks.c ****                  * switch if preemption is turned off. */
2689:FreeRTOS\Source/tasks.c ****                 #if ( configUSE_PREEMPTION == 1 )
2690:FreeRTOS\Source/tasks.c ****                 {
2691:FreeRTOS\Source/tasks.c ****                     /* Preemption is on, but a context switch should only be
2692:FreeRTOS\Source/tasks.c ****                      * performed if the unblocked task has a priority that is
2693:FreeRTOS\Source/tasks.c ****                      * higher than the currently executing task. */
2694:FreeRTOS\Source/tasks.c ****                     if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2695:FreeRTOS\Source/tasks.c ****                     {
2696:FreeRTOS\Source/tasks.c ****                         /* Pend the yield to be performed when the scheduler
2697:FreeRTOS\Source/tasks.c ****                          * is unsuspended. */
2698:FreeRTOS\Source/tasks.c ****                         xYieldPending = pdTRUE;
2699:FreeRTOS\Source/tasks.c ****                     }
2700:FreeRTOS\Source/tasks.c ****                     else
2701:FreeRTOS\Source/tasks.c ****                     {
2702:FreeRTOS\Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2703:FreeRTOS\Source/tasks.c ****                     }
2704:FreeRTOS\Source/tasks.c ****                 }
2705:FreeRTOS\Source/tasks.c ****                 #endif /* configUSE_PREEMPTION */
2706:FreeRTOS\Source/tasks.c ****             }
2707:FreeRTOS\Source/tasks.c ****             else
2708:FreeRTOS\Source/tasks.c ****             {
2709:FreeRTOS\Source/tasks.c ****                 xReturn = pdFAIL;
2710:FreeRTOS\Source/tasks.c ****             }
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 50


2711:FreeRTOS\Source/tasks.c ****         }
2712:FreeRTOS\Source/tasks.c ****         ( void ) xTaskResumeAll();
2713:FreeRTOS\Source/tasks.c **** 
2714:FreeRTOS\Source/tasks.c ****         return xReturn;
2715:FreeRTOS\Source/tasks.c ****     }
2716:FreeRTOS\Source/tasks.c **** 
2717:FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2718:FreeRTOS\Source/tasks.c **** /*----------------------------------------------------------*/
2719:FreeRTOS\Source/tasks.c **** 
2720:FreeRTOS\Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2721:FreeRTOS\Source/tasks.c **** {
2722:FreeRTOS\Source/tasks.c ****     TCB_t * pxTCB;
2723:FreeRTOS\Source/tasks.c ****     TickType_t xItemValue;
2724:FreeRTOS\Source/tasks.c ****     BaseType_t xSwitchRequired = pdFALSE;
2725:FreeRTOS\Source/tasks.c **** 
2726:FreeRTOS\Source/tasks.c ****     /* Called by the portable layer each time a tick interrupt occurs.
2727:FreeRTOS\Source/tasks.c ****      * Increments the tick then checks to see if the new tick value will cause any
2728:FreeRTOS\Source/tasks.c ****      * tasks to be unblocked. */
2729:FreeRTOS\Source/tasks.c ****     traceTASK_INCREMENT_TICK( xTickCount );
2730:FreeRTOS\Source/tasks.c **** 
2731:FreeRTOS\Source/tasks.c ****     if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2732:FreeRTOS\Source/tasks.c ****     {
2733:FreeRTOS\Source/tasks.c ****         /* Minor optimisation.  The tick count cannot change in this
2734:FreeRTOS\Source/tasks.c ****          * block. */
2735:FreeRTOS\Source/tasks.c ****         const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
2736:FreeRTOS\Source/tasks.c **** 
2737:FreeRTOS\Source/tasks.c ****         /* Increment the RTOS tick, switching the delayed and overflowed
2738:FreeRTOS\Source/tasks.c ****          * delayed lists if it wraps to 0. */
2739:FreeRTOS\Source/tasks.c ****         xTickCount = xConstTickCount;
2740:FreeRTOS\Source/tasks.c **** 
2741:FreeRTOS\Source/tasks.c ****         if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to fa
2742:FreeRTOS\Source/tasks.c ****         {
2743:FreeRTOS\Source/tasks.c ****             taskSWITCH_DELAYED_LISTS();
2744:FreeRTOS\Source/tasks.c ****         }
2745:FreeRTOS\Source/tasks.c ****         else
2746:FreeRTOS\Source/tasks.c ****         {
2747:FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2748:FreeRTOS\Source/tasks.c ****         }
2749:FreeRTOS\Source/tasks.c **** 
2750:FreeRTOS\Source/tasks.c ****         /* See if this tick has made a timeout expire.  Tasks are stored in
2751:FreeRTOS\Source/tasks.c ****          * the  queue in the order of their wake time - meaning once one task
2752:FreeRTOS\Source/tasks.c ****          * has been found whose block time has not expired there is no need to
2753:FreeRTOS\Source/tasks.c ****          * look any further down the list. */
2754:FreeRTOS\Source/tasks.c ****         if( xConstTickCount >= xNextTaskUnblockTime )
2755:FreeRTOS\Source/tasks.c ****         {
2756:FreeRTOS\Source/tasks.c ****             for( ; ; )
2757:FreeRTOS\Source/tasks.c ****             {
2758:FreeRTOS\Source/tasks.c ****                 if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2759:FreeRTOS\Source/tasks.c ****                 {
2760:FreeRTOS\Source/tasks.c ****                     /* The delayed list is empty.  Set xNextTaskUnblockTime
2761:FreeRTOS\Source/tasks.c ****                      * to the maximum possible value so it is extremely
2762:FreeRTOS\Source/tasks.c ****                      * unlikely that the
2763:FreeRTOS\Source/tasks.c ****                      * if( xTickCount >= xNextTaskUnblockTime ) test will pass
2764:FreeRTOS\Source/tasks.c ****                      * next time through. */
2765:FreeRTOS\Source/tasks.c ****                     xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts
2766:FreeRTOS\Source/tasks.c ****                     break;
2767:FreeRTOS\Source/tasks.c ****                 }
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 51


2768:FreeRTOS\Source/tasks.c ****                 else
2769:FreeRTOS\Source/tasks.c ****                 {
2770:FreeRTOS\Source/tasks.c ****                     /* The delayed list is not empty, get the value of the
2771:FreeRTOS\Source/tasks.c ****                      * item at the head of the delayed list.  This is the time
2772:FreeRTOS\Source/tasks.c ****                      * at which the task at the head of the delayed list must
2773:FreeRTOS\Source/tasks.c ****                      * be removed from the Blocked state. */
2774:FreeRTOS\Source/tasks.c ****                     pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * 
2775:FreeRTOS\Source/tasks.c ****                     xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2776:FreeRTOS\Source/tasks.c **** 
2777:FreeRTOS\Source/tasks.c ****                     if( xConstTickCount < xItemValue )
2778:FreeRTOS\Source/tasks.c ****                     {
2779:FreeRTOS\Source/tasks.c ****                         /* It is not time to unblock this item yet, but the
2780:FreeRTOS\Source/tasks.c ****                          * item value is the time at which the task at the head
2781:FreeRTOS\Source/tasks.c ****                          * of the blocked list must be removed from the Blocked
2782:FreeRTOS\Source/tasks.c ****                          * state -  so record the item value in
2783:FreeRTOS\Source/tasks.c ****                          * xNextTaskUnblockTime. */
2784:FreeRTOS\Source/tasks.c ****                         xNextTaskUnblockTime = xItemValue;
2785:FreeRTOS\Source/tasks.c ****                         break; /*lint !e9011 Code structure here is deemed easier to understand wit
2786:FreeRTOS\Source/tasks.c ****                     }
2787:FreeRTOS\Source/tasks.c ****                     else
2788:FreeRTOS\Source/tasks.c ****                     {
2789:FreeRTOS\Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2790:FreeRTOS\Source/tasks.c ****                     }
2791:FreeRTOS\Source/tasks.c **** 
2792:FreeRTOS\Source/tasks.c ****                     /* It is time to remove the item from the Blocked state. */
2793:FreeRTOS\Source/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
2794:FreeRTOS\Source/tasks.c **** 
2795:FreeRTOS\Source/tasks.c ****                     /* Is the task waiting on an event also?  If so remove
2796:FreeRTOS\Source/tasks.c ****                      * it from the event list. */
2797:FreeRTOS\Source/tasks.c ****                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2798:FreeRTOS\Source/tasks.c ****                     {
2799:FreeRTOS\Source/tasks.c ****                         listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
2800:FreeRTOS\Source/tasks.c ****                     }
2801:FreeRTOS\Source/tasks.c ****                     else
2802:FreeRTOS\Source/tasks.c ****                     {
2803:FreeRTOS\Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2804:FreeRTOS\Source/tasks.c ****                     }
2805:FreeRTOS\Source/tasks.c **** 
2806:FreeRTOS\Source/tasks.c ****                     /* Place the unblocked task into the appropriate ready
2807:FreeRTOS\Source/tasks.c ****                      * list. */
2808:FreeRTOS\Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
2809:FreeRTOS\Source/tasks.c **** 
2810:FreeRTOS\Source/tasks.c ****                     /* A task being unblocked cannot cause an immediate
2811:FreeRTOS\Source/tasks.c ****                      * context switch if preemption is turned off. */
2812:FreeRTOS\Source/tasks.c ****                     #if ( configUSE_PREEMPTION == 1 )
2813:FreeRTOS\Source/tasks.c ****                     {
2814:FreeRTOS\Source/tasks.c ****                         /* Preemption is on, but a context switch should
2815:FreeRTOS\Source/tasks.c ****                          * only be performed if the unblocked task's
2816:FreeRTOS\Source/tasks.c ****                          * priority is higher than the currently executing
2817:FreeRTOS\Source/tasks.c ****                          * task.
2818:FreeRTOS\Source/tasks.c ****                          * The case of equal priority tasks sharing
2819:FreeRTOS\Source/tasks.c ****                          * processing time (which happens when both
2820:FreeRTOS\Source/tasks.c ****                          * preemption and time slicing are on) is
2821:FreeRTOS\Source/tasks.c ****                          * handled below.*/
2822:FreeRTOS\Source/tasks.c ****                         if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2823:FreeRTOS\Source/tasks.c ****                         {
2824:FreeRTOS\Source/tasks.c ****                             xSwitchRequired = pdTRUE;
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 52


2825:FreeRTOS\Source/tasks.c ****                         }
2826:FreeRTOS\Source/tasks.c ****                         else
2827:FreeRTOS\Source/tasks.c ****                         {
2828:FreeRTOS\Source/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
2829:FreeRTOS\Source/tasks.c ****                         }
2830:FreeRTOS\Source/tasks.c ****                     }
2831:FreeRTOS\Source/tasks.c ****                     #endif /* configUSE_PREEMPTION */
2832:FreeRTOS\Source/tasks.c ****                 }
2833:FreeRTOS\Source/tasks.c ****             }
2834:FreeRTOS\Source/tasks.c ****         }
2835:FreeRTOS\Source/tasks.c **** 
2836:FreeRTOS\Source/tasks.c ****         /* Tasks of equal priority to the currently running task will share
2837:FreeRTOS\Source/tasks.c ****          * processing time (time slice) if preemption is on, and the application
2838:FreeRTOS\Source/tasks.c ****          * writer has not explicitly turned time slicing off. */
2839:FreeRTOS\Source/tasks.c ****         #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2840:FreeRTOS\Source/tasks.c ****         {
2841:FreeRTOS\Source/tasks.c ****             if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( U
2842:FreeRTOS\Source/tasks.c ****             {
2843:FreeRTOS\Source/tasks.c ****                 xSwitchRequired = pdTRUE;
2844:FreeRTOS\Source/tasks.c ****             }
2845:FreeRTOS\Source/tasks.c ****             else
2846:FreeRTOS\Source/tasks.c ****             {
2847:FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
2848:FreeRTOS\Source/tasks.c ****             }
2849:FreeRTOS\Source/tasks.c ****         }
2850:FreeRTOS\Source/tasks.c ****         #endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2851:FreeRTOS\Source/tasks.c **** 
2852:FreeRTOS\Source/tasks.c ****         #if ( configUSE_TICK_HOOK == 1 )
2853:FreeRTOS\Source/tasks.c ****         {
2854:FreeRTOS\Source/tasks.c ****             /* Guard against the tick hook being called when the pended tick
2855:FreeRTOS\Source/tasks.c ****              * count is being unwound (when the scheduler is being unlocked). */
2856:FreeRTOS\Source/tasks.c ****             if( xPendedTicks == ( TickType_t ) 0 )
2857:FreeRTOS\Source/tasks.c ****             {
2858:FreeRTOS\Source/tasks.c ****                 vApplicationTickHook();
2859:FreeRTOS\Source/tasks.c ****             }
2860:FreeRTOS\Source/tasks.c ****             else
2861:FreeRTOS\Source/tasks.c ****             {
2862:FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
2863:FreeRTOS\Source/tasks.c ****             }
2864:FreeRTOS\Source/tasks.c ****         }
2865:FreeRTOS\Source/tasks.c ****         #endif /* configUSE_TICK_HOOK */
2866:FreeRTOS\Source/tasks.c **** 
2867:FreeRTOS\Source/tasks.c ****         #if ( configUSE_PREEMPTION == 1 )
2868:FreeRTOS\Source/tasks.c ****         {
2869:FreeRTOS\Source/tasks.c ****             if( xYieldPending != pdFALSE )
2870:FreeRTOS\Source/tasks.c ****             {
2871:FreeRTOS\Source/tasks.c ****                 xSwitchRequired = pdTRUE;
2872:FreeRTOS\Source/tasks.c ****             }
2873:FreeRTOS\Source/tasks.c ****             else
2874:FreeRTOS\Source/tasks.c ****             {
2875:FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
2876:FreeRTOS\Source/tasks.c ****             }
2877:FreeRTOS\Source/tasks.c ****         }
2878:FreeRTOS\Source/tasks.c ****         #endif /* configUSE_PREEMPTION */
2879:FreeRTOS\Source/tasks.c ****     }
2880:FreeRTOS\Source/tasks.c ****     else
2881:FreeRTOS\Source/tasks.c ****     {
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 53


2882:FreeRTOS\Source/tasks.c ****         ++xPendedTicks;
2883:FreeRTOS\Source/tasks.c **** 
2884:FreeRTOS\Source/tasks.c ****         /* The tick hook gets called at regular intervals, even if the
2885:FreeRTOS\Source/tasks.c ****          * scheduler is locked. */
2886:FreeRTOS\Source/tasks.c ****         #if ( configUSE_TICK_HOOK == 1 )
2887:FreeRTOS\Source/tasks.c ****         {
2888:FreeRTOS\Source/tasks.c ****             vApplicationTickHook();
2889:FreeRTOS\Source/tasks.c ****         }
2890:FreeRTOS\Source/tasks.c ****         #endif
2891:FreeRTOS\Source/tasks.c ****     }
2892:FreeRTOS\Source/tasks.c **** 
2893:FreeRTOS\Source/tasks.c ****     return xSwitchRequired;
2894:FreeRTOS\Source/tasks.c **** }
2895:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2896:FreeRTOS\Source/tasks.c **** 
2897:FreeRTOS\Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2898:FreeRTOS\Source/tasks.c **** 
2899:FreeRTOS\Source/tasks.c ****     void vTaskSetApplicationTaskTag( TaskHandle_t xTask,
2900:FreeRTOS\Source/tasks.c ****                                      TaskHookFunction_t pxHookFunction )
2901:FreeRTOS\Source/tasks.c ****     {
2902:FreeRTOS\Source/tasks.c ****         TCB_t * xTCB;
2903:FreeRTOS\Source/tasks.c **** 
2904:FreeRTOS\Source/tasks.c ****         /* If xTask is NULL then it is the task hook of the calling task that is
2905:FreeRTOS\Source/tasks.c ****          * getting set. */
2906:FreeRTOS\Source/tasks.c ****         if( xTask == NULL )
2907:FreeRTOS\Source/tasks.c ****         {
2908:FreeRTOS\Source/tasks.c ****             xTCB = ( TCB_t * ) pxCurrentTCB;
2909:FreeRTOS\Source/tasks.c ****         }
2910:FreeRTOS\Source/tasks.c ****         else
2911:FreeRTOS\Source/tasks.c ****         {
2912:FreeRTOS\Source/tasks.c ****             xTCB = xTask;
2913:FreeRTOS\Source/tasks.c ****         }
2914:FreeRTOS\Source/tasks.c **** 
2915:FreeRTOS\Source/tasks.c ****         /* Save the hook function in the TCB.  A critical section is required as
2916:FreeRTOS\Source/tasks.c ****          * the value can be accessed from an interrupt. */
2917:FreeRTOS\Source/tasks.c ****         taskENTER_CRITICAL();
2918:FreeRTOS\Source/tasks.c ****         {
2919:FreeRTOS\Source/tasks.c ****             xTCB->pxTaskTag = pxHookFunction;
2920:FreeRTOS\Source/tasks.c ****         }
2921:FreeRTOS\Source/tasks.c ****         taskEXIT_CRITICAL();
2922:FreeRTOS\Source/tasks.c ****     }
2923:FreeRTOS\Source/tasks.c **** 
2924:FreeRTOS\Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2925:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2926:FreeRTOS\Source/tasks.c **** 
2927:FreeRTOS\Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2928:FreeRTOS\Source/tasks.c **** 
2929:FreeRTOS\Source/tasks.c ****     TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2930:FreeRTOS\Source/tasks.c ****     {
2931:FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
2932:FreeRTOS\Source/tasks.c ****         TaskHookFunction_t xReturn;
2933:FreeRTOS\Source/tasks.c **** 
2934:FreeRTOS\Source/tasks.c ****         /* If xTask is NULL then set the calling task's hook. */
2935:FreeRTOS\Source/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
2936:FreeRTOS\Source/tasks.c **** 
2937:FreeRTOS\Source/tasks.c ****         /* Save the hook function in the TCB.  A critical section is required as
2938:FreeRTOS\Source/tasks.c ****          * the value can be accessed from an interrupt. */
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 54


2939:FreeRTOS\Source/tasks.c ****         taskENTER_CRITICAL();
2940:FreeRTOS\Source/tasks.c ****         {
2941:FreeRTOS\Source/tasks.c ****             xReturn = pxTCB->pxTaskTag;
2942:FreeRTOS\Source/tasks.c ****         }
2943:FreeRTOS\Source/tasks.c ****         taskEXIT_CRITICAL();
2944:FreeRTOS\Source/tasks.c **** 
2945:FreeRTOS\Source/tasks.c ****         return xReturn;
2946:FreeRTOS\Source/tasks.c ****     }
2947:FreeRTOS\Source/tasks.c **** 
2948:FreeRTOS\Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2949:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2950:FreeRTOS\Source/tasks.c **** 
2951:FreeRTOS\Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2952:FreeRTOS\Source/tasks.c **** 
2953:FreeRTOS\Source/tasks.c ****     TaskHookFunction_t xTaskGetApplicationTaskTagFromISR( TaskHandle_t xTask )
2954:FreeRTOS\Source/tasks.c ****     {
2955:FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
2956:FreeRTOS\Source/tasks.c ****         TaskHookFunction_t xReturn;
2957:FreeRTOS\Source/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
2958:FreeRTOS\Source/tasks.c **** 
2959:FreeRTOS\Source/tasks.c ****         /* If xTask is NULL then set the calling task's hook. */
2960:FreeRTOS\Source/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
2961:FreeRTOS\Source/tasks.c **** 
2962:FreeRTOS\Source/tasks.c ****         /* Save the hook function in the TCB.  A critical section is required as
2963:FreeRTOS\Source/tasks.c ****          * the value can be accessed from an interrupt. */
2964:FreeRTOS\Source/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
2965:FreeRTOS\Source/tasks.c ****         {
2966:FreeRTOS\Source/tasks.c ****             xReturn = pxTCB->pxTaskTag;
2967:FreeRTOS\Source/tasks.c ****         }
2968:FreeRTOS\Source/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2969:FreeRTOS\Source/tasks.c **** 
2970:FreeRTOS\Source/tasks.c ****         return xReturn;
2971:FreeRTOS\Source/tasks.c ****     }
2972:FreeRTOS\Source/tasks.c **** 
2973:FreeRTOS\Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2974:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2975:FreeRTOS\Source/tasks.c **** 
2976:FreeRTOS\Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2977:FreeRTOS\Source/tasks.c **** 
2978:FreeRTOS\Source/tasks.c ****     BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask,
2979:FreeRTOS\Source/tasks.c ****                                              void * pvParameter )
2980:FreeRTOS\Source/tasks.c ****     {
2981:FreeRTOS\Source/tasks.c ****         TCB_t * xTCB;
2982:FreeRTOS\Source/tasks.c ****         BaseType_t xReturn;
2983:FreeRTOS\Source/tasks.c **** 
2984:FreeRTOS\Source/tasks.c ****         /* If xTask is NULL then we are calling our own task hook. */
2985:FreeRTOS\Source/tasks.c ****         if( xTask == NULL )
2986:FreeRTOS\Source/tasks.c ****         {
2987:FreeRTOS\Source/tasks.c ****             xTCB = pxCurrentTCB;
2988:FreeRTOS\Source/tasks.c ****         }
2989:FreeRTOS\Source/tasks.c ****         else
2990:FreeRTOS\Source/tasks.c ****         {
2991:FreeRTOS\Source/tasks.c ****             xTCB = xTask;
2992:FreeRTOS\Source/tasks.c ****         }
2993:FreeRTOS\Source/tasks.c **** 
2994:FreeRTOS\Source/tasks.c ****         if( xTCB->pxTaskTag != NULL )
2995:FreeRTOS\Source/tasks.c ****         {
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 55


2996:FreeRTOS\Source/tasks.c ****             xReturn = xTCB->pxTaskTag( pvParameter );
2997:FreeRTOS\Source/tasks.c ****         }
2998:FreeRTOS\Source/tasks.c ****         else
2999:FreeRTOS\Source/tasks.c ****         {
3000:FreeRTOS\Source/tasks.c ****             xReturn = pdFAIL;
3001:FreeRTOS\Source/tasks.c ****         }
3002:FreeRTOS\Source/tasks.c **** 
3003:FreeRTOS\Source/tasks.c ****         return xReturn;
3004:FreeRTOS\Source/tasks.c ****     }
3005:FreeRTOS\Source/tasks.c **** 
3006:FreeRTOS\Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
3007:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3008:FreeRTOS\Source/tasks.c **** 
3009:FreeRTOS\Source/tasks.c **** void vTaskSwitchContext( void )
3010:FreeRTOS\Source/tasks.c **** {
3011:FreeRTOS\Source/tasks.c ****     if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
3012:FreeRTOS\Source/tasks.c ****     {
3013:FreeRTOS\Source/tasks.c ****         /* The scheduler is currently suspended - do not allow a context
3014:FreeRTOS\Source/tasks.c ****          * switch. */
3015:FreeRTOS\Source/tasks.c ****         xYieldPending = pdTRUE;
3016:FreeRTOS\Source/tasks.c ****     }
3017:FreeRTOS\Source/tasks.c ****     else
3018:FreeRTOS\Source/tasks.c ****     {
3019:FreeRTOS\Source/tasks.c ****         xYieldPending = pdFALSE;
3020:FreeRTOS\Source/tasks.c ****         traceTASK_SWITCHED_OUT();
3021:FreeRTOS\Source/tasks.c **** 
3022:FreeRTOS\Source/tasks.c ****         #if ( configGENERATE_RUN_TIME_STATS == 1 )
3023:FreeRTOS\Source/tasks.c ****         {
3024:FreeRTOS\Source/tasks.c ****             #ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
3025:FreeRTOS\Source/tasks.c ****                 portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
3026:FreeRTOS\Source/tasks.c ****             #else
3027:FreeRTOS\Source/tasks.c ****                 ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
3028:FreeRTOS\Source/tasks.c ****             #endif
3029:FreeRTOS\Source/tasks.c **** 
3030:FreeRTOS\Source/tasks.c ****             /* Add the amount of time the task has been running to the
3031:FreeRTOS\Source/tasks.c ****              * accumulated time so far.  The time the task started running was
3032:FreeRTOS\Source/tasks.c ****              * stored in ulTaskSwitchedInTime.  Note that there is no overflow
3033:FreeRTOS\Source/tasks.c ****              * protection here so count values are only valid until the timer
3034:FreeRTOS\Source/tasks.c ****              * overflows.  The guard against negative values is to protect
3035:FreeRTOS\Source/tasks.c ****              * against suspect run time stat counter implementations - which
3036:FreeRTOS\Source/tasks.c ****              * are provided by the application, not the kernel. */
3037:FreeRTOS\Source/tasks.c ****             if( ulTotalRunTime > ulTaskSwitchedInTime )
3038:FreeRTOS\Source/tasks.c ****             {
3039:FreeRTOS\Source/tasks.c ****                 pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
3040:FreeRTOS\Source/tasks.c ****             }
3041:FreeRTOS\Source/tasks.c ****             else
3042:FreeRTOS\Source/tasks.c ****             {
3043:FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
3044:FreeRTOS\Source/tasks.c ****             }
3045:FreeRTOS\Source/tasks.c **** 
3046:FreeRTOS\Source/tasks.c ****             ulTaskSwitchedInTime = ulTotalRunTime;
3047:FreeRTOS\Source/tasks.c ****         }
3048:FreeRTOS\Source/tasks.c ****         #endif /* configGENERATE_RUN_TIME_STATS */
3049:FreeRTOS\Source/tasks.c **** 
3050:FreeRTOS\Source/tasks.c ****         /* Check for stack overflow, if configured. */
3051:FreeRTOS\Source/tasks.c ****         taskCHECK_FOR_STACK_OVERFLOW();
3052:FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 56


3053:FreeRTOS\Source/tasks.c ****         /* Before the currently running task is switched out, save its errno. */
3054:FreeRTOS\Source/tasks.c ****         #if ( configUSE_POSIX_ERRNO == 1 )
3055:FreeRTOS\Source/tasks.c ****         {
3056:FreeRTOS\Source/tasks.c ****             pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
3057:FreeRTOS\Source/tasks.c ****         }
3058:FreeRTOS\Source/tasks.c ****         #endif
3059:FreeRTOS\Source/tasks.c **** 
3060:FreeRTOS\Source/tasks.c ****         /* Select a new task to run using either the generic C or port
3061:FreeRTOS\Source/tasks.c ****          * optimised asm code. */
3062:FreeRTOS\Source/tasks.c ****         taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with
3063:FreeRTOS\Source/tasks.c ****         traceTASK_SWITCHED_IN();
3064:FreeRTOS\Source/tasks.c **** 
3065:FreeRTOS\Source/tasks.c ****         /* After the new task is switched in, update the global errno. */
3066:FreeRTOS\Source/tasks.c ****         #if ( configUSE_POSIX_ERRNO == 1 )
3067:FreeRTOS\Source/tasks.c ****         {
3068:FreeRTOS\Source/tasks.c ****             FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
3069:FreeRTOS\Source/tasks.c ****         }
3070:FreeRTOS\Source/tasks.c ****         #endif
3071:FreeRTOS\Source/tasks.c **** 
3072:FreeRTOS\Source/tasks.c ****         #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
3073:FreeRTOS\Source/tasks.c ****         {
3074:FreeRTOS\Source/tasks.c ****             /* Switch C-Runtime's TLS Block to point to the TLS
3075:FreeRTOS\Source/tasks.c ****              * Block specific to this task. */
3076:FreeRTOS\Source/tasks.c ****             configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
3077:FreeRTOS\Source/tasks.c ****         }
3078:FreeRTOS\Source/tasks.c ****         #endif
3079:FreeRTOS\Source/tasks.c ****     }
3080:FreeRTOS\Source/tasks.c **** }
3081:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3082:FreeRTOS\Source/tasks.c **** 
3083:FreeRTOS\Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList,
3084:FreeRTOS\Source/tasks.c ****                             const TickType_t xTicksToWait )
3085:FreeRTOS\Source/tasks.c **** {
3086:FreeRTOS\Source/tasks.c ****     configASSERT( pxEventList );
3087:FreeRTOS\Source/tasks.c **** 
3088:FreeRTOS\Source/tasks.c ****     /* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
3089:FreeRTOS\Source/tasks.c ****      * SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
3090:FreeRTOS\Source/tasks.c **** 
3091:FreeRTOS\Source/tasks.c ****     /* Place the event list item of the TCB in the appropriate event list.
3092:FreeRTOS\Source/tasks.c ****      * This is placed in the list in priority order so the highest priority task
3093:FreeRTOS\Source/tasks.c ****      * is the first to be woken by the event.
3094:FreeRTOS\Source/tasks.c ****      *
3095:FreeRTOS\Source/tasks.c ****      * Note: Lists are sorted in ascending order by ListItem_t.xItemValue.
3096:FreeRTOS\Source/tasks.c ****      * Normally, the xItemValue of a TCB's ListItem_t members is:
3097:FreeRTOS\Source/tasks.c ****      *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
3098:FreeRTOS\Source/tasks.c ****      * Therefore, the event list is sorted in descending priority order.
3099:FreeRTOS\Source/tasks.c ****      *
3100:FreeRTOS\Source/tasks.c ****      * The queue that contains the event list is locked, preventing
3101:FreeRTOS\Source/tasks.c ****      * simultaneous access from interrupts. */
3102:FreeRTOS\Source/tasks.c ****     vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3103:FreeRTOS\Source/tasks.c **** 
3104:FreeRTOS\Source/tasks.c ****     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3105:FreeRTOS\Source/tasks.c **** }
3106:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3107:FreeRTOS\Source/tasks.c **** 
3108:FreeRTOS\Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
3109:FreeRTOS\Source/tasks.c ****                                      const TickType_t xItemValue,
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 57


3110:FreeRTOS\Source/tasks.c ****                                      const TickType_t xTicksToWait )
3111:FreeRTOS\Source/tasks.c **** {
3112:FreeRTOS\Source/tasks.c ****     configASSERT( pxEventList );
3113:FreeRTOS\Source/tasks.c **** 
3114:FreeRTOS\Source/tasks.c ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3115:FreeRTOS\Source/tasks.c ****      * the event groups implementation. */
3116:FreeRTOS\Source/tasks.c ****     configASSERT( uxSchedulerSuspended != 0 );
3117:FreeRTOS\Source/tasks.c **** 
3118:FreeRTOS\Source/tasks.c ****     /* Store the item value in the event list item.  It is safe to access the
3119:FreeRTOS\Source/tasks.c ****      * event list item here as interrupts won't access the event list item of a
3120:FreeRTOS\Source/tasks.c ****      * task that is not in the Blocked state. */
3121:FreeRTOS\Source/tasks.c ****     listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VA
3122:FreeRTOS\Source/tasks.c **** 
3123:FreeRTOS\Source/tasks.c ****     /* Place the event list item of the TCB at the end of the appropriate event
3124:FreeRTOS\Source/tasks.c ****      * list.  It is safe to access the event list here because it is part of an
3125:FreeRTOS\Source/tasks.c ****      * event group implementation - and interrupts don't access event groups
3126:FreeRTOS\Source/tasks.c ****      * directly (instead they access them indirectly by pending function calls to
3127:FreeRTOS\Source/tasks.c ****      * the task level). */
3128:FreeRTOS\Source/tasks.c ****     listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3129:FreeRTOS\Source/tasks.c **** 
3130:FreeRTOS\Source/tasks.c ****     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3131:FreeRTOS\Source/tasks.c **** }
3132:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3133:FreeRTOS\Source/tasks.c **** 
3134:FreeRTOS\Source/tasks.c **** #if ( configUSE_TIMERS == 1 )
3135:FreeRTOS\Source/tasks.c **** 
3136:FreeRTOS\Source/tasks.c ****     void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
3137:FreeRTOS\Source/tasks.c ****                                           TickType_t xTicksToWait,
3138:FreeRTOS\Source/tasks.c ****                                           const BaseType_t xWaitIndefinitely )
3139:FreeRTOS\Source/tasks.c ****     {
3140:FreeRTOS\Source/tasks.c ****         configASSERT( pxEventList );
3141:FreeRTOS\Source/tasks.c **** 
3142:FreeRTOS\Source/tasks.c ****         /* This function should not be called by application code hence the
3143:FreeRTOS\Source/tasks.c ****          * 'Restricted' in its name.  It is not part of the public API.  It is
3144:FreeRTOS\Source/tasks.c ****          * designed for use by kernel code, and has special calling requirements -
3145:FreeRTOS\Source/tasks.c ****          * it should be called with the scheduler suspended. */
3146:FreeRTOS\Source/tasks.c **** 
3147:FreeRTOS\Source/tasks.c **** 
3148:FreeRTOS\Source/tasks.c ****         /* Place the event list item of the TCB in the appropriate event list.
3149:FreeRTOS\Source/tasks.c ****          * In this case it is assume that this is the only task that is going to
3150:FreeRTOS\Source/tasks.c ****          * be waiting on this event list, so the faster vListInsertEnd() function
3151:FreeRTOS\Source/tasks.c ****          * can be used in place of vListInsert. */
3152:FreeRTOS\Source/tasks.c ****         listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3153:FreeRTOS\Source/tasks.c **** 
3154:FreeRTOS\Source/tasks.c ****         /* If the task should block indefinitely then set the block time to a
3155:FreeRTOS\Source/tasks.c ****          * value that will be recognised as an indefinite delay inside the
3156:FreeRTOS\Source/tasks.c ****          * prvAddCurrentTaskToDelayedList() function. */
3157:FreeRTOS\Source/tasks.c ****         if( xWaitIndefinitely != pdFALSE )
3158:FreeRTOS\Source/tasks.c ****         {
3159:FreeRTOS\Source/tasks.c ****             xTicksToWait = portMAX_DELAY;
3160:FreeRTOS\Source/tasks.c ****         }
3161:FreeRTOS\Source/tasks.c **** 
3162:FreeRTOS\Source/tasks.c ****         traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3163:FreeRTOS\Source/tasks.c ****         prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
3164:FreeRTOS\Source/tasks.c ****     }
3165:FreeRTOS\Source/tasks.c **** 
3166:FreeRTOS\Source/tasks.c **** #endif /* configUSE_TIMERS */
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 58


3167:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3168:FreeRTOS\Source/tasks.c **** 
3169:FreeRTOS\Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3170:FreeRTOS\Source/tasks.c **** {
3171:FreeRTOS\Source/tasks.c ****     TCB_t * pxUnblockedTCB;
3172:FreeRTOS\Source/tasks.c ****     BaseType_t xReturn;
3173:FreeRTOS\Source/tasks.c **** 
3174:FreeRTOS\Source/tasks.c ****     /* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3175:FreeRTOS\Source/tasks.c ****      * called from a critical section within an ISR. */
3176:FreeRTOS\Source/tasks.c **** 
3177:FreeRTOS\Source/tasks.c ****     /* The event list is sorted in priority order, so the first in the list can
3178:FreeRTOS\Source/tasks.c ****      * be removed as it is known to be the highest priority.  Remove the TCB from
3179:FreeRTOS\Source/tasks.c ****      * the delayed list, and add it to the ready list.
3180:FreeRTOS\Source/tasks.c ****      *
3181:FreeRTOS\Source/tasks.c ****      * If an event is for a queue that is locked then this function will never
3182:FreeRTOS\Source/tasks.c ****      * get called - the lock count on the queue will get modified instead.  This
3183:FreeRTOS\Source/tasks.c ****      * means exclusive access to the event list is guaranteed here.
3184:FreeRTOS\Source/tasks.c ****      *
3185:FreeRTOS\Source/tasks.c ****      * This function assumes that a check has already been made to ensure that
3186:FreeRTOS\Source/tasks.c ****      * pxEventList is not empty. */
3187:FreeRTOS\Source/tasks.c ****     pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as th
3188:FreeRTOS\Source/tasks.c ****     configASSERT( pxUnblockedTCB );
3189:FreeRTOS\Source/tasks.c ****     listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
3190:FreeRTOS\Source/tasks.c **** 
3191:FreeRTOS\Source/tasks.c ****     if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3192:FreeRTOS\Source/tasks.c ****     {
3193:FreeRTOS\Source/tasks.c ****         listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
3194:FreeRTOS\Source/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
3195:FreeRTOS\Source/tasks.c **** 
3196:FreeRTOS\Source/tasks.c ****         #if ( configUSE_TICKLESS_IDLE != 0 )
3197:FreeRTOS\Source/tasks.c ****         {
3198:FreeRTOS\Source/tasks.c ****             /* If a task is blocked on a kernel object then xNextTaskUnblockTime
3199:FreeRTOS\Source/tasks.c ****              * might be set to the blocked task's time out time.  If the task is
3200:FreeRTOS\Source/tasks.c ****              * unblocked for a reason other than a timeout xNextTaskUnblockTime is
3201:FreeRTOS\Source/tasks.c ****              * normally left unchanged, because it is automatically reset to a new
3202:FreeRTOS\Source/tasks.c ****              * value when the tick count equals xNextTaskUnblockTime.  However if
3203:FreeRTOS\Source/tasks.c ****              * tickless idling is used it might be more important to enter sleep mode
3204:FreeRTOS\Source/tasks.c ****              * at the earliest possible time - so reset xNextTaskUnblockTime here to
3205:FreeRTOS\Source/tasks.c ****              * ensure it is updated at the earliest possible time. */
3206:FreeRTOS\Source/tasks.c ****             prvResetNextTaskUnblockTime();
3207:FreeRTOS\Source/tasks.c ****         }
3208:FreeRTOS\Source/tasks.c ****         #endif
3209:FreeRTOS\Source/tasks.c ****     }
3210:FreeRTOS\Source/tasks.c ****     else
3211:FreeRTOS\Source/tasks.c ****     {
3212:FreeRTOS\Source/tasks.c ****         /* The delayed and ready lists cannot be accessed, so hold this task
3213:FreeRTOS\Source/tasks.c ****          * pending until the scheduler is resumed. */
3214:FreeRTOS\Source/tasks.c ****         listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
3215:FreeRTOS\Source/tasks.c ****     }
3216:FreeRTOS\Source/tasks.c **** 
3217:FreeRTOS\Source/tasks.c ****     if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3218:FreeRTOS\Source/tasks.c ****     {
3219:FreeRTOS\Source/tasks.c ****         /* Return true if the task removed from the event list has a higher
3220:FreeRTOS\Source/tasks.c ****          * priority than the calling task.  This allows the calling task to know if
3221:FreeRTOS\Source/tasks.c ****          * it should force a context switch now. */
3222:FreeRTOS\Source/tasks.c ****         xReturn = pdTRUE;
3223:FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 59


3224:FreeRTOS\Source/tasks.c ****         /* Mark that a yield is pending in case the user is not using the
3225:FreeRTOS\Source/tasks.c ****          * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3226:FreeRTOS\Source/tasks.c ****         xYieldPending = pdTRUE;
3227:FreeRTOS\Source/tasks.c ****     }
3228:FreeRTOS\Source/tasks.c ****     else
3229:FreeRTOS\Source/tasks.c ****     {
3230:FreeRTOS\Source/tasks.c ****         xReturn = pdFALSE;
3231:FreeRTOS\Source/tasks.c ****     }
3232:FreeRTOS\Source/tasks.c **** 
3233:FreeRTOS\Source/tasks.c ****     return xReturn;
3234:FreeRTOS\Source/tasks.c **** }
3235:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3236:FreeRTOS\Source/tasks.c **** 
3237:FreeRTOS\Source/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
3238:FreeRTOS\Source/tasks.c ****                                         const TickType_t xItemValue )
3239:FreeRTOS\Source/tasks.c **** {
3240:FreeRTOS\Source/tasks.c ****     TCB_t * pxUnblockedTCB;
3241:FreeRTOS\Source/tasks.c **** 
3242:FreeRTOS\Source/tasks.c ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3243:FreeRTOS\Source/tasks.c ****      * the event flags implementation. */
3244:FreeRTOS\Source/tasks.c ****     configASSERT( uxSchedulerSuspended != pdFALSE );
3245:FreeRTOS\Source/tasks.c **** 
3246:FreeRTOS\Source/tasks.c ****     /* Store the new item value in the event list. */
3247:FreeRTOS\Source/tasks.c ****     listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
3248:FreeRTOS\Source/tasks.c **** 
3249:FreeRTOS\Source/tasks.c ****     /* Remove the event list form the event flag.  Interrupts do not access
3250:FreeRTOS\Source/tasks.c ****      * event flags. */
3251:FreeRTOS\Source/tasks.c ****     pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as th
3252:FreeRTOS\Source/tasks.c ****     configASSERT( pxUnblockedTCB );
3253:FreeRTOS\Source/tasks.c ****     listREMOVE_ITEM( pxEventListItem );
3254:FreeRTOS\Source/tasks.c **** 
3255:FreeRTOS\Source/tasks.c ****     #if ( configUSE_TICKLESS_IDLE != 0 )
3256:FreeRTOS\Source/tasks.c ****     {
3257:FreeRTOS\Source/tasks.c ****         /* If a task is blocked on a kernel object then xNextTaskUnblockTime
3258:FreeRTOS\Source/tasks.c ****          * might be set to the blocked task's time out time.  If the task is
3259:FreeRTOS\Source/tasks.c ****          * unblocked for a reason other than a timeout xNextTaskUnblockTime is
3260:FreeRTOS\Source/tasks.c ****          * normally left unchanged, because it is automatically reset to a new
3261:FreeRTOS\Source/tasks.c ****          * value when the tick count equals xNextTaskUnblockTime.  However if
3262:FreeRTOS\Source/tasks.c ****          * tickless idling is used it might be more important to enter sleep mode
3263:FreeRTOS\Source/tasks.c ****          * at the earliest possible time - so reset xNextTaskUnblockTime here to
3264:FreeRTOS\Source/tasks.c ****          * ensure it is updated at the earliest possible time. */
3265:FreeRTOS\Source/tasks.c ****         prvResetNextTaskUnblockTime();
3266:FreeRTOS\Source/tasks.c ****     }
3267:FreeRTOS\Source/tasks.c ****     #endif
3268:FreeRTOS\Source/tasks.c **** 
3269:FreeRTOS\Source/tasks.c ****     /* Remove the task from the delayed list and add it to the ready list.  The
3270:FreeRTOS\Source/tasks.c ****      * scheduler is suspended so interrupts will not be accessing the ready
3271:FreeRTOS\Source/tasks.c ****      * lists. */
3272:FreeRTOS\Source/tasks.c ****     listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
3273:FreeRTOS\Source/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
3274:FreeRTOS\Source/tasks.c **** 
3275:FreeRTOS\Source/tasks.c ****     if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3276:FreeRTOS\Source/tasks.c ****     {
3277:FreeRTOS\Source/tasks.c ****         /* The unblocked task has a priority above that of the calling task, so
3278:FreeRTOS\Source/tasks.c ****          * a context switch is required.  This function is called with the
3279:FreeRTOS\Source/tasks.c ****          * scheduler suspended so xYieldPending is set so the context switch
3280:FreeRTOS\Source/tasks.c ****          * occurs immediately that the scheduler is resumed (unsuspended). */
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 60


3281:FreeRTOS\Source/tasks.c ****         xYieldPending = pdTRUE;
3282:FreeRTOS\Source/tasks.c ****     }
3283:FreeRTOS\Source/tasks.c **** }
3284:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3285:FreeRTOS\Source/tasks.c **** 
3286:FreeRTOS\Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3287:FreeRTOS\Source/tasks.c **** {
3288:FreeRTOS\Source/tasks.c ****     configASSERT( pxTimeOut );
3289:FreeRTOS\Source/tasks.c ****     taskENTER_CRITICAL();
3290:FreeRTOS\Source/tasks.c ****     {
3291:FreeRTOS\Source/tasks.c ****         pxTimeOut->xOverflowCount = xNumOfOverflows;
3292:FreeRTOS\Source/tasks.c ****         pxTimeOut->xTimeOnEntering = xTickCount;
3293:FreeRTOS\Source/tasks.c ****     }
3294:FreeRTOS\Source/tasks.c ****     taskEXIT_CRITICAL();
3295:FreeRTOS\Source/tasks.c **** }
3296:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3297:FreeRTOS\Source/tasks.c **** 
3298:FreeRTOS\Source/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3299:FreeRTOS\Source/tasks.c **** {
3300:FreeRTOS\Source/tasks.c ****     /* For internal use only as it does not use a critical section. */
3301:FreeRTOS\Source/tasks.c ****     pxTimeOut->xOverflowCount = xNumOfOverflows;
3302:FreeRTOS\Source/tasks.c ****     pxTimeOut->xTimeOnEntering = xTickCount;
3303:FreeRTOS\Source/tasks.c **** }
3304:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3305:FreeRTOS\Source/tasks.c **** 
3306:FreeRTOS\Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
3307:FreeRTOS\Source/tasks.c ****                                  TickType_t * const pxTicksToWait )
3308:FreeRTOS\Source/tasks.c **** {
3309:FreeRTOS\Source/tasks.c ****     BaseType_t xReturn;
3310:FreeRTOS\Source/tasks.c **** 
3311:FreeRTOS\Source/tasks.c ****     configASSERT( pxTimeOut );
3312:FreeRTOS\Source/tasks.c ****     configASSERT( pxTicksToWait );
3313:FreeRTOS\Source/tasks.c **** 
3314:FreeRTOS\Source/tasks.c ****     taskENTER_CRITICAL();
3315:FreeRTOS\Source/tasks.c ****     {
3316:FreeRTOS\Source/tasks.c ****         /* Minor optimisation.  The tick count cannot change in this block. */
3317:FreeRTOS\Source/tasks.c ****         const TickType_t xConstTickCount = xTickCount;
3318:FreeRTOS\Source/tasks.c ****         const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
3319:FreeRTOS\Source/tasks.c **** 
3320:FreeRTOS\Source/tasks.c ****         #if ( INCLUDE_xTaskAbortDelay == 1 )
3321:FreeRTOS\Source/tasks.c ****             if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
3322:FreeRTOS\Source/tasks.c ****             {
3323:FreeRTOS\Source/tasks.c ****                 /* The delay was aborted, which is not the same as a time out,
3324:FreeRTOS\Source/tasks.c ****                  * but has the same result. */
3325:FreeRTOS\Source/tasks.c ****                 pxCurrentTCB->ucDelayAborted = pdFALSE;
3326:FreeRTOS\Source/tasks.c ****                 xReturn = pdTRUE;
3327:FreeRTOS\Source/tasks.c ****             }
3328:FreeRTOS\Source/tasks.c ****             else
3329:FreeRTOS\Source/tasks.c ****         #endif
3330:FreeRTOS\Source/tasks.c **** 
3331:FreeRTOS\Source/tasks.c ****         #if ( INCLUDE_vTaskSuspend == 1 )
3332:FreeRTOS\Source/tasks.c ****             if( *pxTicksToWait == portMAX_DELAY )
3333:FreeRTOS\Source/tasks.c ****             {
3334:FreeRTOS\Source/tasks.c ****                 /* If INCLUDE_vTaskSuspend is set to 1 and the block time
3335:FreeRTOS\Source/tasks.c ****                  * specified is the maximum block time then the task should block
3336:FreeRTOS\Source/tasks.c ****                  * indefinitely, and therefore never time out. */
3337:FreeRTOS\Source/tasks.c ****                 xReturn = pdFALSE;
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 61


3338:FreeRTOS\Source/tasks.c ****             }
3339:FreeRTOS\Source/tasks.c ****             else
3340:FreeRTOS\Source/tasks.c ****         #endif
3341:FreeRTOS\Source/tasks.c **** 
3342:FreeRTOS\Source/tasks.c ****         if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTi
3343:FreeRTOS\Source/tasks.c ****         {
3344:FreeRTOS\Source/tasks.c ****             /* The tick count is greater than the time at which
3345:FreeRTOS\Source/tasks.c ****              * vTaskSetTimeout() was called, but has also overflowed since
3346:FreeRTOS\Source/tasks.c ****              * vTaskSetTimeOut() was called.  It must have wrapped all the way
3347:FreeRTOS\Source/tasks.c ****              * around and gone past again. This passed since vTaskSetTimeout()
3348:FreeRTOS\Source/tasks.c ****              * was called. */
3349:FreeRTOS\Source/tasks.c ****             xReturn = pdTRUE;
3350:FreeRTOS\Source/tasks.c ****             *pxTicksToWait = ( TickType_t ) 0;
3351:FreeRTOS\Source/tasks.c ****         }
3352:FreeRTOS\Source/tasks.c ****         else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant wi
3353:FreeRTOS\Source/tasks.c ****         {
3354:FreeRTOS\Source/tasks.c ****             /* Not a genuine timeout. Adjust parameters for time remaining. */
3355:FreeRTOS\Source/tasks.c ****             *pxTicksToWait -= xElapsedTime;
3356:FreeRTOS\Source/tasks.c ****             vTaskInternalSetTimeOutState( pxTimeOut );
3357:FreeRTOS\Source/tasks.c ****             xReturn = pdFALSE;
3358:FreeRTOS\Source/tasks.c ****         }
3359:FreeRTOS\Source/tasks.c ****         else
3360:FreeRTOS\Source/tasks.c ****         {
3361:FreeRTOS\Source/tasks.c ****             *pxTicksToWait = ( TickType_t ) 0;
3362:FreeRTOS\Source/tasks.c ****             xReturn = pdTRUE;
3363:FreeRTOS\Source/tasks.c ****         }
3364:FreeRTOS\Source/tasks.c ****     }
3365:FreeRTOS\Source/tasks.c ****     taskEXIT_CRITICAL();
3366:FreeRTOS\Source/tasks.c **** 
3367:FreeRTOS\Source/tasks.c ****     return xReturn;
3368:FreeRTOS\Source/tasks.c **** }
3369:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3370:FreeRTOS\Source/tasks.c **** 
3371:FreeRTOS\Source/tasks.c **** void vTaskMissedYield( void )
3372:FreeRTOS\Source/tasks.c **** {
3373:FreeRTOS\Source/tasks.c ****     xYieldPending = pdTRUE;
3374:FreeRTOS\Source/tasks.c **** }
3375:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3376:FreeRTOS\Source/tasks.c **** 
3377:FreeRTOS\Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3378:FreeRTOS\Source/tasks.c **** 
3379:FreeRTOS\Source/tasks.c ****     UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3380:FreeRTOS\Source/tasks.c ****     {
3381:FreeRTOS\Source/tasks.c ****         UBaseType_t uxReturn;
3382:FreeRTOS\Source/tasks.c ****         TCB_t const * pxTCB;
3383:FreeRTOS\Source/tasks.c **** 
3384:FreeRTOS\Source/tasks.c ****         if( xTask != NULL )
3385:FreeRTOS\Source/tasks.c ****         {
3386:FreeRTOS\Source/tasks.c ****             pxTCB = xTask;
3387:FreeRTOS\Source/tasks.c ****             uxReturn = pxTCB->uxTaskNumber;
3388:FreeRTOS\Source/tasks.c ****         }
3389:FreeRTOS\Source/tasks.c ****         else
3390:FreeRTOS\Source/tasks.c ****         {
3391:FreeRTOS\Source/tasks.c ****             uxReturn = 0U;
3392:FreeRTOS\Source/tasks.c ****         }
3393:FreeRTOS\Source/tasks.c **** 
3394:FreeRTOS\Source/tasks.c ****         return uxReturn;
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 62


3395:FreeRTOS\Source/tasks.c ****     }
3396:FreeRTOS\Source/tasks.c **** 
3397:FreeRTOS\Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3398:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3399:FreeRTOS\Source/tasks.c **** 
3400:FreeRTOS\Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3401:FreeRTOS\Source/tasks.c **** 
3402:FreeRTOS\Source/tasks.c ****     void vTaskSetTaskNumber( TaskHandle_t xTask,
3403:FreeRTOS\Source/tasks.c ****                              const UBaseType_t uxHandle )
3404:FreeRTOS\Source/tasks.c ****     {
3405:FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
3406:FreeRTOS\Source/tasks.c **** 
3407:FreeRTOS\Source/tasks.c ****         if( xTask != NULL )
3408:FreeRTOS\Source/tasks.c ****         {
3409:FreeRTOS\Source/tasks.c ****             pxTCB = xTask;
3410:FreeRTOS\Source/tasks.c ****             pxTCB->uxTaskNumber = uxHandle;
3411:FreeRTOS\Source/tasks.c ****         }
3412:FreeRTOS\Source/tasks.c ****     }
3413:FreeRTOS\Source/tasks.c **** 
3414:FreeRTOS\Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3415:FreeRTOS\Source/tasks.c **** 
3416:FreeRTOS\Source/tasks.c **** /*
3417:FreeRTOS\Source/tasks.c ****  * -----------------------------------------------------------
3418:FreeRTOS\Source/tasks.c ****  * The Idle task.
3419:FreeRTOS\Source/tasks.c ****  * ----------------------------------------------------------
3420:FreeRTOS\Source/tasks.c ****  *
3421:FreeRTOS\Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3422:FreeRTOS\Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3423:FreeRTOS\Source/tasks.c ****  *
3424:FreeRTOS\Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3425:FreeRTOS\Source/tasks.c ****  *
3426:FreeRTOS\Source/tasks.c ****  */
3427:FreeRTOS\Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3428:FreeRTOS\Source/tasks.c **** {
3429:FreeRTOS\Source/tasks.c ****     /* Stop warnings. */
3430:FreeRTOS\Source/tasks.c ****     ( void ) pvParameters;
3431:FreeRTOS\Source/tasks.c **** 
3432:FreeRTOS\Source/tasks.c ****     /** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3433:FreeRTOS\Source/tasks.c ****      * SCHEDULER IS STARTED. **/
3434:FreeRTOS\Source/tasks.c **** 
3435:FreeRTOS\Source/tasks.c ****     /* In case a task that has a secure context deletes itself, in which case
3436:FreeRTOS\Source/tasks.c ****      * the idle task is responsible for deleting the task's secure context, if
3437:FreeRTOS\Source/tasks.c ****      * any. */
3438:FreeRTOS\Source/tasks.c ****     portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
3439:FreeRTOS\Source/tasks.c **** 
3440:FreeRTOS\Source/tasks.c ****     for( ; ; )
3441:FreeRTOS\Source/tasks.c ****     {
3442:FreeRTOS\Source/tasks.c ****         /* See if any tasks have deleted themselves - if so then the idle task
3443:FreeRTOS\Source/tasks.c ****          * is responsible for freeing the deleted task's TCB and stack. */
3444:FreeRTOS\Source/tasks.c ****         prvCheckTasksWaitingTermination();
3445:FreeRTOS\Source/tasks.c **** 
3446:FreeRTOS\Source/tasks.c ****         #if ( configUSE_PREEMPTION == 0 )
3447:FreeRTOS\Source/tasks.c ****         {
3448:FreeRTOS\Source/tasks.c ****             /* If we are not using preemption we keep forcing a task switch to
3449:FreeRTOS\Source/tasks.c ****              * see if any other task has become available.  If we are using
3450:FreeRTOS\Source/tasks.c ****              * preemption we don't need to do this as any task becoming available
3451:FreeRTOS\Source/tasks.c ****              * will automatically get the processor anyway. */
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 63


3452:FreeRTOS\Source/tasks.c ****             taskYIELD();
3453:FreeRTOS\Source/tasks.c ****         }
3454:FreeRTOS\Source/tasks.c ****         #endif /* configUSE_PREEMPTION */
3455:FreeRTOS\Source/tasks.c **** 
3456:FreeRTOS\Source/tasks.c ****         #if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3457:FreeRTOS\Source/tasks.c ****         {
3458:FreeRTOS\Source/tasks.c ****             /* When using preemption tasks of equal priority will be
3459:FreeRTOS\Source/tasks.c ****              * timesliced.  If a task that is sharing the idle priority is ready
3460:FreeRTOS\Source/tasks.c ****              * to run then the idle task should yield before the end of the
3461:FreeRTOS\Source/tasks.c ****              * timeslice.
3462:FreeRTOS\Source/tasks.c ****              *
3463:FreeRTOS\Source/tasks.c ****              * A critical region is not required here as we are just reading from
3464:FreeRTOS\Source/tasks.c ****              * the list, and an occasional incorrect value will not matter.  If
3465:FreeRTOS\Source/tasks.c ****              * the ready list at the idle priority contains more than one task
3466:FreeRTOS\Source/tasks.c ****              * then a task other than the idle task is ready to execute. */
3467:FreeRTOS\Source/tasks.c ****             if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType
3468:FreeRTOS\Source/tasks.c ****             {
3469:FreeRTOS\Source/tasks.c ****                 taskYIELD();
3470:FreeRTOS\Source/tasks.c ****             }
3471:FreeRTOS\Source/tasks.c ****             else
3472:FreeRTOS\Source/tasks.c ****             {
3473:FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
3474:FreeRTOS\Source/tasks.c ****             }
3475:FreeRTOS\Source/tasks.c ****         }
3476:FreeRTOS\Source/tasks.c ****         #endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3477:FreeRTOS\Source/tasks.c **** 
3478:FreeRTOS\Source/tasks.c ****         #if ( configUSE_IDLE_HOOK == 1 )
3479:FreeRTOS\Source/tasks.c ****         {
3480:FreeRTOS\Source/tasks.c ****             extern void vApplicationIdleHook( void );
3481:FreeRTOS\Source/tasks.c **** 
3482:FreeRTOS\Source/tasks.c ****             /* Call the user defined function from within the idle task.  This
3483:FreeRTOS\Source/tasks.c ****              * allows the application designer to add background functionality
3484:FreeRTOS\Source/tasks.c ****              * without the overhead of a separate task.
3485:FreeRTOS\Source/tasks.c ****              * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3486:FreeRTOS\Source/tasks.c ****              * CALL A FUNCTION THAT MIGHT BLOCK. */
3487:FreeRTOS\Source/tasks.c ****             vApplicationIdleHook();
3488:FreeRTOS\Source/tasks.c ****         }
3489:FreeRTOS\Source/tasks.c ****         #endif /* configUSE_IDLE_HOOK */
3490:FreeRTOS\Source/tasks.c **** 
3491:FreeRTOS\Source/tasks.c ****         /* This conditional compilation should use inequality to 0, not equality
3492:FreeRTOS\Source/tasks.c ****          * to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3493:FreeRTOS\Source/tasks.c ****          * user defined low power mode  implementations require
3494:FreeRTOS\Source/tasks.c ****          * configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3495:FreeRTOS\Source/tasks.c ****         #if ( configUSE_TICKLESS_IDLE != 0 )
3496:FreeRTOS\Source/tasks.c ****         {
3497:FreeRTOS\Source/tasks.c ****             TickType_t xExpectedIdleTime;
3498:FreeRTOS\Source/tasks.c **** 
3499:FreeRTOS\Source/tasks.c ****             /* It is not desirable to suspend then resume the scheduler on
3500:FreeRTOS\Source/tasks.c ****              * each iteration of the idle task.  Therefore, a preliminary
3501:FreeRTOS\Source/tasks.c ****              * test of the expected idle time is performed without the
3502:FreeRTOS\Source/tasks.c ****              * scheduler suspended.  The result here is not necessarily
3503:FreeRTOS\Source/tasks.c ****              * valid. */
3504:FreeRTOS\Source/tasks.c ****             xExpectedIdleTime = prvGetExpectedIdleTime();
3505:FreeRTOS\Source/tasks.c **** 
3506:FreeRTOS\Source/tasks.c ****             if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3507:FreeRTOS\Source/tasks.c ****             {
3508:FreeRTOS\Source/tasks.c ****                 vTaskSuspendAll();
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 64


3509:FreeRTOS\Source/tasks.c ****                 {
3510:FreeRTOS\Source/tasks.c ****                     /* Now the scheduler is suspended, the expected idle
3511:FreeRTOS\Source/tasks.c ****                      * time can be sampled again, and this time its value can
3512:FreeRTOS\Source/tasks.c ****                      * be used. */
3513:FreeRTOS\Source/tasks.c ****                     configASSERT( xNextTaskUnblockTime >= xTickCount );
3514:FreeRTOS\Source/tasks.c ****                     xExpectedIdleTime = prvGetExpectedIdleTime();
3515:FreeRTOS\Source/tasks.c **** 
3516:FreeRTOS\Source/tasks.c ****                     /* Define the following macro to set xExpectedIdleTime to 0
3517:FreeRTOS\Source/tasks.c ****                      * if the application does not want
3518:FreeRTOS\Source/tasks.c ****                      * portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3519:FreeRTOS\Source/tasks.c ****                     configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3520:FreeRTOS\Source/tasks.c **** 
3521:FreeRTOS\Source/tasks.c ****                     if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3522:FreeRTOS\Source/tasks.c ****                     {
3523:FreeRTOS\Source/tasks.c ****                         traceLOW_POWER_IDLE_BEGIN();
3524:FreeRTOS\Source/tasks.c ****                         portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3525:FreeRTOS\Source/tasks.c ****                         traceLOW_POWER_IDLE_END();
3526:FreeRTOS\Source/tasks.c ****                     }
3527:FreeRTOS\Source/tasks.c ****                     else
3528:FreeRTOS\Source/tasks.c ****                     {
3529:FreeRTOS\Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
3530:FreeRTOS\Source/tasks.c ****                     }
3531:FreeRTOS\Source/tasks.c ****                 }
3532:FreeRTOS\Source/tasks.c ****                 ( void ) xTaskResumeAll();
3533:FreeRTOS\Source/tasks.c ****             }
3534:FreeRTOS\Source/tasks.c ****             else
3535:FreeRTOS\Source/tasks.c ****             {
3536:FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
3537:FreeRTOS\Source/tasks.c ****             }
3538:FreeRTOS\Source/tasks.c ****         }
3539:FreeRTOS\Source/tasks.c ****         #endif /* configUSE_TICKLESS_IDLE */
3540:FreeRTOS\Source/tasks.c ****     }
3541:FreeRTOS\Source/tasks.c **** }
3542:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3543:FreeRTOS\Source/tasks.c **** 
3544:FreeRTOS\Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
3545:FreeRTOS\Source/tasks.c **** 
3546:FreeRTOS\Source/tasks.c ****     eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3547:FreeRTOS\Source/tasks.c ****     {
3548:FreeRTOS\Source/tasks.c ****         #if ( INCLUDE_vTaskSuspend == 1 )
3549:FreeRTOS\Source/tasks.c ****             /* The idle task exists in addition to the application tasks. */
3550:FreeRTOS\Source/tasks.c ****             const UBaseType_t uxNonApplicationTasks = 1;
3551:FreeRTOS\Source/tasks.c ****         #endif /* INCLUDE_vTaskSuspend */
3552:FreeRTOS\Source/tasks.c **** 
3553:FreeRTOS\Source/tasks.c ****         eSleepModeStatus eReturn = eStandardSleep;
3554:FreeRTOS\Source/tasks.c **** 
3555:FreeRTOS\Source/tasks.c ****         /* This function must be called from a critical section. */
3556:FreeRTOS\Source/tasks.c **** 
3557:FreeRTOS\Source/tasks.c ****         if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3558:FreeRTOS\Source/tasks.c ****         {
3559:FreeRTOS\Source/tasks.c ****             /* A task was made ready while the scheduler was suspended. */
3560:FreeRTOS\Source/tasks.c ****             eReturn = eAbortSleep;
3561:FreeRTOS\Source/tasks.c ****         }
3562:FreeRTOS\Source/tasks.c ****         else if( xYieldPending != pdFALSE )
3563:FreeRTOS\Source/tasks.c ****         {
3564:FreeRTOS\Source/tasks.c ****             /* A yield was pended while the scheduler was suspended. */
3565:FreeRTOS\Source/tasks.c ****             eReturn = eAbortSleep;
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 65


3566:FreeRTOS\Source/tasks.c ****         }
3567:FreeRTOS\Source/tasks.c ****         else if( xPendedTicks != 0 )
3568:FreeRTOS\Source/tasks.c ****         {
3569:FreeRTOS\Source/tasks.c ****             /* A tick interrupt has already occurred but was held pending
3570:FreeRTOS\Source/tasks.c ****              * because the scheduler is suspended. */
3571:FreeRTOS\Source/tasks.c ****             eReturn = eAbortSleep;
3572:FreeRTOS\Source/tasks.c ****         }
3573:FreeRTOS\Source/tasks.c **** 
3574:FreeRTOS\Source/tasks.c ****         #if ( INCLUDE_vTaskSuspend == 1 )
3575:FreeRTOS\Source/tasks.c ****             else if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - u
3576:FreeRTOS\Source/tasks.c ****             {
3577:FreeRTOS\Source/tasks.c ****                 /* If all the tasks are in the suspended list (which might mean they
3578:FreeRTOS\Source/tasks.c ****                  * have an infinite block time rather than actually being suspended)
3579:FreeRTOS\Source/tasks.c ****                  * then it is safe to turn all clocks off and just wait for external
3580:FreeRTOS\Source/tasks.c ****                  * interrupts. */
3581:FreeRTOS\Source/tasks.c ****                 eReturn = eNoTasksWaitingTimeout;
3582:FreeRTOS\Source/tasks.c ****             }
3583:FreeRTOS\Source/tasks.c ****         #endif /* INCLUDE_vTaskSuspend */
3584:FreeRTOS\Source/tasks.c ****         else
3585:FreeRTOS\Source/tasks.c ****         {
3586:FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
3587:FreeRTOS\Source/tasks.c ****         }
3588:FreeRTOS\Source/tasks.c **** 
3589:FreeRTOS\Source/tasks.c ****         return eReturn;
3590:FreeRTOS\Source/tasks.c ****     }
3591:FreeRTOS\Source/tasks.c **** 
3592:FreeRTOS\Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3593:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3594:FreeRTOS\Source/tasks.c **** 
3595:FreeRTOS\Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3596:FreeRTOS\Source/tasks.c **** 
3597:FreeRTOS\Source/tasks.c ****     void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet,
3598:FreeRTOS\Source/tasks.c ****                                             BaseType_t xIndex,
3599:FreeRTOS\Source/tasks.c ****                                             void * pvValue )
3600:FreeRTOS\Source/tasks.c ****     {
3601:FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
3602:FreeRTOS\Source/tasks.c **** 
3603:FreeRTOS\Source/tasks.c ****         if( ( xIndex >= 0 ) &&
3604:FreeRTOS\Source/tasks.c ****             ( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS ) )
3605:FreeRTOS\Source/tasks.c ****         {
3606:FreeRTOS\Source/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToSet );
3607:FreeRTOS\Source/tasks.c ****             configASSERT( pxTCB != NULL );
3608:FreeRTOS\Source/tasks.c ****             pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3609:FreeRTOS\Source/tasks.c ****         }
3610:FreeRTOS\Source/tasks.c ****     }
3611:FreeRTOS\Source/tasks.c **** 
3612:FreeRTOS\Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3613:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3614:FreeRTOS\Source/tasks.c **** 
3615:FreeRTOS\Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3616:FreeRTOS\Source/tasks.c **** 
3617:FreeRTOS\Source/tasks.c ****     void * pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery,
3618:FreeRTOS\Source/tasks.c ****                                                BaseType_t xIndex )
3619:FreeRTOS\Source/tasks.c ****     {
3620:FreeRTOS\Source/tasks.c ****         void * pvReturn = NULL;
3621:FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
3622:FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 66


3623:FreeRTOS\Source/tasks.c ****         if( ( xIndex >= 0 ) &&
3624:FreeRTOS\Source/tasks.c ****             ( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS ) )
3625:FreeRTOS\Source/tasks.c ****         {
3626:FreeRTOS\Source/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3627:FreeRTOS\Source/tasks.c ****             pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3628:FreeRTOS\Source/tasks.c ****         }
3629:FreeRTOS\Source/tasks.c ****         else
3630:FreeRTOS\Source/tasks.c ****         {
3631:FreeRTOS\Source/tasks.c ****             pvReturn = NULL;
3632:FreeRTOS\Source/tasks.c ****         }
3633:FreeRTOS\Source/tasks.c **** 
3634:FreeRTOS\Source/tasks.c ****         return pvReturn;
3635:FreeRTOS\Source/tasks.c ****     }
3636:FreeRTOS\Source/tasks.c **** 
3637:FreeRTOS\Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3638:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3639:FreeRTOS\Source/tasks.c **** 
3640:FreeRTOS\Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3641:FreeRTOS\Source/tasks.c **** 
3642:FreeRTOS\Source/tasks.c ****     void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify,
3643:FreeRTOS\Source/tasks.c ****                                   const MemoryRegion_t * const xRegions )
3644:FreeRTOS\Source/tasks.c ****     {
3645:FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
3646:FreeRTOS\Source/tasks.c **** 
3647:FreeRTOS\Source/tasks.c ****         /* If null is passed in here then we are modifying the MPU settings of
3648:FreeRTOS\Source/tasks.c ****          * the calling task. */
3649:FreeRTOS\Source/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTaskToModify );
3650:FreeRTOS\Source/tasks.c **** 
3651:FreeRTOS\Source/tasks.c ****         vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3652:FreeRTOS\Source/tasks.c ****     }
3653:FreeRTOS\Source/tasks.c **** 
3654:FreeRTOS\Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3655:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3656:FreeRTOS\Source/tasks.c **** 
3657:FreeRTOS\Source/tasks.c **** static void prvInitialiseTaskLists( void )
3658:FreeRTOS\Source/tasks.c **** {
3659:FreeRTOS\Source/tasks.c ****     UBaseType_t uxPriority;
3660:FreeRTOS\Source/tasks.c **** 
3661:FreeRTOS\Source/tasks.c ****     for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPrio
3662:FreeRTOS\Source/tasks.c ****     {
3663:FreeRTOS\Source/tasks.c ****         vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3664:FreeRTOS\Source/tasks.c ****     }
3665:FreeRTOS\Source/tasks.c **** 
3666:FreeRTOS\Source/tasks.c ****     vListInitialise( &xDelayedTaskList1 );
3667:FreeRTOS\Source/tasks.c ****     vListInitialise( &xDelayedTaskList2 );
3668:FreeRTOS\Source/tasks.c ****     vListInitialise( &xPendingReadyList );
3669:FreeRTOS\Source/tasks.c **** 
3670:FreeRTOS\Source/tasks.c ****     #if ( INCLUDE_vTaskDelete == 1 )
3671:FreeRTOS\Source/tasks.c ****     {
3672:FreeRTOS\Source/tasks.c ****         vListInitialise( &xTasksWaitingTermination );
3673:FreeRTOS\Source/tasks.c ****     }
3674:FreeRTOS\Source/tasks.c ****     #endif /* INCLUDE_vTaskDelete */
3675:FreeRTOS\Source/tasks.c **** 
3676:FreeRTOS\Source/tasks.c ****     #if ( INCLUDE_vTaskSuspend == 1 )
3677:FreeRTOS\Source/tasks.c ****     {
3678:FreeRTOS\Source/tasks.c ****         vListInitialise( &xSuspendedTaskList );
3679:FreeRTOS\Source/tasks.c ****     }
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 67


3680:FreeRTOS\Source/tasks.c ****     #endif /* INCLUDE_vTaskSuspend */
3681:FreeRTOS\Source/tasks.c **** 
3682:FreeRTOS\Source/tasks.c ****     /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3683:FreeRTOS\Source/tasks.c ****      * using list2. */
3684:FreeRTOS\Source/tasks.c ****     pxDelayedTaskList = &xDelayedTaskList1;
3685:FreeRTOS\Source/tasks.c ****     pxOverflowDelayedTaskList = &xDelayedTaskList2;
3686:FreeRTOS\Source/tasks.c **** }
3687:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3688:FreeRTOS\Source/tasks.c **** 
3689:FreeRTOS\Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3690:FreeRTOS\Source/tasks.c **** {
3691:FreeRTOS\Source/tasks.c ****     /** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3692:FreeRTOS\Source/tasks.c **** 
3693:FreeRTOS\Source/tasks.c ****     #if ( INCLUDE_vTaskDelete == 1 )
3694:FreeRTOS\Source/tasks.c ****     {
3695:FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
3696:FreeRTOS\Source/tasks.c **** 
3697:FreeRTOS\Source/tasks.c ****         /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3698:FreeRTOS\Source/tasks.c ****          * being called too often in the idle task. */
3699:FreeRTOS\Source/tasks.c ****         while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3700:FreeRTOS\Source/tasks.c ****         {
3701:FreeRTOS\Source/tasks.c ****             taskENTER_CRITICAL();
3702:FreeRTOS\Source/tasks.c ****             {
3703:FreeRTOS\Source/tasks.c ****                 pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079
3704:FreeRTOS\Source/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3705:FreeRTOS\Source/tasks.c ****                 --uxCurrentNumberOfTasks;
3706:FreeRTOS\Source/tasks.c ****                 --uxDeletedTasksWaitingCleanUp;
3707:FreeRTOS\Source/tasks.c ****             }
3708:FreeRTOS\Source/tasks.c ****             taskEXIT_CRITICAL();
3709:FreeRTOS\Source/tasks.c **** 
3710:FreeRTOS\Source/tasks.c ****             prvDeleteTCB( pxTCB );
3711:FreeRTOS\Source/tasks.c ****         }
3712:FreeRTOS\Source/tasks.c ****     }
3713:FreeRTOS\Source/tasks.c ****     #endif /* INCLUDE_vTaskDelete */
3714:FreeRTOS\Source/tasks.c **** }
3715:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3716:FreeRTOS\Source/tasks.c **** 
3717:FreeRTOS\Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3718:FreeRTOS\Source/tasks.c **** 
3719:FreeRTOS\Source/tasks.c ****     void vTaskGetInfo( TaskHandle_t xTask,
3720:FreeRTOS\Source/tasks.c ****                        TaskStatus_t * pxTaskStatus,
3721:FreeRTOS\Source/tasks.c ****                        BaseType_t xGetFreeStackSpace,
3722:FreeRTOS\Source/tasks.c ****                        eTaskState eState )
3723:FreeRTOS\Source/tasks.c ****     {
3724:FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
3725:FreeRTOS\Source/tasks.c **** 
3726:FreeRTOS\Source/tasks.c ****         /* xTask is NULL then get the state of the calling task. */
3727:FreeRTOS\Source/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
3728:FreeRTOS\Source/tasks.c **** 
3729:FreeRTOS\Source/tasks.c ****         pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3730:FreeRTOS\Source/tasks.c ****         pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
3731:FreeRTOS\Source/tasks.c ****         pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3732:FreeRTOS\Source/tasks.c ****         pxTaskStatus->pxStackBase = pxTCB->pxStack;
3733:FreeRTOS\Source/tasks.c ****         #if ( ( portSTACK_GROWTH > 0 ) && ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
3734:FreeRTOS\Source/tasks.c ****             pxTaskStatus->pxTopOfStack = pxTCB->pxTopOfStack;
3735:FreeRTOS\Source/tasks.c ****             pxTaskStatus->pxEndOfStack = pxTCB->pxEndOfStack;
3736:FreeRTOS\Source/tasks.c ****         #endif
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 68


3737:FreeRTOS\Source/tasks.c ****         pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3738:FreeRTOS\Source/tasks.c **** 
3739:FreeRTOS\Source/tasks.c ****         #if ( configUSE_MUTEXES == 1 )
3740:FreeRTOS\Source/tasks.c ****         {
3741:FreeRTOS\Source/tasks.c ****             pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3742:FreeRTOS\Source/tasks.c ****         }
3743:FreeRTOS\Source/tasks.c ****         #else
3744:FreeRTOS\Source/tasks.c ****         {
3745:FreeRTOS\Source/tasks.c ****             pxTaskStatus->uxBasePriority = 0;
3746:FreeRTOS\Source/tasks.c ****         }
3747:FreeRTOS\Source/tasks.c ****         #endif
3748:FreeRTOS\Source/tasks.c **** 
3749:FreeRTOS\Source/tasks.c ****         #if ( configGENERATE_RUN_TIME_STATS == 1 )
3750:FreeRTOS\Source/tasks.c ****         {
3751:FreeRTOS\Source/tasks.c ****             pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3752:FreeRTOS\Source/tasks.c ****         }
3753:FreeRTOS\Source/tasks.c ****         #else
3754:FreeRTOS\Source/tasks.c ****         {
3755:FreeRTOS\Source/tasks.c ****             pxTaskStatus->ulRunTimeCounter = ( configRUN_TIME_COUNTER_TYPE ) 0;
3756:FreeRTOS\Source/tasks.c ****         }
3757:FreeRTOS\Source/tasks.c ****         #endif
3758:FreeRTOS\Source/tasks.c **** 
3759:FreeRTOS\Source/tasks.c ****         /* Obtaining the task state is a little fiddly, so is only done if the
3760:FreeRTOS\Source/tasks.c ****          * value of eState passed into this function is eInvalid - otherwise the
3761:FreeRTOS\Source/tasks.c ****          * state is just set to whatever is passed in. */
3762:FreeRTOS\Source/tasks.c ****         if( eState != eInvalid )
3763:FreeRTOS\Source/tasks.c ****         {
3764:FreeRTOS\Source/tasks.c ****             if( pxTCB == pxCurrentTCB )
3765:FreeRTOS\Source/tasks.c ****             {
3766:FreeRTOS\Source/tasks.c ****                 pxTaskStatus->eCurrentState = eRunning;
3767:FreeRTOS\Source/tasks.c ****             }
3768:FreeRTOS\Source/tasks.c ****             else
3769:FreeRTOS\Source/tasks.c ****             {
3770:FreeRTOS\Source/tasks.c ****                 pxTaskStatus->eCurrentState = eState;
3771:FreeRTOS\Source/tasks.c **** 
3772:FreeRTOS\Source/tasks.c ****                 #if ( INCLUDE_vTaskSuspend == 1 )
3773:FreeRTOS\Source/tasks.c ****                 {
3774:FreeRTOS\Source/tasks.c ****                     /* If the task is in the suspended list then there is a
3775:FreeRTOS\Source/tasks.c ****                      *  chance it is actually just blocked indefinitely - so really
3776:FreeRTOS\Source/tasks.c ****                      *  it should be reported as being in the Blocked state. */
3777:FreeRTOS\Source/tasks.c ****                     if( eState == eSuspended )
3778:FreeRTOS\Source/tasks.c ****                     {
3779:FreeRTOS\Source/tasks.c ****                         vTaskSuspendAll();
3780:FreeRTOS\Source/tasks.c ****                         {
3781:FreeRTOS\Source/tasks.c ****                             if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3782:FreeRTOS\Source/tasks.c ****                             {
3783:FreeRTOS\Source/tasks.c ****                                 pxTaskStatus->eCurrentState = eBlocked;
3784:FreeRTOS\Source/tasks.c ****                             }
3785:FreeRTOS\Source/tasks.c ****                         }
3786:FreeRTOS\Source/tasks.c ****                         ( void ) xTaskResumeAll();
3787:FreeRTOS\Source/tasks.c ****                     }
3788:FreeRTOS\Source/tasks.c ****                 }
3789:FreeRTOS\Source/tasks.c ****                 #endif /* INCLUDE_vTaskSuspend */
3790:FreeRTOS\Source/tasks.c ****             }
3791:FreeRTOS\Source/tasks.c ****         }
3792:FreeRTOS\Source/tasks.c ****         else
3793:FreeRTOS\Source/tasks.c ****         {
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 69


3794:FreeRTOS\Source/tasks.c ****             pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3795:FreeRTOS\Source/tasks.c ****         }
3796:FreeRTOS\Source/tasks.c **** 
3797:FreeRTOS\Source/tasks.c ****         /* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3798:FreeRTOS\Source/tasks.c ****          * parameter is provided to allow it to be skipped. */
3799:FreeRTOS\Source/tasks.c ****         if( xGetFreeStackSpace != pdFALSE )
3800:FreeRTOS\Source/tasks.c ****         {
3801:FreeRTOS\Source/tasks.c ****             #if ( portSTACK_GROWTH > 0 )
3802:FreeRTOS\Source/tasks.c ****             {
3803:FreeRTOS\Source/tasks.c ****                 pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTC
3804:FreeRTOS\Source/tasks.c ****             }
3805:FreeRTOS\Source/tasks.c ****             #else
3806:FreeRTOS\Source/tasks.c ****             {
3807:FreeRTOS\Source/tasks.c ****                 pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTC
3808:FreeRTOS\Source/tasks.c ****             }
3809:FreeRTOS\Source/tasks.c ****             #endif
3810:FreeRTOS\Source/tasks.c ****         }
3811:FreeRTOS\Source/tasks.c ****         else
3812:FreeRTOS\Source/tasks.c ****         {
3813:FreeRTOS\Source/tasks.c ****             pxTaskStatus->usStackHighWaterMark = 0;
3814:FreeRTOS\Source/tasks.c ****         }
3815:FreeRTOS\Source/tasks.c ****     }
3816:FreeRTOS\Source/tasks.c **** 
3817:FreeRTOS\Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3818:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3819:FreeRTOS\Source/tasks.c **** 
3820:FreeRTOS\Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3821:FreeRTOS\Source/tasks.c **** 
3822:FreeRTOS\Source/tasks.c ****     static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t * pxTaskStatusArray,
3823:FreeRTOS\Source/tasks.c ****                                                      List_t * pxList,
3824:FreeRTOS\Source/tasks.c ****                                                      eTaskState eState )
3825:FreeRTOS\Source/tasks.c ****     {
3826:FreeRTOS\Source/tasks.c ****         configLIST_VOLATILE TCB_t * pxNextTCB;
3827:FreeRTOS\Source/tasks.c ****         configLIST_VOLATILE TCB_t * pxFirstTCB;
3828:FreeRTOS\Source/tasks.c ****         UBaseType_t uxTask = 0;
3829:FreeRTOS\Source/tasks.c **** 
3830:FreeRTOS\Source/tasks.c ****         if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3831:FreeRTOS\Source/tasks.c ****         {
3832:FreeRTOS\Source/tasks.c ****             listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this
3833:FreeRTOS\Source/tasks.c **** 
3834:FreeRTOS\Source/tasks.c ****             /* Populate an TaskStatus_t structure within the
3835:FreeRTOS\Source/tasks.c ****              * pxTaskStatusArray array for each task that is referenced from
3836:FreeRTOS\Source/tasks.c ****              * pxList.  See the definition of TaskStatus_t in task.h for the
3837:FreeRTOS\Source/tasks.c ****              * meaning of each TaskStatus_t structure member. */
3838:FreeRTOS\Source/tasks.c ****             do
3839:FreeRTOS\Source/tasks.c ****             {
3840:FreeRTOS\Source/tasks.c ****                 listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as t
3841:FreeRTOS\Source/tasks.c ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
3842:FreeRTOS\Source/tasks.c ****                 uxTask++;
3843:FreeRTOS\Source/tasks.c ****             } while( pxNextTCB != pxFirstTCB );
3844:FreeRTOS\Source/tasks.c ****         }
3845:FreeRTOS\Source/tasks.c ****         else
3846:FreeRTOS\Source/tasks.c ****         {
3847:FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
3848:FreeRTOS\Source/tasks.c ****         }
3849:FreeRTOS\Source/tasks.c **** 
3850:FreeRTOS\Source/tasks.c ****         return uxTask;
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 70


3851:FreeRTOS\Source/tasks.c ****     }
3852:FreeRTOS\Source/tasks.c **** 
3853:FreeRTOS\Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3854:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3855:FreeRTOS\Source/tasks.c **** 
3856:FreeRTOS\Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
3857:FreeRTOS\Source/tasks.c **** 
3858:FreeRTOS\Source/tasks.c ****     static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3859:FreeRTOS\Source/tasks.c ****     {
  83              		.loc 1 3859 0
  84              		.cfi_startproc
  85              		@ args = 0, pretend = 0, frame = 0
  86              		@ frame_needed = 0, uses_anonymous_args = 0
  87              		@ link register save eliminated.
  88              	.LVL8:
3860:FreeRTOS\Source/tasks.c ****         uint32_t ulCount = 0U;
  89              		.loc 1 3860 0
  90 0000 0023     		movs	r3, #0
3861:FreeRTOS\Source/tasks.c **** 
3862:FreeRTOS\Source/tasks.c ****         while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
  91              		.loc 1 3862 0
  92 0002 01E0     		b	.L9
  93              	.LVL9:
  94              	.L10:
3863:FreeRTOS\Source/tasks.c ****         {
3864:FreeRTOS\Source/tasks.c ****             pucStackByte -= portSTACK_GROWTH;
  95              		.loc 1 3864 0
  96 0004 0130     		adds	r0, r0, #1
  97              	.LVL10:
3865:FreeRTOS\Source/tasks.c ****             ulCount++;
  98              		.loc 1 3865 0
  99 0006 0133     		adds	r3, r3, #1
 100              	.LVL11:
 101              	.L9:
3862:FreeRTOS\Source/tasks.c ****         {
 102              		.loc 1 3862 0
 103 0008 0278     		ldrb	r2, [r0]
 104 000a A52A     		cmp	r2, #165
 105 000c FAD0     		beq	.L10
3866:FreeRTOS\Source/tasks.c ****         }
3867:FreeRTOS\Source/tasks.c **** 
3868:FreeRTOS\Source/tasks.c ****         ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on sma
 106              		.loc 1 3868 0
 107 000e 9B08     		lsrs	r3, r3, #2
 108              	.LVL12:
3869:FreeRTOS\Source/tasks.c **** 
3870:FreeRTOS\Source/tasks.c ****         return ( configSTACK_DEPTH_TYPE ) ulCount;
 109              		.loc 1 3870 0
 110 0010 98B2     		uxth	r0, r3
 111              	.LVL13:
3871:FreeRTOS\Source/tasks.c ****     }
 112              		.loc 1 3871 0
 113              		@ sp needed
 114 0012 7047     		bx	lr
 115              		.cfi_endproc
 116              	.LFE69:
 117              		.size	prvTaskCheckFreeStackSpace, .-prvTaskCheckFreeStackSpace
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 71


 118              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 119              		.align	2
 120              		.code	16
 121              		.thumb_func
 122              		.type	prvResetNextTaskUnblockTime, %function
 123              	prvResetNextTaskUnblockTime:
 124              	.LFB72:
3872:FreeRTOS\Source/tasks.c **** 
3873:FreeRTOS\Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( 
3874:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3875:FreeRTOS\Source/tasks.c **** 
3876:FreeRTOS\Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 )
3877:FreeRTOS\Source/tasks.c **** 
3878:FreeRTOS\Source/tasks.c **** /* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the
3879:FreeRTOS\Source/tasks.c ****  * same except for their return type.  Using configSTACK_DEPTH_TYPE allows the
3880:FreeRTOS\Source/tasks.c ****  * user to determine the return type.  It gets around the problem of the value
3881:FreeRTOS\Source/tasks.c ****  * overflowing on 8-bit types without breaking backward compatibility for
3882:FreeRTOS\Source/tasks.c ****  * applications that expect an 8-bit return type. */
3883:FreeRTOS\Source/tasks.c ****     configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask )
3884:FreeRTOS\Source/tasks.c ****     {
3885:FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
3886:FreeRTOS\Source/tasks.c ****         uint8_t * pucEndOfStack;
3887:FreeRTOS\Source/tasks.c ****         configSTACK_DEPTH_TYPE uxReturn;
3888:FreeRTOS\Source/tasks.c **** 
3889:FreeRTOS\Source/tasks.c ****         /* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are
3890:FreeRTOS\Source/tasks.c ****          * the same except for their return type.  Using configSTACK_DEPTH_TYPE
3891:FreeRTOS\Source/tasks.c ****          * allows the user to determine the return type.  It gets around the
3892:FreeRTOS\Source/tasks.c ****          * problem of the value overflowing on 8-bit types without breaking
3893:FreeRTOS\Source/tasks.c ****          * backward compatibility for applications that expect an 8-bit return
3894:FreeRTOS\Source/tasks.c ****          * type. */
3895:FreeRTOS\Source/tasks.c **** 
3896:FreeRTOS\Source/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
3897:FreeRTOS\Source/tasks.c **** 
3898:FreeRTOS\Source/tasks.c ****         #if portSTACK_GROWTH < 0
3899:FreeRTOS\Source/tasks.c ****         {
3900:FreeRTOS\Source/tasks.c ****             pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3901:FreeRTOS\Source/tasks.c ****         }
3902:FreeRTOS\Source/tasks.c ****         #else
3903:FreeRTOS\Source/tasks.c ****         {
3904:FreeRTOS\Source/tasks.c ****             pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3905:FreeRTOS\Source/tasks.c ****         }
3906:FreeRTOS\Source/tasks.c ****         #endif
3907:FreeRTOS\Source/tasks.c **** 
3908:FreeRTOS\Source/tasks.c ****         uxReturn = prvTaskCheckFreeStackSpace( pucEndOfStack );
3909:FreeRTOS\Source/tasks.c **** 
3910:FreeRTOS\Source/tasks.c ****         return uxReturn;
3911:FreeRTOS\Source/tasks.c ****     }
3912:FreeRTOS\Source/tasks.c **** 
3913:FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark2 */
3914:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3915:FreeRTOS\Source/tasks.c **** 
3916:FreeRTOS\Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3917:FreeRTOS\Source/tasks.c **** 
3918:FreeRTOS\Source/tasks.c ****     UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3919:FreeRTOS\Source/tasks.c ****     {
3920:FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
3921:FreeRTOS\Source/tasks.c ****         uint8_t * pucEndOfStack;
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 72


3922:FreeRTOS\Source/tasks.c ****         UBaseType_t uxReturn;
3923:FreeRTOS\Source/tasks.c **** 
3924:FreeRTOS\Source/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
3925:FreeRTOS\Source/tasks.c **** 
3926:FreeRTOS\Source/tasks.c ****         #if portSTACK_GROWTH < 0
3927:FreeRTOS\Source/tasks.c ****         {
3928:FreeRTOS\Source/tasks.c ****             pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3929:FreeRTOS\Source/tasks.c ****         }
3930:FreeRTOS\Source/tasks.c ****         #else
3931:FreeRTOS\Source/tasks.c ****         {
3932:FreeRTOS\Source/tasks.c ****             pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3933:FreeRTOS\Source/tasks.c ****         }
3934:FreeRTOS\Source/tasks.c ****         #endif
3935:FreeRTOS\Source/tasks.c **** 
3936:FreeRTOS\Source/tasks.c ****         uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3937:FreeRTOS\Source/tasks.c **** 
3938:FreeRTOS\Source/tasks.c ****         return uxReturn;
3939:FreeRTOS\Source/tasks.c ****     }
3940:FreeRTOS\Source/tasks.c **** 
3941:FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3942:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3943:FreeRTOS\Source/tasks.c **** 
3944:FreeRTOS\Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3945:FreeRTOS\Source/tasks.c **** 
3946:FreeRTOS\Source/tasks.c ****     static void prvDeleteTCB( TCB_t * pxTCB )
3947:FreeRTOS\Source/tasks.c ****     {
3948:FreeRTOS\Source/tasks.c ****         /* This call is required specifically for the TriCore port.  It must be
3949:FreeRTOS\Source/tasks.c ****          * above the vPortFree() calls.  The call is also used by ports/demos that
3950:FreeRTOS\Source/tasks.c ****          * want to allocate and clean RAM statically. */
3951:FreeRTOS\Source/tasks.c ****         portCLEAN_UP_TCB( pxTCB );
3952:FreeRTOS\Source/tasks.c **** 
3953:FreeRTOS\Source/tasks.c ****         #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
3954:FreeRTOS\Source/tasks.c ****         {
3955:FreeRTOS\Source/tasks.c ****             /* Free up the memory allocated for the task's TLS Block. */
3956:FreeRTOS\Source/tasks.c ****             configDEINIT_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
3957:FreeRTOS\Source/tasks.c ****         }
3958:FreeRTOS\Source/tasks.c ****         #endif
3959:FreeRTOS\Source/tasks.c **** 
3960:FreeRTOS\Source/tasks.c ****         #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 )
3961:FreeRTOS\Source/tasks.c ****         {
3962:FreeRTOS\Source/tasks.c ****             /* The task can only have been allocated dynamically - free both
3963:FreeRTOS\Source/tasks.c ****              * the stack and TCB. */
3964:FreeRTOS\Source/tasks.c ****             vPortFreeStack( pxTCB->pxStack );
3965:FreeRTOS\Source/tasks.c ****             vPortFree( pxTCB );
3966:FreeRTOS\Source/tasks.c ****         }
3967:FreeRTOS\Source/tasks.c ****         #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been
3968:FreeRTOS\Source/tasks.c ****         {
3969:FreeRTOS\Source/tasks.c ****             /* The task could have been allocated statically or dynamically, so
3970:FreeRTOS\Source/tasks.c ****              * check what was statically allocated before trying to free the
3971:FreeRTOS\Source/tasks.c ****              * memory. */
3972:FreeRTOS\Source/tasks.c ****             if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3973:FreeRTOS\Source/tasks.c ****             {
3974:FreeRTOS\Source/tasks.c ****                 /* Both the stack and TCB were allocated dynamically, so both
3975:FreeRTOS\Source/tasks.c ****                  * must be freed. */
3976:FreeRTOS\Source/tasks.c ****                 vPortFreeStack( pxTCB->pxStack );
3977:FreeRTOS\Source/tasks.c ****                 vPortFree( pxTCB );
3978:FreeRTOS\Source/tasks.c ****             }
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 73


3979:FreeRTOS\Source/tasks.c ****             else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3980:FreeRTOS\Source/tasks.c ****             {
3981:FreeRTOS\Source/tasks.c ****                 /* Only the stack was statically allocated, so the TCB is the
3982:FreeRTOS\Source/tasks.c ****                  * only memory that must be freed. */
3983:FreeRTOS\Source/tasks.c ****                 vPortFree( pxTCB );
3984:FreeRTOS\Source/tasks.c ****             }
3985:FreeRTOS\Source/tasks.c ****             else
3986:FreeRTOS\Source/tasks.c ****             {
3987:FreeRTOS\Source/tasks.c ****                 /* Neither the stack nor the TCB were allocated dynamically, so
3988:FreeRTOS\Source/tasks.c ****                  * nothing needs to be freed. */
3989:FreeRTOS\Source/tasks.c ****                 configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB
3990:FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
3991:FreeRTOS\Source/tasks.c ****             }
3992:FreeRTOS\Source/tasks.c ****         }
3993:FreeRTOS\Source/tasks.c ****         #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3994:FreeRTOS\Source/tasks.c ****     }
3995:FreeRTOS\Source/tasks.c **** 
3996:FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3997:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3998:FreeRTOS\Source/tasks.c **** 
3999:FreeRTOS\Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
4000:FreeRTOS\Source/tasks.c **** {
 125              		.loc 1 4000 0
 126              		.cfi_startproc
 127              		@ args = 0, pretend = 0, frame = 0
 128              		@ frame_needed = 0, uses_anonymous_args = 0
 129              		@ link register save eliminated.
4001:FreeRTOS\Source/tasks.c ****     if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 130              		.loc 1 4001 0
 131 0000 074B     		ldr	r3, .L14
 132 0002 9B6A     		ldr	r3, [r3, #40]
 133 0004 1B68     		ldr	r3, [r3]
 134 0006 002B     		cmp	r3, #0
 135 0008 04D1     		bne	.L12
4002:FreeRTOS\Source/tasks.c ****     {
4003:FreeRTOS\Source/tasks.c ****         /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
4004:FreeRTOS\Source/tasks.c ****          * the maximum possible value so it is  extremely unlikely that the
4005:FreeRTOS\Source/tasks.c ****          * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
4006:FreeRTOS\Source/tasks.c ****          * there is an item in the delayed list. */
4007:FreeRTOS\Source/tasks.c ****         xNextTaskUnblockTime = portMAX_DELAY;
 136              		.loc 1 4007 0
 137 000a 0122     		movs	r2, #1
 138 000c 5242     		rsbs	r2, r2, #0
 139 000e 044B     		ldr	r3, .L14
 140 0010 DA62     		str	r2, [r3, #44]
 141 0012 04E0     		b	.L11
 142              	.L12:
4008:FreeRTOS\Source/tasks.c ****     }
4009:FreeRTOS\Source/tasks.c ****     else
4010:FreeRTOS\Source/tasks.c ****     {
4011:FreeRTOS\Source/tasks.c ****         /* The new current delayed list is not empty, get the value of
4012:FreeRTOS\Source/tasks.c ****          * the item at the head of the delayed list.  This is the time at
4013:FreeRTOS\Source/tasks.c ****          * which the task at the head of the delayed list should be removed
4014:FreeRTOS\Source/tasks.c ****          * from the Blocked state. */
4015:FreeRTOS\Source/tasks.c ****         xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 143              		.loc 1 4015 0
 144 0014 024B     		ldr	r3, .L14
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 74


 145 0016 9A6A     		ldr	r2, [r3, #40]
 146 0018 D268     		ldr	r2, [r2, #12]
 147 001a 1268     		ldr	r2, [r2]
 148 001c DA62     		str	r2, [r3, #44]
 149              	.L11:
4016:FreeRTOS\Source/tasks.c ****     }
4017:FreeRTOS\Source/tasks.c **** }
 150              		.loc 1 4017 0
 151              		@ sp needed
 152 001e 7047     		bx	lr
 153              	.L15:
 154              		.align	2
 155              	.L14:
 156 0020 00000000 		.word	.LANCHOR0
 157              		.cfi_endproc
 158              	.LFE72:
 159              		.size	prvResetNextTaskUnblockTime, .-prvResetNextTaskUnblockTime
 160              		.section	.text.prvDeleteTCB,"ax",%progbits
 161              		.align	2
 162              		.code	16
 163              		.thumb_func
 164              		.type	prvDeleteTCB, %function
 165              	prvDeleteTCB:
 166              	.LFB71:
3947:FreeRTOS\Source/tasks.c ****         /* This call is required specifically for the TriCore port.  It must be
 167              		.loc 1 3947 0
 168              		.cfi_startproc
 169              		@ args = 0, pretend = 0, frame = 0
 170              		@ frame_needed = 0, uses_anonymous_args = 0
 171              	.LVL14:
 172 0000 10B5     		push	{r4, lr}
 173              		.cfi_def_cfa_offset 8
 174              		.cfi_offset 4, -8
 175              		.cfi_offset 14, -4
 176 0002 0400     		movs	r4, r0
3964:FreeRTOS\Source/tasks.c ****             vPortFree( pxTCB );
 177              		.loc 1 3964 0
 178 0004 006B     		ldr	r0, [r0, #48]
 179              	.LVL15:
 180 0006 FFF7FEFF 		bl	vPortFree
 181              	.LVL16:
3965:FreeRTOS\Source/tasks.c ****         }
 182              		.loc 1 3965 0
 183 000a 2000     		movs	r0, r4
 184 000c FFF7FEFF 		bl	vPortFree
 185              	.LVL17:
3994:FreeRTOS\Source/tasks.c **** 
 186              		.loc 1 3994 0
 187              		@ sp needed
 188              	.LVL18:
 189 0010 10BD     		pop	{r4, pc}
 190              		.cfi_endproc
 191              	.LFE71:
 192              		.size	prvDeleteTCB, .-prvDeleteTCB
 193 0012 C046     		.section	.text.prvInitialiseNewTask,"ax",%progbits
 194              		.align	2
 195              		.code	16
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 75


 196              		.thumb_func
 197              		.type	prvInitialiseNewTask, %function
 198              	prvInitialiseNewTask:
 199              	.LFB35:
 824:FreeRTOS\Source/tasks.c ****     StackType_t * pxTopOfStack;
 200              		.loc 1 824 0
 201              		.cfi_startproc
 202              		@ args = 16, pretend = 0, frame = 8
 203              		@ frame_needed = 0, uses_anonymous_args = 0
 204              	.LVL19:
 205 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 206              		.cfi_def_cfa_offset 20
 207              		.cfi_offset 4, -20
 208              		.cfi_offset 5, -16
 209              		.cfi_offset 6, -12
 210              		.cfi_offset 7, -8
 211              		.cfi_offset 14, -4
 212 0002 83B0     		sub	sp, sp, #12
 213              		.cfi_def_cfa_offset 32
 214 0004 0090     		str	r0, [sp]
 215 0006 0D00     		movs	r5, r1
 216 0008 1700     		movs	r7, r2
 217 000a 0193     		str	r3, [sp, #4]
 218 000c 089C     		ldr	r4, [sp, #32]
 219 000e 0A9E     		ldr	r6, [sp, #40]
 847:FreeRTOS\Source/tasks.c ****     }
 220              		.loc 1 847 0
 221 0010 9200     		lsls	r2, r2, #2
 222              	.LVL20:
 223 0012 A521     		movs	r1, #165
 224              	.LVL21:
 225 0014 306B     		ldr	r0, [r6, #48]
 226              	.LVL22:
 227 0016 FFF7FEFF 		bl	memset
 228              	.LVL23:
 857:FreeRTOS\Source/tasks.c ****         pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( port
 229              		.loc 1 857 0
 230 001a 1C4B     		ldr	r3, .L26
 231 001c FB18     		adds	r3, r7, r3
 232 001e 9B00     		lsls	r3, r3, #2
 233 0020 326B     		ldr	r2, [r6, #48]
 234 0022 9446     		mov	ip, r2
 235 0024 6344     		add	r3, r3, ip
 236              	.LVL24:
 858:FreeRTOS\Source/tasks.c **** 
 237              		.loc 1 858 0
 238 0026 0722     		movs	r2, #7
 239 0028 9343     		bics	r3, r2
 240              	.LVL25:
 241 002a 1F00     		movs	r7, r3
 242              	.LVL26:
 885:FreeRTOS\Source/tasks.c ****     {
 243              		.loc 1 885 0
 244 002c 002D     		cmp	r5, #0
 245 002e 0AD1     		bne	.L24
 246 0030 0FE0     		b	.L19
 247              	.LVL27:
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 76


 248              	.L21:
 889:FreeRTOS\Source/tasks.c **** 
 249              		.loc 1 889 0
 250 0032 E918     		adds	r1, r5, r3
 251 0034 0878     		ldrb	r0, [r1]
 252 0036 F218     		adds	r2, r6, r3
 253 0038 3432     		adds	r2, r2, #52
 254 003a 1070     		strb	r0, [r2]
 894:FreeRTOS\Source/tasks.c ****             {
 255              		.loc 1 894 0
 256 003c 0A78     		ldrb	r2, [r1]
 257 003e 002A     		cmp	r2, #0
 258 0040 04D0     		beq	.L20
 887:FreeRTOS\Source/tasks.c ****         {
 259              		.loc 1 887 0 discriminator 2
 260 0042 0133     		adds	r3, r3, #1
 261              	.LVL28:
 262 0044 00E0     		b	.L18
 263              	.LVL29:
 264              	.L24:
 265 0046 0023     		movs	r3, #0
 266              	.LVL30:
 267              	.L18:
 887:FreeRTOS\Source/tasks.c ****         {
 268              		.loc 1 887 0 is_stmt 0 discriminator 1
 269 0048 0B2B     		cmp	r3, #11
 270 004a F2D9     		bls	.L21
 271              	.L20:
 906:FreeRTOS\Source/tasks.c ****     }
 272              		.loc 1 906 0 is_stmt 1
 273 004c 0022     		movs	r2, #0
 274 004e 3F23     		movs	r3, #63
 275              	.LVL31:
 276 0050 F254     		strb	r2, [r6, r3]
 277              	.L19:
 916:FreeRTOS\Source/tasks.c ****     {
 278              		.loc 1 916 0
 279 0052 042C     		cmp	r4, #4
 280 0054 00D9     		bls	.L22
 918:FreeRTOS\Source/tasks.c ****     }
 281              		.loc 1 918 0
 282 0056 0424     		movs	r4, #4
 283              	.L22:
 284              	.LVL32:
 925:FreeRTOS\Source/tasks.c ****     #if ( configUSE_MUTEXES == 1 )
 285              		.loc 1 925 0
 286 0058 F462     		str	r4, [r6, #44]
 928:FreeRTOS\Source/tasks.c ****     }
 287              		.loc 1 928 0
 288 005a 3464     		str	r4, [r6, #64]
 932:FreeRTOS\Source/tasks.c ****     vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 289              		.loc 1 932 0
 290 005c 301D     		adds	r0, r6, #4
 291 005e FFF7FEFF 		bl	vListInitialiseItem
 292              	.LVL33:
 933:FreeRTOS\Source/tasks.c **** 
 293              		.loc 1 933 0
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 77


 294 0062 3000     		movs	r0, r6
 295 0064 1830     		adds	r0, r0, #24
 296 0066 FFF7FEFF 		bl	vListInitialiseItem
 297              	.LVL34:
 937:FreeRTOS\Source/tasks.c **** 
 298              		.loc 1 937 0
 299 006a 3661     		str	r6, [r6, #16]
 940:FreeRTOS\Source/tasks.c ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 300              		.loc 1 940 0
 301 006c 0523     		movs	r3, #5
 302 006e 1C1B     		subs	r4, r3, r4
 303              	.LVL35:
 304 0070 B461     		str	r4, [r6, #24]
 941:FreeRTOS\Source/tasks.c **** 
 305              		.loc 1 941 0
 306 0072 7662     		str	r6, [r6, #36]
1007:FreeRTOS\Source/tasks.c ****         }
 307              		.loc 1 1007 0
 308 0074 019A     		ldr	r2, [sp, #4]
 309 0076 0099     		ldr	r1, [sp]
 310 0078 3800     		movs	r0, r7
 311 007a FFF7FEFF 		bl	pxPortInitialiseStack
 312              	.LVL36:
 313 007e 3060     		str	r0, [r6]
1013:FreeRTOS\Source/tasks.c ****     {
 314              		.loc 1 1013 0
 315 0080 099B     		ldr	r3, [sp, #36]
 316 0082 002B     		cmp	r3, #0
 317 0084 00D0     		beq	.L17
1017:FreeRTOS\Source/tasks.c ****     }
 318              		.loc 1 1017 0
 319 0086 1E60     		str	r6, [r3]
 320              	.L17:
1023:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 321              		.loc 1 1023 0
 322 0088 03B0     		add	sp, sp, #12
 323              	.LVL37:
 324              		@ sp needed
 325              	.LVL38:
 326              	.LVL39:
 327 008a F0BD     		pop	{r4, r5, r6, r7, pc}
 328              	.L27:
 329              		.align	2
 330              	.L26:
 331 008c FFFFFF3F 		.word	1073741823
 332              		.cfi_endproc
 333              	.LFE35:
 334              		.size	prvInitialiseNewTask, .-prvInitialiseNewTask
 335              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 336              		.align	2
 337              		.code	16
 338              		.thumb_func
 339              		.type	prvInitialiseTaskLists, %function
 340              	prvInitialiseTaskLists:
 341              	.LFB67:
3658:FreeRTOS\Source/tasks.c ****     UBaseType_t uxPriority;
 342              		.loc 1 3658 0
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 78


 343              		.cfi_startproc
 344              		@ args = 0, pretend = 0, frame = 0
 345              		@ frame_needed = 0, uses_anonymous_args = 0
 346 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 347              		.cfi_def_cfa_offset 24
 348              		.cfi_offset 3, -24
 349              		.cfi_offset 4, -20
 350              		.cfi_offset 5, -16
 351              		.cfi_offset 6, -12
 352              		.cfi_offset 7, -8
 353              		.cfi_offset 14, -4
 354              	.LVL40:
3661:FreeRTOS\Source/tasks.c ****     {
 355              		.loc 1 3661 0
 356 0002 0024     		movs	r4, #0
 357 0004 08E0     		b	.L29
 358              	.LVL41:
 359              	.L30:
3663:FreeRTOS\Source/tasks.c ****     }
 360              		.loc 1 3663 0 discriminator 3
 361 0006 A200     		lsls	r2, r4, #2
 362 0008 1219     		adds	r2, r2, r4
 363 000a 9300     		lsls	r3, r2, #2
 364 000c 1048     		ldr	r0, .L31
 365 000e 3030     		adds	r0, r0, #48
 366 0010 C018     		adds	r0, r0, r3
 367 0012 FFF7FEFF 		bl	vListInitialise
 368              	.LVL42:
3661:FreeRTOS\Source/tasks.c ****     {
 369              		.loc 1 3661 0 discriminator 3
 370 0016 0134     		adds	r4, r4, #1
 371              	.LVL43:
 372              	.L29:
3661:FreeRTOS\Source/tasks.c ****     {
 373              		.loc 1 3661 0 is_stmt 0 discriminator 1
 374 0018 042C     		cmp	r4, #4
 375 001a F4D9     		bls	.L30
3666:FreeRTOS\Source/tasks.c ****     vListInitialise( &xDelayedTaskList2 );
 376              		.loc 1 3666 0 is_stmt 1
 377 001c 0D4C     		ldr	r4, .L31+4
 378              	.LVL44:
 379 001e 2700     		movs	r7, r4
 380 0020 1437     		adds	r7, r7, #20
 381 0022 3800     		movs	r0, r7
 382 0024 FFF7FEFF 		bl	vListInitialise
 383              	.LVL45:
3667:FreeRTOS\Source/tasks.c ****     vListInitialise( &xPendingReadyList );
 384              		.loc 1 3667 0
 385 0028 2600     		movs	r6, r4
 386 002a 2836     		adds	r6, r6, #40
 387 002c 3000     		movs	r0, r6
 388 002e FFF7FEFF 		bl	vListInitialise
 389              	.LVL46:
3668:FreeRTOS\Source/tasks.c **** 
 390              		.loc 1 3668 0
 391 0032 074D     		ldr	r5, .L31
 392 0034 2800     		movs	r0, r5
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 79


 393 0036 1430     		adds	r0, r0, #20
 394 0038 FFF7FEFF 		bl	vListInitialise
 395              	.LVL47:
3672:FreeRTOS\Source/tasks.c ****     }
 396              		.loc 1 3672 0
 397 003c 2000     		movs	r0, r4
 398 003e 3C30     		adds	r0, r0, #60
 399 0040 FFF7FEFF 		bl	vListInitialise
 400              	.LVL48:
3678:FreeRTOS\Source/tasks.c ****     }
 401              		.loc 1 3678 0
 402 0044 2800     		movs	r0, r5
 403 0046 FFF7FEFF 		bl	vListInitialise
 404              	.LVL49:
3684:FreeRTOS\Source/tasks.c ****     pxOverflowDelayedTaskList = &xDelayedTaskList2;
 405              		.loc 1 3684 0
 406 004a AF62     		str	r7, [r5, #40]
3685:FreeRTOS\Source/tasks.c **** }
 407              		.loc 1 3685 0
 408 004c 2665     		str	r6, [r4, #80]
3686:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 409              		.loc 1 3686 0
 410              		@ sp needed
 411 004e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 412              	.L32:
 413              		.align	2
 414              	.L31:
 415 0050 00000000 		.word	.LANCHOR0
 416 0054 80000000 		.word	.LANCHOR1
 417              		.cfi_endproc
 418              	.LFE67:
 419              		.size	prvInitialiseTaskLists, .-prvInitialiseTaskLists
 420              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 421              		.align	2
 422              		.code	16
 423              		.thumb_func
 424              		.type	prvAddNewTaskToReadyList, %function
 425              	prvAddNewTaskToReadyList:
 426              	.LFB36:
1027:FreeRTOS\Source/tasks.c ****     /* Ensure interrupts don't access the task lists while the lists are being
 427              		.loc 1 1027 0
 428              		.cfi_startproc
 429              		@ args = 0, pretend = 0, frame = 0
 430              		@ frame_needed = 0, uses_anonymous_args = 0
 431              	.LVL50:
 432 0000 70B5     		push	{r4, r5, r6, lr}
 433              		.cfi_def_cfa_offset 16
 434              		.cfi_offset 4, -16
 435              		.cfi_offset 5, -12
 436              		.cfi_offset 6, -8
 437              		.cfi_offset 14, -4
 438 0002 0400     		movs	r4, r0
1030:FreeRTOS\Source/tasks.c ****     {
 439              		.loc 1 1030 0
 440 0004 FFF7FEFF 		bl	vPortEnterCritical
 441              	.LVL51:
1032:FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 80


 442              		.loc 1 1032 0
 443 0008 284B     		ldr	r3, .L38
 444 000a 5A6D     		ldr	r2, [r3, #84]
 445 000c 0132     		adds	r2, r2, #1
 446 000e 5A65     		str	r2, [r3, #84]
1034:FreeRTOS\Source/tasks.c ****         {
 447              		.loc 1 1034 0
 448 0010 9B6D     		ldr	r3, [r3, #88]
 449 0012 002B     		cmp	r3, #0
 450 0014 07D1     		bne	.L34
1038:FreeRTOS\Source/tasks.c **** 
 451              		.loc 1 1038 0
 452 0016 254B     		ldr	r3, .L38
 453 0018 9C65     		str	r4, [r3, #88]
1040:FreeRTOS\Source/tasks.c ****             {
 454              		.loc 1 1040 0
 455 001a 5B6D     		ldr	r3, [r3, #84]
 456 001c 012B     		cmp	r3, #1
 457 001e 0ED1     		bne	.L35
1045:FreeRTOS\Source/tasks.c ****             }
 458              		.loc 1 1045 0
 459 0020 FFF7FEFF 		bl	prvInitialiseTaskLists
 460              	.LVL52:
 461 0024 0BE0     		b	.L35
 462              	.L34:
1057:FreeRTOS\Source/tasks.c ****             {
 463              		.loc 1 1057 0
 464 0026 214B     		ldr	r3, .L38
 465 0028 DB6D     		ldr	r3, [r3, #92]
 466 002a 002B     		cmp	r3, #0
 467 002c 07D1     		bne	.L35
1059:FreeRTOS\Source/tasks.c ****                 {
 468              		.loc 1 1059 0
 469 002e 1F4B     		ldr	r3, .L38
 470 0030 9B6D     		ldr	r3, [r3, #88]
 471 0032 DB6A     		ldr	r3, [r3, #44]
 472 0034 E26A     		ldr	r2, [r4, #44]
 473 0036 9342     		cmp	r3, r2
 474 0038 01D8     		bhi	.L35
1061:FreeRTOS\Source/tasks.c ****                 }
 475              		.loc 1 1061 0
 476 003a 1C4B     		ldr	r3, .L38
 477 003c 9C65     		str	r4, [r3, #88]
 478              	.L35:
1074:FreeRTOS\Source/tasks.c **** 
 479              		.loc 1 1074 0
 480 003e 1B4A     		ldr	r2, .L38
 481 0040 136E     		ldr	r3, [r2, #96]
 482 0042 0133     		adds	r3, r3, #1
 483 0044 1366     		str	r3, [r2, #96]
1084:FreeRTOS\Source/tasks.c **** 
 484              		.loc 1 1084 0
 485 0046 E36A     		ldr	r3, [r4, #44]
 486 0048 526E     		ldr	r2, [r2, #100]
 487 004a 9342     		cmp	r3, r2
 488 004c 01D9     		bls	.L36
1084:FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 81


 489              		.loc 1 1084 0 is_stmt 0 discriminator 1
 490 004e 174A     		ldr	r2, .L38
 491 0050 5366     		str	r3, [r2, #100]
 492              	.L36:
 493              	.LBB2:
1084:FreeRTOS\Source/tasks.c **** 
 494              		.loc 1 1084 0 discriminator 3
 495 0052 1749     		ldr	r1, .L38+4
 496 0054 9A00     		lsls	r2, r3, #2
 497 0056 D318     		adds	r3, r2, r3
 498 0058 9A00     		lsls	r2, r3, #2
 499 005a 8A18     		adds	r2, r1, r2
 500 005c 536B     		ldr	r3, [r2, #52]
 501              	.LVL53:
 502 005e A360     		str	r3, [r4, #8]
 503 0060 9A68     		ldr	r2, [r3, #8]
 504 0062 E260     		str	r2, [r4, #12]
 505 0064 9868     		ldr	r0, [r3, #8]
 506 0066 221D     		adds	r2, r4, #4
 507 0068 4260     		str	r2, [r0, #4]
 508 006a 9A60     		str	r2, [r3, #8]
 509 006c E36A     		ldr	r3, [r4, #44]
 510              	.LVL54:
 511 006e 0E00     		movs	r6, r1
 512 0070 3036     		adds	r6, r6, #48
 513 0072 9D00     		lsls	r5, r3, #2
 514 0074 E818     		adds	r0, r5, r3
 515 0076 8200     		lsls	r2, r0, #2
 516 0078 B218     		adds	r2, r6, r2
 517 007a 6261     		str	r2, [r4, #20]
 518 007c E818     		adds	r0, r5, r3
 519 007e 8200     		lsls	r2, r0, #2
 520 0080 8A18     		adds	r2, r1, r2
 521 0082 106B     		ldr	r0, [r2, #48]
 522 0084 0130     		adds	r0, r0, #1
 523 0086 EB18     		adds	r3, r5, r3
 524 0088 9A00     		lsls	r2, r3, #2
 525 008a 8A18     		adds	r2, r1, r2
 526 008c 1063     		str	r0, [r2, #48]
 527              	.LBE2:
1088:FreeRTOS\Source/tasks.c **** 
 528              		.loc 1 1088 0 is_stmt 1 discriminator 3
 529 008e FFF7FEFF 		bl	vPortExitCritical
 530              	.LVL55:
1090:FreeRTOS\Source/tasks.c ****     {
 531              		.loc 1 1090 0 discriminator 3
 532 0092 064B     		ldr	r3, .L38
 533 0094 DB6D     		ldr	r3, [r3, #92]
 534 0096 002B     		cmp	r3, #0
 535 0098 07D0     		beq	.L33
1094:FreeRTOS\Source/tasks.c ****         {
 536              		.loc 1 1094 0
 537 009a 044B     		ldr	r3, .L38
 538 009c 9B6D     		ldr	r3, [r3, #88]
 539 009e DA6A     		ldr	r2, [r3, #44]
 540 00a0 E36A     		ldr	r3, [r4, #44]
 541 00a2 9A42     		cmp	r2, r3
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 82


 542 00a4 01D2     		bcs	.L33
1096:FreeRTOS\Source/tasks.c ****         }
 543              		.loc 1 1096 0
 544 00a6 FFF7FEFF 		bl	vPortYield
 545              	.LVL56:
 546              	.L33:
1107:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 547              		.loc 1 1107 0
 548              		@ sp needed
 549              	.LVL57:
 550 00aa 70BD     		pop	{r4, r5, r6, pc}
 551              	.L39:
 552              		.align	2
 553              	.L38:
 554 00ac 80000000 		.word	.LANCHOR1
 555 00b0 00000000 		.word	.LANCHOR0
 556              		.cfi_endproc
 557              	.LFE36:
 558              		.size	prvAddNewTaskToReadyList, .-prvAddNewTaskToReadyList
 559              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 560              		.align	2
 561              		.code	16
 562              		.thumb_func
 563              		.type	prvCheckTasksWaitingTermination, %function
 564              	prvCheckTasksWaitingTermination:
 565              	.LFB68:
3690:FreeRTOS\Source/tasks.c ****     /** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
 566              		.loc 1 3690 0
 567              		.cfi_startproc
 568              		@ args = 0, pretend = 0, frame = 0
 569              		@ frame_needed = 0, uses_anonymous_args = 0
 570 0000 70B5     		push	{r4, r5, r6, lr}
 571              		.cfi_def_cfa_offset 16
 572              		.cfi_offset 4, -16
 573              		.cfi_offset 5, -12
 574              		.cfi_offset 6, -8
 575              		.cfi_offset 14, -4
 576              	.LBB3:
3699:FreeRTOS\Source/tasks.c ****         {
 577              		.loc 1 3699 0
 578 0002 12E0     		b	.L41
 579              	.L42:
3701:FreeRTOS\Source/tasks.c ****             {
 580              		.loc 1 3701 0
 581 0004 FFF7FEFF 		bl	vPortEnterCritical
 582              	.LVL58:
3703:FreeRTOS\Source/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 583              		.loc 1 3703 0
 584 0008 0A4C     		ldr	r4, .L43
 585 000a A36C     		ldr	r3, [r4, #72]
 586 000c DD68     		ldr	r5, [r3, #12]
 587              	.LVL59:
3704:FreeRTOS\Source/tasks.c ****                 --uxCurrentNumberOfTasks;
 588              		.loc 1 3704 0
 589 000e 281D     		adds	r0, r5, #4
 590 0010 FFF7FEFF 		bl	uxListRemove
 591              	.LVL60:
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 83


3705:FreeRTOS\Source/tasks.c ****                 --uxDeletedTasksWaitingCleanUp;
 592              		.loc 1 3705 0
 593 0014 636D     		ldr	r3, [r4, #84]
 594 0016 013B     		subs	r3, r3, #1
 595 0018 6365     		str	r3, [r4, #84]
3706:FreeRTOS\Source/tasks.c ****             }
 596              		.loc 1 3706 0
 597 001a A36E     		ldr	r3, [r4, #104]
 598 001c 013B     		subs	r3, r3, #1
 599 001e A366     		str	r3, [r4, #104]
3708:FreeRTOS\Source/tasks.c **** 
 600              		.loc 1 3708 0
 601 0020 FFF7FEFF 		bl	vPortExitCritical
 602              	.LVL61:
3710:FreeRTOS\Source/tasks.c ****         }
 603              		.loc 1 3710 0
 604 0024 2800     		movs	r0, r5
 605 0026 FFF7FEFF 		bl	prvDeleteTCB
 606              	.LVL62:
 607              	.L41:
3699:FreeRTOS\Source/tasks.c ****         {
 608              		.loc 1 3699 0
 609 002a 024B     		ldr	r3, .L43
 610 002c 9B6E     		ldr	r3, [r3, #104]
 611 002e 002B     		cmp	r3, #0
 612 0030 E8D1     		bne	.L42
 613              	.LBE3:
3714:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 614              		.loc 1 3714 0
 615              		@ sp needed
 616 0032 70BD     		pop	{r4, r5, r6, pc}
 617              	.L44:
 618              		.align	2
 619              	.L43:
 620 0034 80000000 		.word	.LANCHOR1
 621              		.cfi_endproc
 622              	.LFE68:
 623              		.size	prvCheckTasksWaitingTermination, .-prvCheckTasksWaitingTermination
 624              		.section	.text.prvIdleTask,"ax",%progbits
 625              		.align	2
 626              		.code	16
 627              		.thumb_func
 628              		.type	prvIdleTask, %function
 629              	prvIdleTask:
 630              	.LFB66:
3428:FreeRTOS\Source/tasks.c ****     /* Stop warnings. */
 631              		.loc 1 3428 0
 632              		.cfi_startproc
 633              		@ Volatile: function does not return.
 634              		@ args = 0, pretend = 0, frame = 0
 635              		@ frame_needed = 0, uses_anonymous_args = 0
 636              	.LVL63:
 637 0000 10B5     		push	{r4, lr}
 638              		.cfi_def_cfa_offset 8
 639              		.cfi_offset 4, -8
 640              		.cfi_offset 14, -4
 641              	.LVL64:
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 84


 642              	.L46:
3444:FreeRTOS\Source/tasks.c **** 
 643              		.loc 1 3444 0 discriminator 1
 644 0002 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
 645              	.LVL65:
 646 0006 FCE7     		b	.L46
 647              		.cfi_endproc
 648              	.LFE66:
 649              		.size	prvIdleTask, .-prvIdleTask
 650              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 651              		.align	2
 652              		.code	16
 653              		.thumb_func
 654              		.type	prvAddCurrentTaskToDelayedList, %function
 655              	prvAddCurrentTaskToDelayedList:
 656              	.LFB86:
4018:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4019:FreeRTOS\Source/tasks.c **** 
4020:FreeRTOS\Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
4021:FreeRTOS\Source/tasks.c **** 
4022:FreeRTOS\Source/tasks.c ****     TaskHandle_t xTaskGetCurrentTaskHandle( void )
4023:FreeRTOS\Source/tasks.c ****     {
4024:FreeRTOS\Source/tasks.c ****         TaskHandle_t xReturn;
4025:FreeRTOS\Source/tasks.c **** 
4026:FreeRTOS\Source/tasks.c ****         /* A critical section is not required as this is not called from
4027:FreeRTOS\Source/tasks.c ****          * an interrupt and the current TCB will always be the same for any
4028:FreeRTOS\Source/tasks.c ****          * individual execution thread. */
4029:FreeRTOS\Source/tasks.c ****         xReturn = pxCurrentTCB;
4030:FreeRTOS\Source/tasks.c **** 
4031:FreeRTOS\Source/tasks.c ****         return xReturn;
4032:FreeRTOS\Source/tasks.c ****     }
4033:FreeRTOS\Source/tasks.c **** 
4034:FreeRTOS\Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
4035:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4036:FreeRTOS\Source/tasks.c **** 
4037:FreeRTOS\Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
4038:FreeRTOS\Source/tasks.c **** 
4039:FreeRTOS\Source/tasks.c ****     BaseType_t xTaskGetSchedulerState( void )
4040:FreeRTOS\Source/tasks.c ****     {
4041:FreeRTOS\Source/tasks.c ****         BaseType_t xReturn;
4042:FreeRTOS\Source/tasks.c **** 
4043:FreeRTOS\Source/tasks.c ****         if( xSchedulerRunning == pdFALSE )
4044:FreeRTOS\Source/tasks.c ****         {
4045:FreeRTOS\Source/tasks.c ****             xReturn = taskSCHEDULER_NOT_STARTED;
4046:FreeRTOS\Source/tasks.c ****         }
4047:FreeRTOS\Source/tasks.c ****         else
4048:FreeRTOS\Source/tasks.c ****         {
4049:FreeRTOS\Source/tasks.c ****             if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4050:FreeRTOS\Source/tasks.c ****             {
4051:FreeRTOS\Source/tasks.c ****                 xReturn = taskSCHEDULER_RUNNING;
4052:FreeRTOS\Source/tasks.c ****             }
4053:FreeRTOS\Source/tasks.c ****             else
4054:FreeRTOS\Source/tasks.c ****             {
4055:FreeRTOS\Source/tasks.c ****                 xReturn = taskSCHEDULER_SUSPENDED;
4056:FreeRTOS\Source/tasks.c ****             }
4057:FreeRTOS\Source/tasks.c ****         }
4058:FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 85


4059:FreeRTOS\Source/tasks.c ****         return xReturn;
4060:FreeRTOS\Source/tasks.c ****     }
4061:FreeRTOS\Source/tasks.c **** 
4062:FreeRTOS\Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
4063:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4064:FreeRTOS\Source/tasks.c **** 
4065:FreeRTOS\Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4066:FreeRTOS\Source/tasks.c **** 
4067:FreeRTOS\Source/tasks.c ****     BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
4068:FreeRTOS\Source/tasks.c ****     {
4069:FreeRTOS\Source/tasks.c ****         TCB_t * const pxMutexHolderTCB = pxMutexHolder;
4070:FreeRTOS\Source/tasks.c ****         BaseType_t xReturn = pdFALSE;
4071:FreeRTOS\Source/tasks.c **** 
4072:FreeRTOS\Source/tasks.c ****         /* If the mutex was given back by an interrupt while the queue was
4073:FreeRTOS\Source/tasks.c ****          * locked then the mutex holder might now be NULL.  _RB_ Is this still
4074:FreeRTOS\Source/tasks.c ****          * needed as interrupts can no longer use mutexes? */
4075:FreeRTOS\Source/tasks.c ****         if( pxMutexHolder != NULL )
4076:FreeRTOS\Source/tasks.c ****         {
4077:FreeRTOS\Source/tasks.c ****             /* If the holder of the mutex has a priority below the priority of
4078:FreeRTOS\Source/tasks.c ****              * the task attempting to obtain the mutex then it will temporarily
4079:FreeRTOS\Source/tasks.c ****              * inherit the priority of the task attempting to obtain the mutex. */
4080:FreeRTOS\Source/tasks.c ****             if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
4081:FreeRTOS\Source/tasks.c ****             {
4082:FreeRTOS\Source/tasks.c ****                 /* Adjust the mutex holder state to account for its new
4083:FreeRTOS\Source/tasks.c ****                  * priority.  Only reset the event list item value if the value is
4084:FreeRTOS\Source/tasks.c ****                  * not being used for anything else. */
4085:FreeRTOS\Source/tasks.c ****                 if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_
4086:FreeRTOS\Source/tasks.c ****                 {
4087:FreeRTOS\Source/tasks.c ****                     listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) 
4088:FreeRTOS\Source/tasks.c ****                 }
4089:FreeRTOS\Source/tasks.c ****                 else
4090:FreeRTOS\Source/tasks.c ****                 {
4091:FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4092:FreeRTOS\Source/tasks.c ****                 }
4093:FreeRTOS\Source/tasks.c **** 
4094:FreeRTOS\Source/tasks.c ****                 /* If the task being modified is in the ready state it will need
4095:FreeRTOS\Source/tasks.c ****                  * to be moved into a new list. */
4096:FreeRTOS\Source/tasks.c ****                 if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] )
4097:FreeRTOS\Source/tasks.c ****                 {
4098:FreeRTOS\Source/tasks.c ****                     if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 
4099:FreeRTOS\Source/tasks.c ****                     {
4100:FreeRTOS\Source/tasks.c ****                         /* It is known that the task is in its ready list so
4101:FreeRTOS\Source/tasks.c ****                          * there is no need to check again and the port level
4102:FreeRTOS\Source/tasks.c ****                          * reset macro can be called directly. */
4103:FreeRTOS\Source/tasks.c ****                         portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority 
4104:FreeRTOS\Source/tasks.c ****                     }
4105:FreeRTOS\Source/tasks.c ****                     else
4106:FreeRTOS\Source/tasks.c ****                     {
4107:FreeRTOS\Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4108:FreeRTOS\Source/tasks.c ****                     }
4109:FreeRTOS\Source/tasks.c **** 
4110:FreeRTOS\Source/tasks.c ****                     /* Inherit the priority before being moved into the new list. */
4111:FreeRTOS\Source/tasks.c ****                     pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
4112:FreeRTOS\Source/tasks.c ****                     prvAddTaskToReadyList( pxMutexHolderTCB );
4113:FreeRTOS\Source/tasks.c ****                 }
4114:FreeRTOS\Source/tasks.c ****                 else
4115:FreeRTOS\Source/tasks.c ****                 {
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 86


4116:FreeRTOS\Source/tasks.c ****                     /* Just inherit the priority. */
4117:FreeRTOS\Source/tasks.c ****                     pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
4118:FreeRTOS\Source/tasks.c ****                 }
4119:FreeRTOS\Source/tasks.c **** 
4120:FreeRTOS\Source/tasks.c ****                 traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
4121:FreeRTOS\Source/tasks.c **** 
4122:FreeRTOS\Source/tasks.c ****                 /* Inheritance occurred. */
4123:FreeRTOS\Source/tasks.c ****                 xReturn = pdTRUE;
4124:FreeRTOS\Source/tasks.c ****             }
4125:FreeRTOS\Source/tasks.c ****             else
4126:FreeRTOS\Source/tasks.c ****             {
4127:FreeRTOS\Source/tasks.c ****                 if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
4128:FreeRTOS\Source/tasks.c ****                 {
4129:FreeRTOS\Source/tasks.c ****                     /* The base priority of the mutex holder is lower than the
4130:FreeRTOS\Source/tasks.c ****                      * priority of the task attempting to take the mutex, but the
4131:FreeRTOS\Source/tasks.c ****                      * current priority of the mutex holder is not lower than the
4132:FreeRTOS\Source/tasks.c ****                      * priority of the task attempting to take the mutex.
4133:FreeRTOS\Source/tasks.c ****                      * Therefore the mutex holder must have already inherited a
4134:FreeRTOS\Source/tasks.c ****                      * priority, but inheritance would have occurred if that had
4135:FreeRTOS\Source/tasks.c ****                      * not been the case. */
4136:FreeRTOS\Source/tasks.c ****                     xReturn = pdTRUE;
4137:FreeRTOS\Source/tasks.c ****                 }
4138:FreeRTOS\Source/tasks.c ****                 else
4139:FreeRTOS\Source/tasks.c ****                 {
4140:FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4141:FreeRTOS\Source/tasks.c ****                 }
4142:FreeRTOS\Source/tasks.c ****             }
4143:FreeRTOS\Source/tasks.c ****         }
4144:FreeRTOS\Source/tasks.c ****         else
4145:FreeRTOS\Source/tasks.c ****         {
4146:FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4147:FreeRTOS\Source/tasks.c ****         }
4148:FreeRTOS\Source/tasks.c **** 
4149:FreeRTOS\Source/tasks.c ****         return xReturn;
4150:FreeRTOS\Source/tasks.c ****     }
4151:FreeRTOS\Source/tasks.c **** 
4152:FreeRTOS\Source/tasks.c **** #endif /* configUSE_MUTEXES */
4153:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4154:FreeRTOS\Source/tasks.c **** 
4155:FreeRTOS\Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4156:FreeRTOS\Source/tasks.c **** 
4157:FreeRTOS\Source/tasks.c ****     BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
4158:FreeRTOS\Source/tasks.c ****     {
4159:FreeRTOS\Source/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
4160:FreeRTOS\Source/tasks.c ****         BaseType_t xReturn = pdFALSE;
4161:FreeRTOS\Source/tasks.c **** 
4162:FreeRTOS\Source/tasks.c ****         if( pxMutexHolder != NULL )
4163:FreeRTOS\Source/tasks.c ****         {
4164:FreeRTOS\Source/tasks.c ****             /* A task can only have an inherited priority if it holds the mutex.
4165:FreeRTOS\Source/tasks.c ****              * If the mutex is held by a task then it cannot be given from an
4166:FreeRTOS\Source/tasks.c ****              * interrupt, and if a mutex is given by the holding task then it must
4167:FreeRTOS\Source/tasks.c ****              * be the running state task. */
4168:FreeRTOS\Source/tasks.c ****             configASSERT( pxTCB == pxCurrentTCB );
4169:FreeRTOS\Source/tasks.c ****             configASSERT( pxTCB->uxMutexesHeld );
4170:FreeRTOS\Source/tasks.c ****             ( pxTCB->uxMutexesHeld )--;
4171:FreeRTOS\Source/tasks.c **** 
4172:FreeRTOS\Source/tasks.c ****             /* Has the holder of the mutex inherited the priority of another
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 87


4173:FreeRTOS\Source/tasks.c ****              * task? */
4174:FreeRTOS\Source/tasks.c ****             if( pxTCB->uxPriority != pxTCB->uxBasePriority )
4175:FreeRTOS\Source/tasks.c ****             {
4176:FreeRTOS\Source/tasks.c ****                 /* Only disinherit if no other mutexes are held. */
4177:FreeRTOS\Source/tasks.c ****                 if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
4178:FreeRTOS\Source/tasks.c ****                 {
4179:FreeRTOS\Source/tasks.c ****                     /* A task can only have an inherited priority if it holds
4180:FreeRTOS\Source/tasks.c ****                      * the mutex.  If the mutex is held by a task then it cannot be
4181:FreeRTOS\Source/tasks.c ****                      * given from an interrupt, and if a mutex is given by the
4182:FreeRTOS\Source/tasks.c ****                      * holding task then it must be the running state task.  Remove
4183:FreeRTOS\Source/tasks.c ****                      * the holding task from the ready list. */
4184:FreeRTOS\Source/tasks.c ****                     if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4185:FreeRTOS\Source/tasks.c ****                     {
4186:FreeRTOS\Source/tasks.c ****                         portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
4187:FreeRTOS\Source/tasks.c ****                     }
4188:FreeRTOS\Source/tasks.c ****                     else
4189:FreeRTOS\Source/tasks.c ****                     {
4190:FreeRTOS\Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4191:FreeRTOS\Source/tasks.c ****                     }
4192:FreeRTOS\Source/tasks.c **** 
4193:FreeRTOS\Source/tasks.c ****                     /* Disinherit the priority before adding the task into the
4194:FreeRTOS\Source/tasks.c ****                      * new  ready list. */
4195:FreeRTOS\Source/tasks.c ****                     traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4196:FreeRTOS\Source/tasks.c ****                     pxTCB->uxPriority = pxTCB->uxBasePriority;
4197:FreeRTOS\Source/tasks.c **** 
4198:FreeRTOS\Source/tasks.c ****                     /* Reset the event list item value.  It cannot be in use for
4199:FreeRTOS\Source/tasks.c ****                      * any other purpose if this task is running, and it must be
4200:FreeRTOS\Source/tasks.c ****                      * running to give back the mutex. */
4201:FreeRTOS\Source/tasks.c ****                     listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_P
4202:FreeRTOS\Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
4203:FreeRTOS\Source/tasks.c **** 
4204:FreeRTOS\Source/tasks.c ****                     /* Return true to indicate that a context switch is required.
4205:FreeRTOS\Source/tasks.c ****                      * This is only actually required in the corner case whereby
4206:FreeRTOS\Source/tasks.c ****                      * multiple mutexes were held and the mutexes were given back
4207:FreeRTOS\Source/tasks.c ****                      * in an order different to that in which they were taken.
4208:FreeRTOS\Source/tasks.c ****                      * If a context switch did not occur when the first mutex was
4209:FreeRTOS\Source/tasks.c ****                      * returned, even if a task was waiting on it, then a context
4210:FreeRTOS\Source/tasks.c ****                      * switch should occur when the last mutex is returned whether
4211:FreeRTOS\Source/tasks.c ****                      * a task is waiting on it or not. */
4212:FreeRTOS\Source/tasks.c ****                     xReturn = pdTRUE;
4213:FreeRTOS\Source/tasks.c ****                 }
4214:FreeRTOS\Source/tasks.c ****                 else
4215:FreeRTOS\Source/tasks.c ****                 {
4216:FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4217:FreeRTOS\Source/tasks.c ****                 }
4218:FreeRTOS\Source/tasks.c ****             }
4219:FreeRTOS\Source/tasks.c ****             else
4220:FreeRTOS\Source/tasks.c ****             {
4221:FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4222:FreeRTOS\Source/tasks.c ****             }
4223:FreeRTOS\Source/tasks.c ****         }
4224:FreeRTOS\Source/tasks.c ****         else
4225:FreeRTOS\Source/tasks.c ****         {
4226:FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4227:FreeRTOS\Source/tasks.c ****         }
4228:FreeRTOS\Source/tasks.c **** 
4229:FreeRTOS\Source/tasks.c ****         return xReturn;
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 88


4230:FreeRTOS\Source/tasks.c ****     }
4231:FreeRTOS\Source/tasks.c **** 
4232:FreeRTOS\Source/tasks.c **** #endif /* configUSE_MUTEXES */
4233:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4234:FreeRTOS\Source/tasks.c **** 
4235:FreeRTOS\Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4236:FreeRTOS\Source/tasks.c **** 
4237:FreeRTOS\Source/tasks.c ****     void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
4238:FreeRTOS\Source/tasks.c ****                                               UBaseType_t uxHighestPriorityWaitingTask )
4239:FreeRTOS\Source/tasks.c ****     {
4240:FreeRTOS\Source/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
4241:FreeRTOS\Source/tasks.c ****         UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
4242:FreeRTOS\Source/tasks.c ****         const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
4243:FreeRTOS\Source/tasks.c **** 
4244:FreeRTOS\Source/tasks.c ****         if( pxMutexHolder != NULL )
4245:FreeRTOS\Source/tasks.c ****         {
4246:FreeRTOS\Source/tasks.c ****             /* If pxMutexHolder is not NULL then the holder must hold at least
4247:FreeRTOS\Source/tasks.c ****              * one mutex. */
4248:FreeRTOS\Source/tasks.c ****             configASSERT( pxTCB->uxMutexesHeld );
4249:FreeRTOS\Source/tasks.c **** 
4250:FreeRTOS\Source/tasks.c ****             /* Determine the priority to which the priority of the task that
4251:FreeRTOS\Source/tasks.c ****              * holds the mutex should be set.  This will be the greater of the
4252:FreeRTOS\Source/tasks.c ****              * holding task's base priority and the priority of the highest
4253:FreeRTOS\Source/tasks.c ****              * priority task that is waiting to obtain the mutex. */
4254:FreeRTOS\Source/tasks.c ****             if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
4255:FreeRTOS\Source/tasks.c ****             {
4256:FreeRTOS\Source/tasks.c ****                 uxPriorityToUse = uxHighestPriorityWaitingTask;
4257:FreeRTOS\Source/tasks.c ****             }
4258:FreeRTOS\Source/tasks.c ****             else
4259:FreeRTOS\Source/tasks.c ****             {
4260:FreeRTOS\Source/tasks.c ****                 uxPriorityToUse = pxTCB->uxBasePriority;
4261:FreeRTOS\Source/tasks.c ****             }
4262:FreeRTOS\Source/tasks.c **** 
4263:FreeRTOS\Source/tasks.c ****             /* Does the priority need to change? */
4264:FreeRTOS\Source/tasks.c ****             if( pxTCB->uxPriority != uxPriorityToUse )
4265:FreeRTOS\Source/tasks.c ****             {
4266:FreeRTOS\Source/tasks.c ****                 /* Only disinherit if no other mutexes are held.  This is a
4267:FreeRTOS\Source/tasks.c ****                  * simplification in the priority inheritance implementation.  If
4268:FreeRTOS\Source/tasks.c ****                  * the task that holds the mutex is also holding other mutexes then
4269:FreeRTOS\Source/tasks.c ****                  * the other mutexes may have caused the priority inheritance. */
4270:FreeRTOS\Source/tasks.c ****                 if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
4271:FreeRTOS\Source/tasks.c ****                 {
4272:FreeRTOS\Source/tasks.c ****                     /* If a task has timed out because it already holds the
4273:FreeRTOS\Source/tasks.c ****                      * mutex it was trying to obtain then it cannot of inherited
4274:FreeRTOS\Source/tasks.c ****                      * its own priority. */
4275:FreeRTOS\Source/tasks.c ****                     configASSERT( pxTCB != pxCurrentTCB );
4276:FreeRTOS\Source/tasks.c **** 
4277:FreeRTOS\Source/tasks.c ****                     /* Disinherit the priority, remembering the previous
4278:FreeRTOS\Source/tasks.c ****                      * priority to facilitate determining the subject task's
4279:FreeRTOS\Source/tasks.c ****                      * state. */
4280:FreeRTOS\Source/tasks.c ****                     traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
4281:FreeRTOS\Source/tasks.c ****                     uxPriorityUsedOnEntry = pxTCB->uxPriority;
4282:FreeRTOS\Source/tasks.c ****                     pxTCB->uxPriority = uxPriorityToUse;
4283:FreeRTOS\Source/tasks.c **** 
4284:FreeRTOS\Source/tasks.c ****                     /* Only reset the event list item value if the value is not
4285:FreeRTOS\Source/tasks.c ****                      * being used for anything else. */
4286:FreeRTOS\Source/tasks.c ****                     if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_IT
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 89


4287:FreeRTOS\Source/tasks.c ****                     {
4288:FreeRTOS\Source/tasks.c ****                         listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configM
4289:FreeRTOS\Source/tasks.c ****                     }
4290:FreeRTOS\Source/tasks.c ****                     else
4291:FreeRTOS\Source/tasks.c ****                     {
4292:FreeRTOS\Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4293:FreeRTOS\Source/tasks.c ****                     }
4294:FreeRTOS\Source/tasks.c **** 
4295:FreeRTOS\Source/tasks.c ****                     /* If the running task is not the task that holds the mutex
4296:FreeRTOS\Source/tasks.c ****                      * then the task that holds the mutex could be in either the
4297:FreeRTOS\Source/tasks.c ****                      * Ready, Blocked or Suspended states.  Only remove the task
4298:FreeRTOS\Source/tasks.c ****                      * from its current state list if it is in the Ready state as
4299:FreeRTOS\Source/tasks.c ****                      * the task's priority is going to change and there is one
4300:FreeRTOS\Source/tasks.c ****                      * Ready list per priority. */
4301:FreeRTOS\Source/tasks.c ****                     if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &
4302:FreeRTOS\Source/tasks.c ****                     {
4303:FreeRTOS\Source/tasks.c ****                         if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4304:FreeRTOS\Source/tasks.c ****                         {
4305:FreeRTOS\Source/tasks.c ****                             /* It is known that the task is in its ready list so
4306:FreeRTOS\Source/tasks.c ****                              * there is no need to check again and the port level
4307:FreeRTOS\Source/tasks.c ****                              * reset macro can be called directly. */
4308:FreeRTOS\Source/tasks.c ****                             portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
4309:FreeRTOS\Source/tasks.c ****                         }
4310:FreeRTOS\Source/tasks.c ****                         else
4311:FreeRTOS\Source/tasks.c ****                         {
4312:FreeRTOS\Source/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
4313:FreeRTOS\Source/tasks.c ****                         }
4314:FreeRTOS\Source/tasks.c **** 
4315:FreeRTOS\Source/tasks.c ****                         prvAddTaskToReadyList( pxTCB );
4316:FreeRTOS\Source/tasks.c ****                     }
4317:FreeRTOS\Source/tasks.c ****                     else
4318:FreeRTOS\Source/tasks.c ****                     {
4319:FreeRTOS\Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4320:FreeRTOS\Source/tasks.c ****                     }
4321:FreeRTOS\Source/tasks.c ****                 }
4322:FreeRTOS\Source/tasks.c ****                 else
4323:FreeRTOS\Source/tasks.c ****                 {
4324:FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4325:FreeRTOS\Source/tasks.c ****                 }
4326:FreeRTOS\Source/tasks.c ****             }
4327:FreeRTOS\Source/tasks.c ****             else
4328:FreeRTOS\Source/tasks.c ****             {
4329:FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4330:FreeRTOS\Source/tasks.c ****             }
4331:FreeRTOS\Source/tasks.c ****         }
4332:FreeRTOS\Source/tasks.c ****         else
4333:FreeRTOS\Source/tasks.c ****         {
4334:FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4335:FreeRTOS\Source/tasks.c ****         }
4336:FreeRTOS\Source/tasks.c ****     }
4337:FreeRTOS\Source/tasks.c **** 
4338:FreeRTOS\Source/tasks.c **** #endif /* configUSE_MUTEXES */
4339:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4340:FreeRTOS\Source/tasks.c **** 
4341:FreeRTOS\Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4342:FreeRTOS\Source/tasks.c **** 
4343:FreeRTOS\Source/tasks.c ****     void vTaskEnterCritical( void )
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 90


4344:FreeRTOS\Source/tasks.c ****     {
4345:FreeRTOS\Source/tasks.c ****         portDISABLE_INTERRUPTS();
4346:FreeRTOS\Source/tasks.c **** 
4347:FreeRTOS\Source/tasks.c ****         if( xSchedulerRunning != pdFALSE )
4348:FreeRTOS\Source/tasks.c ****         {
4349:FreeRTOS\Source/tasks.c ****             ( pxCurrentTCB->uxCriticalNesting )++;
4350:FreeRTOS\Source/tasks.c **** 
4351:FreeRTOS\Source/tasks.c ****             /* This is not the interrupt safe version of the enter critical
4352:FreeRTOS\Source/tasks.c ****              * function so  assert() if it is being called from an interrupt
4353:FreeRTOS\Source/tasks.c ****              * context.  Only API functions that end in "FromISR" can be used in an
4354:FreeRTOS\Source/tasks.c ****              * interrupt.  Only assert if the critical nesting count is 1 to
4355:FreeRTOS\Source/tasks.c ****              * protect against recursive calls if the assert function also uses a
4356:FreeRTOS\Source/tasks.c ****              * critical section. */
4357:FreeRTOS\Source/tasks.c ****             if( pxCurrentTCB->uxCriticalNesting == 1 )
4358:FreeRTOS\Source/tasks.c ****             {
4359:FreeRTOS\Source/tasks.c ****                 portASSERT_IF_IN_ISR();
4360:FreeRTOS\Source/tasks.c ****             }
4361:FreeRTOS\Source/tasks.c ****         }
4362:FreeRTOS\Source/tasks.c ****         else
4363:FreeRTOS\Source/tasks.c ****         {
4364:FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4365:FreeRTOS\Source/tasks.c ****         }
4366:FreeRTOS\Source/tasks.c ****     }
4367:FreeRTOS\Source/tasks.c **** 
4368:FreeRTOS\Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4369:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4370:FreeRTOS\Source/tasks.c **** 
4371:FreeRTOS\Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4372:FreeRTOS\Source/tasks.c **** 
4373:FreeRTOS\Source/tasks.c ****     void vTaskExitCritical( void )
4374:FreeRTOS\Source/tasks.c ****     {
4375:FreeRTOS\Source/tasks.c ****         if( xSchedulerRunning != pdFALSE )
4376:FreeRTOS\Source/tasks.c ****         {
4377:FreeRTOS\Source/tasks.c ****             if( pxCurrentTCB->uxCriticalNesting > 0U )
4378:FreeRTOS\Source/tasks.c ****             {
4379:FreeRTOS\Source/tasks.c ****                 ( pxCurrentTCB->uxCriticalNesting )--;
4380:FreeRTOS\Source/tasks.c **** 
4381:FreeRTOS\Source/tasks.c ****                 if( pxCurrentTCB->uxCriticalNesting == 0U )
4382:FreeRTOS\Source/tasks.c ****                 {
4383:FreeRTOS\Source/tasks.c ****                     portENABLE_INTERRUPTS();
4384:FreeRTOS\Source/tasks.c ****                 }
4385:FreeRTOS\Source/tasks.c ****                 else
4386:FreeRTOS\Source/tasks.c ****                 {
4387:FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4388:FreeRTOS\Source/tasks.c ****                 }
4389:FreeRTOS\Source/tasks.c ****             }
4390:FreeRTOS\Source/tasks.c ****             else
4391:FreeRTOS\Source/tasks.c ****             {
4392:FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4393:FreeRTOS\Source/tasks.c ****             }
4394:FreeRTOS\Source/tasks.c ****         }
4395:FreeRTOS\Source/tasks.c ****         else
4396:FreeRTOS\Source/tasks.c ****         {
4397:FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4398:FreeRTOS\Source/tasks.c ****         }
4399:FreeRTOS\Source/tasks.c ****     }
4400:FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 91


4401:FreeRTOS\Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4402:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4403:FreeRTOS\Source/tasks.c **** 
4404:FreeRTOS\Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 )
4405:FreeRTOS\Source/tasks.c **** 
4406:FreeRTOS\Source/tasks.c ****     static char * prvWriteNameToBuffer( char * pcBuffer,
4407:FreeRTOS\Source/tasks.c ****                                         const char * pcTaskName )
4408:FreeRTOS\Source/tasks.c ****     {
4409:FreeRTOS\Source/tasks.c ****         size_t x;
4410:FreeRTOS\Source/tasks.c **** 
4411:FreeRTOS\Source/tasks.c ****         /* Start by copying the entire string. */
4412:FreeRTOS\Source/tasks.c ****         strcpy( pcBuffer, pcTaskName );
4413:FreeRTOS\Source/tasks.c **** 
4414:FreeRTOS\Source/tasks.c ****         /* Pad the end of the string with spaces to ensure columns line up when
4415:FreeRTOS\Source/tasks.c ****          * printed out. */
4416:FreeRTOS\Source/tasks.c ****         for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4417:FreeRTOS\Source/tasks.c ****         {
4418:FreeRTOS\Source/tasks.c ****             pcBuffer[ x ] = ' ';
4419:FreeRTOS\Source/tasks.c ****         }
4420:FreeRTOS\Source/tasks.c **** 
4421:FreeRTOS\Source/tasks.c ****         /* Terminate. */
4422:FreeRTOS\Source/tasks.c ****         pcBuffer[ x ] = ( char ) 0x00;
4423:FreeRTOS\Source/tasks.c **** 
4424:FreeRTOS\Source/tasks.c ****         /* Return the new end of string. */
4425:FreeRTOS\Source/tasks.c ****         return &( pcBuffer[ x ] );
4426:FreeRTOS\Source/tasks.c ****     }
4427:FreeRTOS\Source/tasks.c **** 
4428:FreeRTOS\Source/tasks.c **** #endif /* ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4429:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4430:FreeRTOS\Source/tasks.c **** 
4431:FreeRTOS\Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4432:FreeRTOS\Source/tasks.c **** 
4433:FreeRTOS\Source/tasks.c ****     void vTaskList( char * pcWriteBuffer )
4434:FreeRTOS\Source/tasks.c ****     {
4435:FreeRTOS\Source/tasks.c ****         TaskStatus_t * pxTaskStatusArray;
4436:FreeRTOS\Source/tasks.c ****         UBaseType_t uxArraySize, x;
4437:FreeRTOS\Source/tasks.c ****         char cStatus;
4438:FreeRTOS\Source/tasks.c **** 
4439:FreeRTOS\Source/tasks.c ****         /*
4440:FreeRTOS\Source/tasks.c ****          * PLEASE NOTE:
4441:FreeRTOS\Source/tasks.c ****          *
4442:FreeRTOS\Source/tasks.c ****          * This function is provided for convenience only, and is used by many
4443:FreeRTOS\Source/tasks.c ****          * of the demo applications.  Do not consider it to be part of the
4444:FreeRTOS\Source/tasks.c ****          * scheduler.
4445:FreeRTOS\Source/tasks.c ****          *
4446:FreeRTOS\Source/tasks.c ****          * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4447:FreeRTOS\Source/tasks.c ****          * uxTaskGetSystemState() output into a human readable table that
4448:FreeRTOS\Source/tasks.c ****          * displays task: names, states, priority, stack usage and task number.
4449:FreeRTOS\Source/tasks.c ****          * Stack usage specified as the number of unused StackType_t words stack can hold
4450:FreeRTOS\Source/tasks.c ****          * on top of stack - not the number of bytes.
4451:FreeRTOS\Source/tasks.c ****          *
4452:FreeRTOS\Source/tasks.c ****          * vTaskList() has a dependency on the sprintf() C library function that
4453:FreeRTOS\Source/tasks.c ****          * might bloat the code size, use a lot of stack, and provide different
4454:FreeRTOS\Source/tasks.c ****          * results on different platforms.  An alternative, tiny, third party,
4455:FreeRTOS\Source/tasks.c ****          * and limited functionality implementation of sprintf() is provided in
4456:FreeRTOS\Source/tasks.c ****          * many of the FreeRTOS/Demo sub-directories in a file called
4457:FreeRTOS\Source/tasks.c ****          * printf-stdarg.c (note printf-stdarg.c does not provide a full
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 92


4458:FreeRTOS\Source/tasks.c ****          * snprintf() implementation!).
4459:FreeRTOS\Source/tasks.c ****          *
4460:FreeRTOS\Source/tasks.c ****          * It is recommended that production systems call uxTaskGetSystemState()
4461:FreeRTOS\Source/tasks.c ****          * directly to get access to raw stats data, rather than indirectly
4462:FreeRTOS\Source/tasks.c ****          * through a call to vTaskList().
4463:FreeRTOS\Source/tasks.c ****          */
4464:FreeRTOS\Source/tasks.c **** 
4465:FreeRTOS\Source/tasks.c **** 
4466:FreeRTOS\Source/tasks.c ****         /* Make sure the write buffer does not contain a string. */
4467:FreeRTOS\Source/tasks.c ****         *pcWriteBuffer = ( char ) 0x00;
4468:FreeRTOS\Source/tasks.c **** 
4469:FreeRTOS\Source/tasks.c ****         /* Take a snapshot of the number of tasks in case it changes while this
4470:FreeRTOS\Source/tasks.c ****          * function is executing. */
4471:FreeRTOS\Source/tasks.c ****         uxArraySize = uxCurrentNumberOfTasks;
4472:FreeRTOS\Source/tasks.c **** 
4473:FreeRTOS\Source/tasks.c ****         /* Allocate an array index for each task.  NOTE!  if
4474:FreeRTOS\Source/tasks.c ****          * configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4475:FreeRTOS\Source/tasks.c ****          * equate to NULL. */
4476:FreeRTOS\Source/tasks.c ****         pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint
4477:FreeRTOS\Source/tasks.c **** 
4478:FreeRTOS\Source/tasks.c ****         if( pxTaskStatusArray != NULL )
4479:FreeRTOS\Source/tasks.c ****         {
4480:FreeRTOS\Source/tasks.c ****             /* Generate the (binary) data. */
4481:FreeRTOS\Source/tasks.c ****             uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4482:FreeRTOS\Source/tasks.c **** 
4483:FreeRTOS\Source/tasks.c ****             /* Create a human readable table from the binary data. */
4484:FreeRTOS\Source/tasks.c ****             for( x = 0; x < uxArraySize; x++ )
4485:FreeRTOS\Source/tasks.c ****             {
4486:FreeRTOS\Source/tasks.c ****                 switch( pxTaskStatusArray[ x ].eCurrentState )
4487:FreeRTOS\Source/tasks.c ****                 {
4488:FreeRTOS\Source/tasks.c ****                     case eRunning:
4489:FreeRTOS\Source/tasks.c ****                         cStatus = tskRUNNING_CHAR;
4490:FreeRTOS\Source/tasks.c ****                         break;
4491:FreeRTOS\Source/tasks.c **** 
4492:FreeRTOS\Source/tasks.c ****                     case eReady:
4493:FreeRTOS\Source/tasks.c ****                         cStatus = tskREADY_CHAR;
4494:FreeRTOS\Source/tasks.c ****                         break;
4495:FreeRTOS\Source/tasks.c **** 
4496:FreeRTOS\Source/tasks.c ****                     case eBlocked:
4497:FreeRTOS\Source/tasks.c ****                         cStatus = tskBLOCKED_CHAR;
4498:FreeRTOS\Source/tasks.c ****                         break;
4499:FreeRTOS\Source/tasks.c **** 
4500:FreeRTOS\Source/tasks.c ****                     case eSuspended:
4501:FreeRTOS\Source/tasks.c ****                         cStatus = tskSUSPENDED_CHAR;
4502:FreeRTOS\Source/tasks.c ****                         break;
4503:FreeRTOS\Source/tasks.c **** 
4504:FreeRTOS\Source/tasks.c ****                     case eDeleted:
4505:FreeRTOS\Source/tasks.c ****                         cStatus = tskDELETED_CHAR;
4506:FreeRTOS\Source/tasks.c ****                         break;
4507:FreeRTOS\Source/tasks.c **** 
4508:FreeRTOS\Source/tasks.c ****                     case eInvalid: /* Fall through. */
4509:FreeRTOS\Source/tasks.c ****                     default:       /* Should not get here, but it is included
4510:FreeRTOS\Source/tasks.c ****                                     * to prevent static checking errors. */
4511:FreeRTOS\Source/tasks.c ****                         cStatus = ( char ) 0x00;
4512:FreeRTOS\Source/tasks.c ****                         break;
4513:FreeRTOS\Source/tasks.c ****                 }
4514:FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 93


4515:FreeRTOS\Source/tasks.c ****                 /* Write the task name to the string, padding with spaces so it
4516:FreeRTOS\Source/tasks.c ****                  * can be printed in tabular form more easily. */
4517:FreeRTOS\Source/tasks.c ****                 pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskN
4518:FreeRTOS\Source/tasks.c **** 
4519:FreeRTOS\Source/tasks.c ****                 /* Write the rest of the string. */
4520:FreeRTOS\Source/tasks.c ****                 sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskSta
4521:FreeRTOS\Source/tasks.c ****                 pcWriteBuffer += strlen( pcWriteBuffer );                                          
4522:FreeRTOS\Source/tasks.c ****             }
4523:FreeRTOS\Source/tasks.c **** 
4524:FreeRTOS\Source/tasks.c ****             /* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4525:FreeRTOS\Source/tasks.c ****              * is 0 then vPortFree() will be #defined to nothing. */
4526:FreeRTOS\Source/tasks.c ****             vPortFree( pxTaskStatusArray );
4527:FreeRTOS\Source/tasks.c ****         }
4528:FreeRTOS\Source/tasks.c ****         else
4529:FreeRTOS\Source/tasks.c ****         {
4530:FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4531:FreeRTOS\Source/tasks.c ****         }
4532:FreeRTOS\Source/tasks.c ****     }
4533:FreeRTOS\Source/tasks.c **** 
4534:FreeRTOS\Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
4535:FreeRTOS\Source/tasks.c **** /*----------------------------------------------------------*/
4536:FreeRTOS\Source/tasks.c **** 
4537:FreeRTOS\Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4538:FreeRTOS\Source/tasks.c **** 
4539:FreeRTOS\Source/tasks.c ****     void vTaskGetRunTimeStats( char * pcWriteBuffer )
4540:FreeRTOS\Source/tasks.c ****     {
4541:FreeRTOS\Source/tasks.c ****         TaskStatus_t * pxTaskStatusArray;
4542:FreeRTOS\Source/tasks.c ****         UBaseType_t uxArraySize, x;
4543:FreeRTOS\Source/tasks.c ****         configRUN_TIME_COUNTER_TYPE ulTotalTime, ulStatsAsPercentage;
4544:FreeRTOS\Source/tasks.c **** 
4545:FreeRTOS\Source/tasks.c ****         /*
4546:FreeRTOS\Source/tasks.c ****          * PLEASE NOTE:
4547:FreeRTOS\Source/tasks.c ****          *
4548:FreeRTOS\Source/tasks.c ****          * This function is provided for convenience only, and is used by many
4549:FreeRTOS\Source/tasks.c ****          * of the demo applications.  Do not consider it to be part of the
4550:FreeRTOS\Source/tasks.c ****          * scheduler.
4551:FreeRTOS\Source/tasks.c ****          *
4552:FreeRTOS\Source/tasks.c ****          * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4553:FreeRTOS\Source/tasks.c ****          * of the uxTaskGetSystemState() output into a human readable table that
4554:FreeRTOS\Source/tasks.c ****          * displays the amount of time each task has spent in the Running state
4555:FreeRTOS\Source/tasks.c ****          * in both absolute and percentage terms.
4556:FreeRTOS\Source/tasks.c ****          *
4557:FreeRTOS\Source/tasks.c ****          * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4558:FreeRTOS\Source/tasks.c ****          * function that might bloat the code size, use a lot of stack, and
4559:FreeRTOS\Source/tasks.c ****          * provide different results on different platforms.  An alternative,
4560:FreeRTOS\Source/tasks.c ****          * tiny, third party, and limited functionality implementation of
4561:FreeRTOS\Source/tasks.c ****          * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4562:FreeRTOS\Source/tasks.c ****          * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4563:FreeRTOS\Source/tasks.c ****          * a full snprintf() implementation!).
4564:FreeRTOS\Source/tasks.c ****          *
4565:FreeRTOS\Source/tasks.c ****          * It is recommended that production systems call uxTaskGetSystemState()
4566:FreeRTOS\Source/tasks.c ****          * directly to get access to raw stats data, rather than indirectly
4567:FreeRTOS\Source/tasks.c ****          * through a call to vTaskGetRunTimeStats().
4568:FreeRTOS\Source/tasks.c ****          */
4569:FreeRTOS\Source/tasks.c **** 
4570:FreeRTOS\Source/tasks.c ****         /* Make sure the write buffer does not contain a string. */
4571:FreeRTOS\Source/tasks.c ****         *pcWriteBuffer = ( char ) 0x00;
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 94


4572:FreeRTOS\Source/tasks.c **** 
4573:FreeRTOS\Source/tasks.c ****         /* Take a snapshot of the number of tasks in case it changes while this
4574:FreeRTOS\Source/tasks.c ****          * function is executing. */
4575:FreeRTOS\Source/tasks.c ****         uxArraySize = uxCurrentNumberOfTasks;
4576:FreeRTOS\Source/tasks.c **** 
4577:FreeRTOS\Source/tasks.c ****         /* Allocate an array index for each task.  NOTE!  If
4578:FreeRTOS\Source/tasks.c ****          * configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4579:FreeRTOS\Source/tasks.c ****          * equate to NULL. */
4580:FreeRTOS\Source/tasks.c ****         pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint
4581:FreeRTOS\Source/tasks.c **** 
4582:FreeRTOS\Source/tasks.c ****         if( pxTaskStatusArray != NULL )
4583:FreeRTOS\Source/tasks.c ****         {
4584:FreeRTOS\Source/tasks.c ****             /* Generate the (binary) data. */
4585:FreeRTOS\Source/tasks.c ****             uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4586:FreeRTOS\Source/tasks.c **** 
4587:FreeRTOS\Source/tasks.c ****             /* For percentage calculations. */
4588:FreeRTOS\Source/tasks.c ****             ulTotalTime /= 100UL;
4589:FreeRTOS\Source/tasks.c **** 
4590:FreeRTOS\Source/tasks.c ****             /* Avoid divide by zero errors. */
4591:FreeRTOS\Source/tasks.c ****             if( ulTotalTime > 0UL )
4592:FreeRTOS\Source/tasks.c ****             {
4593:FreeRTOS\Source/tasks.c ****                 /* Create a human readable table from the binary data. */
4594:FreeRTOS\Source/tasks.c ****                 for( x = 0; x < uxArraySize; x++ )
4595:FreeRTOS\Source/tasks.c ****                 {
4596:FreeRTOS\Source/tasks.c ****                     /* What percentage of the total run time has the task used?
4597:FreeRTOS\Source/tasks.c ****                      * This will always be rounded down to the nearest integer.
4598:FreeRTOS\Source/tasks.c ****                      * ulTotalRunTime has already been divided by 100. */
4599:FreeRTOS\Source/tasks.c ****                     ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4600:FreeRTOS\Source/tasks.c **** 
4601:FreeRTOS\Source/tasks.c ****                     /* Write the task name to the string, padding with
4602:FreeRTOS\Source/tasks.c ****                      * spaces so it can be printed in tabular form more
4603:FreeRTOS\Source/tasks.c ****                      * easily. */
4604:FreeRTOS\Source/tasks.c ****                     pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcT
4605:FreeRTOS\Source/tasks.c **** 
4606:FreeRTOS\Source/tasks.c ****                     if( ulStatsAsPercentage > 0UL )
4607:FreeRTOS\Source/tasks.c ****                     {
4608:FreeRTOS\Source/tasks.c ****                         #ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4609:FreeRTOS\Source/tasks.c ****                         {
4610:FreeRTOS\Source/tasks.c ****                             sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ul
4611:FreeRTOS\Source/tasks.c ****                         }
4612:FreeRTOS\Source/tasks.c ****                         #else
4613:FreeRTOS\Source/tasks.c ****                         {
4614:FreeRTOS\Source/tasks.c ****                             /* sizeof( int ) == sizeof( long ) so a smaller
4615:FreeRTOS\Source/tasks.c ****                              * printf() library can be used. */
4616:FreeRTOS\Source/tasks.c ****                             sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStat
4617:FreeRTOS\Source/tasks.c ****                         }
4618:FreeRTOS\Source/tasks.c ****                         #endif
4619:FreeRTOS\Source/tasks.c ****                     }
4620:FreeRTOS\Source/tasks.c ****                     else
4621:FreeRTOS\Source/tasks.c ****                     {
4622:FreeRTOS\Source/tasks.c ****                         /* If the percentage is zero here then the task has
4623:FreeRTOS\Source/tasks.c ****                          * consumed less than 1% of the total run time. */
4624:FreeRTOS\Source/tasks.c ****                         #ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4625:FreeRTOS\Source/tasks.c ****                         {
4626:FreeRTOS\Source/tasks.c ****                             sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulR
4627:FreeRTOS\Source/tasks.c ****                         }
4628:FreeRTOS\Source/tasks.c ****                         #else
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 95


4629:FreeRTOS\Source/tasks.c ****                         {
4630:FreeRTOS\Source/tasks.c ****                             /* sizeof( int ) == sizeof( long ) so a smaller
4631:FreeRTOS\Source/tasks.c ****                              * printf() library can be used. */
4632:FreeRTOS\Source/tasks.c ****                             sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStat
4633:FreeRTOS\Source/tasks.c ****                         }
4634:FreeRTOS\Source/tasks.c ****                         #endif
4635:FreeRTOS\Source/tasks.c ****                     }
4636:FreeRTOS\Source/tasks.c **** 
4637:FreeRTOS\Source/tasks.c ****                     pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok o
4638:FreeRTOS\Source/tasks.c ****                 }
4639:FreeRTOS\Source/tasks.c ****             }
4640:FreeRTOS\Source/tasks.c ****             else
4641:FreeRTOS\Source/tasks.c ****             {
4642:FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4643:FreeRTOS\Source/tasks.c ****             }
4644:FreeRTOS\Source/tasks.c **** 
4645:FreeRTOS\Source/tasks.c ****             /* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4646:FreeRTOS\Source/tasks.c ****              * is 0 then vPortFree() will be #defined to nothing. */
4647:FreeRTOS\Source/tasks.c ****             vPortFree( pxTaskStatusArray );
4648:FreeRTOS\Source/tasks.c ****         }
4649:FreeRTOS\Source/tasks.c ****         else
4650:FreeRTOS\Source/tasks.c ****         {
4651:FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4652:FreeRTOS\Source/tasks.c ****         }
4653:FreeRTOS\Source/tasks.c ****     }
4654:FreeRTOS\Source/tasks.c **** 
4655:FreeRTOS\Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4656:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4657:FreeRTOS\Source/tasks.c **** 
4658:FreeRTOS\Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4659:FreeRTOS\Source/tasks.c **** {
4660:FreeRTOS\Source/tasks.c ****     TickType_t uxReturn;
4661:FreeRTOS\Source/tasks.c **** 
4662:FreeRTOS\Source/tasks.c ****     uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4663:FreeRTOS\Source/tasks.c **** 
4664:FreeRTOS\Source/tasks.c ****     /* Reset the event list item to its normal value - so it can be used with
4665:FreeRTOS\Source/tasks.c ****      * queues and semaphores. */
4666:FreeRTOS\Source/tasks.c ****     listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITI
4667:FreeRTOS\Source/tasks.c **** 
4668:FreeRTOS\Source/tasks.c ****     return uxReturn;
4669:FreeRTOS\Source/tasks.c **** }
4670:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4671:FreeRTOS\Source/tasks.c **** 
4672:FreeRTOS\Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4673:FreeRTOS\Source/tasks.c **** 
4674:FreeRTOS\Source/tasks.c ****     TaskHandle_t pvTaskIncrementMutexHeldCount( void )
4675:FreeRTOS\Source/tasks.c ****     {
4676:FreeRTOS\Source/tasks.c ****         /* If xSemaphoreCreateMutex() is called before any tasks have been created
4677:FreeRTOS\Source/tasks.c ****          * then pxCurrentTCB will be NULL. */
4678:FreeRTOS\Source/tasks.c ****         if( pxCurrentTCB != NULL )
4679:FreeRTOS\Source/tasks.c ****         {
4680:FreeRTOS\Source/tasks.c ****             ( pxCurrentTCB->uxMutexesHeld )++;
4681:FreeRTOS\Source/tasks.c ****         }
4682:FreeRTOS\Source/tasks.c **** 
4683:FreeRTOS\Source/tasks.c ****         return pxCurrentTCB;
4684:FreeRTOS\Source/tasks.c ****     }
4685:FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 96


4686:FreeRTOS\Source/tasks.c **** #endif /* configUSE_MUTEXES */
4687:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4688:FreeRTOS\Source/tasks.c **** 
4689:FreeRTOS\Source/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4690:FreeRTOS\Source/tasks.c **** 
4691:FreeRTOS\Source/tasks.c ****     uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWait,
4692:FreeRTOS\Source/tasks.c ****                                       BaseType_t xClearCountOnExit,
4693:FreeRTOS\Source/tasks.c ****                                       TickType_t xTicksToWait )
4694:FreeRTOS\Source/tasks.c ****     {
4695:FreeRTOS\Source/tasks.c ****         uint32_t ulReturn;
4696:FreeRTOS\Source/tasks.c **** 
4697:FreeRTOS\Source/tasks.c ****         configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
4698:FreeRTOS\Source/tasks.c **** 
4699:FreeRTOS\Source/tasks.c ****         taskENTER_CRITICAL();
4700:FreeRTOS\Source/tasks.c ****         {
4701:FreeRTOS\Source/tasks.c ****             /* Only block if the notification count is not already non-zero. */
4702:FreeRTOS\Source/tasks.c ****             if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
4703:FreeRTOS\Source/tasks.c ****             {
4704:FreeRTOS\Source/tasks.c ****                 /* Mark this task as waiting for a notification. */
4705:FreeRTOS\Source/tasks.c ****                 pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
4706:FreeRTOS\Source/tasks.c **** 
4707:FreeRTOS\Source/tasks.c ****                 if( xTicksToWait > ( TickType_t ) 0 )
4708:FreeRTOS\Source/tasks.c ****                 {
4709:FreeRTOS\Source/tasks.c ****                     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4710:FreeRTOS\Source/tasks.c ****                     traceTASK_NOTIFY_TAKE_BLOCK( uxIndexToWait );
4711:FreeRTOS\Source/tasks.c **** 
4712:FreeRTOS\Source/tasks.c ****                     /* All ports are written to allow a yield in a critical
4713:FreeRTOS\Source/tasks.c ****                      * section (some will yield immediately, others wait until the
4714:FreeRTOS\Source/tasks.c ****                      * critical section exits) - but it is not something that
4715:FreeRTOS\Source/tasks.c ****                      * application code should ever do. */
4716:FreeRTOS\Source/tasks.c ****                     portYIELD_WITHIN_API();
4717:FreeRTOS\Source/tasks.c ****                 }
4718:FreeRTOS\Source/tasks.c ****                 else
4719:FreeRTOS\Source/tasks.c ****                 {
4720:FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4721:FreeRTOS\Source/tasks.c ****                 }
4722:FreeRTOS\Source/tasks.c ****             }
4723:FreeRTOS\Source/tasks.c ****             else
4724:FreeRTOS\Source/tasks.c ****             {
4725:FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4726:FreeRTOS\Source/tasks.c ****             }
4727:FreeRTOS\Source/tasks.c ****         }
4728:FreeRTOS\Source/tasks.c ****         taskEXIT_CRITICAL();
4729:FreeRTOS\Source/tasks.c **** 
4730:FreeRTOS\Source/tasks.c ****         taskENTER_CRITICAL();
4731:FreeRTOS\Source/tasks.c ****         {
4732:FreeRTOS\Source/tasks.c ****             traceTASK_NOTIFY_TAKE( uxIndexToWait );
4733:FreeRTOS\Source/tasks.c ****             ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
4734:FreeRTOS\Source/tasks.c **** 
4735:FreeRTOS\Source/tasks.c ****             if( ulReturn != 0UL )
4736:FreeRTOS\Source/tasks.c ****             {
4737:FreeRTOS\Source/tasks.c ****                 if( xClearCountOnExit != pdFALSE )
4738:FreeRTOS\Source/tasks.c ****                 {
4739:FreeRTOS\Source/tasks.c ****                     pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
4740:FreeRTOS\Source/tasks.c ****                 }
4741:FreeRTOS\Source/tasks.c ****                 else
4742:FreeRTOS\Source/tasks.c ****                 {
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 97


4743:FreeRTOS\Source/tasks.c ****                     pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
4744:FreeRTOS\Source/tasks.c ****                 }
4745:FreeRTOS\Source/tasks.c ****             }
4746:FreeRTOS\Source/tasks.c ****             else
4747:FreeRTOS\Source/tasks.c ****             {
4748:FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4749:FreeRTOS\Source/tasks.c ****             }
4750:FreeRTOS\Source/tasks.c **** 
4751:FreeRTOS\Source/tasks.c ****             pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
4752:FreeRTOS\Source/tasks.c ****         }
4753:FreeRTOS\Source/tasks.c ****         taskEXIT_CRITICAL();
4754:FreeRTOS\Source/tasks.c **** 
4755:FreeRTOS\Source/tasks.c ****         return ulReturn;
4756:FreeRTOS\Source/tasks.c ****     }
4757:FreeRTOS\Source/tasks.c **** 
4758:FreeRTOS\Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4759:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4760:FreeRTOS\Source/tasks.c **** 
4761:FreeRTOS\Source/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4762:FreeRTOS\Source/tasks.c **** 
4763:FreeRTOS\Source/tasks.c ****     BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
4764:FreeRTOS\Source/tasks.c ****                                        uint32_t ulBitsToClearOnEntry,
4765:FreeRTOS\Source/tasks.c ****                                        uint32_t ulBitsToClearOnExit,
4766:FreeRTOS\Source/tasks.c ****                                        uint32_t * pulNotificationValue,
4767:FreeRTOS\Source/tasks.c ****                                        TickType_t xTicksToWait )
4768:FreeRTOS\Source/tasks.c ****     {
4769:FreeRTOS\Source/tasks.c ****         BaseType_t xReturn;
4770:FreeRTOS\Source/tasks.c **** 
4771:FreeRTOS\Source/tasks.c ****         configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
4772:FreeRTOS\Source/tasks.c **** 
4773:FreeRTOS\Source/tasks.c ****         taskENTER_CRITICAL();
4774:FreeRTOS\Source/tasks.c ****         {
4775:FreeRTOS\Source/tasks.c ****             /* Only block if a notification is not already pending. */
4776:FreeRTOS\Source/tasks.c ****             if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
4777:FreeRTOS\Source/tasks.c ****             {
4778:FreeRTOS\Source/tasks.c ****                 /* Clear bits in the task's notification value as bits may get
4779:FreeRTOS\Source/tasks.c ****                  * set  by the notifying task or interrupt.  This can be used to
4780:FreeRTOS\Source/tasks.c ****                  * clear the value to zero. */
4781:FreeRTOS\Source/tasks.c ****                 pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
4782:FreeRTOS\Source/tasks.c **** 
4783:FreeRTOS\Source/tasks.c ****                 /* Mark this task as waiting for a notification. */
4784:FreeRTOS\Source/tasks.c ****                 pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
4785:FreeRTOS\Source/tasks.c **** 
4786:FreeRTOS\Source/tasks.c ****                 if( xTicksToWait > ( TickType_t ) 0 )
4787:FreeRTOS\Source/tasks.c ****                 {
4788:FreeRTOS\Source/tasks.c ****                     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4789:FreeRTOS\Source/tasks.c ****                     traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWait );
4790:FreeRTOS\Source/tasks.c **** 
4791:FreeRTOS\Source/tasks.c ****                     /* All ports are written to allow a yield in a critical
4792:FreeRTOS\Source/tasks.c ****                      * section (some will yield immediately, others wait until the
4793:FreeRTOS\Source/tasks.c ****                      * critical section exits) - but it is not something that
4794:FreeRTOS\Source/tasks.c ****                      * application code should ever do. */
4795:FreeRTOS\Source/tasks.c ****                     portYIELD_WITHIN_API();
4796:FreeRTOS\Source/tasks.c ****                 }
4797:FreeRTOS\Source/tasks.c ****                 else
4798:FreeRTOS\Source/tasks.c ****                 {
4799:FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 98


4800:FreeRTOS\Source/tasks.c ****                 }
4801:FreeRTOS\Source/tasks.c ****             }
4802:FreeRTOS\Source/tasks.c ****             else
4803:FreeRTOS\Source/tasks.c ****             {
4804:FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4805:FreeRTOS\Source/tasks.c ****             }
4806:FreeRTOS\Source/tasks.c ****         }
4807:FreeRTOS\Source/tasks.c ****         taskEXIT_CRITICAL();
4808:FreeRTOS\Source/tasks.c **** 
4809:FreeRTOS\Source/tasks.c ****         taskENTER_CRITICAL();
4810:FreeRTOS\Source/tasks.c ****         {
4811:FreeRTOS\Source/tasks.c ****             traceTASK_NOTIFY_WAIT( uxIndexToWait );
4812:FreeRTOS\Source/tasks.c **** 
4813:FreeRTOS\Source/tasks.c ****             if( pulNotificationValue != NULL )
4814:FreeRTOS\Source/tasks.c ****             {
4815:FreeRTOS\Source/tasks.c ****                 /* Output the current notification value, which may or may not
4816:FreeRTOS\Source/tasks.c ****                  * have changed. */
4817:FreeRTOS\Source/tasks.c ****                 *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
4818:FreeRTOS\Source/tasks.c ****             }
4819:FreeRTOS\Source/tasks.c **** 
4820:FreeRTOS\Source/tasks.c ****             /* If ucNotifyValue is set then either the task never entered the
4821:FreeRTOS\Source/tasks.c ****              * blocked state (because a notification was already pending) or the
4822:FreeRTOS\Source/tasks.c ****              * task unblocked because of a notification.  Otherwise the task
4823:FreeRTOS\Source/tasks.c ****              * unblocked because of a timeout. */
4824:FreeRTOS\Source/tasks.c ****             if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
4825:FreeRTOS\Source/tasks.c ****             {
4826:FreeRTOS\Source/tasks.c ****                 /* A notification was not received. */
4827:FreeRTOS\Source/tasks.c ****                 xReturn = pdFALSE;
4828:FreeRTOS\Source/tasks.c ****             }
4829:FreeRTOS\Source/tasks.c ****             else
4830:FreeRTOS\Source/tasks.c ****             {
4831:FreeRTOS\Source/tasks.c ****                 /* A notification was already pending or a notification was
4832:FreeRTOS\Source/tasks.c ****                  * received while the task was waiting. */
4833:FreeRTOS\Source/tasks.c ****                 pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
4834:FreeRTOS\Source/tasks.c ****                 xReturn = pdTRUE;
4835:FreeRTOS\Source/tasks.c ****             }
4836:FreeRTOS\Source/tasks.c **** 
4837:FreeRTOS\Source/tasks.c ****             pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
4838:FreeRTOS\Source/tasks.c ****         }
4839:FreeRTOS\Source/tasks.c ****         taskEXIT_CRITICAL();
4840:FreeRTOS\Source/tasks.c **** 
4841:FreeRTOS\Source/tasks.c ****         return xReturn;
4842:FreeRTOS\Source/tasks.c ****     }
4843:FreeRTOS\Source/tasks.c **** 
4844:FreeRTOS\Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4845:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4846:FreeRTOS\Source/tasks.c **** 
4847:FreeRTOS\Source/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4848:FreeRTOS\Source/tasks.c **** 
4849:FreeRTOS\Source/tasks.c ****     BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
4850:FreeRTOS\Source/tasks.c ****                                    UBaseType_t uxIndexToNotify,
4851:FreeRTOS\Source/tasks.c ****                                    uint32_t ulValue,
4852:FreeRTOS\Source/tasks.c ****                                    eNotifyAction eAction,
4853:FreeRTOS\Source/tasks.c ****                                    uint32_t * pulPreviousNotificationValue )
4854:FreeRTOS\Source/tasks.c ****     {
4855:FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
4856:FreeRTOS\Source/tasks.c ****         BaseType_t xReturn = pdPASS;
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 99


4857:FreeRTOS\Source/tasks.c ****         uint8_t ucOriginalNotifyState;
4858:FreeRTOS\Source/tasks.c **** 
4859:FreeRTOS\Source/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
4860:FreeRTOS\Source/tasks.c ****         configASSERT( xTaskToNotify );
4861:FreeRTOS\Source/tasks.c ****         pxTCB = xTaskToNotify;
4862:FreeRTOS\Source/tasks.c **** 
4863:FreeRTOS\Source/tasks.c ****         taskENTER_CRITICAL();
4864:FreeRTOS\Source/tasks.c ****         {
4865:FreeRTOS\Source/tasks.c ****             if( pulPreviousNotificationValue != NULL )
4866:FreeRTOS\Source/tasks.c ****             {
4867:FreeRTOS\Source/tasks.c ****                 *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
4868:FreeRTOS\Source/tasks.c ****             }
4869:FreeRTOS\Source/tasks.c **** 
4870:FreeRTOS\Source/tasks.c ****             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
4871:FreeRTOS\Source/tasks.c **** 
4872:FreeRTOS\Source/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
4873:FreeRTOS\Source/tasks.c **** 
4874:FreeRTOS\Source/tasks.c ****             switch( eAction )
4875:FreeRTOS\Source/tasks.c ****             {
4876:FreeRTOS\Source/tasks.c ****                 case eSetBits:
4877:FreeRTOS\Source/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
4878:FreeRTOS\Source/tasks.c ****                     break;
4879:FreeRTOS\Source/tasks.c **** 
4880:FreeRTOS\Source/tasks.c ****                 case eIncrement:
4881:FreeRTOS\Source/tasks.c ****                     ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
4882:FreeRTOS\Source/tasks.c ****                     break;
4883:FreeRTOS\Source/tasks.c **** 
4884:FreeRTOS\Source/tasks.c ****                 case eSetValueWithOverwrite:
4885:FreeRTOS\Source/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
4886:FreeRTOS\Source/tasks.c ****                     break;
4887:FreeRTOS\Source/tasks.c **** 
4888:FreeRTOS\Source/tasks.c ****                 case eSetValueWithoutOverwrite:
4889:FreeRTOS\Source/tasks.c **** 
4890:FreeRTOS\Source/tasks.c ****                     if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4891:FreeRTOS\Source/tasks.c ****                     {
4892:FreeRTOS\Source/tasks.c ****                         pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
4893:FreeRTOS\Source/tasks.c ****                     }
4894:FreeRTOS\Source/tasks.c ****                     else
4895:FreeRTOS\Source/tasks.c ****                     {
4896:FreeRTOS\Source/tasks.c ****                         /* The value could not be written to the task. */
4897:FreeRTOS\Source/tasks.c ****                         xReturn = pdFAIL;
4898:FreeRTOS\Source/tasks.c ****                     }
4899:FreeRTOS\Source/tasks.c **** 
4900:FreeRTOS\Source/tasks.c ****                     break;
4901:FreeRTOS\Source/tasks.c **** 
4902:FreeRTOS\Source/tasks.c ****                 case eNoAction:
4903:FreeRTOS\Source/tasks.c **** 
4904:FreeRTOS\Source/tasks.c ****                     /* The task is being notified without its notify value being
4905:FreeRTOS\Source/tasks.c ****                      * updated. */
4906:FreeRTOS\Source/tasks.c ****                     break;
4907:FreeRTOS\Source/tasks.c **** 
4908:FreeRTOS\Source/tasks.c ****                 default:
4909:FreeRTOS\Source/tasks.c **** 
4910:FreeRTOS\Source/tasks.c ****                     /* Should not get here if all enums are handled.
4911:FreeRTOS\Source/tasks.c ****                      * Artificially force an assert by testing a value the
4912:FreeRTOS\Source/tasks.c ****                      * compiler can't assume is const. */
4913:FreeRTOS\Source/tasks.c ****                     configASSERT( xTickCount == ( TickType_t ) 0 );
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 100


4914:FreeRTOS\Source/tasks.c **** 
4915:FreeRTOS\Source/tasks.c ****                     break;
4916:FreeRTOS\Source/tasks.c ****             }
4917:FreeRTOS\Source/tasks.c **** 
4918:FreeRTOS\Source/tasks.c ****             traceTASK_NOTIFY( uxIndexToNotify );
4919:FreeRTOS\Source/tasks.c **** 
4920:FreeRTOS\Source/tasks.c ****             /* If the task is in the blocked state specifically to wait for a
4921:FreeRTOS\Source/tasks.c ****              * notification then unblock it now. */
4922:FreeRTOS\Source/tasks.c ****             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4923:FreeRTOS\Source/tasks.c ****             {
4924:FreeRTOS\Source/tasks.c ****                 listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
4925:FreeRTOS\Source/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
4926:FreeRTOS\Source/tasks.c **** 
4927:FreeRTOS\Source/tasks.c ****                 /* The task should not have been on an event list. */
4928:FreeRTOS\Source/tasks.c ****                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4929:FreeRTOS\Source/tasks.c **** 
4930:FreeRTOS\Source/tasks.c ****                 #if ( configUSE_TICKLESS_IDLE != 0 )
4931:FreeRTOS\Source/tasks.c ****                 {
4932:FreeRTOS\Source/tasks.c ****                     /* If a task is blocked waiting for a notification then
4933:FreeRTOS\Source/tasks.c ****                      * xNextTaskUnblockTime might be set to the blocked task's time
4934:FreeRTOS\Source/tasks.c ****                      * out time.  If the task is unblocked for a reason other than
4935:FreeRTOS\Source/tasks.c ****                      * a timeout xNextTaskUnblockTime is normally left unchanged,
4936:FreeRTOS\Source/tasks.c ****                      * because it will automatically get reset to a new value when
4937:FreeRTOS\Source/tasks.c ****                      * the tick count equals xNextTaskUnblockTime.  However if
4938:FreeRTOS\Source/tasks.c ****                      * tickless idling is used it might be more important to enter
4939:FreeRTOS\Source/tasks.c ****                      * sleep mode at the earliest possible time - so reset
4940:FreeRTOS\Source/tasks.c ****                      * xNextTaskUnblockTime here to ensure it is updated at the
4941:FreeRTOS\Source/tasks.c ****                      * earliest possible time. */
4942:FreeRTOS\Source/tasks.c ****                     prvResetNextTaskUnblockTime();
4943:FreeRTOS\Source/tasks.c ****                 }
4944:FreeRTOS\Source/tasks.c ****                 #endif
4945:FreeRTOS\Source/tasks.c **** 
4946:FreeRTOS\Source/tasks.c ****                 if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4947:FreeRTOS\Source/tasks.c ****                 {
4948:FreeRTOS\Source/tasks.c ****                     /* The notified task has a priority above the currently
4949:FreeRTOS\Source/tasks.c ****                      * executing task so a yield is required. */
4950:FreeRTOS\Source/tasks.c ****                     taskYIELD_IF_USING_PREEMPTION();
4951:FreeRTOS\Source/tasks.c ****                 }
4952:FreeRTOS\Source/tasks.c ****                 else
4953:FreeRTOS\Source/tasks.c ****                 {
4954:FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4955:FreeRTOS\Source/tasks.c ****                 }
4956:FreeRTOS\Source/tasks.c ****             }
4957:FreeRTOS\Source/tasks.c ****             else
4958:FreeRTOS\Source/tasks.c ****             {
4959:FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4960:FreeRTOS\Source/tasks.c ****             }
4961:FreeRTOS\Source/tasks.c ****         }
4962:FreeRTOS\Source/tasks.c ****         taskEXIT_CRITICAL();
4963:FreeRTOS\Source/tasks.c **** 
4964:FreeRTOS\Source/tasks.c ****         return xReturn;
4965:FreeRTOS\Source/tasks.c ****     }
4966:FreeRTOS\Source/tasks.c **** 
4967:FreeRTOS\Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4968:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4969:FreeRTOS\Source/tasks.c **** 
4970:FreeRTOS\Source/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 101


4971:FreeRTOS\Source/tasks.c **** 
4972:FreeRTOS\Source/tasks.c ****     BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify,
4973:FreeRTOS\Source/tasks.c ****                                           UBaseType_t uxIndexToNotify,
4974:FreeRTOS\Source/tasks.c ****                                           uint32_t ulValue,
4975:FreeRTOS\Source/tasks.c ****                                           eNotifyAction eAction,
4976:FreeRTOS\Source/tasks.c ****                                           uint32_t * pulPreviousNotificationValue,
4977:FreeRTOS\Source/tasks.c ****                                           BaseType_t * pxHigherPriorityTaskWoken )
4978:FreeRTOS\Source/tasks.c ****     {
4979:FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
4980:FreeRTOS\Source/tasks.c ****         uint8_t ucOriginalNotifyState;
4981:FreeRTOS\Source/tasks.c ****         BaseType_t xReturn = pdPASS;
4982:FreeRTOS\Source/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
4983:FreeRTOS\Source/tasks.c **** 
4984:FreeRTOS\Source/tasks.c ****         configASSERT( xTaskToNotify );
4985:FreeRTOS\Source/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
4986:FreeRTOS\Source/tasks.c **** 
4987:FreeRTOS\Source/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
4988:FreeRTOS\Source/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
4989:FreeRTOS\Source/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
4990:FreeRTOS\Source/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
4991:FreeRTOS\Source/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4992:FreeRTOS\Source/tasks.c ****          * is defined in FreeRTOSConfig.h then
4993:FreeRTOS\Source/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4994:FreeRTOS\Source/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
4995:FreeRTOS\Source/tasks.c ****          * been assigned a priority above the configured maximum system call
4996:FreeRTOS\Source/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
4997:FreeRTOS\Source/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
4998:FreeRTOS\Source/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
4999:FreeRTOS\Source/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
5000:FreeRTOS\Source/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
5001:FreeRTOS\Source/tasks.c ****          * provided on the following link:
5002:FreeRTOS\Source/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
5003:FreeRTOS\Source/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
5004:FreeRTOS\Source/tasks.c **** 
5005:FreeRTOS\Source/tasks.c ****         pxTCB = xTaskToNotify;
5006:FreeRTOS\Source/tasks.c **** 
5007:FreeRTOS\Source/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
5008:FreeRTOS\Source/tasks.c ****         {
5009:FreeRTOS\Source/tasks.c ****             if( pulPreviousNotificationValue != NULL )
5010:FreeRTOS\Source/tasks.c ****             {
5011:FreeRTOS\Source/tasks.c ****                 *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
5012:FreeRTOS\Source/tasks.c ****             }
5013:FreeRTOS\Source/tasks.c **** 
5014:FreeRTOS\Source/tasks.c ****             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
5015:FreeRTOS\Source/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
5016:FreeRTOS\Source/tasks.c **** 
5017:FreeRTOS\Source/tasks.c ****             switch( eAction )
5018:FreeRTOS\Source/tasks.c ****             {
5019:FreeRTOS\Source/tasks.c ****                 case eSetBits:
5020:FreeRTOS\Source/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
5021:FreeRTOS\Source/tasks.c ****                     break;
5022:FreeRTOS\Source/tasks.c **** 
5023:FreeRTOS\Source/tasks.c ****                 case eIncrement:
5024:FreeRTOS\Source/tasks.c ****                     ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
5025:FreeRTOS\Source/tasks.c ****                     break;
5026:FreeRTOS\Source/tasks.c **** 
5027:FreeRTOS\Source/tasks.c ****                 case eSetValueWithOverwrite:
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 102


5028:FreeRTOS\Source/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
5029:FreeRTOS\Source/tasks.c ****                     break;
5030:FreeRTOS\Source/tasks.c **** 
5031:FreeRTOS\Source/tasks.c ****                 case eSetValueWithoutOverwrite:
5032:FreeRTOS\Source/tasks.c **** 
5033:FreeRTOS\Source/tasks.c ****                     if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
5034:FreeRTOS\Source/tasks.c ****                     {
5035:FreeRTOS\Source/tasks.c ****                         pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
5036:FreeRTOS\Source/tasks.c ****                     }
5037:FreeRTOS\Source/tasks.c ****                     else
5038:FreeRTOS\Source/tasks.c ****                     {
5039:FreeRTOS\Source/tasks.c ****                         /* The value could not be written to the task. */
5040:FreeRTOS\Source/tasks.c ****                         xReturn = pdFAIL;
5041:FreeRTOS\Source/tasks.c ****                     }
5042:FreeRTOS\Source/tasks.c **** 
5043:FreeRTOS\Source/tasks.c ****                     break;
5044:FreeRTOS\Source/tasks.c **** 
5045:FreeRTOS\Source/tasks.c ****                 case eNoAction:
5046:FreeRTOS\Source/tasks.c **** 
5047:FreeRTOS\Source/tasks.c ****                     /* The task is being notified without its notify value being
5048:FreeRTOS\Source/tasks.c ****                      * updated. */
5049:FreeRTOS\Source/tasks.c ****                     break;
5050:FreeRTOS\Source/tasks.c **** 
5051:FreeRTOS\Source/tasks.c ****                 default:
5052:FreeRTOS\Source/tasks.c **** 
5053:FreeRTOS\Source/tasks.c ****                     /* Should not get here if all enums are handled.
5054:FreeRTOS\Source/tasks.c ****                      * Artificially force an assert by testing a value the
5055:FreeRTOS\Source/tasks.c ****                      * compiler can't assume is const. */
5056:FreeRTOS\Source/tasks.c ****                     configASSERT( xTickCount == ( TickType_t ) 0 );
5057:FreeRTOS\Source/tasks.c ****                     break;
5058:FreeRTOS\Source/tasks.c ****             }
5059:FreeRTOS\Source/tasks.c **** 
5060:FreeRTOS\Source/tasks.c ****             traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );
5061:FreeRTOS\Source/tasks.c **** 
5062:FreeRTOS\Source/tasks.c ****             /* If the task is in the blocked state specifically to wait for a
5063:FreeRTOS\Source/tasks.c ****              * notification then unblock it now. */
5064:FreeRTOS\Source/tasks.c ****             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
5065:FreeRTOS\Source/tasks.c ****             {
5066:FreeRTOS\Source/tasks.c ****                 /* The task should not have been on an event list. */
5067:FreeRTOS\Source/tasks.c ****                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
5068:FreeRTOS\Source/tasks.c **** 
5069:FreeRTOS\Source/tasks.c ****                 if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
5070:FreeRTOS\Source/tasks.c ****                 {
5071:FreeRTOS\Source/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
5072:FreeRTOS\Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
5073:FreeRTOS\Source/tasks.c ****                 }
5074:FreeRTOS\Source/tasks.c ****                 else
5075:FreeRTOS\Source/tasks.c ****                 {
5076:FreeRTOS\Source/tasks.c ****                     /* The delayed and ready lists cannot be accessed, so hold
5077:FreeRTOS\Source/tasks.c ****                      * this task pending until the scheduler is resumed. */
5078:FreeRTOS\Source/tasks.c ****                     listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
5079:FreeRTOS\Source/tasks.c ****                 }
5080:FreeRTOS\Source/tasks.c **** 
5081:FreeRTOS\Source/tasks.c ****                 if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
5082:FreeRTOS\Source/tasks.c ****                 {
5083:FreeRTOS\Source/tasks.c ****                     /* The notified task has a priority above the currently
5084:FreeRTOS\Source/tasks.c ****                      * executing task so a yield is required. */
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 103


5085:FreeRTOS\Source/tasks.c ****                     if( pxHigherPriorityTaskWoken != NULL )
5086:FreeRTOS\Source/tasks.c ****                     {
5087:FreeRTOS\Source/tasks.c ****                         *pxHigherPriorityTaskWoken = pdTRUE;
5088:FreeRTOS\Source/tasks.c ****                     }
5089:FreeRTOS\Source/tasks.c **** 
5090:FreeRTOS\Source/tasks.c ****                     /* Mark that a yield is pending in case the user is not
5091:FreeRTOS\Source/tasks.c ****                      * using the "xHigherPriorityTaskWoken" parameter to an ISR
5092:FreeRTOS\Source/tasks.c ****                      * safe FreeRTOS function. */
5093:FreeRTOS\Source/tasks.c ****                     xYieldPending = pdTRUE;
5094:FreeRTOS\Source/tasks.c ****                 }
5095:FreeRTOS\Source/tasks.c ****                 else
5096:FreeRTOS\Source/tasks.c ****                 {
5097:FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
5098:FreeRTOS\Source/tasks.c ****                 }
5099:FreeRTOS\Source/tasks.c ****             }
5100:FreeRTOS\Source/tasks.c ****         }
5101:FreeRTOS\Source/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5102:FreeRTOS\Source/tasks.c **** 
5103:FreeRTOS\Source/tasks.c ****         return xReturn;
5104:FreeRTOS\Source/tasks.c ****     }
5105:FreeRTOS\Source/tasks.c **** 
5106:FreeRTOS\Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5107:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
5108:FreeRTOS\Source/tasks.c **** 
5109:FreeRTOS\Source/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
5110:FreeRTOS\Source/tasks.c **** 
5111:FreeRTOS\Source/tasks.c ****     void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
5112:FreeRTOS\Source/tasks.c ****                                         UBaseType_t uxIndexToNotify,
5113:FreeRTOS\Source/tasks.c ****                                         BaseType_t * pxHigherPriorityTaskWoken )
5114:FreeRTOS\Source/tasks.c ****     {
5115:FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
5116:FreeRTOS\Source/tasks.c ****         uint8_t ucOriginalNotifyState;
5117:FreeRTOS\Source/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
5118:FreeRTOS\Source/tasks.c **** 
5119:FreeRTOS\Source/tasks.c ****         configASSERT( xTaskToNotify );
5120:FreeRTOS\Source/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
5121:FreeRTOS\Source/tasks.c **** 
5122:FreeRTOS\Source/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
5123:FreeRTOS\Source/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
5124:FreeRTOS\Source/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
5125:FreeRTOS\Source/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
5126:FreeRTOS\Source/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
5127:FreeRTOS\Source/tasks.c ****          * is defined in FreeRTOSConfig.h then
5128:FreeRTOS\Source/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
5129:FreeRTOS\Source/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
5130:FreeRTOS\Source/tasks.c ****          * been assigned a priority above the configured maximum system call
5131:FreeRTOS\Source/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
5132:FreeRTOS\Source/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
5133:FreeRTOS\Source/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
5134:FreeRTOS\Source/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
5135:FreeRTOS\Source/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
5136:FreeRTOS\Source/tasks.c ****          * provided on the following link:
5137:FreeRTOS\Source/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
5138:FreeRTOS\Source/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
5139:FreeRTOS\Source/tasks.c **** 
5140:FreeRTOS\Source/tasks.c ****         pxTCB = xTaskToNotify;
5141:FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 104


5142:FreeRTOS\Source/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
5143:FreeRTOS\Source/tasks.c ****         {
5144:FreeRTOS\Source/tasks.c ****             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
5145:FreeRTOS\Source/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
5146:FreeRTOS\Source/tasks.c **** 
5147:FreeRTOS\Source/tasks.c ****             /* 'Giving' is equivalent to incrementing a count in a counting
5148:FreeRTOS\Source/tasks.c ****              * semaphore. */
5149:FreeRTOS\Source/tasks.c ****             ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
5150:FreeRTOS\Source/tasks.c **** 
5151:FreeRTOS\Source/tasks.c ****             traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );
5152:FreeRTOS\Source/tasks.c **** 
5153:FreeRTOS\Source/tasks.c ****             /* If the task is in the blocked state specifically to wait for a
5154:FreeRTOS\Source/tasks.c ****              * notification then unblock it now. */
5155:FreeRTOS\Source/tasks.c ****             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
5156:FreeRTOS\Source/tasks.c ****             {
5157:FreeRTOS\Source/tasks.c ****                 /* The task should not have been on an event list. */
5158:FreeRTOS\Source/tasks.c ****                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
5159:FreeRTOS\Source/tasks.c **** 
5160:FreeRTOS\Source/tasks.c ****                 if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
5161:FreeRTOS\Source/tasks.c ****                 {
5162:FreeRTOS\Source/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
5163:FreeRTOS\Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
5164:FreeRTOS\Source/tasks.c ****                 }
5165:FreeRTOS\Source/tasks.c ****                 else
5166:FreeRTOS\Source/tasks.c ****                 {
5167:FreeRTOS\Source/tasks.c ****                     /* The delayed and ready lists cannot be accessed, so hold
5168:FreeRTOS\Source/tasks.c ****                      * this task pending until the scheduler is resumed. */
5169:FreeRTOS\Source/tasks.c ****                     listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
5170:FreeRTOS\Source/tasks.c ****                 }
5171:FreeRTOS\Source/tasks.c **** 
5172:FreeRTOS\Source/tasks.c ****                 if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
5173:FreeRTOS\Source/tasks.c ****                 {
5174:FreeRTOS\Source/tasks.c ****                     /* The notified task has a priority above the currently
5175:FreeRTOS\Source/tasks.c ****                      * executing task so a yield is required. */
5176:FreeRTOS\Source/tasks.c ****                     if( pxHigherPriorityTaskWoken != NULL )
5177:FreeRTOS\Source/tasks.c ****                     {
5178:FreeRTOS\Source/tasks.c ****                         *pxHigherPriorityTaskWoken = pdTRUE;
5179:FreeRTOS\Source/tasks.c ****                     }
5180:FreeRTOS\Source/tasks.c **** 
5181:FreeRTOS\Source/tasks.c ****                     /* Mark that a yield is pending in case the user is not
5182:FreeRTOS\Source/tasks.c ****                      * using the "xHigherPriorityTaskWoken" parameter in an ISR
5183:FreeRTOS\Source/tasks.c ****                      * safe FreeRTOS function. */
5184:FreeRTOS\Source/tasks.c ****                     xYieldPending = pdTRUE;
5185:FreeRTOS\Source/tasks.c ****                 }
5186:FreeRTOS\Source/tasks.c ****                 else
5187:FreeRTOS\Source/tasks.c ****                 {
5188:FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
5189:FreeRTOS\Source/tasks.c ****                 }
5190:FreeRTOS\Source/tasks.c ****             }
5191:FreeRTOS\Source/tasks.c ****         }
5192:FreeRTOS\Source/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5193:FreeRTOS\Source/tasks.c ****     }
5194:FreeRTOS\Source/tasks.c **** 
5195:FreeRTOS\Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5196:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
5197:FreeRTOS\Source/tasks.c **** 
5198:FreeRTOS\Source/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 105


5199:FreeRTOS\Source/tasks.c **** 
5200:FreeRTOS\Source/tasks.c ****     BaseType_t xTaskGenericNotifyStateClear( TaskHandle_t xTask,
5201:FreeRTOS\Source/tasks.c ****                                              UBaseType_t uxIndexToClear )
5202:FreeRTOS\Source/tasks.c ****     {
5203:FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
5204:FreeRTOS\Source/tasks.c ****         BaseType_t xReturn;
5205:FreeRTOS\Source/tasks.c **** 
5206:FreeRTOS\Source/tasks.c ****         configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );
5207:FreeRTOS\Source/tasks.c **** 
5208:FreeRTOS\Source/tasks.c ****         /* If null is passed in here then it is the calling task that is having
5209:FreeRTOS\Source/tasks.c ****          * its notification state cleared. */
5210:FreeRTOS\Source/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
5211:FreeRTOS\Source/tasks.c **** 
5212:FreeRTOS\Source/tasks.c ****         taskENTER_CRITICAL();
5213:FreeRTOS\Source/tasks.c ****         {
5214:FreeRTOS\Source/tasks.c ****             if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
5215:FreeRTOS\Source/tasks.c ****             {
5216:FreeRTOS\Source/tasks.c ****                 pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
5217:FreeRTOS\Source/tasks.c ****                 xReturn = pdPASS;
5218:FreeRTOS\Source/tasks.c ****             }
5219:FreeRTOS\Source/tasks.c ****             else
5220:FreeRTOS\Source/tasks.c ****             {
5221:FreeRTOS\Source/tasks.c ****                 xReturn = pdFAIL;
5222:FreeRTOS\Source/tasks.c ****             }
5223:FreeRTOS\Source/tasks.c ****         }
5224:FreeRTOS\Source/tasks.c ****         taskEXIT_CRITICAL();
5225:FreeRTOS\Source/tasks.c **** 
5226:FreeRTOS\Source/tasks.c ****         return xReturn;
5227:FreeRTOS\Source/tasks.c ****     }
5228:FreeRTOS\Source/tasks.c **** 
5229:FreeRTOS\Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5230:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
5231:FreeRTOS\Source/tasks.c **** 
5232:FreeRTOS\Source/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
5233:FreeRTOS\Source/tasks.c **** 
5234:FreeRTOS\Source/tasks.c ****     uint32_t ulTaskGenericNotifyValueClear( TaskHandle_t xTask,
5235:FreeRTOS\Source/tasks.c ****                                             UBaseType_t uxIndexToClear,
5236:FreeRTOS\Source/tasks.c ****                                             uint32_t ulBitsToClear )
5237:FreeRTOS\Source/tasks.c ****     {
5238:FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
5239:FreeRTOS\Source/tasks.c ****         uint32_t ulReturn;
5240:FreeRTOS\Source/tasks.c **** 
5241:FreeRTOS\Source/tasks.c ****         /* If null is passed in here then it is the calling task that is having
5242:FreeRTOS\Source/tasks.c ****          * its notification state cleared. */
5243:FreeRTOS\Source/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
5244:FreeRTOS\Source/tasks.c **** 
5245:FreeRTOS\Source/tasks.c ****         taskENTER_CRITICAL();
5246:FreeRTOS\Source/tasks.c ****         {
5247:FreeRTOS\Source/tasks.c ****             /* Return the notification as it was before the bits were cleared,
5248:FreeRTOS\Source/tasks.c ****              * then clear the bit mask. */
5249:FreeRTOS\Source/tasks.c ****             ulReturn = pxTCB->ulNotifiedValue[ uxIndexToClear ];
5250:FreeRTOS\Source/tasks.c ****             pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
5251:FreeRTOS\Source/tasks.c ****         }
5252:FreeRTOS\Source/tasks.c ****         taskEXIT_CRITICAL();
5253:FreeRTOS\Source/tasks.c **** 
5254:FreeRTOS\Source/tasks.c ****         return ulReturn;
5255:FreeRTOS\Source/tasks.c ****     }
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 106


5256:FreeRTOS\Source/tasks.c **** 
5257:FreeRTOS\Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5258:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
5259:FreeRTOS\Source/tasks.c **** 
5260:FreeRTOS\Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
5261:FreeRTOS\Source/tasks.c **** 
5262:FreeRTOS\Source/tasks.c ****     configRUN_TIME_COUNTER_TYPE ulTaskGetIdleRunTimeCounter( void )
5263:FreeRTOS\Source/tasks.c ****     {
5264:FreeRTOS\Source/tasks.c ****         return xIdleTaskHandle->ulRunTimeCounter;
5265:FreeRTOS\Source/tasks.c ****     }
5266:FreeRTOS\Source/tasks.c **** 
5267:FreeRTOS\Source/tasks.c **** #endif
5268:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
5269:FreeRTOS\Source/tasks.c **** 
5270:FreeRTOS\Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
5271:FreeRTOS\Source/tasks.c **** 
5272:FreeRTOS\Source/tasks.c ****     configRUN_TIME_COUNTER_TYPE ulTaskGetIdleRunTimePercent( void )
5273:FreeRTOS\Source/tasks.c ****     {
5274:FreeRTOS\Source/tasks.c ****         configRUN_TIME_COUNTER_TYPE ulTotalTime, ulReturn;
5275:FreeRTOS\Source/tasks.c **** 
5276:FreeRTOS\Source/tasks.c ****         ulTotalTime = portGET_RUN_TIME_COUNTER_VALUE();
5277:FreeRTOS\Source/tasks.c **** 
5278:FreeRTOS\Source/tasks.c ****         /* For percentage calculations. */
5279:FreeRTOS\Source/tasks.c ****         ulTotalTime /= ( configRUN_TIME_COUNTER_TYPE ) 100;
5280:FreeRTOS\Source/tasks.c **** 
5281:FreeRTOS\Source/tasks.c ****         /* Avoid divide by zero errors. */
5282:FreeRTOS\Source/tasks.c ****         if( ulTotalTime > ( configRUN_TIME_COUNTER_TYPE ) 0 )
5283:FreeRTOS\Source/tasks.c ****         {
5284:FreeRTOS\Source/tasks.c ****             ulReturn = xIdleTaskHandle->ulRunTimeCounter / ulTotalTime;
5285:FreeRTOS\Source/tasks.c ****         }
5286:FreeRTOS\Source/tasks.c ****         else
5287:FreeRTOS\Source/tasks.c ****         {
5288:FreeRTOS\Source/tasks.c ****             ulReturn = 0;
5289:FreeRTOS\Source/tasks.c ****         }
5290:FreeRTOS\Source/tasks.c **** 
5291:FreeRTOS\Source/tasks.c ****         return ulReturn;
5292:FreeRTOS\Source/tasks.c ****     }
5293:FreeRTOS\Source/tasks.c **** 
5294:FreeRTOS\Source/tasks.c **** #endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) 
5295:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
5296:FreeRTOS\Source/tasks.c **** 
5297:FreeRTOS\Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
5298:FreeRTOS\Source/tasks.c ****                                             const BaseType_t xCanBlockIndefinitely )
5299:FreeRTOS\Source/tasks.c **** {
 657              		.loc 1 5299 0
 658              		.cfi_startproc
 659              		@ args = 0, pretend = 0, frame = 0
 660              		@ frame_needed = 0, uses_anonymous_args = 0
 661              	.LVL66:
 662 0000 70B5     		push	{r4, r5, r6, lr}
 663              		.cfi_def_cfa_offset 16
 664              		.cfi_offset 4, -16
 665              		.cfi_offset 5, -12
 666              		.cfi_offset 6, -8
 667              		.cfi_offset 14, -4
 668 0002 0400     		movs	r4, r0
 669 0004 0D00     		movs	r5, r1
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 107


5300:FreeRTOS\Source/tasks.c ****     TickType_t xTimeToWake;
5301:FreeRTOS\Source/tasks.c ****     const TickType_t xConstTickCount = xTickCount;
 670              		.loc 1 5301 0
 671 0006 1C4B     		ldr	r3, .L51
 672 0008 DE6E     		ldr	r6, [r3, #108]
 673              	.LVL67:
5302:FreeRTOS\Source/tasks.c **** 
5303:FreeRTOS\Source/tasks.c ****     #if ( INCLUDE_xTaskAbortDelay == 1 )
5304:FreeRTOS\Source/tasks.c ****     {
5305:FreeRTOS\Source/tasks.c ****         /* About to enter a delayed list, so ensure the ucDelayAborted flag is
5306:FreeRTOS\Source/tasks.c ****          * reset to pdFALSE so it can be detected as having been set to pdTRUE
5307:FreeRTOS\Source/tasks.c ****          * when the task leaves the Blocked state. */
5308:FreeRTOS\Source/tasks.c ****         pxCurrentTCB->ucDelayAborted = pdFALSE;
5309:FreeRTOS\Source/tasks.c ****     }
5310:FreeRTOS\Source/tasks.c ****     #endif
5311:FreeRTOS\Source/tasks.c **** 
5312:FreeRTOS\Source/tasks.c ****     /* Remove the task from the ready list before adding it to the blocked list
5313:FreeRTOS\Source/tasks.c ****      * as the same list item is used for both lists. */
5314:FreeRTOS\Source/tasks.c ****     if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 674              		.loc 1 5314 0
 675 000a 986D     		ldr	r0, [r3, #88]
 676              	.LVL68:
 677 000c 0430     		adds	r0, r0, #4
 678 000e FFF7FEFF 		bl	uxListRemove
 679              	.LVL69:
5315:FreeRTOS\Source/tasks.c ****     {
5316:FreeRTOS\Source/tasks.c ****         /* The current task must be in a ready list, so there is no need to
5317:FreeRTOS\Source/tasks.c ****          * check, and the port reset macro can be called directly. */
5318:FreeRTOS\Source/tasks.c ****         portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCu
5319:FreeRTOS\Source/tasks.c ****     }
5320:FreeRTOS\Source/tasks.c ****     else
5321:FreeRTOS\Source/tasks.c ****     {
5322:FreeRTOS\Source/tasks.c ****         mtCOVERAGE_TEST_MARKER();
5323:FreeRTOS\Source/tasks.c ****     }
5324:FreeRTOS\Source/tasks.c **** 
5325:FreeRTOS\Source/tasks.c ****     #if ( INCLUDE_vTaskSuspend == 1 )
5326:FreeRTOS\Source/tasks.c ****     {
5327:FreeRTOS\Source/tasks.c ****         if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 680              		.loc 1 5327 0
 681 0012 631C     		adds	r3, r4, #1
 682 0014 16D1     		bne	.L48
 683              		.loc 1 5327 0 is_stmt 0 discriminator 1
 684 0016 002D     		cmp	r5, #0
 685 0018 14D0     		beq	.L48
 686              	.LBB4:
5328:FreeRTOS\Source/tasks.c ****         {
5329:FreeRTOS\Source/tasks.c ****             /* Add the task to the suspended task list instead of a delayed task
5330:FreeRTOS\Source/tasks.c ****              * list to ensure it is not woken by a timing event.  It will block
5331:FreeRTOS\Source/tasks.c ****              * indefinitely. */
5332:FreeRTOS\Source/tasks.c ****             listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 687              		.loc 1 5332 0 is_stmt 1
 688 001a 184A     		ldr	r2, .L51+4
 689 001c 5168     		ldr	r1, [r2, #4]
 690              	.LVL70:
 691 001e 164B     		ldr	r3, .L51
 692 0020 986D     		ldr	r0, [r3, #88]
 693 0022 8160     		str	r1, [r0, #8]
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 108


 694 0024 986D     		ldr	r0, [r3, #88]
 695 0026 8C68     		ldr	r4, [r1, #8]
 696              	.LVL71:
 697 0028 C460     		str	r4, [r0, #12]
 698 002a 8C68     		ldr	r4, [r1, #8]
 699 002c 986D     		ldr	r0, [r3, #88]
 700 002e 0430     		adds	r0, r0, #4
 701 0030 6060     		str	r0, [r4, #4]
 702 0032 986D     		ldr	r0, [r3, #88]
 703 0034 0430     		adds	r0, r0, #4
 704 0036 8860     		str	r0, [r1, #8]
 705 0038 9B6D     		ldr	r3, [r3, #88]
 706 003a 5A61     		str	r2, [r3, #20]
 707 003c 1368     		ldr	r3, [r2]
 708 003e 0133     		adds	r3, r3, #1
 709 0040 1360     		str	r3, [r2]
 710              	.LBE4:
 711 0042 18E0     		b	.L47
 712              	.LVL72:
 713              	.L48:
5333:FreeRTOS\Source/tasks.c ****         }
5334:FreeRTOS\Source/tasks.c ****         else
5335:FreeRTOS\Source/tasks.c ****         {
5336:FreeRTOS\Source/tasks.c ****             /* Calculate the time at which the task should be woken if the event
5337:FreeRTOS\Source/tasks.c ****              * does not occur.  This may overflow but this doesn't matter, the
5338:FreeRTOS\Source/tasks.c ****              * kernel will manage it correctly. */
5339:FreeRTOS\Source/tasks.c ****             xTimeToWake = xConstTickCount + xTicksToWait;
 714              		.loc 1 5339 0
 715 0044 3419     		adds	r4, r6, r4
 716              	.LVL73:
5340:FreeRTOS\Source/tasks.c **** 
5341:FreeRTOS\Source/tasks.c ****             /* The list item will be inserted in wake time order. */
5342:FreeRTOS\Source/tasks.c ****             listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 717              		.loc 1 5342 0
 718 0046 0C4B     		ldr	r3, .L51
 719 0048 9B6D     		ldr	r3, [r3, #88]
 720 004a 5C60     		str	r4, [r3, #4]
5343:FreeRTOS\Source/tasks.c **** 
5344:FreeRTOS\Source/tasks.c ****             if( xTimeToWake < xConstTickCount )
 721              		.loc 1 5344 0
 722 004c A642     		cmp	r6, r4
 723 004e 06D9     		bls	.L50
5345:FreeRTOS\Source/tasks.c ****             {
5346:FreeRTOS\Source/tasks.c ****                 /* Wake time has overflowed.  Place this item in the overflow
5347:FreeRTOS\Source/tasks.c ****                  * list. */
5348:FreeRTOS\Source/tasks.c ****                 vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 724              		.loc 1 5348 0
 725 0050 094B     		ldr	r3, .L51
 726 0052 186D     		ldr	r0, [r3, #80]
 727 0054 996D     		ldr	r1, [r3, #88]
 728 0056 0431     		adds	r1, r1, #4
 729 0058 FFF7FEFF 		bl	vListInsert
 730              	.LVL74:
 731 005c 0BE0     		b	.L47
 732              	.L50:
5349:FreeRTOS\Source/tasks.c ****             }
5350:FreeRTOS\Source/tasks.c ****             else
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 109


5351:FreeRTOS\Source/tasks.c ****             {
5352:FreeRTOS\Source/tasks.c ****                 /* The wake time has not overflowed, so the current block list
5353:FreeRTOS\Source/tasks.c ****                  * is used. */
5354:FreeRTOS\Source/tasks.c ****                 vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 733              		.loc 1 5354 0
 734 005e 074D     		ldr	r5, .L51+4
 735              	.LVL75:
 736 0060 A86A     		ldr	r0, [r5, #40]
 737 0062 054B     		ldr	r3, .L51
 738 0064 996D     		ldr	r1, [r3, #88]
 739 0066 0431     		adds	r1, r1, #4
 740 0068 FFF7FEFF 		bl	vListInsert
 741              	.LVL76:
5355:FreeRTOS\Source/tasks.c **** 
5356:FreeRTOS\Source/tasks.c ****                 /* If the task entering the blocked state was placed at the
5357:FreeRTOS\Source/tasks.c ****                  * head of the list of blocked tasks then xNextTaskUnblockTime
5358:FreeRTOS\Source/tasks.c ****                  * needs to be updated too. */
5359:FreeRTOS\Source/tasks.c ****                 if( xTimeToWake < xNextTaskUnblockTime )
 742              		.loc 1 5359 0
 743 006c EB6A     		ldr	r3, [r5, #44]
 744 006e 9C42     		cmp	r4, r3
 745 0070 01D2     		bcs	.L47
5360:FreeRTOS\Source/tasks.c ****                 {
5361:FreeRTOS\Source/tasks.c ****                     xNextTaskUnblockTime = xTimeToWake;
 746              		.loc 1 5361 0
 747 0072 024B     		ldr	r3, .L51+4
 748 0074 DC62     		str	r4, [r3, #44]
 749              	.LVL77:
 750              	.L47:
5362:FreeRTOS\Source/tasks.c ****                 }
5363:FreeRTOS\Source/tasks.c ****                 else
5364:FreeRTOS\Source/tasks.c ****                 {
5365:FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
5366:FreeRTOS\Source/tasks.c ****                 }
5367:FreeRTOS\Source/tasks.c ****             }
5368:FreeRTOS\Source/tasks.c ****         }
5369:FreeRTOS\Source/tasks.c ****     }
5370:FreeRTOS\Source/tasks.c ****     #else /* INCLUDE_vTaskSuspend */
5371:FreeRTOS\Source/tasks.c ****     {
5372:FreeRTOS\Source/tasks.c ****         /* Calculate the time at which the task should be woken if the event
5373:FreeRTOS\Source/tasks.c ****          * does not occur.  This may overflow but this doesn't matter, the kernel
5374:FreeRTOS\Source/tasks.c ****          * will manage it correctly. */
5375:FreeRTOS\Source/tasks.c ****         xTimeToWake = xConstTickCount + xTicksToWait;
5376:FreeRTOS\Source/tasks.c **** 
5377:FreeRTOS\Source/tasks.c ****         /* The list item will be inserted in wake time order. */
5378:FreeRTOS\Source/tasks.c ****         listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5379:FreeRTOS\Source/tasks.c **** 
5380:FreeRTOS\Source/tasks.c ****         if( xTimeToWake < xConstTickCount )
5381:FreeRTOS\Source/tasks.c ****         {
5382:FreeRTOS\Source/tasks.c ****             /* Wake time has overflowed.  Place this item in the overflow list. */
5383:FreeRTOS\Source/tasks.c ****             vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5384:FreeRTOS\Source/tasks.c ****         }
5385:FreeRTOS\Source/tasks.c ****         else
5386:FreeRTOS\Source/tasks.c ****         {
5387:FreeRTOS\Source/tasks.c ****             /* The wake time has not overflowed, so the current block list is used. */
5388:FreeRTOS\Source/tasks.c ****             vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5389:FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 110


5390:FreeRTOS\Source/tasks.c ****             /* If the task entering the blocked state was placed at the head of the
5391:FreeRTOS\Source/tasks.c ****              * list of blocked tasks then xNextTaskUnblockTime needs to be updated
5392:FreeRTOS\Source/tasks.c ****              * too. */
5393:FreeRTOS\Source/tasks.c ****             if( xTimeToWake < xNextTaskUnblockTime )
5394:FreeRTOS\Source/tasks.c ****             {
5395:FreeRTOS\Source/tasks.c ****                 xNextTaskUnblockTime = xTimeToWake;
5396:FreeRTOS\Source/tasks.c ****             }
5397:FreeRTOS\Source/tasks.c ****             else
5398:FreeRTOS\Source/tasks.c ****             {
5399:FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
5400:FreeRTOS\Source/tasks.c ****             }
5401:FreeRTOS\Source/tasks.c ****         }
5402:FreeRTOS\Source/tasks.c **** 
5403:FreeRTOS\Source/tasks.c ****         /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5404:FreeRTOS\Source/tasks.c ****         ( void ) xCanBlockIndefinitely;
5405:FreeRTOS\Source/tasks.c ****     }
5406:FreeRTOS\Source/tasks.c ****     #endif /* INCLUDE_vTaskSuspend */
5407:FreeRTOS\Source/tasks.c **** }
 751              		.loc 1 5407 0
 752              		@ sp needed
 753              	.LVL78:
 754 0076 70BD     		pop	{r4, r5, r6, pc}
 755              	.L52:
 756              		.align	2
 757              	.L51:
 758 0078 80000000 		.word	.LANCHOR1
 759 007c 00000000 		.word	.LANCHOR0
 760              		.cfi_endproc
 761              	.LFE86:
 762              		.size	prvAddCurrentTaskToDelayedList, .-prvAddCurrentTaskToDelayedList
 763              		.section	.text.xTaskCreate,"ax",%progbits
 764              		.align	2
 765              		.global	xTaskCreate
 766              		.code	16
 767              		.thumb_func
 768              		.type	xTaskCreate, %function
 769              	xTaskCreate:
 770              	.LFB34:
 727:FreeRTOS\Source/tasks.c ****         TCB_t * pxNewTCB;
 771              		.loc 1 727 0
 772              		.cfi_startproc
 773              		@ args = 8, pretend = 0, frame = 8
 774              		@ frame_needed = 0, uses_anonymous_args = 0
 775              	.LVL79:
 776 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 777              		.cfi_def_cfa_offset 20
 778              		.cfi_offset 4, -20
 779              		.cfi_offset 5, -16
 780              		.cfi_offset 6, -12
 781              		.cfi_offset 7, -8
 782              		.cfi_offset 14, -4
 783 0002 87B0     		sub	sp, sp, #28
 784              		.cfi_def_cfa_offset 48
 785 0004 0490     		str	r0, [sp, #16]
 786 0006 0591     		str	r1, [sp, #20]
 787 0008 1400     		movs	r4, r2
 788 000a 1F00     		movs	r7, r3
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 111


 789              	.LBB5:
 763:FreeRTOS\Source/tasks.c **** 
 790              		.loc 1 763 0
 791 000c 9000     		lsls	r0, r2, #2
 792              	.LVL80:
 793 000e FFF7FEFF 		bl	pvPortMalloc
 794              	.LVL81:
 795 0012 061E     		subs	r6, r0, #0
 796              	.LVL82:
 765:FreeRTOS\Source/tasks.c ****             {
 797              		.loc 1 765 0
 798 0014 0ED0     		beq	.L57
 768:FreeRTOS\Source/tasks.c **** 
 799              		.loc 1 768 0
 800 0016 5020     		movs	r0, #80
 801              	.LVL83:
 802 0018 FFF7FEFF 		bl	pvPortMalloc
 803              	.LVL84:
 804 001c 051E     		subs	r5, r0, #0
 805              	.LVL85:
 770:FreeRTOS\Source/tasks.c ****                 {
 806              		.loc 1 770 0
 807 001e 05D0     		beq	.L55
 772:FreeRTOS\Source/tasks.c **** 
 808              		.loc 1 772 0
 809 0020 5022     		movs	r2, #80
 810 0022 0021     		movs	r1, #0
 811 0024 FFF7FEFF 		bl	memset
 812              	.LVL86:
 775:FreeRTOS\Source/tasks.c ****                 }
 813              		.loc 1 775 0
 814 0028 2E63     		str	r6, [r5, #48]
 815 002a 04E0     		b	.L54
 816              	.LVL87:
 817              	.L55:
 781:FreeRTOS\Source/tasks.c ****                 }
 818              		.loc 1 781 0
 819 002c 3000     		movs	r0, r6
 820              	.LVL88:
 821 002e FFF7FEFF 		bl	vPortFree
 822              	.LVL89:
 823 0032 00E0     		b	.L54
 824              	.LVL90:
 825              	.L57:
 786:FreeRTOS\Source/tasks.c ****             }
 826              		.loc 1 786 0
 827 0034 0025     		movs	r5, #0
 828              	.LVL91:
 829              	.L54:
 830              	.LBE5:
 791:FreeRTOS\Source/tasks.c ****         {
 831              		.loc 1 791 0
 832 0036 002D     		cmp	r5, #0
 833 0038 11D0     		beq	.L58
 801:FreeRTOS\Source/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
 834              		.loc 1 801 0
 835 003a 0023     		movs	r3, #0
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 112


 836 003c 0393     		str	r3, [sp, #12]
 837 003e 0295     		str	r5, [sp, #8]
 838 0040 0D9B     		ldr	r3, [sp, #52]
 839 0042 0193     		str	r3, [sp, #4]
 840 0044 0C9B     		ldr	r3, [sp, #48]
 841 0046 0093     		str	r3, [sp]
 842 0048 3B00     		movs	r3, r7
 843 004a 2200     		movs	r2, r4
 844 004c 0599     		ldr	r1, [sp, #20]
 845 004e 0498     		ldr	r0, [sp, #16]
 846 0050 FFF7FEFF 		bl	prvInitialiseNewTask
 847              	.LVL92:
 802:FreeRTOS\Source/tasks.c ****             xReturn = pdPASS;
 848              		.loc 1 802 0
 849 0054 2800     		movs	r0, r5
 850 0056 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 851              	.LVL93:
 803:FreeRTOS\Source/tasks.c ****         }
 852              		.loc 1 803 0
 853 005a 0120     		movs	r0, #1
 854 005c 01E0     		b	.L56
 855              	.LVL94:
 856              	.L58:
 807:FreeRTOS\Source/tasks.c ****         }
 857              		.loc 1 807 0
 858 005e 0120     		movs	r0, #1
 859 0060 4042     		rsbs	r0, r0, #0
 860              	.L56:
 861              	.LVL95:
 811:FreeRTOS\Source/tasks.c **** 
 862              		.loc 1 811 0
 863 0062 07B0     		add	sp, sp, #28
 864              		@ sp needed
 865              	.LVL96:
 866              	.LVL97:
 867              	.LVL98:
 868 0064 F0BD     		pop	{r4, r5, r6, r7, pc}
 869              		.cfi_endproc
 870              	.LFE34:
 871              		.size	xTaskCreate, .-xTaskCreate
 872 0066 C046     		.section	.text.vTaskDelete,"ax",%progbits
 873              		.align	2
 874              		.global	vTaskDelete
 875              		.code	16
 876              		.thumb_func
 877              		.type	vTaskDelete, %function
 878              	vTaskDelete:
 879              	.LFB37:
1113:FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
 880              		.loc 1 1113 0
 881              		.cfi_startproc
 882              		@ args = 0, pretend = 0, frame = 0
 883              		@ frame_needed = 0, uses_anonymous_args = 0
 884              	.LVL99:
 885 0000 70B5     		push	{r4, r5, r6, lr}
 886              		.cfi_def_cfa_offset 16
 887              		.cfi_offset 4, -16
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 113


 888              		.cfi_offset 5, -12
 889              		.cfi_offset 6, -8
 890              		.cfi_offset 14, -4
 891 0002 0400     		movs	r4, r0
1116:FreeRTOS\Source/tasks.c ****         {
 892              		.loc 1 1116 0
 893 0004 FFF7FEFF 		bl	vPortEnterCritical
 894              	.LVL100:
1120:FreeRTOS\Source/tasks.c **** 
 895              		.loc 1 1120 0
 896 0008 002C     		cmp	r4, #0
 897 000a 01D1     		bne	.L60
1120:FreeRTOS\Source/tasks.c **** 
 898              		.loc 1 1120 0 is_stmt 0 discriminator 1
 899 000c 1B4B     		ldr	r3, .L66
 900 000e 9C6D     		ldr	r4, [r3, #88]
 901              	.LVL101:
 902              	.L60:
1123:FreeRTOS\Source/tasks.c ****             {
 903              		.loc 1 1123 0 is_stmt 1 discriminator 4
 904 0010 251D     		adds	r5, r4, #4
 905 0012 2800     		movs	r0, r5
 906 0014 FFF7FEFF 		bl	uxListRemove
 907              	.LVL102:
1133:FreeRTOS\Source/tasks.c ****             {
 908              		.loc 1 1133 0 discriminator 4
 909 0018 A36A     		ldr	r3, [r4, #40]
 910 001a 002B     		cmp	r3, #0
 911 001c 03D0     		beq	.L61
1135:FreeRTOS\Source/tasks.c ****             }
 912              		.loc 1 1135 0
 913 001e 2000     		movs	r0, r4
 914 0020 1830     		adds	r0, r0, #24
 915 0022 FFF7FEFF 		bl	uxListRemove
 916              	.LVL103:
 917              	.L61:
1146:FreeRTOS\Source/tasks.c **** 
 918              		.loc 1 1146 0
 919 0026 154B     		ldr	r3, .L66
 920 0028 1A6E     		ldr	r2, [r3, #96]
 921 002a 0132     		adds	r2, r2, #1
 922 002c 1A66     		str	r2, [r3, #96]
1148:FreeRTOS\Source/tasks.c ****             {
 923              		.loc 1 1148 0
 924 002e 9B6D     		ldr	r3, [r3, #88]
 925 0030 9C42     		cmp	r4, r3
 926 0032 09D1     		bne	.L62
1155:FreeRTOS\Source/tasks.c **** 
 927              		.loc 1 1155 0
 928 0034 114E     		ldr	r6, .L66
 929 0036 3000     		movs	r0, r6
 930 0038 3C30     		adds	r0, r0, #60
 931 003a 2900     		movs	r1, r5
 932 003c FFF7FEFF 		bl	vListInsertEnd
 933              	.LVL104:
1160:FreeRTOS\Source/tasks.c **** 
 934              		.loc 1 1160 0
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 114


 935 0040 B36E     		ldr	r3, [r6, #104]
 936 0042 0133     		adds	r3, r3, #1
 937 0044 B366     		str	r3, [r6, #104]
 938 0046 05E0     		b	.L63
 939              	.L62:
1175:FreeRTOS\Source/tasks.c ****                 traceTASK_DELETE( pxTCB );
 940              		.loc 1 1175 0
 941 0048 0C4A     		ldr	r2, .L66
 942 004a 536D     		ldr	r3, [r2, #84]
 943 004c 013B     		subs	r3, r3, #1
 944 004e 5365     		str	r3, [r2, #84]
1180:FreeRTOS\Source/tasks.c ****             }
 945              		.loc 1 1180 0
 946 0050 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 947              	.LVL105:
 948              	.L63:
1183:FreeRTOS\Source/tasks.c **** 
 949              		.loc 1 1183 0
 950 0054 FFF7FEFF 		bl	vPortExitCritical
 951              	.LVL106:
1188:FreeRTOS\Source/tasks.c ****         {
 952              		.loc 1 1188 0
 953 0058 084B     		ldr	r3, .L66
 954 005a 9B6D     		ldr	r3, [r3, #88]
 955 005c 9C42     		cmp	r4, r3
 956 005e 02D0     		beq	.L64
1190:FreeRTOS\Source/tasks.c ****         }
 957              		.loc 1 1190 0
 958 0060 2000     		movs	r0, r4
 959 0062 FFF7FEFF 		bl	prvDeleteTCB
 960              	.LVL107:
 961              	.L64:
1195:FreeRTOS\Source/tasks.c ****         {
 962              		.loc 1 1195 0
 963 0066 054B     		ldr	r3, .L66
 964 0068 DB6D     		ldr	r3, [r3, #92]
 965 006a 002B     		cmp	r3, #0
 966 006c 05D0     		beq	.L59
1197:FreeRTOS\Source/tasks.c ****             {
 967              		.loc 1 1197 0
 968 006e 034B     		ldr	r3, .L66
 969 0070 9B6D     		ldr	r3, [r3, #88]
 970 0072 9C42     		cmp	r4, r3
 971 0074 01D1     		bne	.L59
1200:FreeRTOS\Source/tasks.c ****             }
 972              		.loc 1 1200 0
 973 0076 FFF7FEFF 		bl	vPortYield
 974              	.LVL108:
 975              	.L59:
1207:FreeRTOS\Source/tasks.c **** 
 976              		.loc 1 1207 0
 977              		@ sp needed
 978              	.LVL109:
 979              	.LVL110:
 980 007a 70BD     		pop	{r4, r5, r6, pc}
 981              	.L67:
 982              		.align	2
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 115


 983              	.L66:
 984 007c 80000000 		.word	.LANCHOR1
 985              		.cfi_endproc
 986              	.LFE37:
 987              		.size	vTaskDelete, .-vTaskDelete
 988              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 989              		.align	2
 990              		.global	uxTaskPriorityGet
 991              		.code	16
 992              		.thumb_func
 993              		.type	uxTaskPriorityGet, %function
 994              	uxTaskPriorityGet:
 995              	.LFB40:
1446:FreeRTOS\Source/tasks.c ****         TCB_t const * pxTCB;
 996              		.loc 1 1446 0
 997              		.cfi_startproc
 998              		@ args = 0, pretend = 0, frame = 0
 999              		@ frame_needed = 0, uses_anonymous_args = 0
 1000              	.LVL111:
 1001 0000 10B5     		push	{r4, lr}
 1002              		.cfi_def_cfa_offset 8
 1003              		.cfi_offset 4, -8
 1004              		.cfi_offset 14, -4
 1005 0002 0400     		movs	r4, r0
1450:FreeRTOS\Source/tasks.c ****         {
 1006              		.loc 1 1450 0
 1007 0004 FFF7FEFF 		bl	vPortEnterCritical
 1008              	.LVL112:
1454:FreeRTOS\Source/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1009              		.loc 1 1454 0
 1010 0008 002C     		cmp	r4, #0
 1011 000a 01D1     		bne	.L69
1454:FreeRTOS\Source/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1012              		.loc 1 1454 0 is_stmt 0 discriminator 1
 1013 000c 034B     		ldr	r3, .L71
 1014 000e 9C6D     		ldr	r4, [r3, #88]
 1015              	.LVL113:
 1016              	.L69:
1455:FreeRTOS\Source/tasks.c ****         }
 1017              		.loc 1 1455 0 is_stmt 1 discriminator 4
 1018 0010 E46A     		ldr	r4, [r4, #44]
 1019              	.LVL114:
1457:FreeRTOS\Source/tasks.c **** 
 1020              		.loc 1 1457 0 discriminator 4
 1021 0012 FFF7FEFF 		bl	vPortExitCritical
 1022              	.LVL115:
1460:FreeRTOS\Source/tasks.c **** 
 1023              		.loc 1 1460 0 discriminator 4
 1024 0016 2000     		movs	r0, r4
 1025              		@ sp needed
 1026              	.LVL116:
 1027 0018 10BD     		pop	{r4, pc}
 1028              	.L72:
 1029 001a C046     		.align	2
 1030              	.L71:
 1031 001c 80000000 		.word	.LANCHOR1
 1032              		.cfi_endproc
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 116


 1033              	.LFE40:
 1034              		.size	uxTaskPriorityGet, .-uxTaskPriorityGet
 1035              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1036              		.align	2
 1037              		.global	uxTaskPriorityGetFromISR
 1038              		.code	16
 1039              		.thumb_func
 1040              		.type	uxTaskPriorityGetFromISR, %function
 1041              	uxTaskPriorityGetFromISR:
 1042              	.LFB41:
1468:FreeRTOS\Source/tasks.c ****         TCB_t const * pxTCB;
 1043              		.loc 1 1468 0
 1044              		.cfi_startproc
 1045              		@ args = 0, pretend = 0, frame = 0
 1046              		@ frame_needed = 0, uses_anonymous_args = 0
 1047              	.LVL117:
 1048 0000 10B5     		push	{r4, lr}
 1049              		.cfi_def_cfa_offset 8
 1050              		.cfi_offset 4, -8
 1051              		.cfi_offset 14, -4
 1052 0002 0400     		movs	r4, r0
1490:FreeRTOS\Source/tasks.c ****         {
 1053              		.loc 1 1490 0
 1054 0004 FFF7FEFF 		bl	ulSetInterruptMaskFromISR
 1055              	.LVL118:
1494:FreeRTOS\Source/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1056              		.loc 1 1494 0
 1057 0008 002C     		cmp	r4, #0
 1058 000a 01D1     		bne	.L74
1494:FreeRTOS\Source/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1059              		.loc 1 1494 0 is_stmt 0 discriminator 1
 1060 000c 034B     		ldr	r3, .L76
 1061 000e 9C6D     		ldr	r4, [r3, #88]
 1062              	.LVL119:
 1063              	.L74:
1495:FreeRTOS\Source/tasks.c ****         }
 1064              		.loc 1 1495 0 is_stmt 1 discriminator 4
 1065 0010 E46A     		ldr	r4, [r4, #44]
 1066              	.LVL120:
1497:FreeRTOS\Source/tasks.c **** 
 1067              		.loc 1 1497 0 discriminator 4
 1068 0012 FFF7FEFF 		bl	vClearInterruptMaskFromISR
 1069              	.LVL121:
1500:FreeRTOS\Source/tasks.c **** 
 1070              		.loc 1 1500 0 discriminator 4
 1071 0016 2000     		movs	r0, r4
 1072              		@ sp needed
 1073              	.LVL122:
 1074 0018 10BD     		pop	{r4, pc}
 1075              	.L77:
 1076 001a C046     		.align	2
 1077              	.L76:
 1078 001c 80000000 		.word	.LANCHOR1
 1079              		.cfi_endproc
 1080              	.LFE41:
 1081              		.size	uxTaskPriorityGetFromISR, .-uxTaskPriorityGetFromISR
 1082              		.section	.text.vTaskPrioritySet,"ax",%progbits
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 117


 1083              		.align	2
 1084              		.global	vTaskPrioritySet
 1085              		.code	16
 1086              		.thumb_func
 1087              		.type	vTaskPrioritySet, %function
 1088              	vTaskPrioritySet:
 1089              	.LFB42:
1509:FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
 1090              		.loc 1 1509 0
 1091              		.cfi_startproc
 1092              		@ args = 0, pretend = 0, frame = 0
 1093              		@ frame_needed = 0, uses_anonymous_args = 0
 1094              	.LVL123:
 1095 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1096              		.cfi_def_cfa_offset 24
 1097              		.cfi_offset 3, -24
 1098              		.cfi_offset 4, -20
 1099              		.cfi_offset 5, -16
 1100              		.cfi_offset 6, -12
 1101              		.cfi_offset 7, -8
 1102              		.cfi_offset 14, -4
 1103 0002 0400     		movs	r4, r0
 1104 0004 0D00     		movs	r5, r1
 1105              	.LVL124:
1517:FreeRTOS\Source/tasks.c ****         {
 1106              		.loc 1 1517 0
 1107 0006 0429     		cmp	r1, #4
 1108 0008 00D9     		bls	.L79
1519:FreeRTOS\Source/tasks.c ****         }
 1109              		.loc 1 1519 0
 1110 000a 0425     		movs	r5, #4
 1111              	.L79:
 1112              	.LVL125:
1526:FreeRTOS\Source/tasks.c ****         {
 1113              		.loc 1 1526 0
 1114 000c FFF7FEFF 		bl	vPortEnterCritical
 1115              	.LVL126:
1530:FreeRTOS\Source/tasks.c **** 
 1116              		.loc 1 1530 0
 1117 0010 002C     		cmp	r4, #0
 1118 0012 01D1     		bne	.L80
1530:FreeRTOS\Source/tasks.c **** 
 1119              		.loc 1 1530 0 is_stmt 0 discriminator 1
 1120 0014 2F4B     		ldr	r3, .L92
 1121 0016 9C6D     		ldr	r4, [r3, #88]
 1122              	.LVL127:
 1123              	.L80:
1536:FreeRTOS\Source/tasks.c ****             }
 1124              		.loc 1 1536 0 is_stmt 1 discriminator 4
 1125 0018 226C     		ldr	r2, [r4, #64]
 1126              	.LVL128:
1544:FreeRTOS\Source/tasks.c ****             {
 1127              		.loc 1 1544 0 discriminator 4
 1128 001a 9542     		cmp	r5, r2
 1129 001c 56D0     		beq	.L81
1548:FreeRTOS\Source/tasks.c ****                 {
 1130              		.loc 1 1548 0
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 118


 1131 001e 0AD9     		bls	.L82
1550:FreeRTOS\Source/tasks.c ****                     {
 1132              		.loc 1 1550 0
 1133 0020 2C4B     		ldr	r3, .L92
 1134 0022 9B6D     		ldr	r3, [r3, #88]
 1135 0024 9C42     		cmp	r4, r3
 1136 0026 0CD0     		beq	.L89
1555:FreeRTOS\Source/tasks.c ****                         {
 1137              		.loc 1 1555 0
 1138 0028 2A4B     		ldr	r3, .L92
 1139 002a 9B6D     		ldr	r3, [r3, #88]
 1140 002c DB6A     		ldr	r3, [r3, #44]
 1141 002e 9D42     		cmp	r5, r3
 1142 0030 09D2     		bcs	.L90
1512:FreeRTOS\Source/tasks.c **** 
 1143              		.loc 1 1512 0
 1144 0032 0026     		movs	r6, #0
 1145 0034 0AE0     		b	.L83
 1146              	.L82:
1571:FreeRTOS\Source/tasks.c ****                 {
 1147              		.loc 1 1571 0
 1148 0036 274B     		ldr	r3, .L92
 1149 0038 9B6D     		ldr	r3, [r3, #88]
 1150 003a 9C42     		cmp	r4, r3
 1151 003c 05D0     		beq	.L91
1512:FreeRTOS\Source/tasks.c **** 
 1152              		.loc 1 1512 0
 1153 003e 0026     		movs	r6, #0
 1154 0040 04E0     		b	.L83
 1155              	.L89:
 1156 0042 0026     		movs	r6, #0
 1157 0044 02E0     		b	.L83
 1158              	.L90:
1557:FreeRTOS\Source/tasks.c ****                         }
 1159              		.loc 1 1557 0
 1160 0046 0126     		movs	r6, #1
 1161 0048 00E0     		b	.L83
 1162              	.L91:
1576:FreeRTOS\Source/tasks.c ****                 }
 1163              		.loc 1 1576 0
 1164 004a 0126     		movs	r6, #1
 1165              	.L83:
 1166              	.LVL129:
1588:FreeRTOS\Source/tasks.c **** 
 1167              		.loc 1 1588 0
 1168 004c E36A     		ldr	r3, [r4, #44]
 1169              	.LVL130:
1594:FreeRTOS\Source/tasks.c ****                     {
 1170              		.loc 1 1594 0
 1171 004e 9A42     		cmp	r2, r3
 1172 0050 00D1     		bne	.L84
1596:FreeRTOS\Source/tasks.c ****                     }
 1173              		.loc 1 1596 0
 1174 0052 E562     		str	r5, [r4, #44]
 1175              	.L84:
1604:FreeRTOS\Source/tasks.c ****                 }
 1176              		.loc 1 1604 0
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 119


 1177 0054 2564     		str	r5, [r4, #64]
1614:FreeRTOS\Source/tasks.c ****                 {
 1178              		.loc 1 1614 0
 1179 0056 A269     		ldr	r2, [r4, #24]
 1180              	.LVL131:
 1181 0058 002A     		cmp	r2, #0
 1182 005a 02DB     		blt	.L85
1616:FreeRTOS\Source/tasks.c ****                 }
 1183              		.loc 1 1616 0
 1184 005c 0522     		movs	r2, #5
 1185 005e 551B     		subs	r5, r2, r5
 1186              	.LVL132:
 1187 0060 A561     		str	r5, [r4, #24]
 1188              	.L85:
1627:FreeRTOS\Source/tasks.c ****                 {
 1189              		.loc 1 1627 0
 1190 0062 9A00     		lsls	r2, r3, #2
 1191 0064 D318     		adds	r3, r2, r3
 1192              	.LVL133:
 1193 0066 9A00     		lsls	r2, r3, #2
 1194 0068 1B4B     		ldr	r3, .L92+4
 1195 006a 3033     		adds	r3, r3, #48
 1196 006c 9A18     		adds	r2, r3, r2
 1197 006e 6369     		ldr	r3, [r4, #20]
 1198 0070 9342     		cmp	r3, r2
 1199 0072 27D1     		bne	.L86
1632:FreeRTOS\Source/tasks.c ****                     {
 1200              		.loc 1 1632 0
 1201 0074 251D     		adds	r5, r4, #4
 1202 0076 2800     		movs	r0, r5
 1203 0078 FFF7FEFF 		bl	uxListRemove
 1204              	.LVL134:
1644:FreeRTOS\Source/tasks.c ****                 }
 1205              		.loc 1 1644 0
 1206 007c E36A     		ldr	r3, [r4, #44]
 1207 007e 154A     		ldr	r2, .L92
 1208 0080 526E     		ldr	r2, [r2, #100]
 1209 0082 9342     		cmp	r3, r2
 1210 0084 01D9     		bls	.L87
1644:FreeRTOS\Source/tasks.c ****                 }
 1211              		.loc 1 1644 0 is_stmt 0 discriminator 1
 1212 0086 134A     		ldr	r2, .L92
 1213 0088 5366     		str	r3, [r2, #100]
 1214              	.L87:
 1215              	.LBB6:
1644:FreeRTOS\Source/tasks.c ****                 }
 1216              		.loc 1 1644 0 discriminator 3
 1217 008a 1349     		ldr	r1, .L92+4
 1218 008c 9A00     		lsls	r2, r3, #2
 1219 008e D318     		adds	r3, r2, r3
 1220 0090 9A00     		lsls	r2, r3, #2
 1221 0092 8A18     		adds	r2, r1, r2
 1222 0094 536B     		ldr	r3, [r2, #52]
 1223              	.LVL135:
 1224 0096 A360     		str	r3, [r4, #8]
 1225 0098 9A68     		ldr	r2, [r3, #8]
 1226 009a E260     		str	r2, [r4, #12]
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 120


 1227 009c 9A68     		ldr	r2, [r3, #8]
 1228 009e 5560     		str	r5, [r2, #4]
 1229 00a0 9D60     		str	r5, [r3, #8]
 1230 00a2 E36A     		ldr	r3, [r4, #44]
 1231              	.LVL136:
 1232 00a4 0F00     		movs	r7, r1
 1233 00a6 3037     		adds	r7, r7, #48
 1234 00a8 9D00     		lsls	r5, r3, #2
 1235 00aa E818     		adds	r0, r5, r3
 1236 00ac 8200     		lsls	r2, r0, #2
 1237 00ae BA18     		adds	r2, r7, r2
 1238 00b0 6261     		str	r2, [r4, #20]
 1239 00b2 E818     		adds	r0, r5, r3
 1240 00b4 8200     		lsls	r2, r0, #2
 1241 00b6 8A18     		adds	r2, r1, r2
 1242 00b8 106B     		ldr	r0, [r2, #48]
 1243 00ba 0130     		adds	r0, r0, #1
 1244 00bc EB18     		adds	r3, r5, r3
 1245 00be 9A00     		lsls	r2, r3, #2
 1246 00c0 8A18     		adds	r2, r1, r2
 1247 00c2 1063     		str	r0, [r2, #48]
 1248              	.L86:
 1249              	.LBE6:
1651:FreeRTOS\Source/tasks.c ****                 {
 1250              		.loc 1 1651 0 is_stmt 1
 1251 00c4 002E     		cmp	r6, #0
 1252 00c6 01D0     		beq	.L81
1653:FreeRTOS\Source/tasks.c ****                 }
 1253              		.loc 1 1653 0
 1254 00c8 FFF7FEFF 		bl	vPortYield
 1255              	.LVL137:
 1256              	.L81:
1665:FreeRTOS\Source/tasks.c ****     }
 1257              		.loc 1 1665 0
 1258 00cc FFF7FEFF 		bl	vPortExitCritical
 1259              	.LVL138:
1666:FreeRTOS\Source/tasks.c **** 
 1260              		.loc 1 1666 0
 1261              		@ sp needed
 1262              	.LVL139:
 1263 00d0 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1264              	.L93:
 1265 00d2 C046     		.align	2
 1266              	.L92:
 1267 00d4 80000000 		.word	.LANCHOR1
 1268 00d8 00000000 		.word	.LANCHOR0
 1269              		.cfi_endproc
 1270              	.LFE42:
 1271              		.size	vTaskPrioritySet, .-vTaskPrioritySet
 1272              		.section	.text.vTaskResume,"ax",%progbits
 1273              		.align	2
 1274              		.global	vTaskResume
 1275              		.code	16
 1276              		.thumb_func
 1277              		.type	vTaskResume, %function
 1278              	vTaskResume:
 1279              	.LFB45:
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 121


1826:FreeRTOS\Source/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 1280              		.loc 1 1826 0
 1281              		.cfi_startproc
 1282              		@ args = 0, pretend = 0, frame = 0
 1283              		@ frame_needed = 0, uses_anonymous_args = 0
 1284              	.LVL140:
 1285 0000 70B5     		push	{r4, r5, r6, lr}
 1286              		.cfi_def_cfa_offset 16
 1287              		.cfi_offset 4, -16
 1288              		.cfi_offset 5, -12
 1289              		.cfi_offset 6, -8
 1290              		.cfi_offset 14, -4
 1291 0002 0400     		movs	r4, r0
 1292              	.LVL141:
1834:FreeRTOS\Source/tasks.c ****         {
 1293              		.loc 1 1834 0
 1294 0004 1F4B     		ldr	r3, .L98
 1295 0006 9B6D     		ldr	r3, [r3, #88]
 1296 0008 9842     		cmp	r0, r3
 1297 000a 3AD0     		beq	.L94
1834:FreeRTOS\Source/tasks.c ****         {
 1298              		.loc 1 1834 0 is_stmt 0 discriminator 1
 1299 000c 0028     		cmp	r0, #0
 1300 000e 38D0     		beq	.L94
1836:FreeRTOS\Source/tasks.c ****             {
 1301              		.loc 1 1836 0 is_stmt 1
 1302 0010 FFF7FEFF 		bl	vPortEnterCritical
 1303              	.LVL142:
1838:FreeRTOS\Source/tasks.c ****                 {
 1304              		.loc 1 1838 0
 1305 0014 2000     		movs	r0, r4
 1306 0016 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1307              	.LVL143:
 1308 001a 0028     		cmp	r0, #0
 1309 001c 2FD0     		beq	.L96
1844:FreeRTOS\Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 1310              		.loc 1 1844 0
 1311 001e 251D     		adds	r5, r4, #4
 1312 0020 2800     		movs	r0, r5
 1313 0022 FFF7FEFF 		bl	uxListRemove
 1314              	.LVL144:
1845:FreeRTOS\Source/tasks.c **** 
 1315              		.loc 1 1845 0
 1316 0026 E36A     		ldr	r3, [r4, #44]
 1317 0028 164A     		ldr	r2, .L98
 1318 002a 526E     		ldr	r2, [r2, #100]
 1319 002c 9342     		cmp	r3, r2
 1320 002e 01D9     		bls	.L97
1845:FreeRTOS\Source/tasks.c **** 
 1321              		.loc 1 1845 0 is_stmt 0 discriminator 1
 1322 0030 144A     		ldr	r2, .L98
 1323 0032 5366     		str	r3, [r2, #100]
 1324              	.L97:
 1325              	.LBB7:
1845:FreeRTOS\Source/tasks.c **** 
 1326              		.loc 1 1845 0 discriminator 3
 1327 0034 1449     		ldr	r1, .L98+4
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 122


 1328 0036 9A00     		lsls	r2, r3, #2
 1329 0038 D318     		adds	r3, r2, r3
 1330 003a 9A00     		lsls	r2, r3, #2
 1331 003c 8A18     		adds	r2, r1, r2
 1332 003e 536B     		ldr	r3, [r2, #52]
 1333              	.LVL145:
 1334 0040 A360     		str	r3, [r4, #8]
 1335 0042 9A68     		ldr	r2, [r3, #8]
 1336 0044 E260     		str	r2, [r4, #12]
 1337 0046 9A68     		ldr	r2, [r3, #8]
 1338 0048 5560     		str	r5, [r2, #4]
 1339 004a 9D60     		str	r5, [r3, #8]
 1340 004c E36A     		ldr	r3, [r4, #44]
 1341              	.LVL146:
 1342 004e 0E00     		movs	r6, r1
 1343 0050 3036     		adds	r6, r6, #48
 1344 0052 9D00     		lsls	r5, r3, #2
 1345 0054 E818     		adds	r0, r5, r3
 1346 0056 8200     		lsls	r2, r0, #2
 1347 0058 B218     		adds	r2, r6, r2
 1348 005a 6261     		str	r2, [r4, #20]
 1349 005c E818     		adds	r0, r5, r3
 1350 005e 8200     		lsls	r2, r0, #2
 1351 0060 8A18     		adds	r2, r1, r2
 1352 0062 106B     		ldr	r0, [r2, #48]
 1353 0064 0130     		adds	r0, r0, #1
 1354 0066 EB18     		adds	r3, r5, r3
 1355 0068 9A00     		lsls	r2, r3, #2
 1356 006a 8A18     		adds	r2, r1, r2
 1357 006c 1063     		str	r0, [r2, #48]
 1358              	.LBE7:
1848:FreeRTOS\Source/tasks.c ****                     {
 1359              		.loc 1 1848 0 is_stmt 1 discriminator 3
 1360 006e E26A     		ldr	r2, [r4, #44]
 1361 0070 044B     		ldr	r3, .L98
 1362 0072 9B6D     		ldr	r3, [r3, #88]
 1363 0074 DB6A     		ldr	r3, [r3, #44]
 1364 0076 9A42     		cmp	r2, r3
 1365 0078 01D3     		bcc	.L96
1853:FreeRTOS\Source/tasks.c ****                     }
 1366              		.loc 1 1853 0
 1367 007a FFF7FEFF 		bl	vPortYield
 1368              	.LVL147:
 1369              	.L96:
1865:FreeRTOS\Source/tasks.c ****         }
 1370              		.loc 1 1865 0
 1371 007e FFF7FEFF 		bl	vPortExitCritical
 1372              	.LVL148:
 1373              	.L94:
1871:FreeRTOS\Source/tasks.c **** 
 1374              		.loc 1 1871 0
 1375              		@ sp needed
 1376              	.LVL149:
 1377 0082 70BD     		pop	{r4, r5, r6, pc}
 1378              	.L99:
 1379              		.align	2
 1380              	.L98:
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 123


 1381 0084 80000000 		.word	.LANCHOR1
 1382 0088 00000000 		.word	.LANCHOR0
 1383              		.cfi_endproc
 1384              	.LFE45:
 1385              		.size	vTaskResume, .-vTaskResume
 1386              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1387              		.align	2
 1388              		.global	xTaskResumeFromISR
 1389              		.code	16
 1390              		.thumb_func
 1391              		.type	xTaskResumeFromISR, %function
 1392              	xTaskResumeFromISR:
 1393              	.LFB46:
1880:FreeRTOS\Source/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
 1394              		.loc 1 1880 0
 1395              		.cfi_startproc
 1396              		@ args = 0, pretend = 0, frame = 8
 1397              		@ frame_needed = 0, uses_anonymous_args = 0
 1398              	.LVL150:
 1399 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1400              		.cfi_def_cfa_offset 20
 1401              		.cfi_offset 4, -20
 1402              		.cfi_offset 5, -16
 1403              		.cfi_offset 6, -12
 1404              		.cfi_offset 7, -8
 1405              		.cfi_offset 14, -4
 1406 0002 83B0     		sub	sp, sp, #12
 1407              		.cfi_def_cfa_offset 32
 1408 0004 0400     		movs	r4, r0
 1409              	.LVL151:
1905:FreeRTOS\Source/tasks.c ****         {
 1410              		.loc 1 1905 0
 1411 0006 FFF7FEFF 		bl	ulSetInterruptMaskFromISR
 1412              	.LVL152:
 1413 000a 0190     		str	r0, [sp, #4]
 1414              	.LVL153:
1907:FreeRTOS\Source/tasks.c ****             {
 1415              		.loc 1 1907 0
 1416 000c 2000     		movs	r0, r4
 1417              	.LVL154:
 1418 000e FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1419              	.LVL155:
 1420 0012 0028     		cmp	r0, #0
 1421 0014 40D0     		beq	.L105
1912:FreeRTOS\Source/tasks.c ****                 {
 1422              		.loc 1 1912 0
 1423 0016 244B     		ldr	r3, .L107
 1424 0018 1B6F     		ldr	r3, [r3, #112]
 1425 001a 002B     		cmp	r3, #0
 1426 001c 34D1     		bne	.L102
1916:FreeRTOS\Source/tasks.c ****                     {
 1427              		.loc 1 1916 0
 1428 001e 224B     		ldr	r3, .L107
 1429 0020 9B6D     		ldr	r3, [r3, #88]
 1430 0022 DB6A     		ldr	r3, [r3, #44]
 1431 0024 E26A     		ldr	r2, [r4, #44]
 1432 0026 9A42     		cmp	r2, r3
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 124


 1433 0028 04D3     		bcc	.L106
 1434              	.LVL156:
1923:FreeRTOS\Source/tasks.c ****                     }
 1435              		.loc 1 1923 0
 1436 002a 0122     		movs	r2, #1
 1437 002c 1E4B     		ldr	r3, .L107
 1438 002e 5A67     		str	r2, [r3, #116]
1918:FreeRTOS\Source/tasks.c **** 
 1439              		.loc 1 1918 0
 1440 0030 0126     		movs	r6, #1
 1441 0032 00E0     		b	.L103
 1442              	.LVL157:
 1443              	.L106:
1881:FreeRTOS\Source/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 1444              		.loc 1 1881 0
 1445 0034 0026     		movs	r6, #0
 1446              	.LVL158:
 1447              	.L103:
1930:FreeRTOS\Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 1448              		.loc 1 1930 0
 1449 0036 271D     		adds	r7, r4, #4
 1450 0038 3800     		movs	r0, r7
 1451 003a FFF7FEFF 		bl	uxListRemove
 1452              	.LVL159:
1931:FreeRTOS\Source/tasks.c ****                 }
 1453              		.loc 1 1931 0
 1454 003e E36A     		ldr	r3, [r4, #44]
 1455 0040 194A     		ldr	r2, .L107
 1456 0042 526E     		ldr	r2, [r2, #100]
 1457 0044 9342     		cmp	r3, r2
 1458 0046 01D9     		bls	.L104
1931:FreeRTOS\Source/tasks.c ****                 }
 1459              		.loc 1 1931 0 is_stmt 0 discriminator 1
 1460 0048 174A     		ldr	r2, .L107
 1461 004a 5366     		str	r3, [r2, #100]
 1462              	.L104:
 1463              	.LBB8:
1931:FreeRTOS\Source/tasks.c ****                 }
 1464              		.loc 1 1931 0 discriminator 3
 1465 004c 1749     		ldr	r1, .L107+4
 1466 004e 9A00     		lsls	r2, r3, #2
 1467 0050 D318     		adds	r3, r2, r3
 1468 0052 9A00     		lsls	r2, r3, #2
 1469 0054 8A18     		adds	r2, r1, r2
 1470 0056 536B     		ldr	r3, [r2, #52]
 1471              	.LVL160:
 1472 0058 A360     		str	r3, [r4, #8]
 1473 005a 9A68     		ldr	r2, [r3, #8]
 1474 005c E260     		str	r2, [r4, #12]
 1475 005e 9A68     		ldr	r2, [r3, #8]
 1476 0060 5760     		str	r7, [r2, #4]
 1477 0062 9F60     		str	r7, [r3, #8]
 1478 0064 E36A     		ldr	r3, [r4, #44]
 1479              	.LVL161:
 1480 0066 0D00     		movs	r5, r1
 1481 0068 3035     		adds	r5, r5, #48
 1482 006a 9F00     		lsls	r7, r3, #2
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 125


 1483 006c F818     		adds	r0, r7, r3
 1484 006e 8200     		lsls	r2, r0, #2
 1485 0070 AA18     		adds	r2, r5, r2
 1486 0072 6261     		str	r2, [r4, #20]
 1487 0074 F818     		adds	r0, r7, r3
 1488 0076 8200     		lsls	r2, r0, #2
 1489 0078 8A18     		adds	r2, r1, r2
 1490 007a 106B     		ldr	r0, [r2, #48]
 1491 007c 0130     		adds	r0, r0, #1
 1492 007e FB18     		adds	r3, r7, r3
 1493 0080 9A00     		lsls	r2, r3, #2
 1494 0082 8A18     		adds	r2, r1, r2
 1495 0084 1063     		str	r0, [r2, #48]
 1496              	.LBE8:
 1497 0086 08E0     		b	.L101
 1498              	.LVL162:
 1499              	.L102:
1938:FreeRTOS\Source/tasks.c ****                 }
 1500              		.loc 1 1938 0 is_stmt 1
 1501 0088 2100     		movs	r1, r4
 1502 008a 1831     		adds	r1, r1, #24
 1503 008c 0748     		ldr	r0, .L107+4
 1504 008e 1430     		adds	r0, r0, #20
 1505 0090 FFF7FEFF 		bl	vListInsertEnd
 1506              	.LVL163:
1881:FreeRTOS\Source/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 1507              		.loc 1 1881 0
 1508 0094 0026     		movs	r6, #0
 1509 0096 00E0     		b	.L101
 1510              	.L105:
 1511 0098 0026     		movs	r6, #0
 1512              	.LVL164:
 1513              	.L101:
1946:FreeRTOS\Source/tasks.c **** 
 1514              		.loc 1 1946 0
 1515 009a 0198     		ldr	r0, [sp, #4]
 1516 009c FFF7FEFF 		bl	vClearInterruptMaskFromISR
 1517              	.LVL165:
1949:FreeRTOS\Source/tasks.c **** 
 1518              		.loc 1 1949 0
 1519 00a0 3000     		movs	r0, r6
 1520 00a2 03B0     		add	sp, sp, #12
 1521              		@ sp needed
 1522              	.LVL166:
 1523              	.LVL167:
 1524 00a4 F0BD     		pop	{r4, r5, r6, r7, pc}
 1525              	.L108:
 1526 00a6 C046     		.align	2
 1527              	.L107:
 1528 00a8 80000000 		.word	.LANCHOR1
 1529 00ac 00000000 		.word	.LANCHOR0
 1530              		.cfi_endproc
 1531              	.LFE46:
 1532              		.size	xTaskResumeFromISR, .-xTaskResumeFromISR
 1533              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1534              		.align	2
 1535              		.global	vTaskStartScheduler
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 126


 1536              		.code	16
 1537              		.thumb_func
 1538              		.type	vTaskStartScheduler, %function
 1539              	vTaskStartScheduler:
 1540              	.LFB47:
1955:FreeRTOS\Source/tasks.c ****     BaseType_t xReturn;
 1541              		.loc 1 1955 0
 1542              		.cfi_startproc
 1543              		@ args = 0, pretend = 0, frame = 0
 1544              		@ frame_needed = 0, uses_anonymous_args = 0
 1545 0000 00B5     		push	{lr}
 1546              		.cfi_def_cfa_offset 4
 1547              		.cfi_offset 14, -4
 1548 0002 83B0     		sub	sp, sp, #12
 1549              		.cfi_def_cfa_offset 16
1988:FreeRTOS\Source/tasks.c ****                                configIDLE_TASK_NAME,
 1550              		.loc 1 1988 0
 1551 0004 0D4B     		ldr	r3, .L111
 1552 0006 7833     		adds	r3, r3, #120
 1553 0008 0193     		str	r3, [sp, #4]
 1554 000a 0023     		movs	r3, #0
 1555 000c 0093     		str	r3, [sp]
 1556 000e 6422     		movs	r2, #100
 1557 0010 0B49     		ldr	r1, .L111+4
 1558 0012 0C48     		ldr	r0, .L111+8
 1559 0014 FFF7FEFF 		bl	xTaskCreate
 1560              	.LVL168:
2010:FreeRTOS\Source/tasks.c ****     {
 1561              		.loc 1 2010 0
 1562 0018 0128     		cmp	r0, #1
 1563 001a 0BD1     		bne	.L110
2026:FreeRTOS\Source/tasks.c **** 
 1564              		.loc 1 2026 0
 1565              		.syntax divided
 1566              	@ 2026 "FreeRTOS\Source\tasks.c" 1
 1567 001c 72B6     		 cpsid i 
 1568              	@ 0 "" 2
2036:FreeRTOS\Source/tasks.c ****         xSchedulerRunning = pdTRUE;
 1569              		.loc 1 2036 0
 1570              		.thumb
 1571              		.syntax unified
 1572 001e 0122     		movs	r2, #1
 1573 0020 5242     		rsbs	r2, r2, #0
 1574 0022 094B     		ldr	r3, .L111+12
 1575 0024 DA62     		str	r2, [r3, #44]
2037:FreeRTOS\Source/tasks.c ****         xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 1576              		.loc 1 2037 0
 1577 0026 054B     		ldr	r3, .L111
 1578 0028 0232     		adds	r2, r2, #2
 1579 002a DA65     		str	r2, [r3, #92]
2038:FreeRTOS\Source/tasks.c **** 
 1580              		.loc 1 2038 0
 1581 002c 0022     		movs	r2, #0
 1582 002e DA66     		str	r2, [r3, #108]
2052:FreeRTOS\Source/tasks.c **** 
 1583              		.loc 1 2052 0
 1584 0030 FFF7FEFF 		bl	xPortStartScheduler
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 127


 1585              	.LVL169:
 1586              	.L110:
2075:FreeRTOS\Source/tasks.c **** }
 1587              		.loc 1 2075 0
 1588 0034 054B     		ldr	r3, .L111+16
 1589 0036 1B68     		ldr	r3, [r3]
2076:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 1590              		.loc 1 2076 0
 1591 0038 03B0     		add	sp, sp, #12
 1592              		@ sp needed
 1593 003a 00BD     		pop	{pc}
 1594              	.L112:
 1595              		.align	2
 1596              	.L111:
 1597 003c 80000000 		.word	.LANCHOR1
 1598 0040 00000000 		.word	.LC29
 1599 0044 00000000 		.word	prvIdleTask
 1600 0048 00000000 		.word	.LANCHOR0
 1601 004c 00000000 		.word	.LANCHOR2
 1602              		.cfi_endproc
 1603              	.LFE47:
 1604              		.size	vTaskStartScheduler, .-vTaskStartScheduler
 1605              		.section	.text.vTaskEndScheduler,"ax",%progbits
 1606              		.align	2
 1607              		.global	vTaskEndScheduler
 1608              		.code	16
 1609              		.thumb_func
 1610              		.type	vTaskEndScheduler, %function
 1611              	vTaskEndScheduler:
 1612              	.LFB48:
2080:FreeRTOS\Source/tasks.c ****     /* Stop the scheduler interrupts and call the portable scheduler end
 1613              		.loc 1 2080 0
 1614              		.cfi_startproc
 1615              		@ args = 0, pretend = 0, frame = 0
 1616              		@ frame_needed = 0, uses_anonymous_args = 0
 1617 0000 10B5     		push	{r4, lr}
 1618              		.cfi_def_cfa_offset 8
 1619              		.cfi_offset 4, -8
 1620              		.cfi_offset 14, -4
2084:FreeRTOS\Source/tasks.c ****     xSchedulerRunning = pdFALSE;
 1621              		.loc 1 2084 0
 1622              		.syntax divided
 1623              	@ 2084 "FreeRTOS\Source\tasks.c" 1
 1624 0002 72B6     		 cpsid i 
 1625              	@ 0 "" 2
2085:FreeRTOS\Source/tasks.c ****     vPortEndScheduler();
 1626              		.loc 1 2085 0
 1627              		.thumb
 1628              		.syntax unified
 1629 0004 0022     		movs	r2, #0
 1630 0006 024B     		ldr	r3, .L114
 1631 0008 DA65     		str	r2, [r3, #92]
2086:FreeRTOS\Source/tasks.c **** }
 1632              		.loc 1 2086 0
 1633 000a FFF7FEFF 		bl	vPortEndScheduler
 1634              	.LVL170:
2087:FreeRTOS\Source/tasks.c **** /*----------------------------------------------------------*/
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 128


 1635              		.loc 1 2087 0
 1636              		@ sp needed
 1637 000e 10BD     		pop	{r4, pc}
 1638              	.L115:
 1639              		.align	2
 1640              	.L114:
 1641 0010 80000000 		.word	.LANCHOR1
 1642              		.cfi_endproc
 1643              	.LFE48:
 1644              		.size	vTaskEndScheduler, .-vTaskEndScheduler
 1645              		.section	.text.vTaskSuspendAll,"ax",%progbits
 1646              		.align	2
 1647              		.global	vTaskSuspendAll
 1648              		.code	16
 1649              		.thumb_func
 1650              		.type	vTaskSuspendAll, %function
 1651              	vTaskSuspendAll:
 1652              	.LFB49:
2091:FreeRTOS\Source/tasks.c ****     /* A critical section is not required as the variable is of type
 1653              		.loc 1 2091 0
 1654              		.cfi_startproc
 1655              		@ args = 0, pretend = 0, frame = 0
 1656              		@ frame_needed = 0, uses_anonymous_args = 0
 1657              		@ link register save eliminated.
2103:FreeRTOS\Source/tasks.c **** 
 1658              		.loc 1 2103 0
 1659 0000 024A     		ldr	r2, .L117
 1660 0002 136F     		ldr	r3, [r2, #112]
 1661 0004 0133     		adds	r3, r3, #1
 1662 0006 1367     		str	r3, [r2, #112]
2107:FreeRTOS\Source/tasks.c **** }
 1663              		.loc 1 2107 0
2108:FreeRTOS\Source/tasks.c **** /*----------------------------------------------------------*/
 1664              		.loc 1 2108 0
 1665              		@ sp needed
 1666 0008 7047     		bx	lr
 1667              	.L118:
 1668 000a C046     		.align	2
 1669              	.L117:
 1670 000c 80000000 		.word	.LANCHOR1
 1671              		.cfi_endproc
 1672              	.LFE49:
 1673              		.size	vTaskSuspendAll, .-vTaskSuspendAll
 1674              		.section	.text.xTaskGetTickCount,"ax",%progbits
 1675              		.align	2
 1676              		.global	xTaskGetTickCount
 1677              		.code	16
 1678              		.thumb_func
 1679              		.type	xTaskGetTickCount, %function
 1680              	xTaskGetTickCount:
 1681              	.LFB51:
2287:FreeRTOS\Source/tasks.c ****     TickType_t xTicks;
 1682              		.loc 1 2287 0
 1683              		.cfi_startproc
 1684              		@ args = 0, pretend = 0, frame = 0
 1685              		@ frame_needed = 0, uses_anonymous_args = 0
 1686              		@ link register save eliminated.
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 129


2293:FreeRTOS\Source/tasks.c ****     }
 1687              		.loc 1 2293 0
 1688 0000 014B     		ldr	r3, .L120
 1689 0002 D86E     		ldr	r0, [r3, #108]
 1690              	.LVL171:
2298:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 1691              		.loc 1 2298 0
 1692              		@ sp needed
 1693 0004 7047     		bx	lr
 1694              	.L121:
 1695 0006 C046     		.align	2
 1696              	.L120:
 1697 0008 80000000 		.word	.LANCHOR1
 1698              		.cfi_endproc
 1699              	.LFE51:
 1700              		.size	xTaskGetTickCount, .-xTaskGetTickCount
 1701              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 1702              		.align	2
 1703              		.global	xTaskGetTickCountFromISR
 1704              		.code	16
 1705              		.thumb_func
 1706              		.type	xTaskGetTickCountFromISR, %function
 1707              	xTaskGetTickCountFromISR:
 1708              	.LFB52:
2302:FreeRTOS\Source/tasks.c ****     TickType_t xReturn;
 1709              		.loc 1 2302 0
 1710              		.cfi_startproc
 1711              		@ args = 0, pretend = 0, frame = 0
 1712              		@ frame_needed = 0, uses_anonymous_args = 0
 1713              		@ link register save eliminated.
 1714              	.LVL172:
2324:FreeRTOS\Source/tasks.c ****     }
 1715              		.loc 1 2324 0
 1716 0000 014B     		ldr	r3, .L123
 1717 0002 D86E     		ldr	r0, [r3, #108]
 1718              	.LVL173:
2329:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 1719              		.loc 1 2329 0
 1720              		@ sp needed
 1721 0004 7047     		bx	lr
 1722              	.L124:
 1723 0006 C046     		.align	2
 1724              	.L123:
 1725 0008 80000000 		.word	.LANCHOR1
 1726              		.cfi_endproc
 1727              	.LFE52:
 1728              		.size	xTaskGetTickCountFromISR, .-xTaskGetTickCountFromISR
 1729              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 1730              		.align	2
 1731              		.global	uxTaskGetNumberOfTasks
 1732              		.code	16
 1733              		.thumb_func
 1734              		.type	uxTaskGetNumberOfTasks, %function
 1735              	uxTaskGetNumberOfTasks:
 1736              	.LFB53:
2333:FreeRTOS\Source/tasks.c ****     /* A critical section is not required because the variables are of type
 1737              		.loc 1 2333 0
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 130


 1738              		.cfi_startproc
 1739              		@ args = 0, pretend = 0, frame = 0
 1740              		@ frame_needed = 0, uses_anonymous_args = 0
 1741              		@ link register save eliminated.
2336:FreeRTOS\Source/tasks.c **** }
 1742              		.loc 1 2336 0
 1743 0000 014B     		ldr	r3, .L126
 1744 0002 586D     		ldr	r0, [r3, #84]
2337:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 1745              		.loc 1 2337 0
 1746              		@ sp needed
 1747 0004 7047     		bx	lr
 1748              	.L127:
 1749 0006 C046     		.align	2
 1750              	.L126:
 1751 0008 80000000 		.word	.LANCHOR1
 1752              		.cfi_endproc
 1753              	.LFE53:
 1754              		.size	uxTaskGetNumberOfTasks, .-uxTaskGetNumberOfTasks
 1755              		.section	.text.pcTaskGetName,"ax",%progbits
 1756              		.align	2
 1757              		.global	pcTaskGetName
 1758              		.code	16
 1759              		.thumb_func
 1760              		.type	pcTaskGetName, %function
 1761              	pcTaskGetName:
 1762              	.LFB54:
2341:FreeRTOS\Source/tasks.c ****     TCB_t * pxTCB;
 1763              		.loc 1 2341 0
 1764              		.cfi_startproc
 1765              		@ args = 0, pretend = 0, frame = 0
 1766              		@ frame_needed = 0, uses_anonymous_args = 0
 1767              		@ link register save eliminated.
 1768              	.LVL174:
2346:FreeRTOS\Source/tasks.c ****     configASSERT( pxTCB );
 1769              		.loc 1 2346 0
 1770 0000 0028     		cmp	r0, #0
 1771 0002 01D1     		bne	.L129
2346:FreeRTOS\Source/tasks.c ****     configASSERT( pxTCB );
 1772              		.loc 1 2346 0 is_stmt 0 discriminator 1
 1773 0004 014B     		ldr	r3, .L130
 1774 0006 986D     		ldr	r0, [r3, #88]
 1775              	.LVL175:
 1776              	.L129:
2348:FreeRTOS\Source/tasks.c **** }
 1777              		.loc 1 2348 0 is_stmt 1 discriminator 4
 1778 0008 3430     		adds	r0, r0, #52
 1779              	.LVL176:
2349:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 1780              		.loc 1 2349 0 discriminator 4
 1781              		@ sp needed
 1782 000a 7047     		bx	lr
 1783              	.L131:
 1784              		.align	2
 1785              	.L130:
 1786 000c 80000000 		.word	.LANCHOR1
 1787              		.cfi_endproc
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 131


 1788              	.LFE54:
 1789              		.size	pcTaskGetName, .-pcTaskGetName
 1790              		.section	.text.xTaskIncrementTick,"ax",%progbits
 1791              		.align	2
 1792              		.global	xTaskIncrementTick
 1793              		.code	16
 1794              		.thumb_func
 1795              		.type	xTaskIncrementTick, %function
 1796              	xTaskIncrementTick:
 1797              	.LFB56:
2721:FreeRTOS\Source/tasks.c ****     TCB_t * pxTCB;
 1798              		.loc 1 2721 0
 1799              		.cfi_startproc
 1800              		@ args = 0, pretend = 0, frame = 8
 1801              		@ frame_needed = 0, uses_anonymous_args = 0
 1802 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1803              		.cfi_def_cfa_offset 20
 1804              		.cfi_offset 4, -20
 1805              		.cfi_offset 5, -16
 1806              		.cfi_offset 6, -12
 1807              		.cfi_offset 7, -8
 1808              		.cfi_offset 14, -4
 1809 0002 83B0     		sub	sp, sp, #12
 1810              		.cfi_def_cfa_offset 32
 1811              	.LVL177:
2731:FreeRTOS\Source/tasks.c ****     {
 1812              		.loc 1 2731 0
 1813 0004 524B     		ldr	r3, .L151
 1814 0006 1B6F     		ldr	r3, [r3, #112]
 1815 0008 002B     		cmp	r3, #0
 1816 000a 00D0     		beq	.LCB1674
 1817 000c 93E0     		b	.L133	@long jump
 1818              	.LCB1674:
 1819              	.LBB9:
2735:FreeRTOS\Source/tasks.c **** 
 1820              		.loc 1 2735 0
 1821 000e 504B     		ldr	r3, .L151
 1822 0010 DC6E     		ldr	r4, [r3, #108]
 1823 0012 0134     		adds	r4, r4, #1
 1824              	.LVL178:
2739:FreeRTOS\Source/tasks.c **** 
 1825              		.loc 1 2739 0
 1826 0014 DC66     		str	r4, [r3, #108]
2741:FreeRTOS\Source/tasks.c ****         {
 1827              		.loc 1 2741 0
 1828 0016 002C     		cmp	r4, #0
 1829 0018 09D1     		bne	.L134
 1830              	.LBB10:
2743:FreeRTOS\Source/tasks.c ****         }
 1831              		.loc 1 2743 0
 1832 001a 4E4A     		ldr	r2, .L151+4
 1833 001c 916A     		ldr	r1, [r2, #40]
 1834              	.LVL179:
 1835 001e 186D     		ldr	r0, [r3, #80]
 1836 0020 9062     		str	r0, [r2, #40]
 1837 0022 1965     		str	r1, [r3, #80]
 1838 0024 DA6F     		ldr	r2, [r3, #124]
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 132


 1839 0026 0132     		adds	r2, r2, #1
 1840 0028 DA67     		str	r2, [r3, #124]
 1841 002a FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 1842              	.LVL180:
 1843              	.L134:
 1844              	.LBE10:
2754:FreeRTOS\Source/tasks.c ****         {
 1845              		.loc 1 2754 0
 1846 002e 494B     		ldr	r3, .L151+4
 1847 0030 DB6A     		ldr	r3, [r3, #44]
 1848 0032 9C42     		cmp	r4, r3
 1849 0034 05D2     		bcs	.L147
 1850              	.LBE9:
2724:FreeRTOS\Source/tasks.c **** 
 1851              		.loc 1 2724 0
 1852 0036 0023     		movs	r3, #0
 1853 0038 0193     		str	r3, [sp, #4]
 1854 003a 6AE0     		b	.L136
 1855              	.LVL181:
 1856              	.L148:
 1857              	.LBB14:
2824:FreeRTOS\Source/tasks.c ****                         }
 1858              		.loc 1 2824 0
 1859 003c 0123     		movs	r3, #1
 1860 003e 0193     		str	r3, [sp, #4]
 1861              	.LVL182:
 1862 0040 01E0     		b	.L135
 1863              	.LVL183:
 1864              	.L147:
 1865 0042 0023     		movs	r3, #0
 1866 0044 0193     		str	r3, [sp, #4]
 1867              	.LVL184:
 1868              	.L135:
2758:FreeRTOS\Source/tasks.c ****                 {
 1869              		.loc 1 2758 0
 1870 0046 434B     		ldr	r3, .L151+4
 1871 0048 9B6A     		ldr	r3, [r3, #40]
 1872 004a 1B68     		ldr	r3, [r3]
 1873 004c 002B     		cmp	r3, #0
 1874 004e 04D1     		bne	.L137
2765:FreeRTOS\Source/tasks.c ****                     break;
 1875              		.loc 1 2765 0
 1876 0050 0122     		movs	r2, #1
 1877 0052 5242     		rsbs	r2, r2, #0
 1878 0054 3F4B     		ldr	r3, .L151+4
 1879 0056 DA62     		str	r2, [r3, #44]
2766:FreeRTOS\Source/tasks.c ****                 }
 1880              		.loc 1 2766 0
 1881 0058 5BE0     		b	.L136
 1882              	.L137:
2774:FreeRTOS\Source/tasks.c ****                     xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 1883              		.loc 1 2774 0
 1884 005a 3E4B     		ldr	r3, .L151+4
 1885 005c 9B6A     		ldr	r3, [r3, #40]
 1886 005e DB68     		ldr	r3, [r3, #12]
 1887 0060 DB68     		ldr	r3, [r3, #12]
 1888              	.LVL185:
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 133


2775:FreeRTOS\Source/tasks.c **** 
 1889              		.loc 1 2775 0
 1890 0062 5A68     		ldr	r2, [r3, #4]
 1891              	.LVL186:
2777:FreeRTOS\Source/tasks.c ****                     {
 1892              		.loc 1 2777 0
 1893 0064 9442     		cmp	r4, r2
 1894 0066 02D2     		bcs	.L138
2784:FreeRTOS\Source/tasks.c ****                         break; /*lint !e9011 Code structure here is deemed easier to understand wit
 1895              		.loc 1 2784 0
 1896 0068 3A4B     		ldr	r3, .L151+4
 1897              	.LVL187:
 1898 006a DA62     		str	r2, [r3, #44]
2785:FreeRTOS\Source/tasks.c ****                     }
 1899              		.loc 1 2785 0
 1900 006c 51E0     		b	.L136
 1901              	.LVL188:
 1902              	.L138:
 1903              	.LBB11:
2793:FreeRTOS\Source/tasks.c **** 
 1904              		.loc 1 2793 0
 1905 006e 5A69     		ldr	r2, [r3, #20]
 1906              	.LVL189:
 1907 0070 9968     		ldr	r1, [r3, #8]
 1908 0072 D868     		ldr	r0, [r3, #12]
 1909 0074 8860     		str	r0, [r1, #8]
 1910              	.LVL190:
 1911 0076 D968     		ldr	r1, [r3, #12]
 1912 0078 9868     		ldr	r0, [r3, #8]
 1913 007a 4860     		str	r0, [r1, #4]
 1914 007c 1E1D     		adds	r6, r3, #4
 1915 007e 5168     		ldr	r1, [r2, #4]
 1916 0080 B142     		cmp	r1, r6
 1917 0082 01D1     		bne	.L139
2793:FreeRTOS\Source/tasks.c **** 
 1918              		.loc 1 2793 0 is_stmt 0 discriminator 1
 1919 0084 D968     		ldr	r1, [r3, #12]
 1920 0086 5160     		str	r1, [r2, #4]
 1921              	.L139:
2793:FreeRTOS\Source/tasks.c **** 
 1922              		.loc 1 2793 0 discriminator 3
 1923 0088 0021     		movs	r1, #0
 1924 008a 5961     		str	r1, [r3, #20]
 1925 008c 1168     		ldr	r1, [r2]
 1926 008e 0139     		subs	r1, r1, #1
 1927 0090 1160     		str	r1, [r2]
 1928              	.LBE11:
2797:FreeRTOS\Source/tasks.c ****                     {
 1929              		.loc 1 2797 0 is_stmt 1 discriminator 3
 1930 0092 9A6A     		ldr	r2, [r3, #40]
 1931              	.LVL191:
 1932 0094 002A     		cmp	r2, #0
 1933 0096 11D0     		beq	.L140
 1934              	.LVL192:
 1935              	.LBB12:
2799:FreeRTOS\Source/tasks.c ****                     }
 1936              		.loc 1 2799 0
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 134


 1937 0098 D969     		ldr	r1, [r3, #28]
 1938 009a 186A     		ldr	r0, [r3, #32]
 1939 009c 8860     		str	r0, [r1, #8]
 1940 009e 196A     		ldr	r1, [r3, #32]
 1941 00a0 D869     		ldr	r0, [r3, #28]
 1942 00a2 4860     		str	r0, [r1, #4]
 1943 00a4 1900     		movs	r1, r3
 1944 00a6 1831     		adds	r1, r1, #24
 1945 00a8 5068     		ldr	r0, [r2, #4]
 1946 00aa 8842     		cmp	r0, r1
 1947 00ac 01D1     		bne	.L141
2799:FreeRTOS\Source/tasks.c ****                     }
 1948              		.loc 1 2799 0 is_stmt 0 discriminator 1
 1949 00ae 196A     		ldr	r1, [r3, #32]
 1950 00b0 5160     		str	r1, [r2, #4]
 1951              	.L141:
2799:FreeRTOS\Source/tasks.c ****                     }
 1952              		.loc 1 2799 0 discriminator 3
 1953 00b2 0021     		movs	r1, #0
 1954 00b4 9962     		str	r1, [r3, #40]
 1955 00b6 1168     		ldr	r1, [r2]
 1956 00b8 0139     		subs	r1, r1, #1
 1957 00ba 1160     		str	r1, [r2]
 1958              	.LVL193:
 1959              	.L140:
 1960              	.LBE12:
2808:FreeRTOS\Source/tasks.c **** 
 1961              		.loc 1 2808 0 is_stmt 1
 1962 00bc DA6A     		ldr	r2, [r3, #44]
 1963 00be 2449     		ldr	r1, .L151
 1964 00c0 496E     		ldr	r1, [r1, #100]
 1965 00c2 8A42     		cmp	r2, r1
 1966 00c4 01D9     		bls	.L142
2808:FreeRTOS\Source/tasks.c **** 
 1967              		.loc 1 2808 0 is_stmt 0 discriminator 1
 1968 00c6 2249     		ldr	r1, .L151
 1969 00c8 4A66     		str	r2, [r1, #100]
 1970              	.L142:
 1971              	.LBB13:
2808:FreeRTOS\Source/tasks.c **** 
 1972              		.loc 1 2808 0 discriminator 3
 1973 00ca 224D     		ldr	r5, .L151+4
 1974 00cc 9100     		lsls	r1, r2, #2
 1975 00ce 8A18     		adds	r2, r1, r2
 1976 00d0 9100     		lsls	r1, r2, #2
 1977 00d2 6918     		adds	r1, r5, r1
 1978 00d4 4A6B     		ldr	r2, [r1, #52]
 1979              	.LVL194:
 1980 00d6 9A60     		str	r2, [r3, #8]
 1981 00d8 9168     		ldr	r1, [r2, #8]
 1982 00da D960     		str	r1, [r3, #12]
 1983 00dc 9168     		ldr	r1, [r2, #8]
 1984 00de 4E60     		str	r6, [r1, #4]
 1985 00e0 9660     		str	r6, [r2, #8]
 1986 00e2 DA6A     		ldr	r2, [r3, #44]
 1987              	.LVL195:
 1988 00e4 2800     		movs	r0, r5
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 135


 1989 00e6 3030     		adds	r0, r0, #48
 1990 00e8 9700     		lsls	r7, r2, #2
 1991 00ea BE18     		adds	r6, r7, r2
 1992 00ec B100     		lsls	r1, r6, #2
 1993 00ee 4118     		adds	r1, r0, r1
 1994 00f0 5961     		str	r1, [r3, #20]
 1995 00f2 BE18     		adds	r6, r7, r2
 1996 00f4 B100     		lsls	r1, r6, #2
 1997 00f6 6918     		adds	r1, r5, r1
 1998 00f8 0E6B     		ldr	r6, [r1, #48]
 1999 00fa 0136     		adds	r6, r6, #1
 2000 00fc BA18     		adds	r2, r7, r2
 2001 00fe 9100     		lsls	r1, r2, #2
 2002 0100 6918     		adds	r1, r5, r1
 2003 0102 0E63     		str	r6, [r1, #48]
 2004              	.LBE13:
2822:FreeRTOS\Source/tasks.c ****                         {
 2005              		.loc 1 2822 0 is_stmt 1 discriminator 3
 2006 0104 DA6A     		ldr	r2, [r3, #44]
 2007 0106 124B     		ldr	r3, .L151
 2008              	.LVL196:
 2009 0108 9B6D     		ldr	r3, [r3, #88]
 2010 010a DB6A     		ldr	r3, [r3, #44]
 2011 010c 9A42     		cmp	r2, r3
 2012 010e 95D8     		bhi	.L148
 2013 0110 99E7     		b	.L135
 2014              	.LVL197:
 2015              	.L136:
2841:FreeRTOS\Source/tasks.c ****             {
 2016              		.loc 1 2841 0
 2017 0112 0F4B     		ldr	r3, .L151
 2018 0114 9B6D     		ldr	r3, [r3, #88]
 2019 0116 DB6A     		ldr	r3, [r3, #44]
 2020 0118 9A00     		lsls	r2, r3, #2
 2021 011a D318     		adds	r3, r2, r3
 2022 011c 9A00     		lsls	r2, r3, #2
 2023 011e 0D4B     		ldr	r3, .L151+4
 2024 0120 9A18     		adds	r2, r3, r2
 2025 0122 136B     		ldr	r3, [r2, #48]
 2026 0124 012B     		cmp	r3, #1
 2027 0126 01D9     		bls	.L145
2843:FreeRTOS\Source/tasks.c ****             }
 2028              		.loc 1 2843 0
 2029 0128 0123     		movs	r3, #1
 2030 012a 0193     		str	r3, [sp, #4]
 2031              	.LVL198:
 2032              	.L145:
2869:FreeRTOS\Source/tasks.c ****             {
 2033              		.loc 1 2869 0
 2034 012c 084B     		ldr	r3, .L151
 2035 012e 5B6F     		ldr	r3, [r3, #116]
 2036 0130 002B     		cmp	r3, #0
 2037 0132 07D1     		bne	.L150
 2038 0134 08E0     		b	.L146
 2039              	.LVL199:
 2040              	.L133:
 2041              	.LBE14:
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 136


2882:FreeRTOS\Source/tasks.c **** 
 2042              		.loc 1 2882 0
 2043 0136 084A     		ldr	r2, .L151+8
 2044 0138 1368     		ldr	r3, [r2]
 2045 013a 0133     		adds	r3, r3, #1
 2046 013c 1360     		str	r3, [r2]
2724:FreeRTOS\Source/tasks.c **** 
 2047              		.loc 1 2724 0
 2048 013e 0023     		movs	r3, #0
 2049 0140 0193     		str	r3, [sp, #4]
 2050 0142 01E0     		b	.L146
 2051              	.LVL200:
 2052              	.L150:
 2053              	.LBB15:
2871:FreeRTOS\Source/tasks.c ****             }
 2054              		.loc 1 2871 0
 2055 0144 0123     		movs	r3, #1
 2056 0146 0193     		str	r3, [sp, #4]
 2057              	.LVL201:
 2058              	.L146:
 2059              	.LBE15:
2894:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 2060              		.loc 1 2894 0
 2061 0148 0198     		ldr	r0, [sp, #4]
 2062 014a 03B0     		add	sp, sp, #12
 2063              		@ sp needed
 2064 014c F0BD     		pop	{r4, r5, r6, r7, pc}
 2065              	.L152:
 2066 014e C046     		.align	2
 2067              	.L151:
 2068 0150 80000000 		.word	.LANCHOR1
 2069 0154 00000000 		.word	.LANCHOR0
 2070 0158 00010000 		.word	.LANCHOR3
 2071              		.cfi_endproc
 2072              	.LFE56:
 2073              		.size	xTaskIncrementTick, .-xTaskIncrementTick
 2074              		.section	.text.xTaskResumeAll,"ax",%progbits
 2075              		.align	2
 2076              		.global	xTaskResumeAll
 2077              		.code	16
 2078              		.thumb_func
 2079              		.type	xTaskResumeAll, %function
 2080              	xTaskResumeAll:
 2081              	.LFB50:
2175:FreeRTOS\Source/tasks.c ****     TCB_t * pxTCB = NULL;
 2082              		.loc 1 2175 0
 2083              		.cfi_startproc
 2084              		@ args = 0, pretend = 0, frame = 0
 2085              		@ frame_needed = 0, uses_anonymous_args = 0
 2086 0000 70B5     		push	{r4, r5, r6, lr}
 2087              		.cfi_def_cfa_offset 16
 2088              		.cfi_offset 4, -16
 2089              		.cfi_offset 5, -12
 2090              		.cfi_offset 6, -8
 2091              		.cfi_offset 14, -4
 2092              	.LVL202:
2188:FreeRTOS\Source/tasks.c ****     {
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 137


 2093              		.loc 1 2188 0
 2094 0002 FFF7FEFF 		bl	vPortEnterCritical
 2095              	.LVL203:
2190:FreeRTOS\Source/tasks.c **** 
 2096              		.loc 1 2190 0
 2097 0006 464B     		ldr	r3, .L168
 2098 0008 1A6F     		ldr	r2, [r3, #112]
 2099 000a 013A     		subs	r2, r2, #1
 2100 000c 1A67     		str	r2, [r3, #112]
2192:FreeRTOS\Source/tasks.c ****         {
 2101              		.loc 1 2192 0
 2102 000e 1B6F     		ldr	r3, [r3, #112]
 2103 0010 002B     		cmp	r3, #0
 2104 0012 7DD1     		bne	.L165
2194:FreeRTOS\Source/tasks.c ****             {
 2105              		.loc 1 2194 0
 2106 0014 424B     		ldr	r3, .L168
 2107 0016 5B6D     		ldr	r3, [r3, #84]
 2108 0018 002B     		cmp	r3, #0
 2109 001a 57D1     		bne	.L166
2177:FreeRTOS\Source/tasks.c **** 
 2110              		.loc 1 2177 0
 2111 001c 0024     		movs	r4, #0
 2112 001e 7AE0     		b	.L154
 2113              	.LVL204:
 2114              	.L160:
2200:FreeRTOS\Source/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 2115              		.loc 1 2200 0
 2116 0020 404B     		ldr	r3, .L168+4
 2117              	.LVL205:
 2118 0022 1B6A     		ldr	r3, [r3, #32]
 2119 0024 DB68     		ldr	r3, [r3, #12]
 2120              	.LVL206:
 2121              	.LBB16:
2201:FreeRTOS\Source/tasks.c ****                     portMEMORY_BARRIER();
 2122              		.loc 1 2201 0
 2123 0026 9A6A     		ldr	r2, [r3, #40]
 2124              	.LVL207:
 2125 0028 D969     		ldr	r1, [r3, #28]
 2126 002a 186A     		ldr	r0, [r3, #32]
 2127 002c 8860     		str	r0, [r1, #8]
 2128 002e 196A     		ldr	r1, [r3, #32]
 2129 0030 D869     		ldr	r0, [r3, #28]
 2130 0032 4860     		str	r0, [r1, #4]
 2131 0034 1900     		movs	r1, r3
 2132 0036 1831     		adds	r1, r1, #24
 2133 0038 5068     		ldr	r0, [r2, #4]
 2134 003a 8842     		cmp	r0, r1
 2135 003c 01D1     		bne	.L156
2201:FreeRTOS\Source/tasks.c ****                     portMEMORY_BARRIER();
 2136              		.loc 1 2201 0 is_stmt 0 discriminator 1
 2137 003e 196A     		ldr	r1, [r3, #32]
 2138 0040 5160     		str	r1, [r2, #4]
 2139              	.L156:
2201:FreeRTOS\Source/tasks.c ****                     portMEMORY_BARRIER();
 2140              		.loc 1 2201 0 discriminator 3
 2141 0042 0021     		movs	r1, #0
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 138


 2142 0044 9962     		str	r1, [r3, #40]
 2143 0046 1168     		ldr	r1, [r2]
 2144 0048 0139     		subs	r1, r1, #1
 2145 004a 1160     		str	r1, [r2]
 2146              	.LBE16:
2202:FreeRTOS\Source/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 2147              		.loc 1 2202 0 is_stmt 1 discriminator 3
 2148              	.LBB17:
2203:FreeRTOS\Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2149              		.loc 1 2203 0 discriminator 3
 2150 004c 5A69     		ldr	r2, [r3, #20]
 2151              	.LVL208:
 2152 004e 9968     		ldr	r1, [r3, #8]
 2153 0050 D868     		ldr	r0, [r3, #12]
 2154 0052 8860     		str	r0, [r1, #8]
 2155 0054 D968     		ldr	r1, [r3, #12]
 2156 0056 9868     		ldr	r0, [r3, #8]
 2157 0058 4860     		str	r0, [r1, #4]
 2158 005a 1C1D     		adds	r4, r3, #4
 2159 005c 5168     		ldr	r1, [r2, #4]
 2160 005e A142     		cmp	r1, r4
 2161 0060 01D1     		bne	.L157
2203:FreeRTOS\Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2162              		.loc 1 2203 0 is_stmt 0 discriminator 1
 2163 0062 D968     		ldr	r1, [r3, #12]
 2164 0064 5160     		str	r1, [r2, #4]
 2165              	.L157:
2203:FreeRTOS\Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2166              		.loc 1 2203 0 discriminator 3
 2167 0066 0021     		movs	r1, #0
 2168 0068 5961     		str	r1, [r3, #20]
 2169 006a 1168     		ldr	r1, [r2]
 2170 006c 0139     		subs	r1, r1, #1
 2171 006e 1160     		str	r1, [r2]
 2172              	.LBE17:
2204:FreeRTOS\Source/tasks.c **** 
 2173              		.loc 1 2204 0 is_stmt 1 discriminator 3
 2174 0070 DA6A     		ldr	r2, [r3, #44]
 2175              	.LVL209:
 2176 0072 2B49     		ldr	r1, .L168
 2177 0074 496E     		ldr	r1, [r1, #100]
 2178 0076 8A42     		cmp	r2, r1
 2179 0078 01D9     		bls	.L158
2204:FreeRTOS\Source/tasks.c **** 
 2180              		.loc 1 2204 0 is_stmt 0 discriminator 1
 2181 007a 2949     		ldr	r1, .L168
 2182 007c 4A66     		str	r2, [r1, #100]
 2183              	.L158:
 2184              	.LBB18:
2204:FreeRTOS\Source/tasks.c **** 
 2185              		.loc 1 2204 0 discriminator 3
 2186 007e 2948     		ldr	r0, .L168+4
 2187 0080 9100     		lsls	r1, r2, #2
 2188 0082 8A18     		adds	r2, r1, r2
 2189 0084 9100     		lsls	r1, r2, #2
 2190 0086 4118     		adds	r1, r0, r1
 2191 0088 4A6B     		ldr	r2, [r1, #52]
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 139


 2192              	.LVL210:
 2193 008a 9A60     		str	r2, [r3, #8]
 2194 008c 9168     		ldr	r1, [r2, #8]
 2195 008e D960     		str	r1, [r3, #12]
 2196 0090 9168     		ldr	r1, [r2, #8]
 2197 0092 4C60     		str	r4, [r1, #4]
 2198 0094 9460     		str	r4, [r2, #8]
 2199 0096 DA6A     		ldr	r2, [r3, #44]
 2200              	.LVL211:
 2201 0098 0600     		movs	r6, r0
 2202 009a 3036     		adds	r6, r6, #48
 2203 009c 9500     		lsls	r5, r2, #2
 2204 009e AC18     		adds	r4, r5, r2
 2205 00a0 A100     		lsls	r1, r4, #2
 2206 00a2 7118     		adds	r1, r6, r1
 2207 00a4 5961     		str	r1, [r3, #20]
 2208 00a6 AC18     		adds	r4, r5, r2
 2209 00a8 A100     		lsls	r1, r4, #2
 2210 00aa 4118     		adds	r1, r0, r1
 2211 00ac 0C6B     		ldr	r4, [r1, #48]
 2212 00ae 0134     		adds	r4, r4, #1
 2213 00b0 AA18     		adds	r2, r5, r2
 2214 00b2 9100     		lsls	r1, r2, #2
 2215 00b4 4118     		adds	r1, r0, r1
 2216 00b6 0C63     		str	r4, [r1, #48]
 2217              	.LBE18:
2208:FreeRTOS\Source/tasks.c ****                     {
 2218              		.loc 1 2208 0 is_stmt 1 discriminator 3
 2219 00b8 194A     		ldr	r2, .L168
 2220 00ba 926D     		ldr	r2, [r2, #88]
 2221 00bc D26A     		ldr	r2, [r2, #44]
 2222 00be D96A     		ldr	r1, [r3, #44]
 2223 00c0 9142     		cmp	r1, r2
 2224 00c2 04D3     		bcc	.L155
2210:FreeRTOS\Source/tasks.c ****                     }
 2225              		.loc 1 2210 0
 2226 00c4 0121     		movs	r1, #1
 2227 00c6 164A     		ldr	r2, .L168
 2228 00c8 5167     		str	r1, [r2, #116]
 2229 00ca 00E0     		b	.L155
 2230              	.LVL212:
 2231              	.L166:
 2232 00cc 0023     		movs	r3, #0
 2233              	.LVL213:
 2234              	.L155:
2198:FreeRTOS\Source/tasks.c ****                 {
 2235              		.loc 1 2198 0
 2236 00ce 154A     		ldr	r2, .L168+4
 2237 00d0 5269     		ldr	r2, [r2, #20]
 2238 00d2 002A     		cmp	r2, #0
 2239 00d4 A4D1     		bne	.L160
2218:FreeRTOS\Source/tasks.c ****                 {
 2240              		.loc 1 2218 0
 2241 00d6 002B     		cmp	r3, #0
 2242 00d8 01D0     		beq	.L161
2226:FreeRTOS\Source/tasks.c ****                 }
 2243              		.loc 1 2226 0
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 140


 2244 00da FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2245              	.LVL214:
 2246              	.L161:
 2247              	.LBB19:
2234:FreeRTOS\Source/tasks.c **** 
 2248              		.loc 1 2234 0
 2249 00de 124B     		ldr	r3, .L168+8
 2250 00e0 1C68     		ldr	r4, [r3]
 2251              	.LVL215:
2236:FreeRTOS\Source/tasks.c ****                     {
 2252              		.loc 1 2236 0
 2253 00e2 002C     		cmp	r4, #0
 2254 00e4 0CD0     		beq	.L162
 2255              	.L164:
2240:FreeRTOS\Source/tasks.c ****                             {
 2256              		.loc 1 2240 0
 2257 00e6 FFF7FEFF 		bl	xTaskIncrementTick
 2258              	.LVL216:
 2259 00ea 0028     		cmp	r0, #0
 2260 00ec 02D0     		beq	.L163
2242:FreeRTOS\Source/tasks.c ****                             }
 2261              		.loc 1 2242 0
 2262 00ee 0122     		movs	r2, #1
 2263 00f0 0B4B     		ldr	r3, .L168
 2264 00f2 5A67     		str	r2, [r3, #116]
 2265              	.L163:
2249:FreeRTOS\Source/tasks.c ****                         } while( xPendedCounts > ( TickType_t ) 0U );
 2266              		.loc 1 2249 0
 2267 00f4 013C     		subs	r4, r4, #1
 2268              	.LVL217:
2250:FreeRTOS\Source/tasks.c **** 
 2269              		.loc 1 2250 0
 2270 00f6 002C     		cmp	r4, #0
 2271 00f8 F5D1     		bne	.L164
2252:FreeRTOS\Source/tasks.c ****                     }
 2272              		.loc 1 2252 0
 2273 00fa 0022     		movs	r2, #0
 2274 00fc 0A4B     		ldr	r3, .L168+8
 2275 00fe 1A60     		str	r2, [r3]
 2276              	.L162:
 2277              	.LBE19:
2260:FreeRTOS\Source/tasks.c ****                 {
 2278              		.loc 1 2260 0
 2279 0100 074B     		ldr	r3, .L168
 2280 0102 5B6F     		ldr	r3, [r3, #116]
 2281 0104 002B     		cmp	r3, #0
 2282 0106 05D0     		beq	.L167
 2283              	.LVL218:
2267:FreeRTOS\Source/tasks.c ****                 }
 2284              		.loc 1 2267 0
 2285 0108 FFF7FEFF 		bl	vPortYield
 2286              	.LVL219:
2264:FreeRTOS\Source/tasks.c ****                     }
 2287              		.loc 1 2264 0
 2288 010c 0124     		movs	r4, #1
 2289              	.LVL220:
 2290 010e 02E0     		b	.L154
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 141


 2291              	.LVL221:
 2292              	.L165:
2177:FreeRTOS\Source/tasks.c **** 
 2293              		.loc 1 2177 0
 2294 0110 0024     		movs	r4, #0
 2295 0112 00E0     		b	.L154
 2296              	.LVL222:
 2297              	.L167:
 2298 0114 0024     		movs	r4, #0
 2299              	.LVL223:
 2300              	.L154:
2280:FreeRTOS\Source/tasks.c **** 
 2301              		.loc 1 2280 0
 2302 0116 FFF7FEFF 		bl	vPortExitCritical
 2303              	.LVL224:
2283:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 2304              		.loc 1 2283 0
 2305 011a 2000     		movs	r0, r4
 2306              		@ sp needed
 2307              	.LVL225:
 2308 011c 70BD     		pop	{r4, r5, r6, pc}
 2309              	.L169:
 2310 011e C046     		.align	2
 2311              	.L168:
 2312 0120 80000000 		.word	.LANCHOR1
 2313 0124 00000000 		.word	.LANCHOR0
 2314 0128 00010000 		.word	.LANCHOR3
 2315              		.cfi_endproc
 2316              	.LFE50:
 2317              		.size	xTaskResumeAll, .-xTaskResumeAll
 2318              		.section	.text.xTaskDelayUntil,"ax",%progbits
 2319              		.align	2
 2320              		.global	xTaskDelayUntil
 2321              		.code	16
 2322              		.thumb_func
 2323              		.type	xTaskDelayUntil, %function
 2324              	xTaskDelayUntil:
 2325              	.LFB38:
1216:FreeRTOS\Source/tasks.c ****         TickType_t xTimeToWake;
 2326              		.loc 1 1216 0
 2327              		.cfi_startproc
 2328              		@ args = 0, pretend = 0, frame = 0
 2329              		@ frame_needed = 0, uses_anonymous_args = 0
 2330              	.LVL226:
 2331 0000 70B5     		push	{r4, r5, r6, lr}
 2332              		.cfi_def_cfa_offset 16
 2333              		.cfi_offset 4, -16
 2334              		.cfi_offset 5, -12
 2335              		.cfi_offset 6, -8
 2336              		.cfi_offset 14, -4
 2337 0002 0500     		movs	r5, r0
 2338 0004 0C00     		movs	r4, r1
 2339              	.LVL227:
1224:FreeRTOS\Source/tasks.c ****         {
 2340              		.loc 1 1224 0
 2341 0006 FFF7FEFF 		bl	vTaskSuspendAll
 2342              	.LVL228:
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 142


 2343              	.LBB20:
1228:FreeRTOS\Source/tasks.c **** 
 2344              		.loc 1 1228 0
 2345 000a 144B     		ldr	r3, .L179
 2346 000c D86E     		ldr	r0, [r3, #108]
 2347              	.LVL229:
1231:FreeRTOS\Source/tasks.c **** 
 2348              		.loc 1 1231 0
 2349 000e 2B68     		ldr	r3, [r5]
 2350 0010 1919     		adds	r1, r3, r4
 2351              	.LVL230:
1233:FreeRTOS\Source/tasks.c ****             {
 2352              		.loc 1 1233 0
 2353 0012 9842     		cmp	r0, r3
 2354 0014 05D2     		bcs	.L171
1240:FreeRTOS\Source/tasks.c ****                 {
 2355              		.loc 1 1240 0
 2356 0016 8B42     		cmp	r3, r1
 2357 0018 09D9     		bls	.L175
1240:FreeRTOS\Source/tasks.c ****                 {
 2358              		.loc 1 1240 0 is_stmt 0 discriminator 1
 2359 001a 8842     		cmp	r0, r1
 2360 001c 09D3     		bcc	.L176
 2361              	.LBE20:
1218:FreeRTOS\Source/tasks.c **** 
 2362              		.loc 1 1218 0 is_stmt 1
 2363 001e 0024     		movs	r4, #0
 2364              	.LVL231:
 2365 0020 0CE0     		b	.L172
 2366              	.LVL232:
 2367              	.L171:
 2368              	.LBB21:
1254:FreeRTOS\Source/tasks.c ****                 {
 2369              		.loc 1 1254 0
 2370 0022 8B42     		cmp	r3, r1
 2371 0024 07D8     		bhi	.L177
1254:FreeRTOS\Source/tasks.c ****                 {
 2372              		.loc 1 1254 0 is_stmt 0 discriminator 1
 2373 0026 8842     		cmp	r0, r1
 2374 0028 07D3     		bcc	.L178
 2375              	.LBE21:
1218:FreeRTOS\Source/tasks.c **** 
 2376              		.loc 1 1218 0 is_stmt 1
 2377 002a 0024     		movs	r4, #0
 2378              	.LVL233:
 2379 002c 06E0     		b	.L172
 2380              	.LVL234:
 2381              	.L175:
 2382 002e 0024     		movs	r4, #0
 2383              	.LVL235:
 2384 0030 04E0     		b	.L172
 2385              	.LVL236:
 2386              	.L176:
 2387              	.LBB22:
1242:FreeRTOS\Source/tasks.c ****                 }
 2388              		.loc 1 1242 0
 2389 0032 0124     		movs	r4, #1
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 143


 2390              	.LVL237:
 2391 0034 02E0     		b	.L172
 2392              	.LVL238:
 2393              	.L177:
1256:FreeRTOS\Source/tasks.c ****                 }
 2394              		.loc 1 1256 0
 2395 0036 0124     		movs	r4, #1
 2396              	.LVL239:
 2397 0038 00E0     		b	.L172
 2398              	.LVL240:
 2399              	.L178:
 2400 003a 0124     		movs	r4, #1
 2401              	.LVL241:
 2402              	.L172:
1265:FreeRTOS\Source/tasks.c **** 
 2403              		.loc 1 1265 0
 2404 003c 2960     		str	r1, [r5]
1267:FreeRTOS\Source/tasks.c ****             {
 2405              		.loc 1 1267 0
 2406 003e 002C     		cmp	r4, #0
 2407 0040 03D0     		beq	.L173
1273:FreeRTOS\Source/tasks.c ****             }
 2408              		.loc 1 1273 0
 2409 0042 081A     		subs	r0, r1, r0
 2410              	.LVL242:
 2411 0044 0021     		movs	r1, #0
 2412              	.LVL243:
 2413 0046 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2414              	.LVL244:
 2415              	.L173:
 2416              	.LBE22:
1280:FreeRTOS\Source/tasks.c **** 
 2417              		.loc 1 1280 0
 2418 004a FFF7FEFF 		bl	xTaskResumeAll
 2419              	.LVL245:
1284:FreeRTOS\Source/tasks.c ****         {
 2420              		.loc 1 1284 0
 2421 004e 0028     		cmp	r0, #0
 2422 0050 01D1     		bne	.L174
1286:FreeRTOS\Source/tasks.c ****         }
 2423              		.loc 1 1286 0
 2424 0052 FFF7FEFF 		bl	vPortYield
 2425              	.LVL246:
 2426              	.L174:
1294:FreeRTOS\Source/tasks.c **** 
 2427              		.loc 1 1294 0
 2428 0056 2000     		movs	r0, r4
 2429              		@ sp needed
 2430              	.LVL247:
 2431              	.LVL248:
 2432 0058 70BD     		pop	{r4, r5, r6, pc}
 2433              	.L180:
 2434 005a C046     		.align	2
 2435              	.L179:
 2436 005c 80000000 		.word	.LANCHOR1
 2437              		.cfi_endproc
 2438              	.LFE38:
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 144


 2439              		.size	xTaskDelayUntil, .-xTaskDelayUntil
 2440              		.section	.text.vTaskDelay,"ax",%progbits
 2441              		.align	2
 2442              		.global	vTaskDelay
 2443              		.code	16
 2444              		.thumb_func
 2445              		.type	vTaskDelay, %function
 2446              	vTaskDelay:
 2447              	.LFB39:
1302:FreeRTOS\Source/tasks.c ****         BaseType_t xAlreadyYielded = pdFALSE;
 2448              		.loc 1 1302 0
 2449              		.cfi_startproc
 2450              		@ args = 0, pretend = 0, frame = 0
 2451              		@ frame_needed = 0, uses_anonymous_args = 0
 2452              	.LVL249:
 2453 0000 10B5     		push	{r4, lr}
 2454              		.cfi_def_cfa_offset 8
 2455              		.cfi_offset 4, -8
 2456              		.cfi_offset 14, -4
 2457 0002 041E     		subs	r4, r0, #0
 2458              	.LVL250:
1306:FreeRTOS\Source/tasks.c ****         {
 2459              		.loc 1 1306 0
 2460 0004 08D0     		beq	.L184
1309:FreeRTOS\Source/tasks.c ****             {
 2461              		.loc 1 1309 0
 2462 0006 FFF7FEFF 		bl	vTaskSuspendAll
 2463              	.LVL251:
1320:FreeRTOS\Source/tasks.c ****             }
 2464              		.loc 1 1320 0
 2465 000a 0021     		movs	r1, #0
 2466 000c 2000     		movs	r0, r4
 2467 000e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2468              	.LVL252:
1322:FreeRTOS\Source/tasks.c ****         }
 2469              		.loc 1 1322 0
 2470 0012 FFF7FEFF 		bl	xTaskResumeAll
 2471              	.LVL253:
 2472 0016 00E0     		b	.L182
 2473              	.LVL254:
 2474              	.L184:
1303:FreeRTOS\Source/tasks.c **** 
 2475              		.loc 1 1303 0
 2476 0018 0020     		movs	r0, #0
 2477              	.LVL255:
 2478              	.L182:
1331:FreeRTOS\Source/tasks.c ****         {
 2479              		.loc 1 1331 0
 2480 001a 0028     		cmp	r0, #0
 2481 001c 01D1     		bne	.L181
1333:FreeRTOS\Source/tasks.c ****         }
 2482              		.loc 1 1333 0
 2483 001e FFF7FEFF 		bl	vPortYield
 2484              	.LVL256:
 2485              	.L181:
1339:FreeRTOS\Source/tasks.c **** 
 2486              		.loc 1 1339 0
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 145


 2487              		@ sp needed
 2488              	.LVL257:
 2489 0022 10BD     		pop	{r4, pc}
 2490              		.cfi_endproc
 2491              	.LFE39:
 2492              		.size	vTaskDelay, .-vTaskDelay
 2493              		.section	.text.xTaskCatchUpTicks,"ax",%progbits
 2494              		.align	2
 2495              		.global	xTaskCatchUpTicks
 2496              		.code	16
 2497              		.thumb_func
 2498              		.type	xTaskCatchUpTicks, %function
 2499              	xTaskCatchUpTicks:
 2500              	.LFB55:
2617:FreeRTOS\Source/tasks.c ****     BaseType_t xYieldOccurred;
 2501              		.loc 1 2617 0
 2502              		.cfi_startproc
 2503              		@ args = 0, pretend = 0, frame = 0
 2504              		@ frame_needed = 0, uses_anonymous_args = 0
 2505              	.LVL258:
 2506 0000 10B5     		push	{r4, lr}
 2507              		.cfi_def_cfa_offset 8
 2508              		.cfi_offset 4, -8
 2509              		.cfi_offset 14, -4
 2510 0002 0400     		movs	r4, r0
2626:FreeRTOS\Source/tasks.c **** 
 2511              		.loc 1 2626 0
 2512 0004 FFF7FEFF 		bl	vTaskSuspendAll
 2513              	.LVL259:
2629:FreeRTOS\Source/tasks.c ****     {
 2514              		.loc 1 2629 0
 2515 0008 FFF7FEFF 		bl	vPortEnterCritical
 2516              	.LVL260:
2631:FreeRTOS\Source/tasks.c ****     }
 2517              		.loc 1 2631 0
 2518 000c 044B     		ldr	r3, .L186
 2519 000e 1A68     		ldr	r2, [r3]
 2520 0010 1419     		adds	r4, r2, r4
 2521              	.LVL261:
 2522 0012 1C60     		str	r4, [r3]
2633:FreeRTOS\Source/tasks.c ****     xYieldOccurred = xTaskResumeAll();
 2523              		.loc 1 2633 0
 2524 0014 FFF7FEFF 		bl	vPortExitCritical
 2525              	.LVL262:
2634:FreeRTOS\Source/tasks.c **** 
 2526              		.loc 1 2634 0
 2527 0018 FFF7FEFF 		bl	xTaskResumeAll
 2528              	.LVL263:
2637:FreeRTOS\Source/tasks.c **** /*----------------------------------------------------------*/
 2529              		.loc 1 2637 0
 2530              		@ sp needed
 2531 001c 10BD     		pop	{r4, pc}
 2532              	.L187:
 2533 001e C046     		.align	2
 2534              	.L186:
 2535 0020 00010000 		.word	.LANCHOR3
 2536              		.cfi_endproc
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 146


 2537              	.LFE55:
 2538              		.size	xTaskCatchUpTicks, .-xTaskCatchUpTicks
 2539              		.section	.text.vTaskSwitchContext,"ax",%progbits
 2540              		.align	2
 2541              		.global	vTaskSwitchContext
 2542              		.code	16
 2543              		.thumb_func
 2544              		.type	vTaskSwitchContext, %function
 2545              	vTaskSwitchContext:
 2546              	.LFB57:
3010:FreeRTOS\Source/tasks.c ****     if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2547              		.loc 1 3010 0
 2548              		.cfi_startproc
 2549              		@ args = 0, pretend = 0, frame = 0
 2550              		@ frame_needed = 0, uses_anonymous_args = 0
 2551 0000 10B5     		push	{r4, lr}
 2552              		.cfi_def_cfa_offset 8
 2553              		.cfi_offset 4, -8
 2554              		.cfi_offset 14, -4
3011:FreeRTOS\Source/tasks.c ****     {
 2555              		.loc 1 3011 0
 2556 0002 274B     		ldr	r3, .L196
 2557 0004 1B6F     		ldr	r3, [r3, #112]
 2558 0006 002B     		cmp	r3, #0
 2559 0008 03D0     		beq	.L189
3015:FreeRTOS\Source/tasks.c ****     }
 2560              		.loc 1 3015 0
 2561 000a 0122     		movs	r2, #1
 2562 000c 244B     		ldr	r3, .L196
 2563 000e 5A67     		str	r2, [r3, #116]
 2564 0010 45E0     		b	.L188
 2565              	.L189:
3019:FreeRTOS\Source/tasks.c ****         traceTASK_SWITCHED_OUT();
 2566              		.loc 1 3019 0
 2567 0012 234B     		ldr	r3, .L196
 2568 0014 0022     		movs	r2, #0
 2569 0016 5A67     		str	r2, [r3, #116]
 2570              	.LBB23:
3051:FreeRTOS\Source/tasks.c **** 
 2571              		.loc 1 3051 0
 2572 0018 9B6D     		ldr	r3, [r3, #88]
 2573 001a 1B6B     		ldr	r3, [r3, #48]
 2574              	.LVL264:
 2575 001c 214A     		ldr	r2, .L196+4
 2576 001e 1968     		ldr	r1, [r3]
 2577 0020 9142     		cmp	r1, r2
 2578 0022 09D1     		bne	.L191
3051:FreeRTOS\Source/tasks.c **** 
 2579              		.loc 1 3051 0 is_stmt 0 discriminator 2
 2580 0024 5968     		ldr	r1, [r3, #4]
 2581 0026 9142     		cmp	r1, r2
 2582 0028 06D1     		bne	.L191
3051:FreeRTOS\Source/tasks.c **** 
 2583              		.loc 1 3051 0 discriminator 4
 2584 002a 9968     		ldr	r1, [r3, #8]
 2585 002c 9142     		cmp	r1, r2
 2586 002e 03D1     		bne	.L191
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 147


3051:FreeRTOS\Source/tasks.c **** 
 2587              		.loc 1 3051 0 discriminator 6
 2588 0030 DA68     		ldr	r2, [r3, #12]
 2589 0032 1C4B     		ldr	r3, .L196+4
 2590              	.LVL265:
 2591 0034 9A42     		cmp	r2, r3
 2592 0036 05D0     		beq	.L192
 2593              	.L191:
3051:FreeRTOS\Source/tasks.c **** 
 2594              		.loc 1 3051 0 discriminator 7
 2595 0038 194B     		ldr	r3, .L196
 2596 003a 986D     		ldr	r0, [r3, #88]
 2597 003c 996D     		ldr	r1, [r3, #88]
 2598 003e 3431     		adds	r1, r1, #52
 2599 0040 FFF7FEFF 		bl	vApplicationStackOverflowHook
 2600              	.LVL266:
 2601              	.L192:
 2602              	.LBE23:
 2603              	.LBB24:
3062:FreeRTOS\Source/tasks.c ****         traceTASK_SWITCHED_IN();
 2604              		.loc 1 3062 0 is_stmt 1
 2605 0044 164B     		ldr	r3, .L196
 2606 0046 5B6E     		ldr	r3, [r3, #100]
 2607              	.LVL267:
 2608 0048 00E0     		b	.L193
 2609              	.L194:
3062:FreeRTOS\Source/tasks.c ****         traceTASK_SWITCHED_IN();
 2610              		.loc 1 3062 0 is_stmt 0 discriminator 3
 2611 004a 013B     		subs	r3, r3, #1
 2612              	.LVL268:
 2613              	.L193:
3062:FreeRTOS\Source/tasks.c ****         traceTASK_SWITCHED_IN();
 2614              		.loc 1 3062 0 discriminator 1
 2615 004c 9900     		lsls	r1, r3, #2
 2616 004e C918     		adds	r1, r1, r3
 2617 0050 8A00     		lsls	r2, r1, #2
 2618 0052 1549     		ldr	r1, .L196+8
 2619 0054 8A18     		adds	r2, r1, r2
 2620 0056 126B     		ldr	r2, [r2, #48]
 2621 0058 002A     		cmp	r2, #0
 2622 005a F6D0     		beq	.L194
 2623              	.LVL269:
 2624              	.LBB25:
3062:FreeRTOS\Source/tasks.c ****         traceTASK_SWITCHED_IN();
 2625              		.loc 1 3062 0 discriminator 4
 2626 005c 0A00     		movs	r2, r1
 2627 005e 9900     		lsls	r1, r3, #2
 2628 0060 CC18     		adds	r4, r1, r3
 2629 0062 A000     		lsls	r0, r4, #2
 2630 0064 1018     		adds	r0, r2, r0
 2631 0066 446B     		ldr	r4, [r0, #52]
 2632 0068 6468     		ldr	r4, [r4, #4]
 2633 006a 4463     		str	r4, [r0, #52]
 2634 006c 3032     		adds	r2, r2, #48
 2635 006e 1000     		movs	r0, r2
 2636 0070 C918     		adds	r1, r1, r3
 2637 0072 8A00     		lsls	r2, r1, #2
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 148


 2638 0074 0832     		adds	r2, r2, #8
 2639 0076 8218     		adds	r2, r0, r2
 2640 0078 9442     		cmp	r4, r2
 2641 007a 06D1     		bne	.L195
3062:FreeRTOS\Source/tasks.c ****         traceTASK_SWITCHED_IN();
 2642              		.loc 1 3062 0 discriminator 5
 2643 007c 6068     		ldr	r0, [r4, #4]
 2644 007e 9900     		lsls	r1, r3, #2
 2645 0080 C918     		adds	r1, r1, r3
 2646 0082 8A00     		lsls	r2, r1, #2
 2647 0084 0849     		ldr	r1, .L196+8
 2648 0086 8A18     		adds	r2, r1, r2
 2649 0088 5063     		str	r0, [r2, #52]
 2650              	.L195:
3062:FreeRTOS\Source/tasks.c ****         traceTASK_SWITCHED_IN();
 2651              		.loc 1 3062 0 discriminator 7
 2652 008a 9900     		lsls	r1, r3, #2
 2653 008c C918     		adds	r1, r1, r3
 2654 008e 8A00     		lsls	r2, r1, #2
 2655 0090 0549     		ldr	r1, .L196+8
 2656 0092 8A18     		adds	r2, r1, r2
 2657 0094 526B     		ldr	r2, [r2, #52]
 2658 0096 D168     		ldr	r1, [r2, #12]
 2659 0098 014A     		ldr	r2, .L196
 2660 009a 9165     		str	r1, [r2, #88]
 2661              	.LBE25:
 2662 009c 5366     		str	r3, [r2, #100]
 2663              	.LVL270:
 2664              	.L188:
 2665              	.LBE24:
3080:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 2666              		.loc 1 3080 0 is_stmt 1
 2667              		@ sp needed
 2668 009e 10BD     		pop	{r4, pc}
 2669              	.L197:
 2670              		.align	2
 2671              	.L196:
 2672 00a0 80000000 		.word	.LANCHOR1
 2673 00a4 A5A5A5A5 		.word	-1515870811
 2674 00a8 00000000 		.word	.LANCHOR0
 2675              		.cfi_endproc
 2676              	.LFE57:
 2677              		.size	vTaskSwitchContext, .-vTaskSwitchContext
 2678              		.section	.text.vTaskSuspend,"ax",%progbits
 2679              		.align	2
 2680              		.global	vTaskSuspend
 2681              		.code	16
 2682              		.thumb_func
 2683              		.type	vTaskSuspend, %function
 2684              	vTaskSuspend:
 2685              	.LFB43:
1674:FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
 2686              		.loc 1 1674 0
 2687              		.cfi_startproc
 2688              		@ args = 0, pretend = 0, frame = 0
 2689              		@ frame_needed = 0, uses_anonymous_args = 0
 2690              	.LVL271:
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 149


 2691 0000 70B5     		push	{r4, r5, r6, lr}
 2692              		.cfi_def_cfa_offset 16
 2693              		.cfi_offset 4, -16
 2694              		.cfi_offset 5, -12
 2695              		.cfi_offset 6, -8
 2696              		.cfi_offset 14, -4
 2697 0002 0400     		movs	r4, r0
1677:FreeRTOS\Source/tasks.c ****         {
 2698              		.loc 1 1677 0
 2699 0004 FFF7FEFF 		bl	vPortEnterCritical
 2700              	.LVL272:
1681:FreeRTOS\Source/tasks.c **** 
 2701              		.loc 1 1681 0
 2702 0008 002C     		cmp	r4, #0
 2703 000a 01D1     		bne	.L199
1681:FreeRTOS\Source/tasks.c **** 
 2704              		.loc 1 1681 0 is_stmt 0 discriminator 1
 2705 000c 214B     		ldr	r3, .L208
 2706 000e 9C6D     		ldr	r4, [r3, #88]
 2707              	.LVL273:
 2708              	.L199:
1687:FreeRTOS\Source/tasks.c ****             {
 2709              		.loc 1 1687 0 is_stmt 1 discriminator 4
 2710 0010 251D     		adds	r5, r4, #4
 2711 0012 2800     		movs	r0, r5
 2712 0014 FFF7FEFF 		bl	uxListRemove
 2713              	.LVL274:
1697:FreeRTOS\Source/tasks.c ****             {
 2714              		.loc 1 1697 0 discriminator 4
 2715 0018 A36A     		ldr	r3, [r4, #40]
 2716 001a 002B     		cmp	r3, #0
 2717 001c 03D0     		beq	.L200
1699:FreeRTOS\Source/tasks.c ****             }
 2718              		.loc 1 1699 0
 2719 001e 2000     		movs	r0, r4
 2720 0020 1830     		adds	r0, r0, #24
 2721 0022 FFF7FEFF 		bl	uxListRemove
 2722              	.LVL275:
 2723              	.L200:
1706:FreeRTOS\Source/tasks.c **** 
 2724              		.loc 1 1706 0
 2725 0026 2900     		movs	r1, r5
 2726 0028 1B48     		ldr	r0, .L208+4
 2727 002a FFF7FEFF 		bl	vListInsertEnd
 2728              	.LVL276:
 2729              	.LBB26:
1712:FreeRTOS\Source/tasks.c ****                 {
 2730              		.loc 1 1712 0
 2731 002e 0023     		movs	r3, #0
 2732 0030 09E0     		b	.L201
 2733              	.LVL277:
 2734              	.L203:
1714:FreeRTOS\Source/tasks.c ****                     {
 2735              		.loc 1 1714 0
 2736 0032 E218     		adds	r2, r4, r3
 2737 0034 4C32     		adds	r2, r2, #76
 2738 0036 1278     		ldrb	r2, [r2]
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 150


 2739 0038 012A     		cmp	r2, #1
 2740 003a 03D1     		bne	.L202
1718:FreeRTOS\Source/tasks.c ****                     }
 2741              		.loc 1 1718 0
 2742 003c E218     		adds	r2, r4, r3
 2743 003e 4C32     		adds	r2, r2, #76
 2744 0040 0021     		movs	r1, #0
 2745 0042 1170     		strb	r1, [r2]
 2746              	.L202:
1712:FreeRTOS\Source/tasks.c ****                 {
 2747              		.loc 1 1712 0 discriminator 2
 2748 0044 0133     		adds	r3, r3, #1
 2749              	.LVL278:
 2750              	.L201:
1712:FreeRTOS\Source/tasks.c ****                 {
 2751              		.loc 1 1712 0 is_stmt 0 discriminator 1
 2752 0046 002B     		cmp	r3, #0
 2753 0048 F3DD     		ble	.L203
 2754              	.LBE26:
1724:FreeRTOS\Source/tasks.c **** 
 2755              		.loc 1 1724 0 is_stmt 1
 2756 004a FFF7FEFF 		bl	vPortExitCritical
 2757              	.LVL279:
1726:FreeRTOS\Source/tasks.c ****         {
 2758              		.loc 1 1726 0
 2759 004e 114B     		ldr	r3, .L208
 2760 0050 DB6D     		ldr	r3, [r3, #92]
 2761 0052 002B     		cmp	r3, #0
 2762 0054 05D0     		beq	.L204
1730:FreeRTOS\Source/tasks.c ****             {
 2763              		.loc 1 1730 0
 2764 0056 FFF7FEFF 		bl	vPortEnterCritical
 2765              	.LVL280:
1732:FreeRTOS\Source/tasks.c ****             }
 2766              		.loc 1 1732 0
 2767 005a FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2768              	.LVL281:
1734:FreeRTOS\Source/tasks.c ****         }
 2769              		.loc 1 1734 0
 2770 005e FFF7FEFF 		bl	vPortExitCritical
 2771              	.LVL282:
 2772              	.L204:
1741:FreeRTOS\Source/tasks.c ****         {
 2773              		.loc 1 1741 0
 2774 0062 0C4B     		ldr	r3, .L208
 2775 0064 9B6D     		ldr	r3, [r3, #88]
 2776 0066 9C42     		cmp	r4, r3
 2777 0068 12D1     		bne	.L198
1743:FreeRTOS\Source/tasks.c ****             {
 2778              		.loc 1 1743 0
 2779 006a 0A4B     		ldr	r3, .L208
 2780 006c DB6D     		ldr	r3, [r3, #92]
 2781 006e 002B     		cmp	r3, #0
 2782 0070 02D0     		beq	.L206
1747:FreeRTOS\Source/tasks.c ****             }
 2783              		.loc 1 1747 0
 2784 0072 FFF7FEFF 		bl	vPortYield
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 151


 2785              	.LVL283:
 2786 0076 0BE0     		b	.L198
 2787              	.L206:
1754:FreeRTOS\Source/tasks.c ****                 {
 2788              		.loc 1 1754 0
 2789 0078 074B     		ldr	r3, .L208+4
 2790 007a 1A68     		ldr	r2, [r3]
 2791 007c 054B     		ldr	r3, .L208
 2792 007e 5B6D     		ldr	r3, [r3, #84]
 2793 0080 9A42     		cmp	r2, r3
 2794 0082 03D1     		bne	.L207
1760:FreeRTOS\Source/tasks.c ****                 }
 2795              		.loc 1 1760 0
 2796 0084 0022     		movs	r2, #0
 2797 0086 034B     		ldr	r3, .L208
 2798 0088 9A65     		str	r2, [r3, #88]
 2799 008a 01E0     		b	.L198
 2800              	.L207:
1764:FreeRTOS\Source/tasks.c ****                 }
 2801              		.loc 1 1764 0
 2802 008c FFF7FEFF 		bl	vTaskSwitchContext
 2803              	.LVL284:
 2804              	.L198:
1772:FreeRTOS\Source/tasks.c **** 
 2805              		.loc 1 1772 0
 2806              		@ sp needed
 2807              	.LVL285:
 2808              	.LVL286:
 2809 0090 70BD     		pop	{r4, r5, r6, pc}
 2810              	.L209:
 2811 0092 C046     		.align	2
 2812              	.L208:
 2813 0094 80000000 		.word	.LANCHOR1
 2814 0098 00000000 		.word	.LANCHOR0
 2815              		.cfi_endproc
 2816              	.LFE43:
 2817              		.size	vTaskSuspend, .-vTaskSuspend
 2818              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 2819              		.align	2
 2820              		.global	vTaskPlaceOnEventList
 2821              		.code	16
 2822              		.thumb_func
 2823              		.type	vTaskPlaceOnEventList, %function
 2824              	vTaskPlaceOnEventList:
 2825              	.LFB58:
3085:FreeRTOS\Source/tasks.c ****     configASSERT( pxEventList );
 2826              		.loc 1 3085 0
 2827              		.cfi_startproc
 2828              		@ args = 0, pretend = 0, frame = 0
 2829              		@ frame_needed = 0, uses_anonymous_args = 0
 2830              	.LVL287:
 2831 0000 10B5     		push	{r4, lr}
 2832              		.cfi_def_cfa_offset 8
 2833              		.cfi_offset 4, -8
 2834              		.cfi_offset 14, -4
 2835 0002 0C00     		movs	r4, r1
3102:FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 152


 2836              		.loc 1 3102 0
 2837 0004 044B     		ldr	r3, .L211
 2838 0006 996D     		ldr	r1, [r3, #88]
 2839              	.LVL288:
 2840 0008 1831     		adds	r1, r1, #24
 2841 000a FFF7FEFF 		bl	vListInsert
 2842              	.LVL289:
3104:FreeRTOS\Source/tasks.c **** }
 2843              		.loc 1 3104 0
 2844 000e 0121     		movs	r1, #1
 2845 0010 2000     		movs	r0, r4
 2846 0012 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2847              	.LVL290:
3105:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 2848              		.loc 1 3105 0
 2849              		@ sp needed
 2850              	.LVL291:
 2851 0016 10BD     		pop	{r4, pc}
 2852              	.L212:
 2853              		.align	2
 2854              	.L211:
 2855 0018 80000000 		.word	.LANCHOR1
 2856              		.cfi_endproc
 2857              	.LFE58:
 2858              		.size	vTaskPlaceOnEventList, .-vTaskPlaceOnEventList
 2859              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 2860              		.align	2
 2861              		.global	vTaskPlaceOnUnorderedEventList
 2862              		.code	16
 2863              		.thumb_func
 2864              		.type	vTaskPlaceOnUnorderedEventList, %function
 2865              	vTaskPlaceOnUnorderedEventList:
 2866              	.LFB59:
3111:FreeRTOS\Source/tasks.c ****     configASSERT( pxEventList );
 2867              		.loc 1 3111 0
 2868              		.cfi_startproc
 2869              		@ args = 0, pretend = 0, frame = 0
 2870              		@ frame_needed = 0, uses_anonymous_args = 0
 2871              	.LVL292:
 2872 0000 70B5     		push	{r4, r5, r6, lr}
 2873              		.cfi_def_cfa_offset 16
 2874              		.cfi_offset 4, -16
 2875              		.cfi_offset 5, -12
 2876              		.cfi_offset 6, -8
 2877              		.cfi_offset 14, -4
3121:FreeRTOS\Source/tasks.c **** 
 2878              		.loc 1 3121 0
 2879 0002 0E4B     		ldr	r3, .L214
 2880 0004 9C6D     		ldr	r4, [r3, #88]
 2881 0006 8025     		movs	r5, #128
 2882 0008 2D06     		lsls	r5, r5, #24
 2883 000a 2943     		orrs	r1, r5
 2884              	.LVL293:
 2885 000c A161     		str	r1, [r4, #24]
 2886              	.LBB27:
3128:FreeRTOS\Source/tasks.c **** 
 2887              		.loc 1 3128 0
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 153


 2888 000e 4168     		ldr	r1, [r0, #4]
 2889              	.LVL294:
 2890 0010 9C6D     		ldr	r4, [r3, #88]
 2891 0012 E161     		str	r1, [r4, #28]
 2892 0014 9C6D     		ldr	r4, [r3, #88]
 2893 0016 8D68     		ldr	r5, [r1, #8]
 2894 0018 2562     		str	r5, [r4, #32]
 2895 001a 8D68     		ldr	r5, [r1, #8]
 2896 001c 9C6D     		ldr	r4, [r3, #88]
 2897 001e 1834     		adds	r4, r4, #24
 2898 0020 6C60     		str	r4, [r5, #4]
 2899 0022 9C6D     		ldr	r4, [r3, #88]
 2900 0024 1834     		adds	r4, r4, #24
 2901 0026 8C60     		str	r4, [r1, #8]
 2902 0028 9B6D     		ldr	r3, [r3, #88]
 2903 002a 9862     		str	r0, [r3, #40]
 2904 002c 0368     		ldr	r3, [r0]
 2905 002e 0133     		adds	r3, r3, #1
 2906 0030 0360     		str	r3, [r0]
 2907              	.LBE27:
3130:FreeRTOS\Source/tasks.c **** }
 2908              		.loc 1 3130 0
 2909 0032 0121     		movs	r1, #1
 2910              	.LVL295:
 2911 0034 1000     		movs	r0, r2
 2912              	.LVL296:
 2913 0036 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2914              	.LVL297:
3131:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 2915              		.loc 1 3131 0
 2916              		@ sp needed
 2917 003a 70BD     		pop	{r4, r5, r6, pc}
 2918              	.L215:
 2919              		.align	2
 2920              	.L214:
 2921 003c 80000000 		.word	.LANCHOR1
 2922              		.cfi_endproc
 2923              	.LFE59:
 2924              		.size	vTaskPlaceOnUnorderedEventList, .-vTaskPlaceOnUnorderedEventList
 2925              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 2926              		.align	2
 2927              		.global	xTaskRemoveFromEventList
 2928              		.code	16
 2929              		.thumb_func
 2930              		.type	xTaskRemoveFromEventList, %function
 2931              	xTaskRemoveFromEventList:
 2932              	.LFB60:
3170:FreeRTOS\Source/tasks.c ****     TCB_t * pxUnblockedTCB;
 2933              		.loc 1 3170 0
 2934              		.cfi_startproc
 2935              		@ args = 0, pretend = 0, frame = 0
 2936              		@ frame_needed = 0, uses_anonymous_args = 0
 2937              	.LVL298:
 2938 0000 70B5     		push	{r4, r5, r6, lr}
 2939              		.cfi_def_cfa_offset 16
 2940              		.cfi_offset 4, -16
 2941              		.cfi_offset 5, -12
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 154


 2942              		.cfi_offset 6, -8
 2943              		.cfi_offset 14, -4
3187:FreeRTOS\Source/tasks.c ****     configASSERT( pxUnblockedTCB );
 2944              		.loc 1 3187 0
 2945 0002 C368     		ldr	r3, [r0, #12]
 2946 0004 DB68     		ldr	r3, [r3, #12]
 2947              	.LVL299:
 2948              	.LBB28:
3189:FreeRTOS\Source/tasks.c **** 
 2949              		.loc 1 3189 0
 2950 0006 9A6A     		ldr	r2, [r3, #40]
 2951              	.LVL300:
 2952 0008 D969     		ldr	r1, [r3, #28]
 2953 000a 186A     		ldr	r0, [r3, #32]
 2954              	.LVL301:
 2955 000c 8860     		str	r0, [r1, #8]
 2956 000e 196A     		ldr	r1, [r3, #32]
 2957 0010 D869     		ldr	r0, [r3, #28]
 2958 0012 4860     		str	r0, [r1, #4]
 2959 0014 1800     		movs	r0, r3
 2960 0016 1830     		adds	r0, r0, #24
 2961 0018 5168     		ldr	r1, [r2, #4]
 2962 001a 8142     		cmp	r1, r0
 2963 001c 01D1     		bne	.L217
3189:FreeRTOS\Source/tasks.c **** 
 2964              		.loc 1 3189 0 is_stmt 0 discriminator 1
 2965 001e 196A     		ldr	r1, [r3, #32]
 2966 0020 5160     		str	r1, [r2, #4]
 2967              	.L217:
3189:FreeRTOS\Source/tasks.c **** 
 2968              		.loc 1 3189 0 discriminator 3
 2969 0022 0021     		movs	r1, #0
 2970 0024 9962     		str	r1, [r3, #40]
 2971 0026 1168     		ldr	r1, [r2]
 2972 0028 0139     		subs	r1, r1, #1
 2973 002a 1160     		str	r1, [r2]
 2974              	.LBE28:
3191:FreeRTOS\Source/tasks.c ****     {
 2975              		.loc 1 3191 0 is_stmt 1 discriminator 3
 2976 002c 2A4A     		ldr	r2, .L224
 2977              	.LVL302:
 2978 002e 126F     		ldr	r2, [r2, #112]
 2979 0030 002A     		cmp	r2, #0
 2980 0032 36D1     		bne	.L218
 2981              	.LBB29:
3193:FreeRTOS\Source/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 2982              		.loc 1 3193 0
 2983 0034 5A69     		ldr	r2, [r3, #20]
 2984              	.LVL303:
 2985 0036 9968     		ldr	r1, [r3, #8]
 2986 0038 D868     		ldr	r0, [r3, #12]
 2987 003a 8860     		str	r0, [r1, #8]
 2988 003c D968     		ldr	r1, [r3, #12]
 2989 003e 9868     		ldr	r0, [r3, #8]
 2990 0040 4860     		str	r0, [r1, #4]
 2991 0042 1C1D     		adds	r4, r3, #4
 2992 0044 5168     		ldr	r1, [r2, #4]
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 155


 2993 0046 A142     		cmp	r1, r4
 2994 0048 01D1     		bne	.L219
3193:FreeRTOS\Source/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 2995              		.loc 1 3193 0 is_stmt 0 discriminator 1
 2996 004a D968     		ldr	r1, [r3, #12]
 2997 004c 5160     		str	r1, [r2, #4]
 2998              	.L219:
3193:FreeRTOS\Source/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 2999              		.loc 1 3193 0 discriminator 3
 3000 004e 0021     		movs	r1, #0
 3001 0050 5961     		str	r1, [r3, #20]
 3002 0052 1168     		ldr	r1, [r2]
 3003 0054 0139     		subs	r1, r1, #1
 3004 0056 1160     		str	r1, [r2]
 3005              	.LBE29:
3194:FreeRTOS\Source/tasks.c **** 
 3006              		.loc 1 3194 0 is_stmt 1 discriminator 3
 3007 0058 DA6A     		ldr	r2, [r3, #44]
 3008              	.LVL304:
 3009 005a 1F49     		ldr	r1, .L224
 3010 005c 496E     		ldr	r1, [r1, #100]
 3011 005e 8A42     		cmp	r2, r1
 3012 0060 01D9     		bls	.L220
3194:FreeRTOS\Source/tasks.c **** 
 3013              		.loc 1 3194 0 is_stmt 0 discriminator 1
 3014 0062 1D49     		ldr	r1, .L224
 3015 0064 4A66     		str	r2, [r1, #100]
 3016              	.L220:
 3017              	.LBB30:
3194:FreeRTOS\Source/tasks.c **** 
 3018              		.loc 1 3194 0 discriminator 3
 3019 0066 1D48     		ldr	r0, .L224+4
 3020 0068 9100     		lsls	r1, r2, #2
 3021 006a 8A18     		adds	r2, r1, r2
 3022 006c 9100     		lsls	r1, r2, #2
 3023 006e 4118     		adds	r1, r0, r1
 3024 0070 4A6B     		ldr	r2, [r1, #52]
 3025              	.LVL305:
 3026 0072 9A60     		str	r2, [r3, #8]
 3027 0074 9168     		ldr	r1, [r2, #8]
 3028 0076 D960     		str	r1, [r3, #12]
 3029 0078 9168     		ldr	r1, [r2, #8]
 3030 007a 4C60     		str	r4, [r1, #4]
 3031 007c 9460     		str	r4, [r2, #8]
 3032 007e DA6A     		ldr	r2, [r3, #44]
 3033              	.LVL306:
 3034 0080 0600     		movs	r6, r0
 3035 0082 3036     		adds	r6, r6, #48
 3036 0084 9500     		lsls	r5, r2, #2
 3037 0086 AC18     		adds	r4, r5, r2
 3038 0088 A100     		lsls	r1, r4, #2
 3039 008a 7118     		adds	r1, r6, r1
 3040 008c 5961     		str	r1, [r3, #20]
 3041 008e AC18     		adds	r4, r5, r2
 3042 0090 A100     		lsls	r1, r4, #2
 3043 0092 4118     		adds	r1, r0, r1
 3044 0094 0C6B     		ldr	r4, [r1, #48]
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 156


 3045 0096 0134     		adds	r4, r4, #1
 3046 0098 AA18     		adds	r2, r5, r2
 3047 009a 9100     		lsls	r1, r2, #2
 3048 009c 4118     		adds	r1, r0, r1
 3049 009e 0C63     		str	r4, [r1, #48]
 3050              	.LBE30:
 3051 00a0 0DE0     		b	.L221
 3052              	.L218:
 3053              	.LBB31:
3214:FreeRTOS\Source/tasks.c ****     }
 3054              		.loc 1 3214 0 is_stmt 1
 3055 00a2 0E4A     		ldr	r2, .L224+4
 3056 00a4 9169     		ldr	r1, [r2, #24]
 3057              	.LVL307:
 3058 00a6 D961     		str	r1, [r3, #28]
 3059 00a8 8C68     		ldr	r4, [r1, #8]
 3060 00aa 1C62     		str	r4, [r3, #32]
 3061 00ac 8C68     		ldr	r4, [r1, #8]
 3062 00ae 6060     		str	r0, [r4, #4]
 3063 00b0 8860     		str	r0, [r1, #8]
 3064 00b2 1100     		movs	r1, r2
 3065              	.LVL308:
 3066 00b4 1431     		adds	r1, r1, #20
 3067 00b6 9962     		str	r1, [r3, #40]
 3068 00b8 5169     		ldr	r1, [r2, #20]
 3069 00ba 0131     		adds	r1, r1, #1
 3070 00bc 5161     		str	r1, [r2, #20]
 3071              	.L221:
 3072              	.LBE31:
3217:FreeRTOS\Source/tasks.c ****     {
 3073              		.loc 1 3217 0
 3074 00be DA6A     		ldr	r2, [r3, #44]
 3075 00c0 054B     		ldr	r3, .L224
 3076              	.LVL309:
 3077 00c2 9B6D     		ldr	r3, [r3, #88]
 3078 00c4 DB6A     		ldr	r3, [r3, #44]
 3079 00c6 9A42     		cmp	r2, r3
 3080 00c8 04D9     		bls	.L223
 3081              	.LVL310:
3226:FreeRTOS\Source/tasks.c ****     }
 3082              		.loc 1 3226 0
 3083 00ca 0122     		movs	r2, #1
 3084 00cc 024B     		ldr	r3, .L224
 3085 00ce 5A67     		str	r2, [r3, #116]
3222:FreeRTOS\Source/tasks.c **** 
 3086              		.loc 1 3222 0
 3087 00d0 0120     		movs	r0, #1
 3088 00d2 00E0     		b	.L222
 3089              	.LVL311:
 3090              	.L223:
3230:FreeRTOS\Source/tasks.c ****     }
 3091              		.loc 1 3230 0
 3092 00d4 0020     		movs	r0, #0
 3093              	.L222:
 3094              	.LVL312:
3234:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 3095              		.loc 1 3234 0
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 157


 3096              		@ sp needed
 3097 00d6 70BD     		pop	{r4, r5, r6, pc}
 3098              	.L225:
 3099              		.align	2
 3100              	.L224:
 3101 00d8 80000000 		.word	.LANCHOR1
 3102 00dc 00000000 		.word	.LANCHOR0
 3103              		.cfi_endproc
 3104              	.LFE60:
 3105              		.size	xTaskRemoveFromEventList, .-xTaskRemoveFromEventList
 3106              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 3107              		.align	2
 3108              		.global	vTaskRemoveFromUnorderedEventList
 3109              		.code	16
 3110              		.thumb_func
 3111              		.type	vTaskRemoveFromUnorderedEventList, %function
 3112              	vTaskRemoveFromUnorderedEventList:
 3113              	.LFB61:
3239:FreeRTOS\Source/tasks.c ****     TCB_t * pxUnblockedTCB;
 3114              		.loc 1 3239 0
 3115              		.cfi_startproc
 3116              		@ args = 0, pretend = 0, frame = 0
 3117              		@ frame_needed = 0, uses_anonymous_args = 0
 3118              	.LVL313:
 3119 0000 70B5     		push	{r4, r5, r6, lr}
 3120              		.cfi_def_cfa_offset 16
 3121              		.cfi_offset 4, -16
 3122              		.cfi_offset 5, -12
 3123              		.cfi_offset 6, -8
 3124              		.cfi_offset 14, -4
3247:FreeRTOS\Source/tasks.c **** 
 3125              		.loc 1 3247 0
 3126 0002 8023     		movs	r3, #128
 3127 0004 1B06     		lsls	r3, r3, #24
 3128 0006 1943     		orrs	r1, r3
 3129              	.LVL314:
 3130 0008 0160     		str	r1, [r0]
3251:FreeRTOS\Source/tasks.c ****     configASSERT( pxUnblockedTCB );
 3131              		.loc 1 3251 0
 3132 000a C368     		ldr	r3, [r0, #12]
 3133              	.LVL315:
 3134              	.LBB32:
3253:FreeRTOS\Source/tasks.c **** 
 3135              		.loc 1 3253 0
 3136 000c 0269     		ldr	r2, [r0, #16]
 3137              	.LVL316:
 3138 000e 4168     		ldr	r1, [r0, #4]
 3139 0010 8468     		ldr	r4, [r0, #8]
 3140 0012 8C60     		str	r4, [r1, #8]
 3141 0014 8168     		ldr	r1, [r0, #8]
 3142 0016 4468     		ldr	r4, [r0, #4]
 3143 0018 4C60     		str	r4, [r1, #4]
 3144 001a 5168     		ldr	r1, [r2, #4]
 3145 001c 8842     		cmp	r0, r1
 3146 001e 01D1     		bne	.L227
3253:FreeRTOS\Source/tasks.c **** 
 3147              		.loc 1 3253 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 158


 3148 0020 8168     		ldr	r1, [r0, #8]
 3149 0022 5160     		str	r1, [r2, #4]
 3150              	.L227:
3253:FreeRTOS\Source/tasks.c **** 
 3151              		.loc 1 3253 0 discriminator 3
 3152 0024 0021     		movs	r1, #0
 3153 0026 0161     		str	r1, [r0, #16]
 3154 0028 1168     		ldr	r1, [r2]
 3155 002a 0139     		subs	r1, r1, #1
 3156 002c 1160     		str	r1, [r2]
 3157              	.LBE32:
 3158              	.LBB33:
3272:FreeRTOS\Source/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 3159              		.loc 1 3272 0 is_stmt 1 discriminator 3
 3160 002e 5A69     		ldr	r2, [r3, #20]
 3161              	.LVL317:
 3162 0030 9968     		ldr	r1, [r3, #8]
 3163 0032 D868     		ldr	r0, [r3, #12]
 3164              	.LVL318:
 3165 0034 8860     		str	r0, [r1, #8]
 3166 0036 D968     		ldr	r1, [r3, #12]
 3167 0038 9868     		ldr	r0, [r3, #8]
 3168 003a 4860     		str	r0, [r1, #4]
 3169 003c 1C1D     		adds	r4, r3, #4
 3170 003e 5168     		ldr	r1, [r2, #4]
 3171 0040 A142     		cmp	r1, r4
 3172 0042 01D1     		bne	.L228
3272:FreeRTOS\Source/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 3173              		.loc 1 3272 0 is_stmt 0 discriminator 1
 3174 0044 D968     		ldr	r1, [r3, #12]
 3175 0046 5160     		str	r1, [r2, #4]
 3176              	.L228:
3272:FreeRTOS\Source/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 3177              		.loc 1 3272 0 discriminator 3
 3178 0048 0021     		movs	r1, #0
 3179 004a 5961     		str	r1, [r3, #20]
 3180 004c 1168     		ldr	r1, [r2]
 3181 004e 0139     		subs	r1, r1, #1
 3182 0050 1160     		str	r1, [r2]
 3183              	.LBE33:
3273:FreeRTOS\Source/tasks.c **** 
 3184              		.loc 1 3273 0 is_stmt 1 discriminator 3
 3185 0052 DA6A     		ldr	r2, [r3, #44]
 3186              	.LVL319:
 3187 0054 1649     		ldr	r1, .L231
 3188 0056 496E     		ldr	r1, [r1, #100]
 3189 0058 8A42     		cmp	r2, r1
 3190 005a 01D9     		bls	.L229
3273:FreeRTOS\Source/tasks.c **** 
 3191              		.loc 1 3273 0 is_stmt 0 discriminator 1
 3192 005c 1449     		ldr	r1, .L231
 3193 005e 4A66     		str	r2, [r1, #100]
 3194              	.L229:
 3195              	.LBB34:
3273:FreeRTOS\Source/tasks.c **** 
 3196              		.loc 1 3273 0 discriminator 3
 3197 0060 1448     		ldr	r0, .L231+4
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 159


 3198 0062 9100     		lsls	r1, r2, #2
 3199 0064 8A18     		adds	r2, r1, r2
 3200 0066 9100     		lsls	r1, r2, #2
 3201 0068 4118     		adds	r1, r0, r1
 3202 006a 4A6B     		ldr	r2, [r1, #52]
 3203              	.LVL320:
 3204 006c 9A60     		str	r2, [r3, #8]
 3205 006e 9168     		ldr	r1, [r2, #8]
 3206 0070 D960     		str	r1, [r3, #12]
 3207 0072 9168     		ldr	r1, [r2, #8]
 3208 0074 4C60     		str	r4, [r1, #4]
 3209 0076 9460     		str	r4, [r2, #8]
 3210 0078 DA6A     		ldr	r2, [r3, #44]
 3211              	.LVL321:
 3212 007a 0600     		movs	r6, r0
 3213 007c 3036     		adds	r6, r6, #48
 3214 007e 9500     		lsls	r5, r2, #2
 3215 0080 AC18     		adds	r4, r5, r2
 3216 0082 A100     		lsls	r1, r4, #2
 3217 0084 7118     		adds	r1, r6, r1
 3218 0086 5961     		str	r1, [r3, #20]
 3219 0088 AC18     		adds	r4, r5, r2
 3220 008a A100     		lsls	r1, r4, #2
 3221 008c 4118     		adds	r1, r0, r1
 3222 008e 0C6B     		ldr	r4, [r1, #48]
 3223 0090 0134     		adds	r4, r4, #1
 3224 0092 AA18     		adds	r2, r5, r2
 3225 0094 9100     		lsls	r1, r2, #2
 3226 0096 4118     		adds	r1, r0, r1
 3227 0098 0C63     		str	r4, [r1, #48]
 3228              	.LBE34:
3275:FreeRTOS\Source/tasks.c ****     {
 3229              		.loc 1 3275 0 is_stmt 1 discriminator 3
 3230 009a DA6A     		ldr	r2, [r3, #44]
 3231 009c 044B     		ldr	r3, .L231
 3232              	.LVL322:
 3233 009e 9B6D     		ldr	r3, [r3, #88]
 3234 00a0 DB6A     		ldr	r3, [r3, #44]
 3235 00a2 9A42     		cmp	r2, r3
 3236 00a4 02D9     		bls	.L226
3281:FreeRTOS\Source/tasks.c ****     }
 3237              		.loc 1 3281 0
 3238 00a6 0122     		movs	r2, #1
 3239 00a8 014B     		ldr	r3, .L231
 3240 00aa 5A67     		str	r2, [r3, #116]
 3241              	.L226:
3283:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 3242              		.loc 1 3283 0
 3243              		@ sp needed
 3244 00ac 70BD     		pop	{r4, r5, r6, pc}
 3245              	.L232:
 3246 00ae C046     		.align	2
 3247              	.L231:
 3248 00b0 80000000 		.word	.LANCHOR1
 3249 00b4 00000000 		.word	.LANCHOR0
 3250              		.cfi_endproc
 3251              	.LFE61:
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 160


 3252              		.size	vTaskRemoveFromUnorderedEventList, .-vTaskRemoveFromUnorderedEventList
 3253              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3254              		.align	2
 3255              		.global	vTaskSetTimeOutState
 3256              		.code	16
 3257              		.thumb_func
 3258              		.type	vTaskSetTimeOutState, %function
 3259              	vTaskSetTimeOutState:
 3260              	.LFB62:
3287:FreeRTOS\Source/tasks.c ****     configASSERT( pxTimeOut );
 3261              		.loc 1 3287 0
 3262              		.cfi_startproc
 3263              		@ args = 0, pretend = 0, frame = 0
 3264              		@ frame_needed = 0, uses_anonymous_args = 0
 3265              	.LVL323:
 3266 0000 10B5     		push	{r4, lr}
 3267              		.cfi_def_cfa_offset 8
 3268              		.cfi_offset 4, -8
 3269              		.cfi_offset 14, -4
 3270 0002 0400     		movs	r4, r0
3289:FreeRTOS\Source/tasks.c ****     {
 3271              		.loc 1 3289 0
 3272 0004 FFF7FEFF 		bl	vPortEnterCritical
 3273              	.LVL324:
3291:FreeRTOS\Source/tasks.c ****         pxTimeOut->xTimeOnEntering = xTickCount;
 3274              		.loc 1 3291 0
 3275 0008 034B     		ldr	r3, .L234
 3276 000a DA6F     		ldr	r2, [r3, #124]
 3277 000c 2260     		str	r2, [r4]
3292:FreeRTOS\Source/tasks.c ****     }
 3278              		.loc 1 3292 0
 3279 000e DB6E     		ldr	r3, [r3, #108]
 3280 0010 6360     		str	r3, [r4, #4]
3294:FreeRTOS\Source/tasks.c **** }
 3281              		.loc 1 3294 0
 3282 0012 FFF7FEFF 		bl	vPortExitCritical
 3283              	.LVL325:
3295:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 3284              		.loc 1 3295 0
 3285              		@ sp needed
 3286              	.LVL326:
 3287 0016 10BD     		pop	{r4, pc}
 3288              	.L235:
 3289              		.align	2
 3290              	.L234:
 3291 0018 80000000 		.word	.LANCHOR1
 3292              		.cfi_endproc
 3293              	.LFE62:
 3294              		.size	vTaskSetTimeOutState, .-vTaskSetTimeOutState
 3295              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 3296              		.align	2
 3297              		.global	vTaskInternalSetTimeOutState
 3298              		.code	16
 3299              		.thumb_func
 3300              		.type	vTaskInternalSetTimeOutState, %function
 3301              	vTaskInternalSetTimeOutState:
 3302              	.LFB63:
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 161


3299:FreeRTOS\Source/tasks.c ****     /* For internal use only as it does not use a critical section. */
 3303              		.loc 1 3299 0
 3304              		.cfi_startproc
 3305              		@ args = 0, pretend = 0, frame = 0
 3306              		@ frame_needed = 0, uses_anonymous_args = 0
 3307              		@ link register save eliminated.
 3308              	.LVL327:
3301:FreeRTOS\Source/tasks.c ****     pxTimeOut->xTimeOnEntering = xTickCount;
 3309              		.loc 1 3301 0
 3310 0000 024B     		ldr	r3, .L237
 3311 0002 DA6F     		ldr	r2, [r3, #124]
 3312 0004 0260     		str	r2, [r0]
3302:FreeRTOS\Source/tasks.c **** }
 3313              		.loc 1 3302 0
 3314 0006 DB6E     		ldr	r3, [r3, #108]
 3315 0008 4360     		str	r3, [r0, #4]
3303:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 3316              		.loc 1 3303 0
 3317              		@ sp needed
 3318 000a 7047     		bx	lr
 3319              	.L238:
 3320              		.align	2
 3321              	.L237:
 3322 000c 80000000 		.word	.LANCHOR1
 3323              		.cfi_endproc
 3324              	.LFE63:
 3325              		.size	vTaskInternalSetTimeOutState, .-vTaskInternalSetTimeOutState
 3326              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 3327              		.align	2
 3328              		.global	xTaskCheckForTimeOut
 3329              		.code	16
 3330              		.thumb_func
 3331              		.type	xTaskCheckForTimeOut, %function
 3332              	xTaskCheckForTimeOut:
 3333              	.LFB64:
3308:FreeRTOS\Source/tasks.c ****     BaseType_t xReturn;
 3334              		.loc 1 3308 0
 3335              		.cfi_startproc
 3336              		@ args = 0, pretend = 0, frame = 0
 3337              		@ frame_needed = 0, uses_anonymous_args = 0
 3338              	.LVL328:
 3339 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3340              		.cfi_def_cfa_offset 24
 3341              		.cfi_offset 3, -24
 3342              		.cfi_offset 4, -20
 3343              		.cfi_offset 5, -16
 3344              		.cfi_offset 6, -12
 3345              		.cfi_offset 7, -8
 3346              		.cfi_offset 14, -4
 3347 0002 0400     		movs	r4, r0
 3348 0004 0D00     		movs	r5, r1
3314:FreeRTOS\Source/tasks.c ****     {
 3349              		.loc 1 3314 0
 3350 0006 FFF7FEFF 		bl	vPortEnterCritical
 3351              	.LVL329:
 3352              	.LBB35:
3317:FreeRTOS\Source/tasks.c ****         const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 162


 3353              		.loc 1 3317 0
 3354 000a 124B     		ldr	r3, .L244
 3355 000c D96E     		ldr	r1, [r3, #108]
 3356              	.LVL330:
3318:FreeRTOS\Source/tasks.c **** 
 3357              		.loc 1 3318 0
 3358 000e 6268     		ldr	r2, [r4, #4]
 3359 0010 881A     		subs	r0, r1, r2
 3360              	.LVL331:
3332:FreeRTOS\Source/tasks.c ****             {
 3361              		.loc 1 3332 0
 3362 0012 2B68     		ldr	r3, [r5]
 3363 0014 5E1C     		adds	r6, r3, #1
 3364 0016 17D0     		beq	.L243
3342:FreeRTOS\Source/tasks.c ****         {
 3365              		.loc 1 3342 0
 3366 0018 0E4E     		ldr	r6, .L244
 3367 001a F66F     		ldr	r6, [r6, #124]
 3368 001c 2768     		ldr	r7, [r4]
 3369 001e B742     		cmp	r7, r6
 3370 0020 05D0     		beq	.L241
3342:FreeRTOS\Source/tasks.c ****         {
 3371              		.loc 1 3342 0 is_stmt 0 discriminator 1
 3372 0022 9142     		cmp	r1, r2
 3373 0024 03D3     		bcc	.L241
 3374              	.LVL332:
3350:FreeRTOS\Source/tasks.c ****         }
 3375              		.loc 1 3350 0 is_stmt 1
 3376 0026 0023     		movs	r3, #0
 3377 0028 2B60     		str	r3, [r5]
3349:FreeRTOS\Source/tasks.c ****             *pxTicksToWait = ( TickType_t ) 0;
 3378              		.loc 1 3349 0
 3379 002a 0124     		movs	r4, #1
 3380              	.LVL333:
3350:FreeRTOS\Source/tasks.c ****         }
 3381              		.loc 1 3350 0
 3382 002c 0DE0     		b	.L240
 3383              	.LVL334:
 3384              	.L241:
3352:FreeRTOS\Source/tasks.c ****         {
 3385              		.loc 1 3352 0
 3386 002e 9842     		cmp	r0, r3
 3387 0030 06D2     		bcs	.L242
3355:FreeRTOS\Source/tasks.c ****             vTaskInternalSetTimeOutState( pxTimeOut );
 3388              		.loc 1 3355 0
 3389 0032 1B1A     		subs	r3, r3, r0
 3390 0034 2B60     		str	r3, [r5]
3356:FreeRTOS\Source/tasks.c ****             xReturn = pdFALSE;
 3391              		.loc 1 3356 0
 3392 0036 2000     		movs	r0, r4
 3393              	.LVL335:
 3394 0038 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 3395              	.LVL336:
3357:FreeRTOS\Source/tasks.c ****         }
 3396              		.loc 1 3357 0
 3397 003c 0024     		movs	r4, #0
 3398              	.LVL337:
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 163


 3399 003e 04E0     		b	.L240
 3400              	.LVL338:
 3401              	.L242:
3361:FreeRTOS\Source/tasks.c ****             xReturn = pdTRUE;
 3402              		.loc 1 3361 0
 3403 0040 0023     		movs	r3, #0
 3404 0042 2B60     		str	r3, [r5]
 3405              	.LVL339:
3362:FreeRTOS\Source/tasks.c ****         }
 3406              		.loc 1 3362 0
 3407 0044 0124     		movs	r4, #1
 3408              	.LVL340:
 3409 0046 00E0     		b	.L240
 3410              	.LVL341:
 3411              	.L243:
3337:FreeRTOS\Source/tasks.c ****             }
 3412              		.loc 1 3337 0
 3413 0048 0024     		movs	r4, #0
 3414              	.LVL342:
 3415              	.L240:
 3416              	.LBE35:
3365:FreeRTOS\Source/tasks.c **** 
 3417              		.loc 1 3365 0
 3418 004a FFF7FEFF 		bl	vPortExitCritical
 3419              	.LVL343:
3368:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 3420              		.loc 1 3368 0
 3421 004e 2000     		movs	r0, r4
 3422              		@ sp needed
 3423              	.LVL344:
 3424              	.LVL345:
 3425 0050 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3426              	.L245:
 3427 0052 C046     		.align	2
 3428              	.L244:
 3429 0054 80000000 		.word	.LANCHOR1
 3430              		.cfi_endproc
 3431              	.LFE64:
 3432              		.size	xTaskCheckForTimeOut, .-xTaskCheckForTimeOut
 3433              		.section	.text.vTaskMissedYield,"ax",%progbits
 3434              		.align	2
 3435              		.global	vTaskMissedYield
 3436              		.code	16
 3437              		.thumb_func
 3438              		.type	vTaskMissedYield, %function
 3439              	vTaskMissedYield:
 3440              	.LFB65:
3372:FreeRTOS\Source/tasks.c ****     xYieldPending = pdTRUE;
 3441              		.loc 1 3372 0
 3442              		.cfi_startproc
 3443              		@ args = 0, pretend = 0, frame = 0
 3444              		@ frame_needed = 0, uses_anonymous_args = 0
 3445              		@ link register save eliminated.
3373:FreeRTOS\Source/tasks.c **** }
 3446              		.loc 1 3373 0
 3447 0000 0122     		movs	r2, #1
 3448 0002 014B     		ldr	r3, .L247
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 164


 3449 0004 5A67     		str	r2, [r3, #116]
3374:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 3450              		.loc 1 3374 0
 3451              		@ sp needed
 3452 0006 7047     		bx	lr
 3453              	.L248:
 3454              		.align	2
 3455              	.L247:
 3456 0008 80000000 		.word	.LANCHOR1
 3457              		.cfi_endproc
 3458              	.LFE65:
 3459              		.size	vTaskMissedYield, .-vTaskMissedYield
 3460              		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 3461              		.align	2
 3462              		.global	uxTaskGetStackHighWaterMark
 3463              		.code	16
 3464              		.thumb_func
 3465              		.type	uxTaskGetStackHighWaterMark, %function
 3466              	uxTaskGetStackHighWaterMark:
 3467              	.LFB70:
3919:FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
 3468              		.loc 1 3919 0
 3469              		.cfi_startproc
 3470              		@ args = 0, pretend = 0, frame = 0
 3471              		@ frame_needed = 0, uses_anonymous_args = 0
 3472              	.LVL346:
 3473 0000 10B5     		push	{r4, lr}
 3474              		.cfi_def_cfa_offset 8
 3475              		.cfi_offset 4, -8
 3476              		.cfi_offset 14, -4
3924:FreeRTOS\Source/tasks.c **** 
 3477              		.loc 1 3924 0
 3478 0002 0028     		cmp	r0, #0
 3479 0004 01D1     		bne	.L250
3924:FreeRTOS\Source/tasks.c **** 
 3480              		.loc 1 3924 0 is_stmt 0 discriminator 1
 3481 0006 034B     		ldr	r3, .L251
 3482 0008 986D     		ldr	r0, [r3, #88]
 3483              	.LVL347:
 3484              	.L250:
3928:FreeRTOS\Source/tasks.c ****         }
 3485              		.loc 1 3928 0 is_stmt 1 discriminator 4
 3486 000a 006B     		ldr	r0, [r0, #48]
 3487              	.LVL348:
3936:FreeRTOS\Source/tasks.c **** 
 3488              		.loc 1 3936 0 discriminator 4
 3489 000c FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 3490              	.LVL349:
3939:FreeRTOS\Source/tasks.c **** 
 3491              		.loc 1 3939 0 discriminator 4
 3492              		@ sp needed
 3493 0010 10BD     		pop	{r4, pc}
 3494              	.L252:
 3495 0012 C046     		.align	2
 3496              	.L251:
 3497 0014 80000000 		.word	.LANCHOR1
 3498              		.cfi_endproc
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 165


 3499              	.LFE70:
 3500              		.size	uxTaskGetStackHighWaterMark, .-uxTaskGetStackHighWaterMark
 3501              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 3502              		.align	2
 3503              		.global	xTaskGetCurrentTaskHandle
 3504              		.code	16
 3505              		.thumb_func
 3506              		.type	xTaskGetCurrentTaskHandle, %function
 3507              	xTaskGetCurrentTaskHandle:
 3508              	.LFB73:
4023:FreeRTOS\Source/tasks.c ****         TaskHandle_t xReturn;
 3509              		.loc 1 4023 0
 3510              		.cfi_startproc
 3511              		@ args = 0, pretend = 0, frame = 0
 3512              		@ frame_needed = 0, uses_anonymous_args = 0
 3513              		@ link register save eliminated.
4029:FreeRTOS\Source/tasks.c **** 
 3514              		.loc 1 4029 0
 3515 0000 014B     		ldr	r3, .L254
 3516 0002 986D     		ldr	r0, [r3, #88]
 3517              	.LVL350:
4032:FreeRTOS\Source/tasks.c **** 
 3518              		.loc 1 4032 0
 3519              		@ sp needed
 3520 0004 7047     		bx	lr
 3521              	.L255:
 3522 0006 C046     		.align	2
 3523              	.L254:
 3524 0008 80000000 		.word	.LANCHOR1
 3525              		.cfi_endproc
 3526              	.LFE73:
 3527              		.size	xTaskGetCurrentTaskHandle, .-xTaskGetCurrentTaskHandle
 3528              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 3529              		.align	2
 3530              		.global	xTaskPriorityInherit
 3531              		.code	16
 3532              		.thumb_func
 3533              		.type	xTaskPriorityInherit, %function
 3534              	xTaskPriorityInherit:
 3535              	.LFB74:
4068:FreeRTOS\Source/tasks.c ****         TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 3536              		.loc 1 4068 0
 3537              		.cfi_startproc
 3538              		@ args = 0, pretend = 0, frame = 0
 3539              		@ frame_needed = 0, uses_anonymous_args = 0
 3540              	.LVL351:
 3541 0000 70B5     		push	{r4, r5, r6, lr}
 3542              		.cfi_def_cfa_offset 16
 3543              		.cfi_offset 4, -16
 3544              		.cfi_offset 5, -12
 3545              		.cfi_offset 6, -8
 3546              		.cfi_offset 14, -4
 3547 0002 041E     		subs	r4, r0, #0
 3548              	.LVL352:
4075:FreeRTOS\Source/tasks.c ****         {
 3549              		.loc 1 4075 0
 3550 0004 51D0     		beq	.L262
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 166


4080:FreeRTOS\Source/tasks.c ****             {
 3551              		.loc 1 4080 0
 3552 0006 C36A     		ldr	r3, [r0, #44]
 3553 0008 2A4A     		ldr	r2, .L264
 3554 000a 926D     		ldr	r2, [r2, #88]
 3555 000c D26A     		ldr	r2, [r2, #44]
 3556 000e 9342     		cmp	r3, r2
 3557 0010 43D2     		bcs	.L258
4085:FreeRTOS\Source/tasks.c ****                 {
 3558              		.loc 1 4085 0
 3559 0012 8269     		ldr	r2, [r0, #24]
 3560 0014 002A     		cmp	r2, #0
 3561 0016 05DB     		blt	.L259
4087:FreeRTOS\Source/tasks.c ****                 }
 3562              		.loc 1 4087 0
 3563 0018 264A     		ldr	r2, .L264
 3564 001a 926D     		ldr	r2, [r2, #88]
 3565 001c D16A     		ldr	r1, [r2, #44]
 3566 001e 0522     		movs	r2, #5
 3567 0020 521A     		subs	r2, r2, r1
 3568 0022 8261     		str	r2, [r0, #24]
 3569              	.L259:
4096:FreeRTOS\Source/tasks.c ****                 {
 3570              		.loc 1 4096 0
 3571 0024 9A00     		lsls	r2, r3, #2
 3572 0026 D318     		adds	r3, r2, r3
 3573 0028 9A00     		lsls	r2, r3, #2
 3574 002a 234B     		ldr	r3, .L264+4
 3575 002c 3033     		adds	r3, r3, #48
 3576 002e 9A18     		adds	r2, r3, r2
 3577 0030 6369     		ldr	r3, [r4, #20]
 3578 0032 9342     		cmp	r3, r2
 3579 0034 2BD1     		bne	.L260
4098:FreeRTOS\Source/tasks.c ****                     {
 3580              		.loc 1 4098 0
 3581 0036 251D     		adds	r5, r4, #4
 3582 0038 2800     		movs	r0, r5
 3583              	.LVL353:
 3584 003a FFF7FEFF 		bl	uxListRemove
 3585              	.LVL354:
4111:FreeRTOS\Source/tasks.c ****                     prvAddTaskToReadyList( pxMutexHolderTCB );
 3586              		.loc 1 4111 0
 3587 003e 1D4A     		ldr	r2, .L264
 3588 0040 936D     		ldr	r3, [r2, #88]
 3589 0042 DB6A     		ldr	r3, [r3, #44]
 3590 0044 E362     		str	r3, [r4, #44]
4112:FreeRTOS\Source/tasks.c ****                 }
 3591              		.loc 1 4112 0
 3592 0046 526E     		ldr	r2, [r2, #100]
 3593 0048 9342     		cmp	r3, r2
 3594 004a 01D9     		bls	.L261
4112:FreeRTOS\Source/tasks.c ****                 }
 3595              		.loc 1 4112 0 is_stmt 0 discriminator 1
 3596 004c 194A     		ldr	r2, .L264
 3597 004e 5366     		str	r3, [r2, #100]
 3598              	.L261:
 3599              	.LBB36:
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 167


4112:FreeRTOS\Source/tasks.c ****                 }
 3600              		.loc 1 4112 0 discriminator 3
 3601 0050 1949     		ldr	r1, .L264+4
 3602 0052 9A00     		lsls	r2, r3, #2
 3603 0054 D318     		adds	r3, r2, r3
 3604 0056 9A00     		lsls	r2, r3, #2
 3605 0058 8A18     		adds	r2, r1, r2
 3606 005a 536B     		ldr	r3, [r2, #52]
 3607              	.LVL355:
 3608 005c A360     		str	r3, [r4, #8]
 3609 005e 9A68     		ldr	r2, [r3, #8]
 3610 0060 E260     		str	r2, [r4, #12]
 3611 0062 9A68     		ldr	r2, [r3, #8]
 3612 0064 5560     		str	r5, [r2, #4]
 3613 0066 9D60     		str	r5, [r3, #8]
 3614 0068 E36A     		ldr	r3, [r4, #44]
 3615              	.LVL356:
 3616 006a 0E00     		movs	r6, r1
 3617 006c 3036     		adds	r6, r6, #48
 3618 006e 9D00     		lsls	r5, r3, #2
 3619 0070 E818     		adds	r0, r5, r3
 3620 0072 8200     		lsls	r2, r0, #2
 3621 0074 B218     		adds	r2, r6, r2
 3622 0076 6261     		str	r2, [r4, #20]
 3623 0078 E818     		adds	r0, r5, r3
 3624 007a 8200     		lsls	r2, r0, #2
 3625 007c 8A18     		adds	r2, r1, r2
 3626 007e 106B     		ldr	r0, [r2, #48]
 3627 0080 0130     		adds	r0, r0, #1
 3628 0082 EB18     		adds	r3, r5, r3
 3629 0084 9A00     		lsls	r2, r3, #2
 3630 0086 8A18     		adds	r2, r1, r2
 3631 0088 1063     		str	r0, [r2, #48]
 3632              	.LBE36:
4123:FreeRTOS\Source/tasks.c ****             }
 3633              		.loc 1 4123 0 is_stmt 1 discriminator 3
 3634 008a 0120     		movs	r0, #1
 3635 008c 10E0     		b	.L257
 3636              	.LVL357:
 3637              	.L260:
4117:FreeRTOS\Source/tasks.c ****                 }
 3638              		.loc 1 4117 0
 3639 008e 094B     		ldr	r3, .L264
 3640 0090 9B6D     		ldr	r3, [r3, #88]
 3641 0092 DB6A     		ldr	r3, [r3, #44]
 3642 0094 E362     		str	r3, [r4, #44]
4123:FreeRTOS\Source/tasks.c ****             }
 3643              		.loc 1 4123 0
 3644 0096 0120     		movs	r0, #1
 3645              	.LVL358:
 3646 0098 0AE0     		b	.L257
 3647              	.LVL359:
 3648              	.L258:
4127:FreeRTOS\Source/tasks.c ****                 {
 3649              		.loc 1 4127 0
 3650 009a 026C     		ldr	r2, [r0, #64]
 3651 009c 054B     		ldr	r3, .L264
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 168


 3652 009e 9B6D     		ldr	r3, [r3, #88]
 3653 00a0 DB6A     		ldr	r3, [r3, #44]
 3654 00a2 9A42     		cmp	r2, r3
 3655 00a4 03D3     		bcc	.L263
4070:FreeRTOS\Source/tasks.c **** 
 3656              		.loc 1 4070 0
 3657 00a6 0020     		movs	r0, #0
 3658              	.LVL360:
 3659 00a8 02E0     		b	.L257
 3660              	.LVL361:
 3661              	.L262:
 3662 00aa 0020     		movs	r0, #0
 3663              	.LVL362:
 3664 00ac 00E0     		b	.L257
 3665              	.LVL363:
 3666              	.L263:
4136:FreeRTOS\Source/tasks.c ****                 }
 3667              		.loc 1 4136 0
 3668 00ae 0120     		movs	r0, #1
 3669              	.LVL364:
 3670              	.L257:
4150:FreeRTOS\Source/tasks.c **** 
 3671              		.loc 1 4150 0
 3672              		@ sp needed
 3673              	.LVL365:
 3674 00b0 70BD     		pop	{r4, r5, r6, pc}
 3675              	.L265:
 3676 00b2 C046     		.align	2
 3677              	.L264:
 3678 00b4 80000000 		.word	.LANCHOR1
 3679 00b8 00000000 		.word	.LANCHOR0
 3680              		.cfi_endproc
 3681              	.LFE74:
 3682              		.size	xTaskPriorityInherit, .-xTaskPriorityInherit
 3683              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 3684              		.align	2
 3685              		.global	xTaskPriorityDisinherit
 3686              		.code	16
 3687              		.thumb_func
 3688              		.type	xTaskPriorityDisinherit, %function
 3689              	xTaskPriorityDisinherit:
 3690              	.LFB75:
4158:FreeRTOS\Source/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
 3691              		.loc 1 4158 0
 3692              		.cfi_startproc
 3693              		@ args = 0, pretend = 0, frame = 0
 3694              		@ frame_needed = 0, uses_anonymous_args = 0
 3695              	.LVL366:
 3696 0000 70B5     		push	{r4, r5, r6, lr}
 3697              		.cfi_def_cfa_offset 16
 3698              		.cfi_offset 4, -16
 3699              		.cfi_offset 5, -12
 3700              		.cfi_offset 6, -8
 3701              		.cfi_offset 14, -4
 3702 0002 041E     		subs	r4, r0, #0
 3703              	.LVL367:
4162:FreeRTOS\Source/tasks.c ****         {
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 169


 3704              		.loc 1 4162 0
 3705 0004 36D0     		beq	.L269
4170:FreeRTOS\Source/tasks.c **** 
 3706              		.loc 1 4170 0
 3707 0006 436C     		ldr	r3, [r0, #68]
 3708 0008 013B     		subs	r3, r3, #1
 3709 000a 4364     		str	r3, [r0, #68]
4174:FreeRTOS\Source/tasks.c ****             {
 3710              		.loc 1 4174 0
 3711 000c C26A     		ldr	r2, [r0, #44]
 3712 000e 016C     		ldr	r1, [r0, #64]
 3713 0010 8A42     		cmp	r2, r1
 3714 0012 31D0     		beq	.L270
4177:FreeRTOS\Source/tasks.c ****                 {
 3715              		.loc 1 4177 0
 3716 0014 002B     		cmp	r3, #0
 3717 0016 31D1     		bne	.L271
4184:FreeRTOS\Source/tasks.c ****                     {
 3718              		.loc 1 4184 0
 3719 0018 051D     		adds	r5, r0, #4
 3720 001a 2800     		movs	r0, r5
 3721              	.LVL368:
 3722 001c FFF7FEFF 		bl	uxListRemove
 3723              	.LVL369:
4196:FreeRTOS\Source/tasks.c **** 
 3724              		.loc 1 4196 0
 3725 0020 236C     		ldr	r3, [r4, #64]
 3726 0022 E362     		str	r3, [r4, #44]
4201:FreeRTOS\Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 3727              		.loc 1 4201 0
 3728 0024 0522     		movs	r2, #5
 3729 0026 D21A     		subs	r2, r2, r3
 3730 0028 A261     		str	r2, [r4, #24]
4202:FreeRTOS\Source/tasks.c **** 
 3731              		.loc 1 4202 0
 3732 002a 154A     		ldr	r2, .L272
 3733 002c 526E     		ldr	r2, [r2, #100]
 3734 002e 9342     		cmp	r3, r2
 3735 0030 01D9     		bls	.L268
4202:FreeRTOS\Source/tasks.c **** 
 3736              		.loc 1 4202 0 is_stmt 0 discriminator 1
 3737 0032 134A     		ldr	r2, .L272
 3738 0034 5366     		str	r3, [r2, #100]
 3739              	.L268:
 3740              	.LBB37:
4202:FreeRTOS\Source/tasks.c **** 
 3741              		.loc 1 4202 0 discriminator 3
 3742 0036 1349     		ldr	r1, .L272+4
 3743 0038 9A00     		lsls	r2, r3, #2
 3744 003a D318     		adds	r3, r2, r3
 3745 003c 9A00     		lsls	r2, r3, #2
 3746 003e 8A18     		adds	r2, r1, r2
 3747 0040 536B     		ldr	r3, [r2, #52]
 3748              	.LVL370:
 3749 0042 A360     		str	r3, [r4, #8]
 3750 0044 9A68     		ldr	r2, [r3, #8]
 3751 0046 E260     		str	r2, [r4, #12]
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 170


 3752 0048 9A68     		ldr	r2, [r3, #8]
 3753 004a 5560     		str	r5, [r2, #4]
 3754 004c 9D60     		str	r5, [r3, #8]
 3755 004e E36A     		ldr	r3, [r4, #44]
 3756              	.LVL371:
 3757 0050 0E00     		movs	r6, r1
 3758 0052 3036     		adds	r6, r6, #48
 3759 0054 9D00     		lsls	r5, r3, #2
 3760 0056 E818     		adds	r0, r5, r3
 3761 0058 8200     		lsls	r2, r0, #2
 3762 005a B218     		adds	r2, r6, r2
 3763 005c 6261     		str	r2, [r4, #20]
 3764 005e E818     		adds	r0, r5, r3
 3765 0060 8200     		lsls	r2, r0, #2
 3766 0062 8A18     		adds	r2, r1, r2
 3767 0064 106B     		ldr	r0, [r2, #48]
 3768 0066 0130     		adds	r0, r0, #1
 3769 0068 EB18     		adds	r3, r5, r3
 3770 006a 9A00     		lsls	r2, r3, #2
 3771 006c 8A18     		adds	r2, r1, r2
 3772 006e 1063     		str	r0, [r2, #48]
 3773              	.LVL372:
 3774              	.LBE37:
4212:FreeRTOS\Source/tasks.c ****                 }
 3775              		.loc 1 4212 0 is_stmt 1 discriminator 3
 3776 0070 0120     		movs	r0, #1
 3777 0072 04E0     		b	.L267
 3778              	.LVL373:
 3779              	.L269:
4160:FreeRTOS\Source/tasks.c **** 
 3780              		.loc 1 4160 0
 3781 0074 0020     		movs	r0, #0
 3782              	.LVL374:
 3783 0076 02E0     		b	.L267
 3784              	.LVL375:
 3785              	.L270:
 3786 0078 0020     		movs	r0, #0
 3787              	.LVL376:
 3788 007a 00E0     		b	.L267
 3789              	.LVL377:
 3790              	.L271:
 3791 007c 0020     		movs	r0, #0
 3792              	.LVL378:
 3793              	.L267:
4230:FreeRTOS\Source/tasks.c **** 
 3794              		.loc 1 4230 0
 3795              		@ sp needed
 3796              	.LVL379:
 3797 007e 70BD     		pop	{r4, r5, r6, pc}
 3798              	.L273:
 3799              		.align	2
 3800              	.L272:
 3801 0080 80000000 		.word	.LANCHOR1
 3802 0084 00000000 		.word	.LANCHOR0
 3803              		.cfi_endproc
 3804              	.LFE75:
 3805              		.size	xTaskPriorityDisinherit, .-xTaskPriorityDisinherit
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 171


 3806              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 3807              		.align	2
 3808              		.global	vTaskPriorityDisinheritAfterTimeout
 3809              		.code	16
 3810              		.thumb_func
 3811              		.type	vTaskPriorityDisinheritAfterTimeout, %function
 3812              	vTaskPriorityDisinheritAfterTimeout:
 3813              	.LFB76:
4239:FreeRTOS\Source/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
 3814              		.loc 1 4239 0
 3815              		.cfi_startproc
 3816              		@ args = 0, pretend = 0, frame = 0
 3817              		@ frame_needed = 0, uses_anonymous_args = 0
 3818              	.LVL380:
 3819 0000 70B5     		push	{r4, r5, r6, lr}
 3820              		.cfi_def_cfa_offset 16
 3821              		.cfi_offset 4, -16
 3822              		.cfi_offset 5, -12
 3823              		.cfi_offset 6, -8
 3824              		.cfi_offset 14, -4
 3825 0002 041E     		subs	r4, r0, #0
 3826              	.LVL381:
4244:FreeRTOS\Source/tasks.c ****         {
 3827              		.loc 1 4244 0
 3828 0004 41D0     		beq	.L274
4254:FreeRTOS\Source/tasks.c ****             {
 3829              		.loc 1 4254 0
 3830 0006 036C     		ldr	r3, [r0, #64]
 3831 0008 8B42     		cmp	r3, r1
 3832 000a 00D2     		bcs	.L276
4256:FreeRTOS\Source/tasks.c ****             }
 3833              		.loc 1 4256 0
 3834 000c 0B00     		movs	r3, r1
 3835              	.L276:
 3836              	.LVL382:
4264:FreeRTOS\Source/tasks.c ****             {
 3837              		.loc 1 4264 0
 3838 000e E26A     		ldr	r2, [r4, #44]
 3839 0010 9342     		cmp	r3, r2
 3840 0012 3AD0     		beq	.L274
4270:FreeRTOS\Source/tasks.c ****                 {
 3841              		.loc 1 4270 0
 3842 0014 616C     		ldr	r1, [r4, #68]
 3843              	.LVL383:
 3844 0016 0129     		cmp	r1, #1
 3845 0018 37D1     		bne	.L274
 3846              	.LVL384:
4282:FreeRTOS\Source/tasks.c **** 
 3847              		.loc 1 4282 0
 3848 001a E362     		str	r3, [r4, #44]
4286:FreeRTOS\Source/tasks.c ****                     {
 3849              		.loc 1 4286 0
 3850 001c A169     		ldr	r1, [r4, #24]
 3851 001e 0029     		cmp	r1, #0
 3852 0020 02DB     		blt	.L277
4288:FreeRTOS\Source/tasks.c ****                     }
 3853              		.loc 1 4288 0
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 172


 3854 0022 0521     		movs	r1, #5
 3855 0024 CB1A     		subs	r3, r1, r3
 3856              	.LVL385:
 3857 0026 A361     		str	r3, [r4, #24]
 3858              	.L277:
4301:FreeRTOS\Source/tasks.c ****                     {
 3859              		.loc 1 4301 0
 3860 0028 9300     		lsls	r3, r2, #2
 3861 002a 9A18     		adds	r2, r3, r2
 3862              	.LVL386:
 3863 002c 9300     		lsls	r3, r2, #2
 3864 002e 174A     		ldr	r2, .L279
 3865 0030 3032     		adds	r2, r2, #48
 3866 0032 D318     		adds	r3, r2, r3
 3867 0034 6269     		ldr	r2, [r4, #20]
 3868 0036 9A42     		cmp	r2, r3
 3869 0038 27D1     		bne	.L274
4303:FreeRTOS\Source/tasks.c ****                         {
 3870              		.loc 1 4303 0
 3871 003a 251D     		adds	r5, r4, #4
 3872 003c 2800     		movs	r0, r5
 3873              	.LVL387:
 3874 003e FFF7FEFF 		bl	uxListRemove
 3875              	.LVL388:
4315:FreeRTOS\Source/tasks.c ****                     }
 3876              		.loc 1 4315 0
 3877 0042 E36A     		ldr	r3, [r4, #44]
 3878 0044 124A     		ldr	r2, .L279+4
 3879 0046 526E     		ldr	r2, [r2, #100]
 3880 0048 9342     		cmp	r3, r2
 3881 004a 01D9     		bls	.L278
4315:FreeRTOS\Source/tasks.c ****                     }
 3882              		.loc 1 4315 0 is_stmt 0 discriminator 1
 3883 004c 104A     		ldr	r2, .L279+4
 3884 004e 5366     		str	r3, [r2, #100]
 3885              	.L278:
 3886              	.LBB38:
4315:FreeRTOS\Source/tasks.c ****                     }
 3887              		.loc 1 4315 0 discriminator 3
 3888 0050 0E49     		ldr	r1, .L279
 3889 0052 9A00     		lsls	r2, r3, #2
 3890 0054 D318     		adds	r3, r2, r3
 3891 0056 9A00     		lsls	r2, r3, #2
 3892 0058 8A18     		adds	r2, r1, r2
 3893 005a 536B     		ldr	r3, [r2, #52]
 3894              	.LVL389:
 3895 005c A360     		str	r3, [r4, #8]
 3896 005e 9A68     		ldr	r2, [r3, #8]
 3897 0060 E260     		str	r2, [r4, #12]
 3898 0062 9A68     		ldr	r2, [r3, #8]
 3899 0064 5560     		str	r5, [r2, #4]
 3900 0066 9D60     		str	r5, [r3, #8]
 3901 0068 E36A     		ldr	r3, [r4, #44]
 3902              	.LVL390:
 3903 006a 0E00     		movs	r6, r1
 3904 006c 3036     		adds	r6, r6, #48
 3905 006e 9D00     		lsls	r5, r3, #2
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 173


 3906 0070 E818     		adds	r0, r5, r3
 3907 0072 8200     		lsls	r2, r0, #2
 3908 0074 B218     		adds	r2, r6, r2
 3909 0076 6261     		str	r2, [r4, #20]
 3910 0078 E818     		adds	r0, r5, r3
 3911 007a 8200     		lsls	r2, r0, #2
 3912 007c 8A18     		adds	r2, r1, r2
 3913 007e 106B     		ldr	r0, [r2, #48]
 3914 0080 0130     		adds	r0, r0, #1
 3915 0082 EB18     		adds	r3, r5, r3
 3916 0084 9A00     		lsls	r2, r3, #2
 3917 0086 8A18     		adds	r2, r1, r2
 3918 0088 1063     		str	r0, [r2, #48]
 3919              	.L274:
 3920              	.LBE38:
4336:FreeRTOS\Source/tasks.c **** 
 3921              		.loc 1 4336 0 is_stmt 1
 3922              		@ sp needed
 3923              	.LVL391:
 3924 008a 70BD     		pop	{r4, r5, r6, pc}
 3925              	.L280:
 3926              		.align	2
 3927              	.L279:
 3928 008c 00000000 		.word	.LANCHOR0
 3929 0090 80000000 		.word	.LANCHOR1
 3930              		.cfi_endproc
 3931              	.LFE76:
 3932              		.size	vTaskPriorityDisinheritAfterTimeout, .-vTaskPriorityDisinheritAfterTimeout
 3933              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 3934              		.align	2
 3935              		.global	uxTaskResetEventItemValue
 3936              		.code	16
 3937              		.thumb_func
 3938              		.type	uxTaskResetEventItemValue, %function
 3939              	uxTaskResetEventItemValue:
 3940              	.LFB77:
4659:FreeRTOS\Source/tasks.c ****     TickType_t uxReturn;
 3941              		.loc 1 4659 0
 3942              		.cfi_startproc
 3943              		@ args = 0, pretend = 0, frame = 0
 3944              		@ frame_needed = 0, uses_anonymous_args = 0
 3945              		@ link register save eliminated.
4662:FreeRTOS\Source/tasks.c **** 
 3946              		.loc 1 4662 0
 3947 0000 044B     		ldr	r3, .L282
 3948 0002 9A6D     		ldr	r2, [r3, #88]
 3949 0004 9069     		ldr	r0, [r2, #24]
 3950              	.LVL392:
4666:FreeRTOS\Source/tasks.c **** 
 3951              		.loc 1 4666 0
 3952 0006 9A6D     		ldr	r2, [r3, #88]
 3953 0008 9B6D     		ldr	r3, [r3, #88]
 3954 000a D96A     		ldr	r1, [r3, #44]
 3955 000c 0523     		movs	r3, #5
 3956 000e 5B1A     		subs	r3, r3, r1
 3957 0010 9361     		str	r3, [r2, #24]
4669:FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 174


 3958              		.loc 1 4669 0
 3959              		@ sp needed
 3960 0012 7047     		bx	lr
 3961              	.L283:
 3962              		.align	2
 3963              	.L282:
 3964 0014 80000000 		.word	.LANCHOR1
 3965              		.cfi_endproc
 3966              	.LFE77:
 3967              		.size	uxTaskResetEventItemValue, .-uxTaskResetEventItemValue
 3968              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 3969              		.align	2
 3970              		.global	pvTaskIncrementMutexHeldCount
 3971              		.code	16
 3972              		.thumb_func
 3973              		.type	pvTaskIncrementMutexHeldCount, %function
 3974              	pvTaskIncrementMutexHeldCount:
 3975              	.LFB78:
4675:FreeRTOS\Source/tasks.c ****         /* If xSemaphoreCreateMutex() is called before any tasks have been created
 3976              		.loc 1 4675 0
 3977              		.cfi_startproc
 3978              		@ args = 0, pretend = 0, frame = 0
 3979              		@ frame_needed = 0, uses_anonymous_args = 0
 3980              		@ link register save eliminated.
4678:FreeRTOS\Source/tasks.c ****         {
 3981              		.loc 1 4678 0
 3982 0000 054B     		ldr	r3, .L286
 3983 0002 9B6D     		ldr	r3, [r3, #88]
 3984 0004 002B     		cmp	r3, #0
 3985 0006 04D0     		beq	.L285
4680:FreeRTOS\Source/tasks.c ****         }
 3986              		.loc 1 4680 0
 3987 0008 034B     		ldr	r3, .L286
 3988 000a 9A6D     		ldr	r2, [r3, #88]
 3989 000c 536C     		ldr	r3, [r2, #68]
 3990 000e 0133     		adds	r3, r3, #1
 3991 0010 5364     		str	r3, [r2, #68]
 3992              	.L285:
4683:FreeRTOS\Source/tasks.c ****     }
 3993              		.loc 1 4683 0
 3994 0012 014B     		ldr	r3, .L286
 3995 0014 986D     		ldr	r0, [r3, #88]
4684:FreeRTOS\Source/tasks.c **** 
 3996              		.loc 1 4684 0
 3997              		@ sp needed
 3998 0016 7047     		bx	lr
 3999              	.L287:
 4000              		.align	2
 4001              	.L286:
 4002 0018 80000000 		.word	.LANCHOR1
 4003              		.cfi_endproc
 4004              	.LFE78:
 4005              		.size	pvTaskIncrementMutexHeldCount, .-pvTaskIncrementMutexHeldCount
 4006              		.section	.text.ulTaskGenericNotifyTake,"ax",%progbits
 4007              		.align	2
 4008              		.global	ulTaskGenericNotifyTake
 4009              		.code	16
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 175


 4010              		.thumb_func
 4011              		.type	ulTaskGenericNotifyTake, %function
 4012              	ulTaskGenericNotifyTake:
 4013              	.LFB79:
4694:FreeRTOS\Source/tasks.c ****         uint32_t ulReturn;
 4014              		.loc 1 4694 0
 4015              		.cfi_startproc
 4016              		@ args = 0, pretend = 0, frame = 0
 4017              		@ frame_needed = 0, uses_anonymous_args = 0
 4018              	.LVL393:
 4019 0000 70B5     		push	{r4, r5, r6, lr}
 4020              		.cfi_def_cfa_offset 16
 4021              		.cfi_offset 4, -16
 4022              		.cfi_offset 5, -12
 4023              		.cfi_offset 6, -8
 4024              		.cfi_offset 14, -4
 4025 0002 0400     		movs	r4, r0
 4026 0004 0D00     		movs	r5, r1
 4027 0006 1600     		movs	r6, r2
4699:FreeRTOS\Source/tasks.c ****         {
 4028              		.loc 1 4699 0
 4029 0008 FFF7FEFF 		bl	vPortEnterCritical
 4030              	.LVL394:
4702:FreeRTOS\Source/tasks.c ****             {
 4031              		.loc 1 4702 0
 4032 000c 1E4B     		ldr	r3, .L292
 4033 000e 9A6D     		ldr	r2, [r3, #88]
 4034 0010 2300     		movs	r3, r4
 4035 0012 1233     		adds	r3, r3, #18
 4036 0014 9B00     		lsls	r3, r3, #2
 4037 0016 9B58     		ldr	r3, [r3, r2]
 4038 0018 002B     		cmp	r3, #0
 4039 001a 0DD1     		bne	.L289
4705:FreeRTOS\Source/tasks.c **** 
 4040              		.loc 1 4705 0
 4041 001c 1A4B     		ldr	r3, .L292
 4042 001e 9B6D     		ldr	r3, [r3, #88]
 4043 0020 1B19     		adds	r3, r3, r4
 4044 0022 4C33     		adds	r3, r3, #76
 4045 0024 0122     		movs	r2, #1
 4046 0026 1A70     		strb	r2, [r3]
4707:FreeRTOS\Source/tasks.c ****                 {
 4047              		.loc 1 4707 0
 4048 0028 002E     		cmp	r6, #0
 4049 002a 05D0     		beq	.L289
4709:FreeRTOS\Source/tasks.c ****                     traceTASK_NOTIFY_TAKE_BLOCK( uxIndexToWait );
 4050              		.loc 1 4709 0
 4051 002c 0121     		movs	r1, #1
 4052 002e 3000     		movs	r0, r6
 4053 0030 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4054              	.LVL395:
4716:FreeRTOS\Source/tasks.c ****                 }
 4055              		.loc 1 4716 0
 4056 0034 FFF7FEFF 		bl	vPortYield
 4057              	.LVL396:
 4058              	.L289:
4728:FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 176


 4059              		.loc 1 4728 0
 4060 0038 FFF7FEFF 		bl	vPortExitCritical
 4061              	.LVL397:
4730:FreeRTOS\Source/tasks.c ****         {
 4062              		.loc 1 4730 0
 4063 003c FFF7FEFF 		bl	vPortEnterCritical
 4064              	.LVL398:
4733:FreeRTOS\Source/tasks.c **** 
 4065              		.loc 1 4733 0
 4066 0040 114B     		ldr	r3, .L292
 4067 0042 9A6D     		ldr	r2, [r3, #88]
 4068 0044 2300     		movs	r3, r4
 4069 0046 1233     		adds	r3, r3, #18
 4070 0048 9B00     		lsls	r3, r3, #2
 4071 004a 9E58     		ldr	r6, [r3, r2]
 4072              	.LVL399:
4735:FreeRTOS\Source/tasks.c ****             {
 4073              		.loc 1 4735 0
 4074 004c 002E     		cmp	r6, #0
 4075 004e 10D0     		beq	.L290
4737:FreeRTOS\Source/tasks.c ****                 {
 4076              		.loc 1 4737 0
 4077 0050 002D     		cmp	r5, #0
 4078 0052 07D0     		beq	.L291
4739:FreeRTOS\Source/tasks.c ****                 }
 4079              		.loc 1 4739 0
 4080 0054 0C4B     		ldr	r3, .L292
 4081 0056 9A6D     		ldr	r2, [r3, #88]
 4082 0058 2300     		movs	r3, r4
 4083 005a 1233     		adds	r3, r3, #18
 4084 005c 9B00     		lsls	r3, r3, #2
 4085 005e 0021     		movs	r1, #0
 4086 0060 9950     		str	r1, [r3, r2]
 4087 0062 06E0     		b	.L290
 4088              	.L291:
4743:FreeRTOS\Source/tasks.c ****                 }
 4089              		.loc 1 4743 0
 4090 0064 084B     		ldr	r3, .L292
 4091 0066 996D     		ldr	r1, [r3, #88]
 4092 0068 721E     		subs	r2, r6, #1
 4093 006a 2300     		movs	r3, r4
 4094 006c 1233     		adds	r3, r3, #18
 4095 006e 9B00     		lsls	r3, r3, #2
 4096 0070 5A50     		str	r2, [r3, r1]
 4097              	.L290:
4751:FreeRTOS\Source/tasks.c ****         }
 4098              		.loc 1 4751 0
 4099 0072 054B     		ldr	r3, .L292
 4100 0074 9B6D     		ldr	r3, [r3, #88]
 4101 0076 1C19     		adds	r4, r3, r4
 4102              	.LVL400:
 4103 0078 4C34     		adds	r4, r4, #76
 4104 007a 0023     		movs	r3, #0
 4105 007c 2370     		strb	r3, [r4]
4753:FreeRTOS\Source/tasks.c **** 
 4106              		.loc 1 4753 0
 4107 007e FFF7FEFF 		bl	vPortExitCritical
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 177


 4108              	.LVL401:
4756:FreeRTOS\Source/tasks.c **** 
 4109              		.loc 1 4756 0
 4110 0082 3000     		movs	r0, r6
 4111              		@ sp needed
 4112              	.LVL402:
 4113              	.LVL403:
 4114 0084 70BD     		pop	{r4, r5, r6, pc}
 4115              	.L293:
 4116 0086 C046     		.align	2
 4117              	.L292:
 4118 0088 80000000 		.word	.LANCHOR1
 4119              		.cfi_endproc
 4120              	.LFE79:
 4121              		.size	ulTaskGenericNotifyTake, .-ulTaskGenericNotifyTake
 4122              		.section	.text.xTaskGenericNotifyWait,"ax",%progbits
 4123              		.align	2
 4124              		.global	xTaskGenericNotifyWait
 4125              		.code	16
 4126              		.thumb_func
 4127              		.type	xTaskGenericNotifyWait, %function
 4128              	xTaskGenericNotifyWait:
 4129              	.LFB80:
4768:FreeRTOS\Source/tasks.c ****         BaseType_t xReturn;
 4130              		.loc 1 4768 0
 4131              		.cfi_startproc
 4132              		@ args = 4, pretend = 0, frame = 0
 4133              		@ frame_needed = 0, uses_anonymous_args = 0
 4134              	.LVL404:
 4135 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4136              		.cfi_def_cfa_offset 24
 4137              		.cfi_offset 3, -24
 4138              		.cfi_offset 4, -20
 4139              		.cfi_offset 5, -16
 4140              		.cfi_offset 6, -12
 4141              		.cfi_offset 7, -8
 4142              		.cfi_offset 14, -4
 4143 0002 0400     		movs	r4, r0
 4144 0004 0E00     		movs	r6, r1
 4145 0006 1500     		movs	r5, r2
 4146 0008 1F00     		movs	r7, r3
4773:FreeRTOS\Source/tasks.c ****         {
 4147              		.loc 1 4773 0
 4148 000a FFF7FEFF 		bl	vPortEnterCritical
 4149              	.LVL405:
4776:FreeRTOS\Source/tasks.c ****             {
 4150              		.loc 1 4776 0
 4151 000e 234B     		ldr	r3, .L299
 4152 0010 9B6D     		ldr	r3, [r3, #88]
 4153 0012 1B19     		adds	r3, r3, r4
 4154 0014 4C33     		adds	r3, r3, #76
 4155 0016 1B78     		ldrb	r3, [r3]
 4156 0018 022B     		cmp	r3, #2
 4157 001a 15D0     		beq	.L295
4781:FreeRTOS\Source/tasks.c **** 
 4158              		.loc 1 4781 0
 4159 001c 1F49     		ldr	r1, .L299
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 178


 4160 001e 886D     		ldr	r0, [r1, #88]
 4161 0020 2300     		movs	r3, r4
 4162 0022 1233     		adds	r3, r3, #18
 4163 0024 9B00     		lsls	r3, r3, #2
 4164 0026 1A58     		ldr	r2, [r3, r0]
 4165 0028 B243     		bics	r2, r6
 4166 002a 1A50     		str	r2, [r3, r0]
4784:FreeRTOS\Source/tasks.c **** 
 4167              		.loc 1 4784 0
 4168 002c 8B6D     		ldr	r3, [r1, #88]
 4169 002e 1B19     		adds	r3, r3, r4
 4170 0030 4C33     		adds	r3, r3, #76
 4171 0032 0122     		movs	r2, #1
 4172 0034 1A70     		strb	r2, [r3]
4786:FreeRTOS\Source/tasks.c ****                 {
 4173              		.loc 1 4786 0
 4174 0036 069B     		ldr	r3, [sp, #24]
 4175 0038 002B     		cmp	r3, #0
 4176 003a 05D0     		beq	.L295
4788:FreeRTOS\Source/tasks.c ****                     traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWait );
 4177              		.loc 1 4788 0
 4178 003c 0121     		movs	r1, #1
 4179 003e 1800     		movs	r0, r3
 4180 0040 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4181              	.LVL406:
4795:FreeRTOS\Source/tasks.c ****                 }
 4182              		.loc 1 4795 0
 4183 0044 FFF7FEFF 		bl	vPortYield
 4184              	.LVL407:
 4185              	.L295:
4807:FreeRTOS\Source/tasks.c **** 
 4186              		.loc 1 4807 0
 4187 0048 FFF7FEFF 		bl	vPortExitCritical
 4188              	.LVL408:
4809:FreeRTOS\Source/tasks.c ****         {
 4189              		.loc 1 4809 0
 4190 004c FFF7FEFF 		bl	vPortEnterCritical
 4191              	.LVL409:
4813:FreeRTOS\Source/tasks.c ****             {
 4192              		.loc 1 4813 0
 4193 0050 002F     		cmp	r7, #0
 4194 0052 06D0     		beq	.L296
4817:FreeRTOS\Source/tasks.c ****             }
 4195              		.loc 1 4817 0
 4196 0054 114B     		ldr	r3, .L299
 4197 0056 9A6D     		ldr	r2, [r3, #88]
 4198 0058 2300     		movs	r3, r4
 4199 005a 1233     		adds	r3, r3, #18
 4200 005c 9B00     		lsls	r3, r3, #2
 4201 005e 9B58     		ldr	r3, [r3, r2]
 4202 0060 3B60     		str	r3, [r7]
 4203              	.L296:
4824:FreeRTOS\Source/tasks.c ****             {
 4204              		.loc 1 4824 0
 4205 0062 0E4B     		ldr	r3, .L299
 4206 0064 9B6D     		ldr	r3, [r3, #88]
 4207 0066 1B19     		adds	r3, r3, r4
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 179


 4208 0068 4C33     		adds	r3, r3, #76
 4209 006a 1B78     		ldrb	r3, [r3]
 4210 006c 022B     		cmp	r3, #2
 4211 006e 09D1     		bne	.L298
4833:FreeRTOS\Source/tasks.c ****                 xReturn = pdTRUE;
 4212              		.loc 1 4833 0
 4213 0070 0A4B     		ldr	r3, .L299
 4214 0072 996D     		ldr	r1, [r3, #88]
 4215 0074 2300     		movs	r3, r4
 4216 0076 1233     		adds	r3, r3, #18
 4217 0078 9B00     		lsls	r3, r3, #2
 4218 007a 5A58     		ldr	r2, [r3, r1]
 4219 007c AA43     		bics	r2, r5
 4220 007e 5A50     		str	r2, [r3, r1]
 4221              	.LVL410:
4834:FreeRTOS\Source/tasks.c ****             }
 4222              		.loc 1 4834 0
 4223 0080 0125     		movs	r5, #1
 4224              	.LVL411:
 4225 0082 00E0     		b	.L297
 4226              	.LVL412:
 4227              	.L298:
4827:FreeRTOS\Source/tasks.c ****             }
 4228              		.loc 1 4827 0
 4229 0084 0025     		movs	r5, #0
 4230              	.LVL413:
 4231              	.L297:
4837:FreeRTOS\Source/tasks.c ****         }
 4232              		.loc 1 4837 0
 4233 0086 054B     		ldr	r3, .L299
 4234 0088 9B6D     		ldr	r3, [r3, #88]
 4235 008a 1C19     		adds	r4, r3, r4
 4236              	.LVL414:
 4237 008c 4C34     		adds	r4, r4, #76
 4238 008e 0023     		movs	r3, #0
 4239 0090 2370     		strb	r3, [r4]
4839:FreeRTOS\Source/tasks.c **** 
 4240              		.loc 1 4839 0
 4241 0092 FFF7FEFF 		bl	vPortExitCritical
 4242              	.LVL415:
4842:FreeRTOS\Source/tasks.c **** 
 4243              		.loc 1 4842 0
 4244 0096 2800     		movs	r0, r5
 4245              		@ sp needed
 4246              	.LVL416:
 4247              	.LVL417:
 4248              	.LVL418:
 4249 0098 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4250              	.L300:
 4251 009a C046     		.align	2
 4252              	.L299:
 4253 009c 80000000 		.word	.LANCHOR1
 4254              		.cfi_endproc
 4255              	.LFE80:
 4256              		.size	xTaskGenericNotifyWait, .-xTaskGenericNotifyWait
 4257              		.section	.text.xTaskGenericNotify,"ax",%progbits
 4258              		.align	2
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 180


 4259              		.global	xTaskGenericNotify
 4260              		.code	16
 4261              		.thumb_func
 4262              		.type	xTaskGenericNotify, %function
 4263              	xTaskGenericNotify:
 4264              	.LFB81:
4854:FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
 4265              		.loc 1 4854 0
 4266              		.cfi_startproc
 4267              		@ args = 4, pretend = 0, frame = 8
 4268              		@ frame_needed = 0, uses_anonymous_args = 0
 4269              	.LVL419:
 4270 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 4271              		.cfi_def_cfa_offset 20
 4272              		.cfi_offset 4, -20
 4273              		.cfi_offset 5, -16
 4274              		.cfi_offset 6, -12
 4275              		.cfi_offset 7, -8
 4276              		.cfi_offset 14, -4
 4277 0002 83B0     		sub	sp, sp, #12
 4278              		.cfi_def_cfa_offset 32
 4279 0004 0400     		movs	r4, r0
 4280 0006 0D00     		movs	r5, r1
 4281 0008 0192     		str	r2, [sp, #4]
 4282 000a 1E00     		movs	r6, r3
 4283 000c 089F     		ldr	r7, [sp, #32]
 4284              	.LVL420:
4863:FreeRTOS\Source/tasks.c ****         {
 4285              		.loc 1 4863 0
 4286 000e FFF7FEFF 		bl	vPortEnterCritical
 4287              	.LVL421:
4865:FreeRTOS\Source/tasks.c ****             {
 4288              		.loc 1 4865 0
 4289 0012 002F     		cmp	r7, #0
 4290 0014 04D0     		beq	.L302
4867:FreeRTOS\Source/tasks.c ****             }
 4291              		.loc 1 4867 0
 4292 0016 2B00     		movs	r3, r5
 4293 0018 1233     		adds	r3, r3, #18
 4294 001a 9B00     		lsls	r3, r3, #2
 4295 001c 1B59     		ldr	r3, [r3, r4]
 4296 001e 3B60     		str	r3, [r7]
 4297              	.L302:
4870:FreeRTOS\Source/tasks.c **** 
 4298              		.loc 1 4870 0
 4299 0020 6319     		adds	r3, r4, r5
 4300 0022 4C33     		adds	r3, r3, #76
 4301 0024 1A78     		ldrb	r2, [r3]
 4302 0026 D2B2     		uxtb	r2, r2
 4303              	.LVL422:
4872:FreeRTOS\Source/tasks.c **** 
 4304              		.loc 1 4872 0
 4305 0028 0221     		movs	r1, #2
 4306 002a 1970     		strb	r1, [r3]
4874:FreeRTOS\Source/tasks.c ****             {
 4307              		.loc 1 4874 0
 4308 002c 022E     		cmp	r6, #2
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 181


 4309 002e 10D0     		beq	.L304
 4310 0030 02D8     		bhi	.L305
 4311 0032 012E     		cmp	r6, #1
 4312 0034 05D0     		beq	.L306
 4313 0036 21E0     		b	.L312
 4314              	.L305:
 4315 0038 032E     		cmp	r6, #3
 4316 003a 11D0     		beq	.L307
 4317 003c 042E     		cmp	r6, #4
 4318 003e 15D0     		beq	.L308
 4319 0040 1CE0     		b	.L312
 4320              	.L306:
4877:FreeRTOS\Source/tasks.c ****                     break;
 4321              		.loc 1 4877 0
 4322 0042 1235     		adds	r5, r5, #18
 4323              	.LVL423:
 4324 0044 AD00     		lsls	r5, r5, #2
 4325              	.LVL424:
 4326 0046 2B59     		ldr	r3, [r5, r4]
 4327 0048 019E     		ldr	r6, [sp, #4]
 4328 004a 1E43     		orrs	r6, r3
 4329 004c 2E51     		str	r6, [r5, r4]
4856:FreeRTOS\Source/tasks.c ****         uint8_t ucOriginalNotifyState;
 4330              		.loc 1 4856 0
 4331 004e 0125     		movs	r5, #1
4878:FreeRTOS\Source/tasks.c **** 
 4332              		.loc 1 4878 0
 4333 0050 17E0     		b	.L303
 4334              	.LVL425:
 4335              	.L304:
4881:FreeRTOS\Source/tasks.c ****                     break;
 4336              		.loc 1 4881 0
 4337 0052 1235     		adds	r5, r5, #18
 4338              	.LVL426:
 4339 0054 AD00     		lsls	r5, r5, #2
 4340              	.LVL427:
 4341 0056 2B59     		ldr	r3, [r5, r4]
 4342 0058 0133     		adds	r3, r3, #1
 4343 005a 2B51     		str	r3, [r5, r4]
4856:FreeRTOS\Source/tasks.c ****         uint8_t ucOriginalNotifyState;
 4344              		.loc 1 4856 0
 4345 005c 0125     		movs	r5, #1
4882:FreeRTOS\Source/tasks.c **** 
 4346              		.loc 1 4882 0
 4347 005e 10E0     		b	.L303
 4348              	.LVL428:
 4349              	.L307:
4885:FreeRTOS\Source/tasks.c ****                     break;
 4350              		.loc 1 4885 0
 4351 0060 1235     		adds	r5, r5, #18
 4352              	.LVL429:
 4353 0062 AD00     		lsls	r5, r5, #2
 4354              	.LVL430:
 4355 0064 019B     		ldr	r3, [sp, #4]
 4356 0066 2B51     		str	r3, [r5, r4]
4856:FreeRTOS\Source/tasks.c ****         uint8_t ucOriginalNotifyState;
 4357              		.loc 1 4856 0
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 182


 4358 0068 0125     		movs	r5, #1
4886:FreeRTOS\Source/tasks.c **** 
 4359              		.loc 1 4886 0
 4360 006a 0AE0     		b	.L303
 4361              	.LVL431:
 4362              	.L308:
4890:FreeRTOS\Source/tasks.c ****                     {
 4363              		.loc 1 4890 0
 4364 006c 022A     		cmp	r2, #2
 4365 006e 07D0     		beq	.L313
4892:FreeRTOS\Source/tasks.c ****                     }
 4366              		.loc 1 4892 0
 4367 0070 1235     		adds	r5, r5, #18
 4368              	.LVL432:
 4369 0072 AD00     		lsls	r5, r5, #2
 4370              	.LVL433:
 4371 0074 019B     		ldr	r3, [sp, #4]
 4372 0076 2B51     		str	r3, [r5, r4]
4856:FreeRTOS\Source/tasks.c ****         uint8_t ucOriginalNotifyState;
 4373              		.loc 1 4856 0
 4374 0078 0125     		movs	r5, #1
 4375 007a 02E0     		b	.L303
 4376              	.LVL434:
 4377              	.L312:
 4378 007c 0125     		movs	r5, #1
 4379              	.LVL435:
 4380 007e 00E0     		b	.L303
 4381              	.LVL436:
 4382              	.L313:
4897:FreeRTOS\Source/tasks.c ****                     }
 4383              		.loc 1 4897 0
 4384 0080 0025     		movs	r5, #0
 4385              	.LVL437:
 4386              	.L303:
4922:FreeRTOS\Source/tasks.c ****             {
 4387              		.loc 1 4922 0
 4388 0082 012A     		cmp	r2, #1
 4389 0084 3CD1     		bne	.L309
 4390              	.LBB39:
4924:FreeRTOS\Source/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 4391              		.loc 1 4924 0
 4392 0086 6369     		ldr	r3, [r4, #20]
 4393              	.LVL438:
 4394 0088 A268     		ldr	r2, [r4, #8]
 4395              	.LVL439:
 4396 008a E168     		ldr	r1, [r4, #12]
 4397 008c 9160     		str	r1, [r2, #8]
 4398 008e E268     		ldr	r2, [r4, #12]
 4399 0090 A168     		ldr	r1, [r4, #8]
 4400 0092 5160     		str	r1, [r2, #4]
 4401 0094 201D     		adds	r0, r4, #4
 4402 0096 5A68     		ldr	r2, [r3, #4]
 4403 0098 8242     		cmp	r2, r0
 4404 009a 01D1     		bne	.L310
4924:FreeRTOS\Source/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 4405              		.loc 1 4924 0 is_stmt 0 discriminator 1
 4406 009c E268     		ldr	r2, [r4, #12]
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 183


 4407 009e 5A60     		str	r2, [r3, #4]
 4408              	.L310:
4924:FreeRTOS\Source/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 4409              		.loc 1 4924 0 discriminator 3
 4410 00a0 0022     		movs	r2, #0
 4411 00a2 6261     		str	r2, [r4, #20]
 4412 00a4 1A68     		ldr	r2, [r3]
 4413 00a6 013A     		subs	r2, r2, #1
 4414 00a8 1A60     		str	r2, [r3]
 4415              	.LBE39:
4925:FreeRTOS\Source/tasks.c **** 
 4416              		.loc 1 4925 0 is_stmt 1 discriminator 3
 4417 00aa E36A     		ldr	r3, [r4, #44]
 4418              	.LVL440:
 4419 00ac 174A     		ldr	r2, .L314
 4420 00ae 526E     		ldr	r2, [r2, #100]
 4421 00b0 9342     		cmp	r3, r2
 4422 00b2 01D9     		bls	.L311
4925:FreeRTOS\Source/tasks.c **** 
 4423              		.loc 1 4925 0 is_stmt 0 discriminator 1
 4424 00b4 154A     		ldr	r2, .L314
 4425 00b6 5366     		str	r3, [r2, #100]
 4426              	.L311:
 4427              	.LBB40:
4925:FreeRTOS\Source/tasks.c **** 
 4428              		.loc 1 4925 0 discriminator 3
 4429 00b8 1549     		ldr	r1, .L314+4
 4430 00ba 9A00     		lsls	r2, r3, #2
 4431 00bc D318     		adds	r3, r2, r3
 4432 00be 9A00     		lsls	r2, r3, #2
 4433 00c0 8A18     		adds	r2, r1, r2
 4434 00c2 536B     		ldr	r3, [r2, #52]
 4435              	.LVL441:
 4436 00c4 A360     		str	r3, [r4, #8]
 4437 00c6 9A68     		ldr	r2, [r3, #8]
 4438 00c8 E260     		str	r2, [r4, #12]
 4439 00ca 9A68     		ldr	r2, [r3, #8]
 4440 00cc 5060     		str	r0, [r2, #4]
 4441 00ce 9860     		str	r0, [r3, #8]
 4442 00d0 E26A     		ldr	r2, [r4, #44]
 4443 00d2 0F00     		movs	r7, r1
 4444 00d4 3037     		adds	r7, r7, #48
 4445 00d6 9300     		lsls	r3, r2, #2
 4446              	.LVL442:
 4447 00d8 9E18     		adds	r6, r3, r2
 4448 00da B000     		lsls	r0, r6, #2
 4449 00dc 3818     		adds	r0, r7, r0
 4450 00de 6061     		str	r0, [r4, #20]
 4451 00e0 9E18     		adds	r6, r3, r2
 4452 00e2 B000     		lsls	r0, r6, #2
 4453 00e4 0600     		movs	r6, r0
 4454 00e6 0818     		adds	r0, r1, r0
 4455 00e8 006B     		ldr	r0, [r0, #48]
 4456 00ea 0130     		adds	r0, r0, #1
 4457 00ec 8A19     		adds	r2, r1, r6
 4458 00ee 1063     		str	r0, [r2, #48]
 4459              	.LBE40:
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 184


4946:FreeRTOS\Source/tasks.c ****                 {
 4460              		.loc 1 4946 0 is_stmt 1 discriminator 3
 4461 00f0 E26A     		ldr	r2, [r4, #44]
 4462 00f2 064B     		ldr	r3, .L314
 4463 00f4 9B6D     		ldr	r3, [r3, #88]
 4464 00f6 DB6A     		ldr	r3, [r3, #44]
 4465 00f8 9A42     		cmp	r2, r3
 4466 00fa 01D9     		bls	.L309
4950:FreeRTOS\Source/tasks.c ****                 }
 4467              		.loc 1 4950 0
 4468 00fc FFF7FEFF 		bl	vPortYield
 4469              	.LVL443:
 4470              	.L309:
4962:FreeRTOS\Source/tasks.c **** 
 4471              		.loc 1 4962 0
 4472 0100 FFF7FEFF 		bl	vPortExitCritical
 4473              	.LVL444:
4965:FreeRTOS\Source/tasks.c **** 
 4474              		.loc 1 4965 0
 4475 0104 2800     		movs	r0, r5
 4476 0106 03B0     		add	sp, sp, #12
 4477              		@ sp needed
 4478              	.LVL445:
 4479              	.LVL446:
 4480 0108 F0BD     		pop	{r4, r5, r6, r7, pc}
 4481              	.L315:
 4482 010a C046     		.align	2
 4483              	.L314:
 4484 010c 80000000 		.word	.LANCHOR1
 4485 0110 00000000 		.word	.LANCHOR0
 4486              		.cfi_endproc
 4487              	.LFE81:
 4488              		.size	xTaskGenericNotify, .-xTaskGenericNotify
 4489              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 4490              		.align	2
 4491              		.global	xTaskGenericNotifyFromISR
 4492              		.code	16
 4493              		.thumb_func
 4494              		.type	xTaskGenericNotifyFromISR, %function
 4495              	xTaskGenericNotifyFromISR:
 4496              	.LFB82:
4978:FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
 4497              		.loc 1 4978 0
 4498              		.cfi_startproc
 4499              		@ args = 8, pretend = 0, frame = 8
 4500              		@ frame_needed = 0, uses_anonymous_args = 0
 4501              	.LVL447:
 4502 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 4503              		.cfi_def_cfa_offset 20
 4504              		.cfi_offset 4, -20
 4505              		.cfi_offset 5, -16
 4506              		.cfi_offset 6, -12
 4507              		.cfi_offset 7, -8
 4508              		.cfi_offset 14, -4
 4509 0002 83B0     		sub	sp, sp, #12
 4510              		.cfi_def_cfa_offset 32
 4511 0004 0400     		movs	r4, r0
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 185


 4512 0006 0D00     		movs	r5, r1
 4513 0008 0192     		str	r2, [sp, #4]
 4514 000a 1E00     		movs	r6, r3
 4515 000c 089F     		ldr	r7, [sp, #32]
 4516              	.LVL448:
5007:FreeRTOS\Source/tasks.c ****         {
 4517              		.loc 1 5007 0
 4518 000e FFF7FEFF 		bl	ulSetInterruptMaskFromISR
 4519              	.LVL449:
5009:FreeRTOS\Source/tasks.c ****             {
 4520              		.loc 1 5009 0
 4521 0012 002F     		cmp	r7, #0
 4522 0014 04D0     		beq	.L317
5011:FreeRTOS\Source/tasks.c ****             }
 4523              		.loc 1 5011 0
 4524 0016 2B00     		movs	r3, r5
 4525 0018 1233     		adds	r3, r3, #18
 4526 001a 9B00     		lsls	r3, r3, #2
 4527 001c 1B59     		ldr	r3, [r3, r4]
 4528 001e 3B60     		str	r3, [r7]
 4529              	.L317:
5014:FreeRTOS\Source/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 4530              		.loc 1 5014 0
 4531 0020 6319     		adds	r3, r4, r5
 4532 0022 4C33     		adds	r3, r3, #76
 4533 0024 1A78     		ldrb	r2, [r3]
 4534 0026 D2B2     		uxtb	r2, r2
 4535              	.LVL450:
5015:FreeRTOS\Source/tasks.c **** 
 4536              		.loc 1 5015 0
 4537 0028 0221     		movs	r1, #2
 4538 002a 1970     		strb	r1, [r3]
5017:FreeRTOS\Source/tasks.c ****             {
 4539              		.loc 1 5017 0
 4540 002c 022E     		cmp	r6, #2
 4541 002e 10D0     		beq	.L319
 4542 0030 02D8     		bhi	.L320
 4543 0032 012E     		cmp	r6, #1
 4544 0034 05D0     		beq	.L321
 4545 0036 21E0     		b	.L330
 4546              	.L320:
 4547 0038 032E     		cmp	r6, #3
 4548 003a 11D0     		beq	.L322
 4549 003c 042E     		cmp	r6, #4
 4550 003e 15D0     		beq	.L323
 4551 0040 1CE0     		b	.L330
 4552              	.L321:
5020:FreeRTOS\Source/tasks.c ****                     break;
 4553              		.loc 1 5020 0
 4554 0042 1235     		adds	r5, r5, #18
 4555              	.LVL451:
 4556 0044 AD00     		lsls	r5, r5, #2
 4557              	.LVL452:
 4558 0046 2B59     		ldr	r3, [r5, r4]
 4559 0048 019E     		ldr	r6, [sp, #4]
 4560 004a 1E43     		orrs	r6, r3
 4561 004c 2E51     		str	r6, [r5, r4]
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 186


4981:FreeRTOS\Source/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
 4562              		.loc 1 4981 0
 4563 004e 0125     		movs	r5, #1
5021:FreeRTOS\Source/tasks.c **** 
 4564              		.loc 1 5021 0
 4565 0050 17E0     		b	.L318
 4566              	.LVL453:
 4567              	.L319:
5024:FreeRTOS\Source/tasks.c ****                     break;
 4568              		.loc 1 5024 0
 4569 0052 1235     		adds	r5, r5, #18
 4570              	.LVL454:
 4571 0054 AD00     		lsls	r5, r5, #2
 4572              	.LVL455:
 4573 0056 2B59     		ldr	r3, [r5, r4]
 4574 0058 0133     		adds	r3, r3, #1
 4575 005a 2B51     		str	r3, [r5, r4]
4981:FreeRTOS\Source/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
 4576              		.loc 1 4981 0
 4577 005c 0125     		movs	r5, #1
5025:FreeRTOS\Source/tasks.c **** 
 4578              		.loc 1 5025 0
 4579 005e 10E0     		b	.L318
 4580              	.LVL456:
 4581              	.L322:
5028:FreeRTOS\Source/tasks.c ****                     break;
 4582              		.loc 1 5028 0
 4583 0060 1235     		adds	r5, r5, #18
 4584              	.LVL457:
 4585 0062 AD00     		lsls	r5, r5, #2
 4586              	.LVL458:
 4587 0064 019B     		ldr	r3, [sp, #4]
 4588 0066 2B51     		str	r3, [r5, r4]
4981:FreeRTOS\Source/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
 4589              		.loc 1 4981 0
 4590 0068 0125     		movs	r5, #1
5029:FreeRTOS\Source/tasks.c **** 
 4591              		.loc 1 5029 0
 4592 006a 0AE0     		b	.L318
 4593              	.LVL459:
 4594              	.L323:
5033:FreeRTOS\Source/tasks.c ****                     {
 4595              		.loc 1 5033 0
 4596 006c 022A     		cmp	r2, #2
 4597 006e 07D0     		beq	.L331
5035:FreeRTOS\Source/tasks.c ****                     }
 4598              		.loc 1 5035 0
 4599 0070 1235     		adds	r5, r5, #18
 4600              	.LVL460:
 4601 0072 AD00     		lsls	r5, r5, #2
 4602              	.LVL461:
 4603 0074 019B     		ldr	r3, [sp, #4]
 4604 0076 2B51     		str	r3, [r5, r4]
4981:FreeRTOS\Source/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
 4605              		.loc 1 4981 0
 4606 0078 0125     		movs	r5, #1
 4607 007a 02E0     		b	.L318
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 187


 4608              	.LVL462:
 4609              	.L330:
 4610 007c 0125     		movs	r5, #1
 4611              	.LVL463:
 4612 007e 00E0     		b	.L318
 4613              	.LVL464:
 4614              	.L331:
5040:FreeRTOS\Source/tasks.c ****                     }
 4615              		.loc 1 5040 0
 4616 0080 0025     		movs	r5, #0
 4617              	.LVL465:
 4618              	.L318:
5064:FreeRTOS\Source/tasks.c ****             {
 4619              		.loc 1 5064 0
 4620 0082 012A     		cmp	r2, #1
 4621 0084 5AD1     		bne	.L324
5069:FreeRTOS\Source/tasks.c ****                 {
 4622              		.loc 1 5069 0
 4623 0086 304B     		ldr	r3, .L332
 4624 0088 1B6F     		ldr	r3, [r3, #112]
 4625 008a 002B     		cmp	r3, #0
 4626 008c 37D1     		bne	.L325
 4627              	.LBB41:
5071:FreeRTOS\Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 4628              		.loc 1 5071 0
 4629 008e 6369     		ldr	r3, [r4, #20]
 4630              	.LVL466:
 4631 0090 A268     		ldr	r2, [r4, #8]
 4632              	.LVL467:
 4633 0092 E168     		ldr	r1, [r4, #12]
 4634 0094 9160     		str	r1, [r2, #8]
 4635 0096 E268     		ldr	r2, [r4, #12]
 4636 0098 A168     		ldr	r1, [r4, #8]
 4637 009a 5160     		str	r1, [r2, #4]
 4638 009c 261D     		adds	r6, r4, #4
 4639 009e 5A68     		ldr	r2, [r3, #4]
 4640 00a0 B242     		cmp	r2, r6
 4641 00a2 01D1     		bne	.L326
5071:FreeRTOS\Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 4642              		.loc 1 5071 0 is_stmt 0 discriminator 1
 4643 00a4 E268     		ldr	r2, [r4, #12]
 4644 00a6 5A60     		str	r2, [r3, #4]
 4645              	.L326:
5071:FreeRTOS\Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 4646              		.loc 1 5071 0 discriminator 3
 4647 00a8 0022     		movs	r2, #0
 4648 00aa 6261     		str	r2, [r4, #20]
 4649 00ac 1A68     		ldr	r2, [r3]
 4650 00ae 013A     		subs	r2, r2, #1
 4651 00b0 1A60     		str	r2, [r3]
 4652              	.LBE41:
5072:FreeRTOS\Source/tasks.c ****                 }
 4653              		.loc 1 5072 0 is_stmt 1 discriminator 3
 4654 00b2 E36A     		ldr	r3, [r4, #44]
 4655              	.LVL468:
 4656 00b4 244A     		ldr	r2, .L332
 4657 00b6 526E     		ldr	r2, [r2, #100]
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 188


 4658 00b8 9342     		cmp	r3, r2
 4659 00ba 01D9     		bls	.L327
5072:FreeRTOS\Source/tasks.c ****                 }
 4660              		.loc 1 5072 0 is_stmt 0 discriminator 1
 4661 00bc 224A     		ldr	r2, .L332
 4662 00be 5366     		str	r3, [r2, #100]
 4663              	.L327:
 4664              	.LBB42:
5072:FreeRTOS\Source/tasks.c ****                 }
 4665              		.loc 1 5072 0 discriminator 3
 4666 00c0 2249     		ldr	r1, .L332+4
 4667 00c2 9A00     		lsls	r2, r3, #2
 4668 00c4 D318     		adds	r3, r2, r3
 4669 00c6 9A00     		lsls	r2, r3, #2
 4670 00c8 8A18     		adds	r2, r1, r2
 4671 00ca 536B     		ldr	r3, [r2, #52]
 4672              	.LVL469:
 4673 00cc A360     		str	r3, [r4, #8]
 4674 00ce 9A68     		ldr	r2, [r3, #8]
 4675 00d0 E260     		str	r2, [r4, #12]
 4676 00d2 9A68     		ldr	r2, [r3, #8]
 4677 00d4 5660     		str	r6, [r2, #4]
 4678 00d6 9E60     		str	r6, [r3, #8]
 4679 00d8 E36A     		ldr	r3, [r4, #44]
 4680              	.LVL470:
 4681 00da 3022     		movs	r2, #48
 4682 00dc 9446     		mov	ip, r2
 4683 00de 8C44     		add	ip, ip, r1
 4684 00e0 9F00     		lsls	r7, r3, #2
 4685 00e2 FE18     		adds	r6, r7, r3
 4686 00e4 B200     		lsls	r2, r6, #2
 4687 00e6 6244     		add	r2, r2, ip
 4688 00e8 6261     		str	r2, [r4, #20]
 4689 00ea FE18     		adds	r6, r7, r3
 4690 00ec B200     		lsls	r2, r6, #2
 4691 00ee 8A18     		adds	r2, r1, r2
 4692 00f0 166B     		ldr	r6, [r2, #48]
 4693 00f2 0136     		adds	r6, r6, #1
 4694 00f4 FB18     		adds	r3, r7, r3
 4695 00f6 9A00     		lsls	r2, r3, #2
 4696 00f8 8A18     		adds	r2, r1, r2
 4697 00fa 1663     		str	r6, [r2, #48]
 4698              	.LBE42:
 4699 00fc 0FE0     		b	.L328
 4700              	.LVL471:
 4701              	.L325:
 4702              	.LBB43:
5078:FreeRTOS\Source/tasks.c ****                 }
 4703              		.loc 1 5078 0 is_stmt 1
 4704 00fe 134B     		ldr	r3, .L332+4
 4705 0100 9A69     		ldr	r2, [r3, #24]
 4706              	.LVL472:
 4707 0102 E261     		str	r2, [r4, #28]
 4708 0104 9168     		ldr	r1, [r2, #8]
 4709 0106 2162     		str	r1, [r4, #32]
 4710 0108 9668     		ldr	r6, [r2, #8]
 4711 010a 2100     		movs	r1, r4
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 189


 4712 010c 1831     		adds	r1, r1, #24
 4713 010e 7160     		str	r1, [r6, #4]
 4714 0110 9160     		str	r1, [r2, #8]
 4715 0112 1A00     		movs	r2, r3
 4716              	.LVL473:
 4717 0114 1432     		adds	r2, r2, #20
 4718 0116 A262     		str	r2, [r4, #40]
 4719 0118 5A69     		ldr	r2, [r3, #20]
 4720 011a 0132     		adds	r2, r2, #1
 4721 011c 5A61     		str	r2, [r3, #20]
 4722              	.L328:
 4723              	.LBE43:
5081:FreeRTOS\Source/tasks.c ****                 {
 4724              		.loc 1 5081 0
 4725 011e E26A     		ldr	r2, [r4, #44]
 4726 0120 094B     		ldr	r3, .L332
 4727 0122 9B6D     		ldr	r3, [r3, #88]
 4728 0124 DB6A     		ldr	r3, [r3, #44]
 4729 0126 9A42     		cmp	r2, r3
 4730 0128 08D9     		bls	.L324
5085:FreeRTOS\Source/tasks.c ****                     {
 4731              		.loc 1 5085 0
 4732 012a 099B     		ldr	r3, [sp, #36]
 4733 012c 002B     		cmp	r3, #0
 4734 012e 02D0     		beq	.L329
5087:FreeRTOS\Source/tasks.c ****                     }
 4735              		.loc 1 5087 0
 4736 0130 0123     		movs	r3, #1
 4737 0132 099A     		ldr	r2, [sp, #36]
 4738 0134 1360     		str	r3, [r2]
 4739              	.L329:
5093:FreeRTOS\Source/tasks.c ****                 }
 4740              		.loc 1 5093 0
 4741 0136 0122     		movs	r2, #1
 4742 0138 034B     		ldr	r3, .L332
 4743 013a 5A67     		str	r2, [r3, #116]
 4744              	.L324:
5101:FreeRTOS\Source/tasks.c **** 
 4745              		.loc 1 5101 0
 4746 013c FFF7FEFF 		bl	vClearInterruptMaskFromISR
 4747              	.LVL474:
5104:FreeRTOS\Source/tasks.c **** 
 4748              		.loc 1 5104 0
 4749 0140 2800     		movs	r0, r5
 4750 0142 03B0     		add	sp, sp, #12
 4751              		@ sp needed
 4752              	.LVL475:
 4753              	.LVL476:
 4754 0144 F0BD     		pop	{r4, r5, r6, r7, pc}
 4755              	.L333:
 4756 0146 C046     		.align	2
 4757              	.L332:
 4758 0148 80000000 		.word	.LANCHOR1
 4759 014c 00000000 		.word	.LANCHOR0
 4760              		.cfi_endproc
 4761              	.LFE82:
 4762              		.size	xTaskGenericNotifyFromISR, .-xTaskGenericNotifyFromISR
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 190


 4763              		.section	.text.vTaskGenericNotifyGiveFromISR,"ax",%progbits
 4764              		.align	2
 4765              		.global	vTaskGenericNotifyGiveFromISR
 4766              		.code	16
 4767              		.thumb_func
 4768              		.type	vTaskGenericNotifyGiveFromISR, %function
 4769              	vTaskGenericNotifyGiveFromISR:
 4770              	.LFB83:
5114:FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
 4771              		.loc 1 5114 0
 4772              		.cfi_startproc
 4773              		@ args = 0, pretend = 0, frame = 0
 4774              		@ frame_needed = 0, uses_anonymous_args = 0
 4775              	.LVL477:
 4776 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4777              		.cfi_def_cfa_offset 24
 4778              		.cfi_offset 3, -24
 4779              		.cfi_offset 4, -20
 4780              		.cfi_offset 5, -16
 4781              		.cfi_offset 6, -12
 4782              		.cfi_offset 7, -8
 4783              		.cfi_offset 14, -4
 4784 0002 0500     		movs	r5, r0
 4785 0004 0C00     		movs	r4, r1
 4786 0006 1600     		movs	r6, r2
 4787              	.LVL478:
5142:FreeRTOS\Source/tasks.c ****         {
 4788              		.loc 1 5142 0
 4789 0008 FFF7FEFF 		bl	ulSetInterruptMaskFromISR
 4790              	.LVL479:
5144:FreeRTOS\Source/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 4791              		.loc 1 5144 0
 4792 000c 2B19     		adds	r3, r5, r4
 4793 000e 4C33     		adds	r3, r3, #76
 4794 0010 1A78     		ldrb	r2, [r3]
 4795              	.LVL480:
5145:FreeRTOS\Source/tasks.c **** 
 4796              		.loc 1 5145 0
 4797 0012 0221     		movs	r1, #2
 4798 0014 1970     		strb	r1, [r3]
5149:FreeRTOS\Source/tasks.c **** 
 4799              		.loc 1 5149 0
 4800 0016 1234     		adds	r4, r4, #18
 4801              	.LVL481:
 4802 0018 A400     		lsls	r4, r4, #2
 4803              	.LVL482:
 4804 001a 6359     		ldr	r3, [r4, r5]
 4805 001c 0133     		adds	r3, r3, #1
 4806 001e 6351     		str	r3, [r4, r5]
5155:FreeRTOS\Source/tasks.c ****             {
 4807              		.loc 1 5155 0
 4808 0020 012A     		cmp	r2, #1
 4809 0022 58D1     		bne	.L335
5160:FreeRTOS\Source/tasks.c ****                 {
 4810              		.loc 1 5160 0
 4811 0024 2D4B     		ldr	r3, .L341
 4812 0026 1B6F     		ldr	r3, [r3, #112]
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 191


 4813 0028 002B     		cmp	r3, #0
 4814 002a 37D1     		bne	.L336
 4815              	.LBB44:
5162:FreeRTOS\Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 4816              		.loc 1 5162 0
 4817 002c 6B69     		ldr	r3, [r5, #20]
 4818              	.LVL483:
 4819 002e AA68     		ldr	r2, [r5, #8]
 4820              	.LVL484:
 4821 0030 E968     		ldr	r1, [r5, #12]
 4822 0032 9160     		str	r1, [r2, #8]
 4823 0034 EA68     		ldr	r2, [r5, #12]
 4824 0036 A968     		ldr	r1, [r5, #8]
 4825 0038 5160     		str	r1, [r2, #4]
 4826 003a 2C1D     		adds	r4, r5, #4
 4827 003c 5A68     		ldr	r2, [r3, #4]
 4828 003e A242     		cmp	r2, r4
 4829 0040 01D1     		bne	.L337
5162:FreeRTOS\Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 4830              		.loc 1 5162 0 is_stmt 0 discriminator 1
 4831 0042 EA68     		ldr	r2, [r5, #12]
 4832 0044 5A60     		str	r2, [r3, #4]
 4833              	.L337:
5162:FreeRTOS\Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 4834              		.loc 1 5162 0 discriminator 3
 4835 0046 0022     		movs	r2, #0
 4836 0048 6A61     		str	r2, [r5, #20]
 4837 004a 1A68     		ldr	r2, [r3]
 4838 004c 013A     		subs	r2, r2, #1
 4839 004e 1A60     		str	r2, [r3]
 4840              	.LBE44:
5163:FreeRTOS\Source/tasks.c ****                 }
 4841              		.loc 1 5163 0 is_stmt 1 discriminator 3
 4842 0050 EB6A     		ldr	r3, [r5, #44]
 4843              	.LVL485:
 4844 0052 224A     		ldr	r2, .L341
 4845 0054 526E     		ldr	r2, [r2, #100]
 4846 0056 9342     		cmp	r3, r2
 4847 0058 01D9     		bls	.L338
5163:FreeRTOS\Source/tasks.c ****                 }
 4848              		.loc 1 5163 0 is_stmt 0 discriminator 1
 4849 005a 204A     		ldr	r2, .L341
 4850 005c 5366     		str	r3, [r2, #100]
 4851              	.L338:
 4852              	.LBB45:
5163:FreeRTOS\Source/tasks.c ****                 }
 4853              		.loc 1 5163 0 discriminator 3
 4854 005e 2049     		ldr	r1, .L341+4
 4855 0060 9A00     		lsls	r2, r3, #2
 4856 0062 D318     		adds	r3, r2, r3
 4857 0064 9A00     		lsls	r2, r3, #2
 4858 0066 8A18     		adds	r2, r1, r2
 4859 0068 536B     		ldr	r3, [r2, #52]
 4860              	.LVL486:
 4861 006a AB60     		str	r3, [r5, #8]
 4862 006c 9A68     		ldr	r2, [r3, #8]
 4863 006e EA60     		str	r2, [r5, #12]
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 192


 4864 0070 9A68     		ldr	r2, [r3, #8]
 4865 0072 5460     		str	r4, [r2, #4]
 4866 0074 9C60     		str	r4, [r3, #8]
 4867 0076 EB6A     		ldr	r3, [r5, #44]
 4868              	.LVL487:
 4869 0078 3022     		movs	r2, #48
 4870 007a 9446     		mov	ip, r2
 4871 007c 8C44     		add	ip, ip, r1
 4872 007e 9F00     		lsls	r7, r3, #2
 4873 0080 FC18     		adds	r4, r7, r3
 4874 0082 A200     		lsls	r2, r4, #2
 4875 0084 6244     		add	r2, r2, ip
 4876 0086 6A61     		str	r2, [r5, #20]
 4877 0088 FC18     		adds	r4, r7, r3
 4878 008a A200     		lsls	r2, r4, #2
 4879 008c 8A18     		adds	r2, r1, r2
 4880 008e 146B     		ldr	r4, [r2, #48]
 4881 0090 0134     		adds	r4, r4, #1
 4882 0092 FB18     		adds	r3, r7, r3
 4883 0094 9A00     		lsls	r2, r3, #2
 4884 0096 8A18     		adds	r2, r1, r2
 4885 0098 1463     		str	r4, [r2, #48]
 4886              	.LBE45:
 4887 009a 0FE0     		b	.L339
 4888              	.LVL488:
 4889              	.L336:
 4890              	.LBB46:
5169:FreeRTOS\Source/tasks.c ****                 }
 4891              		.loc 1 5169 0 is_stmt 1
 4892 009c 104B     		ldr	r3, .L341+4
 4893 009e 9A69     		ldr	r2, [r3, #24]
 4894              	.LVL489:
 4895 00a0 EA61     		str	r2, [r5, #28]
 4896 00a2 9168     		ldr	r1, [r2, #8]
 4897 00a4 2962     		str	r1, [r5, #32]
 4898 00a6 9468     		ldr	r4, [r2, #8]
 4899 00a8 2900     		movs	r1, r5
 4900 00aa 1831     		adds	r1, r1, #24
 4901 00ac 6160     		str	r1, [r4, #4]
 4902 00ae 9160     		str	r1, [r2, #8]
 4903 00b0 1A00     		movs	r2, r3
 4904              	.LVL490:
 4905 00b2 1432     		adds	r2, r2, #20
 4906 00b4 AA62     		str	r2, [r5, #40]
 4907 00b6 5A69     		ldr	r2, [r3, #20]
 4908 00b8 0132     		adds	r2, r2, #1
 4909 00ba 5A61     		str	r2, [r3, #20]
 4910              	.L339:
 4911              	.LBE46:
5172:FreeRTOS\Source/tasks.c ****                 {
 4912              		.loc 1 5172 0
 4913 00bc EA6A     		ldr	r2, [r5, #44]
 4914 00be 074B     		ldr	r3, .L341
 4915 00c0 9B6D     		ldr	r3, [r3, #88]
 4916 00c2 DB6A     		ldr	r3, [r3, #44]
 4917 00c4 9A42     		cmp	r2, r3
 4918 00c6 06D9     		bls	.L335
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 193


5176:FreeRTOS\Source/tasks.c ****                     {
 4919              		.loc 1 5176 0
 4920 00c8 002E     		cmp	r6, #0
 4921 00ca 01D0     		beq	.L340
5178:FreeRTOS\Source/tasks.c ****                     }
 4922              		.loc 1 5178 0
 4923 00cc 0123     		movs	r3, #1
 4924 00ce 3360     		str	r3, [r6]
 4925              	.L340:
5184:FreeRTOS\Source/tasks.c ****                 }
 4926              		.loc 1 5184 0
 4927 00d0 0122     		movs	r2, #1
 4928 00d2 024B     		ldr	r3, .L341
 4929 00d4 5A67     		str	r2, [r3, #116]
 4930              	.L335:
5192:FreeRTOS\Source/tasks.c ****     }
 4931              		.loc 1 5192 0
 4932 00d6 FFF7FEFF 		bl	vClearInterruptMaskFromISR
 4933              	.LVL491:
5193:FreeRTOS\Source/tasks.c **** 
 4934              		.loc 1 5193 0
 4935              		@ sp needed
 4936              	.LVL492:
 4937              	.LVL493:
 4938 00da F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4939              	.L342:
 4940              		.align	2
 4941              	.L341:
 4942 00dc 80000000 		.word	.LANCHOR1
 4943 00e0 00000000 		.word	.LANCHOR0
 4944              		.cfi_endproc
 4945              	.LFE83:
 4946              		.size	vTaskGenericNotifyGiveFromISR, .-vTaskGenericNotifyGiveFromISR
 4947              		.section	.text.xTaskGenericNotifyStateClear,"ax",%progbits
 4948              		.align	2
 4949              		.global	xTaskGenericNotifyStateClear
 4950              		.code	16
 4951              		.thumb_func
 4952              		.type	xTaskGenericNotifyStateClear, %function
 4953              	xTaskGenericNotifyStateClear:
 4954              	.LFB84:
5202:FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
 4955              		.loc 1 5202 0
 4956              		.cfi_startproc
 4957              		@ args = 0, pretend = 0, frame = 0
 4958              		@ frame_needed = 0, uses_anonymous_args = 0
 4959              	.LVL494:
 4960 0000 70B5     		push	{r4, r5, r6, lr}
 4961              		.cfi_def_cfa_offset 16
 4962              		.cfi_offset 4, -16
 4963              		.cfi_offset 5, -12
 4964              		.cfi_offset 6, -8
 4965              		.cfi_offset 14, -4
 4966 0002 0500     		movs	r5, r0
 4967 0004 0C00     		movs	r4, r1
5210:FreeRTOS\Source/tasks.c **** 
 4968              		.loc 1 5210 0
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 194


 4969 0006 0028     		cmp	r0, #0
 4970 0008 01D1     		bne	.L344
5210:FreeRTOS\Source/tasks.c **** 
 4971              		.loc 1 5210 0 is_stmt 0 discriminator 1
 4972 000a 0A4B     		ldr	r3, .L347
 4973 000c 9D6D     		ldr	r5, [r3, #88]
 4974              	.LVL495:
 4975              	.L344:
5212:FreeRTOS\Source/tasks.c ****         {
 4976              		.loc 1 5212 0 is_stmt 1 discriminator 4
 4977 000e FFF7FEFF 		bl	vPortEnterCritical
 4978              	.LVL496:
5214:FreeRTOS\Source/tasks.c ****             {
 4979              		.loc 1 5214 0 discriminator 4
 4980 0012 2B19     		adds	r3, r5, r4
 4981 0014 4C33     		adds	r3, r3, #76
 4982 0016 1B78     		ldrb	r3, [r3]
 4983 0018 022B     		cmp	r3, #2
 4984 001a 05D1     		bne	.L346
5216:FreeRTOS\Source/tasks.c ****                 xReturn = pdPASS;
 4985              		.loc 1 5216 0
 4986 001c 2C19     		adds	r4, r5, r4
 4987              	.LVL497:
 4988 001e 4C34     		adds	r4, r4, #76
 4989 0020 0023     		movs	r3, #0
 4990 0022 2370     		strb	r3, [r4]
 4991              	.LVL498:
5217:FreeRTOS\Source/tasks.c ****             }
 4992              		.loc 1 5217 0
 4993 0024 0124     		movs	r4, #1
 4994 0026 00E0     		b	.L345
 4995              	.LVL499:
 4996              	.L346:
5221:FreeRTOS\Source/tasks.c ****             }
 4997              		.loc 1 5221 0
 4998 0028 0024     		movs	r4, #0
 4999              	.LVL500:
 5000              	.L345:
5224:FreeRTOS\Source/tasks.c **** 
 5001              		.loc 1 5224 0
 5002 002a FFF7FEFF 		bl	vPortExitCritical
 5003              	.LVL501:
5227:FreeRTOS\Source/tasks.c **** 
 5004              		.loc 1 5227 0
 5005 002e 2000     		movs	r0, r4
 5006              		@ sp needed
 5007              	.LVL502:
 5008              	.LVL503:
 5009 0030 70BD     		pop	{r4, r5, r6, pc}
 5010              	.L348:
 5011 0032 C046     		.align	2
 5012              	.L347:
 5013 0034 80000000 		.word	.LANCHOR1
 5014              		.cfi_endproc
 5015              	.LFE84:
 5016              		.size	xTaskGenericNotifyStateClear, .-xTaskGenericNotifyStateClear
 5017              		.section	.text.ulTaskGenericNotifyValueClear,"ax",%progbits
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 195


 5018              		.align	2
 5019              		.global	ulTaskGenericNotifyValueClear
 5020              		.code	16
 5021              		.thumb_func
 5022              		.type	ulTaskGenericNotifyValueClear, %function
 5023              	ulTaskGenericNotifyValueClear:
 5024              	.LFB85:
5237:FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
 5025              		.loc 1 5237 0
 5026              		.cfi_startproc
 5027              		@ args = 0, pretend = 0, frame = 0
 5028              		@ frame_needed = 0, uses_anonymous_args = 0
 5029              	.LVL504:
 5030 0000 70B5     		push	{r4, r5, r6, lr}
 5031              		.cfi_def_cfa_offset 16
 5032              		.cfi_offset 4, -16
 5033              		.cfi_offset 5, -12
 5034              		.cfi_offset 6, -8
 5035              		.cfi_offset 14, -4
 5036 0002 0500     		movs	r5, r0
 5037 0004 0C00     		movs	r4, r1
 5038 0006 1600     		movs	r6, r2
5243:FreeRTOS\Source/tasks.c **** 
 5039              		.loc 1 5243 0
 5040 0008 0028     		cmp	r0, #0
 5041 000a 01D1     		bne	.L350
5243:FreeRTOS\Source/tasks.c **** 
 5042              		.loc 1 5243 0 is_stmt 0 discriminator 1
 5043 000c 074B     		ldr	r3, .L351
 5044 000e 9D6D     		ldr	r5, [r3, #88]
 5045              	.LVL505:
 5046              	.L350:
5245:FreeRTOS\Source/tasks.c ****         {
 5047              		.loc 1 5245 0 is_stmt 1 discriminator 4
 5048 0010 FFF7FEFF 		bl	vPortEnterCritical
 5049              	.LVL506:
5249:FreeRTOS\Source/tasks.c ****             pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
 5050              		.loc 1 5249 0 discriminator 4
 5051 0014 2100     		movs	r1, r4
 5052 0016 1231     		adds	r1, r1, #18
 5053 0018 8900     		lsls	r1, r1, #2
 5054 001a 4C59     		ldr	r4, [r1, r5]
 5055              	.LVL507:
5250:FreeRTOS\Source/tasks.c ****         }
 5056              		.loc 1 5250 0 discriminator 4
 5057 001c 4B59     		ldr	r3, [r1, r5]
 5058 001e B343     		bics	r3, r6
 5059 0020 4B51     		str	r3, [r1, r5]
5252:FreeRTOS\Source/tasks.c **** 
 5060              		.loc 1 5252 0 discriminator 4
 5061 0022 FFF7FEFF 		bl	vPortExitCritical
 5062              	.LVL508:
5255:FreeRTOS\Source/tasks.c **** 
 5063              		.loc 1 5255 0 discriminator 4
 5064 0026 2000     		movs	r0, r4
 5065              		@ sp needed
 5066              	.LVL509:
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 196


 5067              	.LVL510:
 5068              	.LVL511:
 5069 0028 70BD     		pop	{r4, r5, r6, pc}
 5070              	.L352:
 5071 002a C046     		.align	2
 5072              	.L351:
 5073 002c 80000000 		.word	.LANCHOR1
 5074              		.cfi_endproc
 5075              	.LFE85:
 5076              		.size	ulTaskGenericNotifyValueClear, .-ulTaskGenericNotifyValueClear
 5077              		.global	uxTopUsedPriority
 5078              		.global	pxCurrentTCB
 5079              		.data
 5080              		.align	2
 5081              		.set	.LANCHOR2,. + 0
 5082              		.type	uxTopUsedPriority, %object
 5083              		.size	uxTopUsedPriority, 4
 5084              	uxTopUsedPriority:
 5085 0000 04000000 		.word	4
 5086              		.section	.rodata.str1.4,"aMS",%progbits,1
 5087              		.align	2
 5088              	.LC29:
 5089 0000 49444C45 		.ascii	"IDLE\000"
 5089      00
 5090              		.bss
 5091              		.align	2
 5092              		.set	.LANCHOR0,. + 0
 5093              		.set	.LANCHOR1,. + 128
 5094              		.set	.LANCHOR3,. + 256
 5095              		.type	xSuspendedTaskList, %object
 5096              		.size	xSuspendedTaskList, 20
 5097              	xSuspendedTaskList:
 5098 0000 00000000 		.space	20
 5098      00000000 
 5098      00000000 
 5098      00000000 
 5098      00000000 
 5099              		.type	xPendingReadyList, %object
 5100              		.size	xPendingReadyList, 20
 5101              	xPendingReadyList:
 5102 0014 00000000 		.space	20
 5102      00000000 
 5102      00000000 
 5102      00000000 
 5102      00000000 
 5103              		.type	pxDelayedTaskList, %object
 5104              		.size	pxDelayedTaskList, 4
 5105              	pxDelayedTaskList:
 5106 0028 00000000 		.space	4
 5107              		.type	xNextTaskUnblockTime, %object
 5108              		.size	xNextTaskUnblockTime, 4
 5109              	xNextTaskUnblockTime:
 5110 002c 00000000 		.space	4
 5111              		.type	pxReadyTasksLists, %object
 5112              		.size	pxReadyTasksLists, 100
 5113              	pxReadyTasksLists:
 5114 0030 00000000 		.space	100
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 197


 5114      00000000 
 5114      00000000 
 5114      00000000 
 5114      00000000 
 5115              		.type	xDelayedTaskList1, %object
 5116              		.size	xDelayedTaskList1, 20
 5117              	xDelayedTaskList1:
 5118 0094 00000000 		.space	20
 5118      00000000 
 5118      00000000 
 5118      00000000 
 5118      00000000 
 5119              		.type	xDelayedTaskList2, %object
 5120              		.size	xDelayedTaskList2, 20
 5121              	xDelayedTaskList2:
 5122 00a8 00000000 		.space	20
 5122      00000000 
 5122      00000000 
 5122      00000000 
 5122      00000000 
 5123              		.type	xTasksWaitingTermination, %object
 5124              		.size	xTasksWaitingTermination, 20
 5125              	xTasksWaitingTermination:
 5126 00bc 00000000 		.space	20
 5126      00000000 
 5126      00000000 
 5126      00000000 
 5126      00000000 
 5127              		.type	pxOverflowDelayedTaskList, %object
 5128              		.size	pxOverflowDelayedTaskList, 4
 5129              	pxOverflowDelayedTaskList:
 5130 00d0 00000000 		.space	4
 5131              		.type	uxCurrentNumberOfTasks, %object
 5132              		.size	uxCurrentNumberOfTasks, 4
 5133              	uxCurrentNumberOfTasks:
 5134 00d4 00000000 		.space	4
 5135              		.type	pxCurrentTCB, %object
 5136              		.size	pxCurrentTCB, 4
 5137              	pxCurrentTCB:
 5138 00d8 00000000 		.space	4
 5139              		.type	xSchedulerRunning, %object
 5140              		.size	xSchedulerRunning, 4
 5141              	xSchedulerRunning:
 5142 00dc 00000000 		.space	4
 5143              		.type	uxTaskNumber, %object
 5144              		.size	uxTaskNumber, 4
 5145              	uxTaskNumber:
 5146 00e0 00000000 		.space	4
 5147              		.type	uxTopReadyPriority, %object
 5148              		.size	uxTopReadyPriority, 4
 5149              	uxTopReadyPriority:
 5150 00e4 00000000 		.space	4
 5151              		.type	uxDeletedTasksWaitingCleanUp, %object
 5152              		.size	uxDeletedTasksWaitingCleanUp, 4
 5153              	uxDeletedTasksWaitingCleanUp:
 5154 00e8 00000000 		.space	4
 5155              		.type	xTickCount, %object
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 198


 5156              		.size	xTickCount, 4
 5157              	xTickCount:
 5158 00ec 00000000 		.space	4
 5159              		.type	uxSchedulerSuspended, %object
 5160              		.size	uxSchedulerSuspended, 4
 5161              	uxSchedulerSuspended:
 5162 00f0 00000000 		.space	4
 5163              		.type	xYieldPending, %object
 5164              		.size	xYieldPending, 4
 5165              	xYieldPending:
 5166 00f4 00000000 		.space	4
 5167              		.type	xIdleTaskHandle, %object
 5168              		.size	xIdleTaskHandle, 4
 5169              	xIdleTaskHandle:
 5170 00f8 00000000 		.space	4
 5171              		.type	xNumOfOverflows, %object
 5172              		.size	xNumOfOverflows, 4
 5173              	xNumOfOverflows:
 5174 00fc 00000000 		.space	4
 5175              		.type	xPendedTicks, %object
 5176              		.size	xPendedTicks, 4
 5177              	xPendedTicks:
 5178 0100 00000000 		.space	4
 5179              		.text
 5180              	.Letext0:
 5181              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 5182              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 5183              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 5184              		.file 5 ".\\FreeRTOS\\Include/projdefs.h"
 5185              		.file 6 ".\\FreeRTOS\\Include/portmacro.h"
 5186              		.file 7 ".\\FreeRTOS\\Include/list.h"
 5187              		.file 8 ".\\FreeRTOS\\Include/task.h"
 5188              		.file 9 ".\\FreeRTOS\\Include/portable.h"
 5189              		.file 10 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4
 5190              		.section	.debug_info,"",%progbits
 5191              	.Ldebug_info0:
 5192 0000 F9200000 		.4byte	0x20f9
 5193 0004 0400     		.2byte	0x4
 5194 0006 00000000 		.4byte	.Ldebug_abbrev0
 5195 000a 04       		.byte	0x4
 5196 000b 01       		.uleb128 0x1
 5197 000c 9C040000 		.4byte	.LASF231
 5198 0010 0C       		.byte	0xc
 5199 0011 7A070000 		.4byte	.LASF232
 5200 0015 97030000 		.4byte	.LASF233
 5201 0019 40000000 		.4byte	.Ldebug_ranges0+0x40
 5202 001d 00000000 		.4byte	0
 5203 0021 00000000 		.4byte	.Ldebug_line0
 5204 0025 02       		.uleb128 0x2
 5205 0026 38050000 		.4byte	.LASF4
 5206 002a 02       		.byte	0x2
 5207 002b D8       		.byte	0xd8
 5208 002c 30000000 		.4byte	0x30
 5209 0030 03       		.uleb128 0x3
 5210 0031 04       		.byte	0x4
 5211 0032 07       		.byte	0x7
 5212 0033 EA000000 		.4byte	.LASF0
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 199


 5213 0037 04       		.uleb128 0x4
 5214 0038 04       		.byte	0x4
 5215 0039 05       		.byte	0x5
 5216 003a 696E7400 		.ascii	"int\000"
 5217 003e 03       		.uleb128 0x3
 5218 003f 08       		.byte	0x8
 5219 0040 05       		.byte	0x5
 5220 0041 E6070000 		.4byte	.LASF1
 5221 0045 03       		.uleb128 0x3
 5222 0046 08       		.byte	0x8
 5223 0047 04       		.byte	0x4
 5224 0048 BA090000 		.4byte	.LASF2
 5225 004c 03       		.uleb128 0x3
 5226 004d 01       		.byte	0x1
 5227 004e 06       		.byte	0x6
 5228 004f 6A0E0000 		.4byte	.LASF3
 5229 0053 02       		.uleb128 0x2
 5230 0054 8E0B0000 		.4byte	.LASF5
 5231 0058 03       		.byte	0x3
 5232 0059 1D       		.byte	0x1d
 5233 005a 5E000000 		.4byte	0x5e
 5234 005e 03       		.uleb128 0x3
 5235 005f 01       		.byte	0x1
 5236 0060 08       		.byte	0x8
 5237 0061 900C0000 		.4byte	.LASF6
 5238 0065 03       		.uleb128 0x3
 5239 0066 02       		.byte	0x2
 5240 0067 05       		.byte	0x5
 5241 0068 740A0000 		.4byte	.LASF7
 5242 006c 02       		.uleb128 0x2
 5243 006d 09040000 		.4byte	.LASF8
 5244 0071 03       		.byte	0x3
 5245 0072 2B       		.byte	0x2b
 5246 0073 77000000 		.4byte	0x77
 5247 0077 03       		.uleb128 0x3
 5248 0078 02       		.byte	0x2
 5249 0079 07       		.byte	0x7
 5250 007a 760E0000 		.4byte	.LASF9
 5251 007e 03       		.uleb128 0x3
 5252 007f 04       		.byte	0x4
 5253 0080 05       		.byte	0x5
 5254 0081 AA0A0000 		.4byte	.LASF10
 5255 0085 02       		.uleb128 0x2
 5256 0086 BD0C0000 		.4byte	.LASF11
 5257 008a 03       		.byte	0x3
 5258 008b 41       		.byte	0x41
 5259 008c 90000000 		.4byte	0x90
 5260 0090 03       		.uleb128 0x3
 5261 0091 04       		.byte	0x4
 5262 0092 07       		.byte	0x7
 5263 0093 CF0B0000 		.4byte	.LASF12
 5264 0097 03       		.uleb128 0x3
 5265 0098 08       		.byte	0x8
 5266 0099 07       		.byte	0x7
 5267 009a 2A030000 		.4byte	.LASF13
 5268 009e 03       		.uleb128 0x3
 5269 009f 04       		.byte	0x4
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 200


 5270 00a0 07       		.byte	0x7
 5271 00a1 B50B0000 		.4byte	.LASF14
 5272 00a5 05       		.uleb128 0x5
 5273 00a6 04       		.byte	0x4
 5274 00a7 06       		.uleb128 0x6
 5275 00a8 04       		.byte	0x4
 5276 00a9 AD000000 		.4byte	0xad
 5277 00ad 03       		.uleb128 0x3
 5278 00ae 01       		.byte	0x1
 5279 00af 08       		.byte	0x8
 5280 00b0 92060000 		.4byte	.LASF15
 5281 00b4 06       		.uleb128 0x6
 5282 00b5 04       		.byte	0x4
 5283 00b6 BA000000 		.4byte	0xba
 5284 00ba 07       		.uleb128 0x7
 5285 00bb AD000000 		.4byte	0xad
 5286 00bf 02       		.uleb128 0x2
 5287 00c0 69070000 		.4byte	.LASF16
 5288 00c4 04       		.byte	0x4
 5289 00c5 18       		.byte	0x18
 5290 00c6 53000000 		.4byte	0x53
 5291 00ca 02       		.uleb128 0x2
 5292 00cb D5090000 		.4byte	.LASF17
 5293 00cf 04       		.byte	0x4
 5294 00d0 24       		.byte	0x24
 5295 00d1 6C000000 		.4byte	0x6c
 5296 00d5 02       		.uleb128 0x2
 5297 00d6 8C020000 		.4byte	.LASF18
 5298 00da 04       		.byte	0x4
 5299 00db 30       		.byte	0x30
 5300 00dc 85000000 		.4byte	0x85
 5301 00e0 03       		.uleb128 0x3
 5302 00e1 04       		.byte	0x4
 5303 00e2 04       		.byte	0x4
 5304 00e3 D2020000 		.4byte	.LASF19
 5305 00e7 03       		.uleb128 0x3
 5306 00e8 08       		.byte	0x8
 5307 00e9 04       		.byte	0x4
 5308 00ea C70E0000 		.4byte	.LASF20
 5309 00ee 08       		.uleb128 0x8
 5310 00ef FE000000 		.4byte	0xfe
 5311 00f3 FE000000 		.4byte	0xfe
 5312 00f7 09       		.uleb128 0x9
 5313 00f8 9E000000 		.4byte	0x9e
 5314 00fc 00       		.byte	0
 5315 00fd 00       		.byte	0
 5316 00fe 0A       		.uleb128 0xa
 5317 00ff D5000000 		.4byte	0xd5
 5318 0103 02       		.uleb128 0x2
 5319 0104 7D080000 		.4byte	.LASF21
 5320 0108 05       		.byte	0x5
 5321 0109 24       		.byte	0x24
 5322 010a 0E010000 		.4byte	0x10e
 5323 010e 06       		.uleb128 0x6
 5324 010f 04       		.byte	0x4
 5325 0110 14010000 		.4byte	0x114
 5326 0114 0B       		.uleb128 0xb
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 201


 5327 0115 1F010000 		.4byte	0x11f
 5328 0119 0C       		.uleb128 0xc
 5329 011a A5000000 		.4byte	0xa5
 5330 011e 00       		.byte	0
 5331 011f 02       		.uleb128 0x2
 5332 0120 1D010000 		.4byte	.LASF22
 5333 0124 06       		.byte	0x6
 5334 0125 38       		.byte	0x38
 5335 0126 D5000000 		.4byte	0xd5
 5336 012a 02       		.uleb128 0x2
 5337 012b 2B080000 		.4byte	.LASF23
 5338 012f 06       		.byte	0x6
 5339 0130 3A       		.byte	0x3a
 5340 0131 7E000000 		.4byte	0x7e
 5341 0135 02       		.uleb128 0x2
 5342 0136 BC060000 		.4byte	.LASF24
 5343 013a 06       		.byte	0x6
 5344 013b 3B       		.byte	0x3b
 5345 013c 90000000 		.4byte	0x90
 5346 0140 02       		.uleb128 0x2
 5347 0141 92090000 		.4byte	.LASF25
 5348 0145 06       		.byte	0x6
 5349 0146 41       		.byte	0x41
 5350 0147 D5000000 		.4byte	0xd5
 5351 014b 06       		.uleb128 0x6
 5352 014c 04       		.byte	0x4
 5353 014d BF000000 		.4byte	0xbf
 5354 0151 0D       		.uleb128 0xd
 5355 0152 6C010000 		.4byte	.LASF31
 5356 0156 14       		.byte	0x14
 5357 0157 07       		.byte	0x7
 5358 0158 90       		.byte	0x90
 5359 0159 9A010000 		.4byte	0x19a
 5360 015d 0E       		.uleb128 0xe
 5361 015e 9F0A0000 		.4byte	.LASF26
 5362 0162 07       		.byte	0x7
 5363 0163 93       		.byte	0x93
 5364 0164 40010000 		.4byte	0x140
 5365 0168 00       		.byte	0
 5366 0169 0E       		.uleb128 0xe
 5367 016a 8C080000 		.4byte	.LASF27
 5368 016e 07       		.byte	0x7
 5369 016f 94       		.byte	0x94
 5370 0170 9A010000 		.4byte	0x19a
 5371 0174 04       		.byte	0x4
 5372 0175 0E       		.uleb128 0xe
 5373 0176 390E0000 		.4byte	.LASF28
 5374 017a 07       		.byte	0x7
 5375 017b 95       		.byte	0x95
 5376 017c 9A010000 		.4byte	0x19a
 5377 0180 08       		.byte	0x8
 5378 0181 0E       		.uleb128 0xe
 5379 0182 650D0000 		.4byte	.LASF29
 5380 0186 07       		.byte	0x7
 5381 0187 96       		.byte	0x96
 5382 0188 A5000000 		.4byte	0xa5
 5383 018c 0C       		.byte	0xc
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 202


 5384 018d 0E       		.uleb128 0xe
 5385 018e 1D0A0000 		.4byte	.LASF30
 5386 0192 07       		.byte	0x7
 5387 0193 97       		.byte	0x97
 5388 0194 D1010000 		.4byte	0x1d1
 5389 0198 10       		.byte	0x10
 5390 0199 00       		.byte	0
 5391 019a 06       		.uleb128 0x6
 5392 019b 04       		.byte	0x4
 5393 019c 51010000 		.4byte	0x151
 5394 01a0 0D       		.uleb128 0xd
 5395 01a1 65050000 		.4byte	.LASF32
 5396 01a5 14       		.byte	0x14
 5397 01a6 07       		.byte	0x7
 5398 01a7 AC       		.byte	0xac
 5399 01a8 D1010000 		.4byte	0x1d1
 5400 01ac 0E       		.uleb128 0xe
 5401 01ad 0B000000 		.4byte	.LASF33
 5402 01b1 07       		.byte	0x7
 5403 01b2 AF       		.byte	0xaf
 5404 01b3 1E020000 		.4byte	0x21e
 5405 01b7 00       		.byte	0
 5406 01b8 0E       		.uleb128 0xe
 5407 01b9 15010000 		.4byte	.LASF34
 5408 01bd 07       		.byte	0x7
 5409 01be B0       		.byte	0xb0
 5410 01bf 23020000 		.4byte	0x223
 5411 01c3 04       		.byte	0x4
 5412 01c4 0E       		.uleb128 0xe
 5413 01c5 14070000 		.4byte	.LASF35
 5414 01c9 07       		.byte	0x7
 5415 01ca B1       		.byte	0xb1
 5416 01cb 13020000 		.4byte	0x213
 5417 01cf 08       		.byte	0x8
 5418 01d0 00       		.byte	0
 5419 01d1 06       		.uleb128 0x6
 5420 01d2 04       		.byte	0x4
 5421 01d3 A0010000 		.4byte	0x1a0
 5422 01d7 02       		.uleb128 0x2
 5423 01d8 97060000 		.4byte	.LASF36
 5424 01dc 07       		.byte	0x7
 5425 01dd 9A       		.byte	0x9a
 5426 01de 51010000 		.4byte	0x151
 5427 01e2 0D       		.uleb128 0xd
 5428 01e3 4A050000 		.4byte	.LASF37
 5429 01e7 0C       		.byte	0xc
 5430 01e8 07       		.byte	0x7
 5431 01e9 9D       		.byte	0x9d
 5432 01ea 13020000 		.4byte	0x213
 5433 01ee 0E       		.uleb128 0xe
 5434 01ef 9F0A0000 		.4byte	.LASF26
 5435 01f3 07       		.byte	0x7
 5436 01f4 A0       		.byte	0xa0
 5437 01f5 40010000 		.4byte	0x140
 5438 01f9 00       		.byte	0
 5439 01fa 0E       		.uleb128 0xe
 5440 01fb 8C080000 		.4byte	.LASF27
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 203


 5441 01ff 07       		.byte	0x7
 5442 0200 A1       		.byte	0xa1
 5443 0201 9A010000 		.4byte	0x19a
 5444 0205 04       		.byte	0x4
 5445 0206 0E       		.uleb128 0xe
 5446 0207 390E0000 		.4byte	.LASF28
 5447 020b 07       		.byte	0x7
 5448 020c A2       		.byte	0xa2
 5449 020d 9A010000 		.4byte	0x19a
 5450 0211 08       		.byte	0x8
 5451 0212 00       		.byte	0
 5452 0213 02       		.uleb128 0x2
 5453 0214 35070000 		.4byte	.LASF38
 5454 0218 07       		.byte	0x7
 5455 0219 A4       		.byte	0xa4
 5456 021a E2010000 		.4byte	0x1e2
 5457 021e 0A       		.uleb128 0xa
 5458 021f 35010000 		.4byte	0x135
 5459 0223 06       		.uleb128 0x6
 5460 0224 04       		.byte	0x4
 5461 0225 D7010000 		.4byte	0x1d7
 5462 0229 02       		.uleb128 0x2
 5463 022a 7E090000 		.4byte	.LASF39
 5464 022e 07       		.byte	0x7
 5465 022f B3       		.byte	0xb3
 5466 0230 A0010000 		.4byte	0x1a0
 5467 0234 02       		.uleb128 0x2
 5468 0235 24090000 		.4byte	.LASF40
 5469 0239 08       		.byte	0x8
 5470 023a 57       		.byte	0x57
 5471 023b 3F020000 		.4byte	0x23f
 5472 023f 06       		.uleb128 0x6
 5473 0240 04       		.byte	0x4
 5474 0241 45020000 		.4byte	0x245
 5475 0245 0D       		.uleb128 0xd
 5476 0246 63000000 		.4byte	.LASF41
 5477 024a 50       		.byte	0x50
 5478 024b 01       		.byte	0x1
 5479 024c FF       		.byte	0xff
 5480 024d D4020000 		.4byte	0x2d4
 5481 0251 0F       		.uleb128 0xf
 5482 0252 F10E0000 		.4byte	.LASF42
 5483 0256 01       		.byte	0x1
 5484 0257 0101     		.2byte	0x101
 5485 0259 7C030000 		.4byte	0x37c
 5486 025d 00       		.byte	0
 5487 025e 0F       		.uleb128 0xf
 5488 025f 950E0000 		.4byte	.LASF43
 5489 0263 01       		.byte	0x1
 5490 0264 0701     		.2byte	0x107
 5491 0266 D7010000 		.4byte	0x1d7
 5492 026a 04       		.byte	0x4
 5493 026b 0F       		.uleb128 0xf
 5494 026c 1D0D0000 		.4byte	.LASF44
 5495 0270 01       		.byte	0x1
 5496 0271 0801     		.2byte	0x108
 5497 0273 D7010000 		.4byte	0x1d7
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 204


 5498 0277 18       		.byte	0x18
 5499 0278 0F       		.uleb128 0xf
 5500 0279 41000000 		.4byte	.LASF45
 5501 027d 01       		.byte	0x1
 5502 027e 0901     		.2byte	0x109
 5503 0280 35010000 		.4byte	0x135
 5504 0284 2C       		.byte	0x2c
 5505 0285 0F       		.uleb128 0xf
 5506 0286 1D0B0000 		.4byte	.LASF46
 5507 028a 01       		.byte	0x1
 5508 028b 0A01     		.2byte	0x10a
 5509 028d 76030000 		.4byte	0x376
 5510 0291 30       		.byte	0x30
 5511 0292 0F       		.uleb128 0xf
 5512 0293 00000000 		.4byte	.LASF47
 5513 0297 01       		.byte	0x1
 5514 0298 0B01     		.2byte	0x10b
 5515 029a 87030000 		.4byte	0x387
 5516 029e 34       		.byte	0x34
 5517 029f 0F       		.uleb128 0xf
 5518 02a0 0E0D0000 		.4byte	.LASF48
 5519 02a4 01       		.byte	0x1
 5520 02a5 1B01     		.2byte	0x11b
 5521 02a7 35010000 		.4byte	0x135
 5522 02ab 40       		.byte	0x40
 5523 02ac 0F       		.uleb128 0xf
 5524 02ad 53060000 		.4byte	.LASF49
 5525 02b1 01       		.byte	0x1
 5526 02b2 1C01     		.2byte	0x11c
 5527 02b4 35010000 		.4byte	0x135
 5528 02b8 44       		.byte	0x44
 5529 02b9 0F       		.uleb128 0xf
 5530 02ba 21060000 		.4byte	.LASF50
 5531 02be 01       		.byte	0x1
 5532 02bf 3001     		.2byte	0x130
 5533 02c1 97030000 		.4byte	0x397
 5534 02c5 48       		.byte	0x48
 5535 02c6 0F       		.uleb128 0xf
 5536 02c7 95020000 		.4byte	.LASF51
 5537 02cb 01       		.byte	0x1
 5538 02cc 3101     		.2byte	0x131
 5539 02ce B1030000 		.4byte	0x3b1
 5540 02d2 4C       		.byte	0x4c
 5541 02d3 00       		.byte	0
 5542 02d4 10       		.uleb128 0x10
 5543 02d5 01       		.byte	0x1
 5544 02d6 5E000000 		.4byte	0x5e
 5545 02da 08       		.byte	0x8
 5546 02db 6C       		.byte	0x6c
 5547 02dc FF020000 		.4byte	0x2ff
 5548 02e0 11       		.uleb128 0x11
 5549 02e1 CD000000 		.4byte	.LASF52
 5550 02e5 00       		.byte	0
 5551 02e6 11       		.uleb128 0x11
 5552 02e7 B1090000 		.4byte	.LASF53
 5553 02eb 01       		.byte	0x1
 5554 02ec 11       		.uleb128 0x11
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 205


 5555 02ed 3F050000 		.4byte	.LASF54
 5556 02f1 02       		.byte	0x2
 5557 02f2 11       		.uleb128 0x11
 5558 02f3 13030000 		.4byte	.LASF55
 5559 02f7 03       		.byte	0x3
 5560 02f8 11       		.uleb128 0x11
 5561 02f9 A2060000 		.4byte	.LASF56
 5562 02fd 04       		.byte	0x4
 5563 02fe 00       		.byte	0
 5564 02ff 02       		.uleb128 0x2
 5565 0300 2A050000 		.4byte	.LASF57
 5566 0304 08       		.byte	0x8
 5567 0305 72       		.byte	0x72
 5568 0306 D4020000 		.4byte	0x2d4
 5569 030a 0D       		.uleb128 0xd
 5570 030b 29010000 		.4byte	.LASF58
 5571 030f 08       		.byte	0x8
 5572 0310 08       		.byte	0x8
 5573 0311 77       		.byte	0x77
 5574 0312 2F030000 		.4byte	0x32f
 5575 0316 0E       		.uleb128 0xe
 5576 0317 FF010000 		.4byte	.LASF59
 5577 031b 08       		.byte	0x8
 5578 031c 79       		.byte	0x79
 5579 031d 2A010000 		.4byte	0x12a
 5580 0321 00       		.byte	0
 5581 0322 0E       		.uleb128 0xe
 5582 0323 5F080000 		.4byte	.LASF60
 5583 0327 08       		.byte	0x8
 5584 0328 7A       		.byte	0x7a
 5585 0329 40010000 		.4byte	0x140
 5586 032d 04       		.byte	0x4
 5587 032e 00       		.byte	0
 5588 032f 02       		.uleb128 0x2
 5589 0330 F0080000 		.4byte	.LASF61
 5590 0334 08       		.byte	0x8
 5591 0335 7B       		.byte	0x7b
 5592 0336 0A030000 		.4byte	0x30a
 5593 033a 0D       		.uleb128 0xd
 5594 033b C6090000 		.4byte	.LASF62
 5595 033f 0C       		.byte	0xc
 5596 0340 08       		.byte	0x8
 5597 0341 80       		.byte	0x80
 5598 0342 6B030000 		.4byte	0x36b
 5599 0346 0E       		.uleb128 0xe
 5600 0347 5D0C0000 		.4byte	.LASF63
 5601 034b 08       		.byte	0x8
 5602 034c 82       		.byte	0x82
 5603 034d A5000000 		.4byte	0xa5
 5604 0351 00       		.byte	0
 5605 0352 0E       		.uleb128 0xe
 5606 0353 1B080000 		.4byte	.LASF64
 5607 0357 08       		.byte	0x8
 5608 0358 83       		.byte	0x83
 5609 0359 D5000000 		.4byte	0xd5
 5610 035d 04       		.byte	0x4
 5611 035e 0E       		.uleb128 0xe
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 206


 5612 035f 33020000 		.4byte	.LASF65
 5613 0363 08       		.byte	0x8
 5614 0364 84       		.byte	0x84
 5615 0365 D5000000 		.4byte	0xd5
 5616 0369 08       		.byte	0x8
 5617 036a 00       		.byte	0
 5618 036b 02       		.uleb128 0x2
 5619 036c AC070000 		.4byte	.LASF66
 5620 0370 08       		.byte	0x8
 5621 0371 85       		.byte	0x85
 5622 0372 3A030000 		.4byte	0x33a
 5623 0376 06       		.uleb128 0x6
 5624 0377 04       		.byte	0x4
 5625 0378 1F010000 		.4byte	0x11f
 5626 037c 06       		.uleb128 0x6
 5627 037d 04       		.byte	0x4
 5628 037e 82030000 		.4byte	0x382
 5629 0382 0A       		.uleb128 0xa
 5630 0383 1F010000 		.4byte	0x11f
 5631 0387 08       		.uleb128 0x8
 5632 0388 AD000000 		.4byte	0xad
 5633 038c 97030000 		.4byte	0x397
 5634 0390 09       		.uleb128 0x9
 5635 0391 9E000000 		.4byte	0x9e
 5636 0395 0B       		.byte	0xb
 5637 0396 00       		.byte	0
 5638 0397 0A       		.uleb128 0xa
 5639 0398 EE000000 		.4byte	0xee
 5640 039c 08       		.uleb128 0x8
 5641 039d AC030000 		.4byte	0x3ac
 5642 03a1 AC030000 		.4byte	0x3ac
 5643 03a5 09       		.uleb128 0x9
 5644 03a6 9E000000 		.4byte	0x9e
 5645 03aa 00       		.byte	0
 5646 03ab 00       		.byte	0
 5647 03ac 0A       		.uleb128 0xa
 5648 03ad BF000000 		.4byte	0xbf
 5649 03b1 0A       		.uleb128 0xa
 5650 03b2 9C030000 		.4byte	0x39c
 5651 03b6 12       		.uleb128 0x12
 5652 03b7 6E020000 		.4byte	.LASF67
 5653 03bb 01       		.byte	0x1
 5654 03bc 4101     		.2byte	0x141
 5655 03be 45020000 		.4byte	0x245
 5656 03c2 12       		.uleb128 0x12
 5657 03c3 420D0000 		.4byte	.LASF68
 5658 03c7 01       		.byte	0x1
 5659 03c8 4501     		.2byte	0x145
 5660 03ca B6030000 		.4byte	0x3b6
 5661 03ce 13       		.uleb128 0x13
 5662 03cf E60A0000 		.4byte	.LASF71
 5663 03d3 01       		.byte	0x1
 5664 03d4 F306     		.2byte	0x6f3
 5665 03d6 2A010000 		.4byte	0x12a
 5666 03da 00000000 		.4byte	.LFB44
 5667 03de 28000000 		.4byte	.LFE44-.LFB44
 5668 03e2 01       		.uleb128 0x1
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 207


 5669 03e3 9C       		.byte	0x9c
 5670 03e4 19040000 		.4byte	0x419
 5671 03e8 14       		.uleb128 0x14
 5672 03e9 AB090000 		.4byte	.LASF73
 5673 03ed 01       		.byte	0x1
 5674 03ee F306     		.2byte	0x6f3
 5675 03f0 19040000 		.4byte	0x419
 5676 03f4 00000000 		.4byte	.LLST0
 5677 03f8 15       		.uleb128 0x15
 5678 03f9 AD0B0000 		.4byte	.LASF69
 5679 03fd 01       		.byte	0x1
 5680 03fe F506     		.2byte	0x6f5
 5681 0400 2A010000 		.4byte	0x12a
 5682 0404 6C000000 		.4byte	.LLST1
 5683 0408 15       		.uleb128 0x15
 5684 0409 A40E0000 		.4byte	.LASF70
 5685 040d 01       		.byte	0x1
 5686 040e F606     		.2byte	0x6f6
 5687 0410 29040000 		.4byte	0x429
 5688 0414 8B000000 		.4byte	.LLST2
 5689 0418 00       		.byte	0
 5690 0419 07       		.uleb128 0x7
 5691 041a 34020000 		.4byte	0x234
 5692 041e 06       		.uleb128 0x6
 5693 041f 04       		.byte	0x4
 5694 0420 24040000 		.4byte	0x424
 5695 0424 07       		.uleb128 0x7
 5696 0425 C2030000 		.4byte	0x3c2
 5697 0429 07       		.uleb128 0x7
 5698 042a 1E040000 		.4byte	0x41e
 5699 042e 13       		.uleb128 0x13
 5700 042f D90D0000 		.4byte	.LASF72
 5701 0433 01       		.byte	0x1
 5702 0434 120F     		.2byte	0xf12
 5703 0436 CA000000 		.4byte	0xca
 5704 043a 00000000 		.4byte	.LFB69
 5705 043e 14000000 		.4byte	.LFE69-.LFB69
 5706 0442 01       		.uleb128 0x1
 5707 0443 9C       		.byte	0x9c
 5708 0444 69040000 		.4byte	0x469
 5709 0448 14       		.uleb128 0x14
 5710 0449 CE010000 		.4byte	.LASF74
 5711 044d 01       		.byte	0x1
 5712 044e 120F     		.2byte	0xf12
 5713 0450 69040000 		.4byte	0x469
 5714 0454 F7000000 		.4byte	.LLST3
 5715 0458 15       		.uleb128 0x15
 5716 0459 E8080000 		.4byte	.LASF75
 5717 045d 01       		.byte	0x1
 5718 045e 140F     		.2byte	0xf14
 5719 0460 D5000000 		.4byte	0xd5
 5720 0464 15010000 		.4byte	.LLST4
 5721 0468 00       		.byte	0
 5722 0469 06       		.uleb128 0x6
 5723 046a 04       		.byte	0x4
 5724 046b 6F040000 		.4byte	0x46f
 5725 046f 07       		.uleb128 0x7
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 208


 5726 0470 BF000000 		.4byte	0xbf
 5727 0474 16       		.uleb128 0x16
 5728 0475 43080000 		.4byte	.LASF234
 5729 0479 01       		.byte	0x1
 5730 047a 9F0F     		.2byte	0xf9f
 5731 047c 00000000 		.4byte	.LFB72
 5732 0480 24000000 		.4byte	.LFE72-.LFB72
 5733 0484 01       		.uleb128 0x1
 5734 0485 9C       		.byte	0x9c
 5735 0486 17       		.uleb128 0x17
 5736 0487 6D0D0000 		.4byte	.LASF76
 5737 048b 01       		.byte	0x1
 5738 048c 6A0F     		.2byte	0xf6a
 5739 048e 00000000 		.4byte	.LFB71
 5740 0492 12000000 		.4byte	.LFE71-.LFB71
 5741 0496 01       		.uleb128 0x1
 5742 0497 9C       		.byte	0x9c
 5743 0498 C6040000 		.4byte	0x4c6
 5744 049c 14       		.uleb128 0x14
 5745 049d A40E0000 		.4byte	.LASF70
 5746 04a1 01       		.byte	0x1
 5747 04a2 6A0F     		.2byte	0xf6a
 5748 04a4 C6040000 		.4byte	0x4c6
 5749 04a8 34010000 		.4byte	.LLST5
 5750 04ac 18       		.uleb128 0x18
 5751 04ad 0A000000 		.4byte	.LVL16
 5752 04b1 32200000 		.4byte	0x2032
 5753 04b5 19       		.uleb128 0x19
 5754 04b6 10000000 		.4byte	.LVL17
 5755 04ba 32200000 		.4byte	0x2032
 5756 04be 1A       		.uleb128 0x1a
 5757 04bf 01       		.uleb128 0x1
 5758 04c0 50       		.byte	0x50
 5759 04c1 02       		.uleb128 0x2
 5760 04c2 74       		.byte	0x74
 5761 04c3 00       		.sleb128 0
 5762 04c4 00       		.byte	0
 5763 04c5 00       		.byte	0
 5764 04c6 06       		.uleb128 0x6
 5765 04c7 04       		.byte	0x4
 5766 04c8 C2030000 		.4byte	0x3c2
 5767 04cc 17       		.uleb128 0x17
 5768 04cd 9E000000 		.4byte	.LASF77
 5769 04d1 01       		.byte	0x1
 5770 04d2 3003     		.2byte	0x330
 5771 04d4 00000000 		.4byte	.LFB35
 5772 04d8 90000000 		.4byte	.LFE35-.LFB35
 5773 04dc 01       		.uleb128 0x1
 5774 04dd 9C       		.byte	0x9c
 5775 04de E0050000 		.4byte	0x5e0
 5776 04e2 14       		.uleb128 0x14
 5777 04e3 92070000 		.4byte	.LASF78
 5778 04e7 01       		.byte	0x1
 5779 04e8 3003     		.2byte	0x330
 5780 04ea 03010000 		.4byte	0x103
 5781 04ee 60010000 		.4byte	.LLST6
 5782 04f2 14       		.uleb128 0x14
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 209


 5783 04f3 C1050000 		.4byte	.LASF79
 5784 04f7 01       		.byte	0x1
 5785 04f8 3103     		.2byte	0x331
 5786 04fa E0050000 		.4byte	0x5e0
 5787 04fe 8B010000 		.4byte	.LLST7
 5788 0502 14       		.uleb128 0x14
 5789 0503 C8060000 		.4byte	.LASF80
 5790 0507 01       		.byte	0x1
 5791 0508 3203     		.2byte	0x332
 5792 050a E5050000 		.4byte	0x5e5
 5793 050e B7010000 		.4byte	.LLST8
 5794 0512 14       		.uleb128 0x14
 5795 0513 920A0000 		.4byte	.LASF81
 5796 0517 01       		.byte	0x1
 5797 0518 3303     		.2byte	0x333
 5798 051a EA050000 		.4byte	0x5ea
 5799 051e E3010000 		.4byte	.LLST9
 5800 0522 14       		.uleb128 0x14
 5801 0523 41000000 		.4byte	.LASF45
 5802 0527 01       		.byte	0x1
 5803 0528 3403     		.2byte	0x334
 5804 052a 35010000 		.4byte	0x135
 5805 052e 02020000 		.4byte	.LLST10
 5806 0532 1B       		.uleb128 0x1b
 5807 0533 450F0000 		.4byte	.LASF82
 5808 0537 01       		.byte	0x1
 5809 0538 3503     		.2byte	0x335
 5810 053a F5050000 		.4byte	0x5f5
 5811 053e 02       		.uleb128 0x2
 5812 053f 91       		.byte	0x91
 5813 0540 04       		.sleb128 4
 5814 0541 1B       		.uleb128 0x1b
 5815 0542 71070000 		.4byte	.LASF83
 5816 0546 01       		.byte	0x1
 5817 0547 3603     		.2byte	0x336
 5818 0549 C6040000 		.4byte	0x4c6
 5819 054d 02       		.uleb128 0x2
 5820 054e 91       		.byte	0x91
 5821 054f 08       		.sleb128 8
 5822 0550 1B       		.uleb128 0x1b
 5823 0551 040E0000 		.4byte	.LASF84
 5824 0555 01       		.byte	0x1
 5825 0556 3703     		.2byte	0x337
 5826 0558 05060000 		.4byte	0x605
 5827 055c 02       		.uleb128 0x2
 5828 055d 91       		.byte	0x91
 5829 055e 0C       		.sleb128 12
 5830 055f 15       		.uleb128 0x15
 5831 0560 F10E0000 		.4byte	.LASF42
 5832 0564 01       		.byte	0x1
 5833 0565 3903     		.2byte	0x339
 5834 0567 76030000 		.4byte	0x376
 5835 056b 21020000 		.4byte	.LLST11
 5836 056f 1C       		.uleb128 0x1c
 5837 0570 7800     		.ascii	"x\000"
 5838 0572 01       		.byte	0x1
 5839 0573 3A03     		.2byte	0x33a
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 210


 5840 0575 35010000 		.4byte	0x135
 5841 0579 76020000 		.4byte	.LLST12
 5842 057d 1D       		.uleb128 0x1d
 5843 057e 1A000000 		.4byte	.LVL23
 5844 0582 3D200000 		.4byte	0x203d
 5845 0586 99050000 		.4byte	0x599
 5846 058a 1A       		.uleb128 0x1a
 5847 058b 01       		.uleb128 0x1
 5848 058c 51       		.byte	0x51
 5849 058d 02       		.uleb128 0x2
 5850 058e 08       		.byte	0x8
 5851 058f A5       		.byte	0xa5
 5852 0590 1A       		.uleb128 0x1a
 5853 0591 01       		.uleb128 0x1
 5854 0592 52       		.byte	0x52
 5855 0593 04       		.uleb128 0x4
 5856 0594 77       		.byte	0x77
 5857 0595 00       		.sleb128 0
 5858 0596 32       		.byte	0x32
 5859 0597 24       		.byte	0x24
 5860 0598 00       		.byte	0
 5861 0599 1D       		.uleb128 0x1d
 5862 059a 62000000 		.4byte	.LVL33
 5863 059e 48200000 		.4byte	0x2048
 5864 05a2 AD050000 		.4byte	0x5ad
 5865 05a6 1A       		.uleb128 0x1a
 5866 05a7 01       		.uleb128 0x1
 5867 05a8 50       		.byte	0x50
 5868 05a9 02       		.uleb128 0x2
 5869 05aa 76       		.byte	0x76
 5870 05ab 04       		.sleb128 4
 5871 05ac 00       		.byte	0
 5872 05ad 1D       		.uleb128 0x1d
 5873 05ae 6A000000 		.4byte	.LVL34
 5874 05b2 48200000 		.4byte	0x2048
 5875 05b6 C1050000 		.4byte	0x5c1
 5876 05ba 1A       		.uleb128 0x1a
 5877 05bb 01       		.uleb128 0x1
 5878 05bc 50       		.byte	0x50
 5879 05bd 02       		.uleb128 0x2
 5880 05be 76       		.byte	0x76
 5881 05bf 18       		.sleb128 24
 5882 05c0 00       		.byte	0
 5883 05c1 19       		.uleb128 0x19
 5884 05c2 7E000000 		.4byte	.LVL36
 5885 05c6 54200000 		.4byte	0x2054
 5886 05ca 1A       		.uleb128 0x1a
 5887 05cb 01       		.uleb128 0x1
 5888 05cc 50       		.byte	0x50
 5889 05cd 02       		.uleb128 0x2
 5890 05ce 77       		.byte	0x77
 5891 05cf 00       		.sleb128 0
 5892 05d0 1A       		.uleb128 0x1a
 5893 05d1 01       		.uleb128 0x1
 5894 05d2 51       		.byte	0x51
 5895 05d3 03       		.uleb128 0x3
 5896 05d4 7D       		.byte	0x7d
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 211


 5897 05d5 00       		.sleb128 0
 5898 05d6 06       		.byte	0x6
 5899 05d7 1A       		.uleb128 0x1a
 5900 05d8 01       		.uleb128 0x1
 5901 05d9 52       		.byte	0x52
 5902 05da 03       		.uleb128 0x3
 5903 05db 91       		.byte	0x91
 5904 05dc 64       		.sleb128 -28
 5905 05dd 06       		.byte	0x6
 5906 05de 00       		.byte	0
 5907 05df 00       		.byte	0
 5908 05e0 07       		.uleb128 0x7
 5909 05e1 B4000000 		.4byte	0xb4
 5910 05e5 07       		.uleb128 0x7
 5911 05e6 D5000000 		.4byte	0xd5
 5912 05ea 07       		.uleb128 0x7
 5913 05eb A5000000 		.4byte	0xa5
 5914 05ef 06       		.uleb128 0x6
 5915 05f0 04       		.byte	0x4
 5916 05f1 34020000 		.4byte	0x234
 5917 05f5 07       		.uleb128 0x7
 5918 05f6 EF050000 		.4byte	0x5ef
 5919 05fa 06       		.uleb128 0x6
 5920 05fb 04       		.byte	0x4
 5921 05fc 00060000 		.4byte	0x600
 5922 0600 07       		.uleb128 0x7
 5923 0601 6B030000 		.4byte	0x36b
 5924 0605 07       		.uleb128 0x7
 5925 0606 FA050000 		.4byte	0x5fa
 5926 060a 17       		.uleb128 0x17
 5927 060b 170F0000 		.4byte	.LASF85
 5928 060f 01       		.byte	0x1
 5929 0610 490E     		.2byte	0xe49
 5930 0612 00000000 		.4byte	.LFB67
 5931 0616 58000000 		.4byte	.LFE67-.LFB67
 5932 061a 01       		.uleb128 0x1
 5933 061b 9C       		.byte	0x9c
 5934 061c B2060000 		.4byte	0x6b2
 5935 0620 15       		.uleb128 0x15
 5936 0621 41000000 		.4byte	.LASF45
 5937 0625 01       		.byte	0x1
 5938 0626 4B0E     		.2byte	0xe4b
 5939 0628 35010000 		.4byte	0x135
 5940 062c 94020000 		.4byte	.LLST13
 5941 0630 1D       		.uleb128 0x1d
 5942 0631 16000000 		.4byte	.LVL42
 5943 0635 5F200000 		.4byte	0x205f
 5944 0639 51060000 		.4byte	0x651
 5945 063d 1A       		.uleb128 0x1a
 5946 063e 01       		.uleb128 0x1
 5947 063f 50       		.byte	0x50
 5948 0640 0F       		.uleb128 0xf
 5949 0641 74       		.byte	0x74
 5950 0642 00       		.sleb128 0
 5951 0643 32       		.byte	0x32
 5952 0644 24       		.byte	0x24
 5953 0645 74       		.byte	0x74
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 212


 5954 0646 00       		.sleb128 0
 5955 0647 22       		.byte	0x22
 5956 0648 32       		.byte	0x32
 5957 0649 24       		.byte	0x24
 5958 064a 03       		.byte	0x3
 5959 064b 30000000 		.4byte	.LANCHOR0+48
 5960 064f 22       		.byte	0x22
 5961 0650 00       		.byte	0
 5962 0651 1D       		.uleb128 0x1d
 5963 0652 28000000 		.4byte	.LVL45
 5964 0656 5F200000 		.4byte	0x205f
 5965 065a 65060000 		.4byte	0x665
 5966 065e 1A       		.uleb128 0x1a
 5967 065f 01       		.uleb128 0x1
 5968 0660 50       		.byte	0x50
 5969 0661 02       		.uleb128 0x2
 5970 0662 77       		.byte	0x77
 5971 0663 00       		.sleb128 0
 5972 0664 00       		.byte	0
 5973 0665 1D       		.uleb128 0x1d
 5974 0666 32000000 		.4byte	.LVL46
 5975 066a 5F200000 		.4byte	0x205f
 5976 066e 79060000 		.4byte	0x679
 5977 0672 1A       		.uleb128 0x1a
 5978 0673 01       		.uleb128 0x1
 5979 0674 50       		.byte	0x50
 5980 0675 02       		.uleb128 0x2
 5981 0676 76       		.byte	0x76
 5982 0677 00       		.sleb128 0
 5983 0678 00       		.byte	0
 5984 0679 1D       		.uleb128 0x1d
 5985 067a 3C000000 		.4byte	.LVL47
 5986 067e 5F200000 		.4byte	0x205f
 5987 0682 8D060000 		.4byte	0x68d
 5988 0686 1A       		.uleb128 0x1a
 5989 0687 01       		.uleb128 0x1
 5990 0688 50       		.byte	0x50
 5991 0689 02       		.uleb128 0x2
 5992 068a 75       		.byte	0x75
 5993 068b 14       		.sleb128 20
 5994 068c 00       		.byte	0
 5995 068d 1D       		.uleb128 0x1d
 5996 068e 44000000 		.4byte	.LVL48
 5997 0692 5F200000 		.4byte	0x205f
 5998 0696 A1060000 		.4byte	0x6a1
 5999 069a 1A       		.uleb128 0x1a
 6000 069b 01       		.uleb128 0x1
 6001 069c 50       		.byte	0x50
 6002 069d 02       		.uleb128 0x2
 6003 069e 74       		.byte	0x74
 6004 069f 3C       		.sleb128 60
 6005 06a0 00       		.byte	0
 6006 06a1 19       		.uleb128 0x19
 6007 06a2 4A000000 		.4byte	.LVL49
 6008 06a6 5F200000 		.4byte	0x205f
 6009 06aa 1A       		.uleb128 0x1a
 6010 06ab 01       		.uleb128 0x1
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 213


 6011 06ac 50       		.byte	0x50
 6012 06ad 02       		.uleb128 0x2
 6013 06ae 75       		.byte	0x75
 6014 06af 00       		.sleb128 0
 6015 06b0 00       		.byte	0
 6016 06b1 00       		.byte	0
 6017 06b2 17       		.uleb128 0x17
 6018 06b3 50070000 		.4byte	.LASF86
 6019 06b7 01       		.byte	0x1
 6020 06b8 0204     		.2byte	0x402
 6021 06ba 00000000 		.4byte	.LFB36
 6022 06be B4000000 		.4byte	.LFE36-.LFB36
 6023 06c2 01       		.uleb128 0x1
 6024 06c3 9C       		.byte	0x9c
 6025 06c4 1B070000 		.4byte	0x71b
 6026 06c8 14       		.uleb128 0x14
 6027 06c9 71070000 		.4byte	.LASF83
 6028 06cd 01       		.byte	0x1
 6029 06ce 0204     		.2byte	0x402
 6030 06d0 C6040000 		.4byte	0x4c6
 6031 06d4 B3020000 		.4byte	.LLST14
 6032 06d8 1E       		.uleb128 0x1e
 6033 06d9 52000000 		.4byte	.LBB2
 6034 06dd 3C000000 		.4byte	.LBE2-.LBB2
 6035 06e1 F6060000 		.4byte	0x6f6
 6036 06e5 15       		.uleb128 0x15
 6037 06e6 15010000 		.4byte	.LASF34
 6038 06ea 01       		.byte	0x1
 6039 06eb 3C04     		.2byte	0x43c
 6040 06ed 1B070000 		.4byte	0x71b
 6041 06f1 DF020000 		.4byte	.LLST15
 6042 06f5 00       		.byte	0
 6043 06f6 18       		.uleb128 0x18
 6044 06f7 08000000 		.4byte	.LVL51
 6045 06fb 6B200000 		.4byte	0x206b
 6046 06ff 18       		.uleb128 0x18
 6047 0700 24000000 		.4byte	.LVL52
 6048 0704 0A060000 		.4byte	0x60a
 6049 0708 18       		.uleb128 0x18
 6050 0709 92000000 		.4byte	.LVL55
 6051 070d 76200000 		.4byte	0x2076
 6052 0711 18       		.uleb128 0x18
 6053 0712 AA000000 		.4byte	.LVL56
 6054 0716 81200000 		.4byte	0x2081
 6055 071a 00       		.byte	0
 6056 071b 07       		.uleb128 0x7
 6057 071c 23020000 		.4byte	0x223
 6058 0720 17       		.uleb128 0x17
 6059 0721 530F0000 		.4byte	.LASF87
 6060 0725 01       		.byte	0x1
 6061 0726 690E     		.2byte	0xe69
 6062 0728 00000000 		.4byte	.LFB68
 6063 072c 38000000 		.4byte	.LFE68-.LFB68
 6064 0730 01       		.uleb128 0x1
 6065 0731 9C       		.byte	0x9c
 6066 0732 87070000 		.4byte	0x787
 6067 0736 1F       		.uleb128 0x1f
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 214


 6068 0737 02000000 		.4byte	.LBB3
 6069 073b 30000000 		.4byte	.LBE3-.LBB3
 6070 073f 15       		.uleb128 0x15
 6071 0740 A40E0000 		.4byte	.LASF70
 6072 0744 01       		.byte	0x1
 6073 0745 6F0E     		.2byte	0xe6f
 6074 0747 C6040000 		.4byte	0x4c6
 6075 074b F2020000 		.4byte	.LLST16
 6076 074f 18       		.uleb128 0x18
 6077 0750 08000000 		.4byte	.LVL58
 6078 0754 6B200000 		.4byte	0x206b
 6079 0758 1D       		.uleb128 0x1d
 6080 0759 14000000 		.4byte	.LVL60
 6081 075d 8C200000 		.4byte	0x208c
 6082 0761 6C070000 		.4byte	0x76c
 6083 0765 1A       		.uleb128 0x1a
 6084 0766 01       		.uleb128 0x1
 6085 0767 50       		.byte	0x50
 6086 0768 02       		.uleb128 0x2
 6087 0769 75       		.byte	0x75
 6088 076a 04       		.sleb128 4
 6089 076b 00       		.byte	0
 6090 076c 18       		.uleb128 0x18
 6091 076d 24000000 		.4byte	.LVL61
 6092 0771 76200000 		.4byte	0x2076
 6093 0775 19       		.uleb128 0x19
 6094 0776 2A000000 		.4byte	.LVL62
 6095 077a 86040000 		.4byte	0x486
 6096 077e 1A       		.uleb128 0x1a
 6097 077f 01       		.uleb128 0x1
 6098 0780 50       		.byte	0x50
 6099 0781 02       		.uleb128 0x2
 6100 0782 75       		.byte	0x75
 6101 0783 00       		.sleb128 0
 6102 0784 00       		.byte	0
 6103 0785 00       		.byte	0
 6104 0786 00       		.byte	0
 6105 0787 20       		.uleb128 0x20
 6106 0788 08070000 		.4byte	.LASF88
 6107 078c 01       		.byte	0x1
 6108 078d 630D     		.2byte	0xd63
 6109 078f 00000000 		.4byte	.LFB66
 6110 0793 08000000 		.4byte	.LFE66-.LFB66
 6111 0797 01       		.uleb128 0x1
 6112 0798 9C       		.byte	0x9c
 6113 0799 B7070000 		.4byte	0x7b7
 6114 079d 14       		.uleb128 0x14
 6115 079e 920A0000 		.4byte	.LASF81
 6116 07a2 01       		.byte	0x1
 6117 07a3 630D     		.2byte	0xd63
 6118 07a5 A5000000 		.4byte	0xa5
 6119 07a9 05030000 		.4byte	.LLST17
 6120 07ad 18       		.uleb128 0x18
 6121 07ae 06000000 		.4byte	.LVL65
 6122 07b2 20070000 		.4byte	0x720
 6123 07b6 00       		.byte	0
 6124 07b7 17       		.uleb128 0x17
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 215


 6125 07b8 0D0E0000 		.4byte	.LASF89
 6126 07bc 01       		.byte	0x1
 6127 07bd B114     		.2byte	0x14b1
 6128 07bf 00000000 		.4byte	.LFB86
 6129 07c3 80000000 		.4byte	.LFE86-.LFB86
 6130 07c7 01       		.uleb128 0x1
 6131 07c8 9C       		.byte	0x9c
 6132 07c9 47080000 		.4byte	0x847
 6133 07cd 14       		.uleb128 0x14
 6134 07ce 580D0000 		.4byte	.LASF90
 6135 07d2 01       		.byte	0x1
 6136 07d3 B114     		.2byte	0x14b1
 6137 07d5 40010000 		.4byte	0x140
 6138 07d9 26030000 		.4byte	.LLST18
 6139 07dd 14       		.uleb128 0x14
 6140 07de 3E0C0000 		.4byte	.LASF91
 6141 07e2 01       		.byte	0x1
 6142 07e3 B214     		.2byte	0x14b2
 6143 07e5 47080000 		.4byte	0x847
 6144 07e9 6B030000 		.4byte	.LLST19
 6145 07ed 15       		.uleb128 0x15
 6146 07ee 890E0000 		.4byte	.LASF92
 6147 07f2 01       		.byte	0x1
 6148 07f3 B414     		.2byte	0x14b4
 6149 07f5 40010000 		.4byte	0x140
 6150 07f9 97030000 		.4byte	.LLST20
 6151 07fd 15       		.uleb128 0x15
 6152 07fe 8F050000 		.4byte	.LASF93
 6153 0802 01       		.byte	0x1
 6154 0803 B514     		.2byte	0x14b5
 6155 0805 4C080000 		.4byte	0x84c
 6156 0809 AA030000 		.4byte	.LLST21
 6157 080d 1E       		.uleb128 0x1e
 6158 080e 1A000000 		.4byte	.LBB4
 6159 0812 28000000 		.4byte	.LBE4-.LBB4
 6160 0816 2B080000 		.4byte	0x82b
 6161 081a 15       		.uleb128 0x15
 6162 081b 15010000 		.4byte	.LASF34
 6163 081f 01       		.byte	0x1
 6164 0820 D414     		.2byte	0x14d4
 6165 0822 1B070000 		.4byte	0x71b
 6166 0826 BD030000 		.4byte	.LLST22
 6167 082a 00       		.byte	0
 6168 082b 18       		.uleb128 0x18
 6169 082c 12000000 		.4byte	.LVL69
 6170 0830 8C200000 		.4byte	0x208c
 6171 0834 18       		.uleb128 0x18
 6172 0835 5C000000 		.4byte	.LVL74
 6173 0839 98200000 		.4byte	0x2098
 6174 083d 18       		.uleb128 0x18
 6175 083e 6C000000 		.4byte	.LVL76
 6176 0842 98200000 		.4byte	0x2098
 6177 0846 00       		.byte	0
 6178 0847 07       		.uleb128 0x7
 6179 0848 2A010000 		.4byte	0x12a
 6180 084c 07       		.uleb128 0x7
 6181 084d 40010000 		.4byte	0x140
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 216


 6182 0851 21       		.uleb128 0x21
 6183 0852 44070000 		.4byte	.LASF96
 6184 0856 01       		.byte	0x1
 6185 0857 D102     		.2byte	0x2d1
 6186 0859 2A010000 		.4byte	0x12a
 6187 085d 00000000 		.4byte	.LFB34
 6188 0861 66000000 		.4byte	.LFE34-.LFB34
 6189 0865 01       		.uleb128 0x1
 6190 0866 9C       		.byte	0x9c
 6191 0867 B6090000 		.4byte	0x9b6
 6192 086b 14       		.uleb128 0x14
 6193 086c 92070000 		.4byte	.LASF78
 6194 0870 01       		.byte	0x1
 6195 0871 D102     		.2byte	0x2d1
 6196 0873 03010000 		.4byte	0x103
 6197 0877 D0030000 		.4byte	.LLST23
 6198 087b 14       		.uleb128 0x14
 6199 087c C1050000 		.4byte	.LASF79
 6200 0880 01       		.byte	0x1
 6201 0881 D202     		.2byte	0x2d2
 6202 0883 E0050000 		.4byte	0x5e0
 6203 0887 EF030000 		.4byte	.LLST24
 6204 088b 14       		.uleb128 0x14
 6205 088c E7020000 		.4byte	.LASF94
 6206 0890 01       		.byte	0x1
 6207 0891 D302     		.2byte	0x2d3
 6208 0893 B6090000 		.4byte	0x9b6
 6209 0897 0E040000 		.4byte	.LLST25
 6210 089b 14       		.uleb128 0x14
 6211 089c 920A0000 		.4byte	.LASF81
 6212 08a0 01       		.byte	0x1
 6213 08a1 D402     		.2byte	0x2d4
 6214 08a3 EA050000 		.4byte	0x5ea
 6215 08a7 2F040000 		.4byte	.LLST26
 6216 08ab 1B       		.uleb128 0x1b
 6217 08ac 41000000 		.4byte	.LASF45
 6218 08b0 01       		.byte	0x1
 6219 08b1 D502     		.2byte	0x2d5
 6220 08b3 35010000 		.4byte	0x135
 6221 08b7 02       		.uleb128 0x2
 6222 08b8 91       		.byte	0x91
 6223 08b9 00       		.sleb128 0
 6224 08ba 1B       		.uleb128 0x1b
 6225 08bb 450F0000 		.4byte	.LASF82
 6226 08bf 01       		.byte	0x1
 6227 08c0 D602     		.2byte	0x2d6
 6228 08c2 F5050000 		.4byte	0x5f5
 6229 08c6 02       		.uleb128 0x2
 6230 08c7 91       		.byte	0x91
 6231 08c8 04       		.sleb128 4
 6232 08c9 15       		.uleb128 0x15
 6233 08ca 71070000 		.4byte	.LASF83
 6234 08ce 01       		.byte	0x1
 6235 08cf D802     		.2byte	0x2d8
 6236 08d1 C6040000 		.4byte	0x4c6
 6237 08d5 5B040000 		.4byte	.LLST27
 6238 08d9 15       		.uleb128 0x15
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 217


 6239 08da AD0B0000 		.4byte	.LASF69
 6240 08de 01       		.byte	0x1
 6241 08df D902     		.2byte	0x2d9
 6242 08e1 2A010000 		.4byte	0x12a
 6243 08e5 9A040000 		.4byte	.LLST28
 6244 08e9 1E       		.uleb128 0x1e
 6245 08ea 0C000000 		.4byte	.LBB5
 6246 08ee 2A000000 		.4byte	.LBE5-.LBB5
 6247 08f2 60090000 		.4byte	0x960
 6248 08f6 15       		.uleb128 0x15
 6249 08f7 1D0B0000 		.4byte	.LASF46
 6250 08fb 01       		.byte	0x1
 6251 08fc F802     		.2byte	0x2f8
 6252 08fe 76030000 		.4byte	0x376
 6253 0902 B9040000 		.4byte	.LLST29
 6254 0906 1D       		.uleb128 0x1d
 6255 0907 12000000 		.4byte	.LVL81
 6256 090b A4200000 		.4byte	0x20a4
 6257 090f 1C090000 		.4byte	0x91c
 6258 0913 1A       		.uleb128 0x1a
 6259 0914 01       		.uleb128 0x1
 6260 0915 50       		.byte	0x50
 6261 0916 04       		.uleb128 0x4
 6262 0917 74       		.byte	0x74
 6263 0918 00       		.sleb128 0
 6264 0919 32       		.byte	0x32
 6265 091a 24       		.byte	0x24
 6266 091b 00       		.byte	0
 6267 091c 1D       		.uleb128 0x1d
 6268 091d 1C000000 		.4byte	.LVL84
 6269 0921 A4200000 		.4byte	0x20a4
 6270 0925 30090000 		.4byte	0x930
 6271 0929 1A       		.uleb128 0x1a
 6272 092a 01       		.uleb128 0x1
 6273 092b 50       		.byte	0x50
 6274 092c 02       		.uleb128 0x2
 6275 092d 08       		.byte	0x8
 6276 092e 50       		.byte	0x50
 6277 092f 00       		.byte	0
 6278 0930 1D       		.uleb128 0x1d
 6279 0931 28000000 		.4byte	.LVL86
 6280 0935 AF200000 		.4byte	0x20af
 6281 0939 4F090000 		.4byte	0x94f
 6282 093d 1A       		.uleb128 0x1a
 6283 093e 01       		.uleb128 0x1
 6284 093f 50       		.byte	0x50
 6285 0940 02       		.uleb128 0x2
 6286 0941 75       		.byte	0x75
 6287 0942 00       		.sleb128 0
 6288 0943 1A       		.uleb128 0x1a
 6289 0944 01       		.uleb128 0x1
 6290 0945 51       		.byte	0x51
 6291 0946 01       		.uleb128 0x1
 6292 0947 30       		.byte	0x30
 6293 0948 1A       		.uleb128 0x1a
 6294 0949 01       		.uleb128 0x1
 6295 094a 52       		.byte	0x52
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 218


 6296 094b 02       		.uleb128 0x2
 6297 094c 08       		.byte	0x8
 6298 094d 50       		.byte	0x50
 6299 094e 00       		.byte	0
 6300 094f 19       		.uleb128 0x19
 6301 0950 32000000 		.4byte	.LVL89
 6302 0954 32200000 		.4byte	0x2032
 6303 0958 1A       		.uleb128 0x1a
 6304 0959 01       		.uleb128 0x1
 6305 095a 50       		.byte	0x50
 6306 095b 02       		.uleb128 0x2
 6307 095c 76       		.byte	0x76
 6308 095d 00       		.sleb128 0
 6309 095e 00       		.byte	0
 6310 095f 00       		.byte	0
 6311 0960 1D       		.uleb128 0x1d
 6312 0961 54000000 		.4byte	.LVL92
 6313 0965 CC040000 		.4byte	0x4cc
 6314 0969 A5090000 		.4byte	0x9a5
 6315 096d 1A       		.uleb128 0x1a
 6316 096e 01       		.uleb128 0x1
 6317 096f 50       		.byte	0x50
 6318 0970 03       		.uleb128 0x3
 6319 0971 91       		.byte	0x91
 6320 0972 60       		.sleb128 -32
 6321 0973 06       		.byte	0x6
 6322 0974 1A       		.uleb128 0x1a
 6323 0975 01       		.uleb128 0x1
 6324 0976 51       		.byte	0x51
 6325 0977 03       		.uleb128 0x3
 6326 0978 91       		.byte	0x91
 6327 0979 64       		.sleb128 -28
 6328 097a 06       		.byte	0x6
 6329 097b 1A       		.uleb128 0x1a
 6330 097c 01       		.uleb128 0x1
 6331 097d 52       		.byte	0x52
 6332 097e 02       		.uleb128 0x2
 6333 097f 74       		.byte	0x74
 6334 0980 00       		.sleb128 0
 6335 0981 1A       		.uleb128 0x1a
 6336 0982 01       		.uleb128 0x1
 6337 0983 53       		.byte	0x53
 6338 0984 02       		.uleb128 0x2
 6339 0985 77       		.byte	0x77
 6340 0986 00       		.sleb128 0
 6341 0987 1A       		.uleb128 0x1a
 6342 0988 02       		.uleb128 0x2
 6343 0989 7D       		.byte	0x7d
 6344 098a 00       		.sleb128 0
 6345 098b 03       		.uleb128 0x3
 6346 098c 91       		.byte	0x91
 6347 098d 00       		.sleb128 0
 6348 098e 06       		.byte	0x6
 6349 098f 1A       		.uleb128 0x1a
 6350 0990 02       		.uleb128 0x2
 6351 0991 7D       		.byte	0x7d
 6352 0992 04       		.sleb128 4
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 219


 6353 0993 03       		.uleb128 0x3
 6354 0994 91       		.byte	0x91
 6355 0995 04       		.sleb128 4
 6356 0996 06       		.byte	0x6
 6357 0997 1A       		.uleb128 0x1a
 6358 0998 02       		.uleb128 0x2
 6359 0999 7D       		.byte	0x7d
 6360 099a 08       		.sleb128 8
 6361 099b 02       		.uleb128 0x2
 6362 099c 75       		.byte	0x75
 6363 099d 00       		.sleb128 0
 6364 099e 1A       		.uleb128 0x1a
 6365 099f 02       		.uleb128 0x2
 6366 09a0 7D       		.byte	0x7d
 6367 09a1 0C       		.sleb128 12
 6368 09a2 01       		.uleb128 0x1
 6369 09a3 30       		.byte	0x30
 6370 09a4 00       		.byte	0
 6371 09a5 19       		.uleb128 0x19
 6372 09a6 5A000000 		.4byte	.LVL93
 6373 09aa B2060000 		.4byte	0x6b2
 6374 09ae 1A       		.uleb128 0x1a
 6375 09af 01       		.uleb128 0x1
 6376 09b0 50       		.byte	0x50
 6377 09b1 02       		.uleb128 0x2
 6378 09b2 75       		.byte	0x75
 6379 09b3 00       		.sleb128 0
 6380 09b4 00       		.byte	0
 6381 09b5 00       		.byte	0
 6382 09b6 07       		.uleb128 0x7
 6383 09b7 CA000000 		.4byte	0xca
 6384 09bb 22       		.uleb128 0x22
 6385 09bc DE090000 		.4byte	.LASF101
 6386 09c0 01       		.byte	0x1
 6387 09c1 5804     		.2byte	0x458
 6388 09c3 00000000 		.4byte	.LFB37
 6389 09c7 80000000 		.4byte	.LFE37-.LFB37
 6390 09cb 01       		.uleb128 0x1
 6391 09cc 9C       		.byte	0x9c
 6392 09cd 6C0A0000 		.4byte	0xa6c
 6393 09d1 14       		.uleb128 0x14
 6394 09d2 250B0000 		.4byte	.LASF95
 6395 09d6 01       		.byte	0x1
 6396 09d7 5804     		.2byte	0x458
 6397 09d9 34020000 		.4byte	0x234
 6398 09dd ED040000 		.4byte	.LLST30
 6399 09e1 15       		.uleb128 0x15
 6400 09e2 A40E0000 		.4byte	.LASF70
 6401 09e6 01       		.byte	0x1
 6402 09e7 5A04     		.2byte	0x45a
 6403 09e9 C6040000 		.4byte	0x4c6
 6404 09ed 0B050000 		.4byte	.LLST31
 6405 09f1 18       		.uleb128 0x18
 6406 09f2 08000000 		.4byte	.LVL100
 6407 09f6 6B200000 		.4byte	0x206b
 6408 09fa 1D       		.uleb128 0x1d
 6409 09fb 18000000 		.4byte	.LVL102
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 220


 6410 09ff 8C200000 		.4byte	0x208c
 6411 0a03 0E0A0000 		.4byte	0xa0e
 6412 0a07 1A       		.uleb128 0x1a
 6413 0a08 01       		.uleb128 0x1
 6414 0a09 50       		.byte	0x50
 6415 0a0a 02       		.uleb128 0x2
 6416 0a0b 75       		.byte	0x75
 6417 0a0c 00       		.sleb128 0
 6418 0a0d 00       		.byte	0
 6419 0a0e 1D       		.uleb128 0x1d
 6420 0a0f 26000000 		.4byte	.LVL103
 6421 0a13 8C200000 		.4byte	0x208c
 6422 0a17 220A0000 		.4byte	0xa22
 6423 0a1b 1A       		.uleb128 0x1a
 6424 0a1c 01       		.uleb128 0x1
 6425 0a1d 50       		.byte	0x50
 6426 0a1e 02       		.uleb128 0x2
 6427 0a1f 74       		.byte	0x74
 6428 0a20 18       		.sleb128 24
 6429 0a21 00       		.byte	0
 6430 0a22 1D       		.uleb128 0x1d
 6431 0a23 40000000 		.4byte	.LVL104
 6432 0a27 B8200000 		.4byte	0x20b8
 6433 0a2b 3C0A0000 		.4byte	0xa3c
 6434 0a2f 1A       		.uleb128 0x1a
 6435 0a30 01       		.uleb128 0x1
 6436 0a31 50       		.byte	0x50
 6437 0a32 02       		.uleb128 0x2
 6438 0a33 76       		.byte	0x76
 6439 0a34 3C       		.sleb128 60
 6440 0a35 1A       		.uleb128 0x1a
 6441 0a36 01       		.uleb128 0x1
 6442 0a37 51       		.byte	0x51
 6443 0a38 02       		.uleb128 0x2
 6444 0a39 75       		.byte	0x75
 6445 0a3a 00       		.sleb128 0
 6446 0a3b 00       		.byte	0
 6447 0a3c 18       		.uleb128 0x18
 6448 0a3d 54000000 		.4byte	.LVL105
 6449 0a41 74040000 		.4byte	0x474
 6450 0a45 18       		.uleb128 0x18
 6451 0a46 58000000 		.4byte	.LVL106
 6452 0a4a 76200000 		.4byte	0x2076
 6453 0a4e 1D       		.uleb128 0x1d
 6454 0a4f 66000000 		.4byte	.LVL107
 6455 0a53 86040000 		.4byte	0x486
 6456 0a57 620A0000 		.4byte	0xa62
 6457 0a5b 1A       		.uleb128 0x1a
 6458 0a5c 01       		.uleb128 0x1
 6459 0a5d 50       		.byte	0x50
 6460 0a5e 02       		.uleb128 0x2
 6461 0a5f 74       		.byte	0x74
 6462 0a60 00       		.sleb128 0
 6463 0a61 00       		.byte	0
 6464 0a62 18       		.uleb128 0x18
 6465 0a63 7A000000 		.4byte	.LVL108
 6466 0a67 81200000 		.4byte	0x2081
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 221


 6467 0a6b 00       		.byte	0
 6468 0a6c 21       		.uleb128 0x21
 6469 0a6d 7D050000 		.4byte	.LASF97
 6470 0a71 01       		.byte	0x1
 6471 0a72 A505     		.2byte	0x5a5
 6472 0a74 35010000 		.4byte	0x135
 6473 0a78 00000000 		.4byte	.LFB40
 6474 0a7c 20000000 		.4byte	.LFE40-.LFB40
 6475 0a80 01       		.uleb128 0x1
 6476 0a81 9C       		.byte	0x9c
 6477 0a82 C90A0000 		.4byte	0xac9
 6478 0a86 14       		.uleb128 0x14
 6479 0a87 AB090000 		.4byte	.LASF73
 6480 0a8b 01       		.byte	0x1
 6481 0a8c A505     		.2byte	0x5a5
 6482 0a8e 19040000 		.4byte	0x419
 6483 0a92 2B050000 		.4byte	.LLST32
 6484 0a96 15       		.uleb128 0x15
 6485 0a97 A40E0000 		.4byte	.LASF70
 6486 0a9b 01       		.byte	0x1
 6487 0a9c A705     		.2byte	0x5a7
 6488 0a9e 1E040000 		.4byte	0x41e
 6489 0aa2 57050000 		.4byte	.LLST33
 6490 0aa6 15       		.uleb128 0x15
 6491 0aa7 4E020000 		.4byte	.LASF98
 6492 0aab 01       		.byte	0x1
 6493 0aac A805     		.2byte	0x5a8
 6494 0aae 35010000 		.4byte	0x135
 6495 0ab2 6A050000 		.4byte	.LLST34
 6496 0ab6 18       		.uleb128 0x18
 6497 0ab7 08000000 		.4byte	.LVL112
 6498 0abb 6B200000 		.4byte	0x206b
 6499 0abf 18       		.uleb128 0x18
 6500 0ac0 16000000 		.4byte	.LVL115
 6501 0ac4 76200000 		.4byte	0x2076
 6502 0ac8 00       		.byte	0
 6503 0ac9 21       		.uleb128 0x21
 6504 0aca CF080000 		.4byte	.LASF99
 6505 0ace 01       		.byte	0x1
 6506 0acf BB05     		.2byte	0x5bb
 6507 0ad1 35010000 		.4byte	0x135
 6508 0ad5 00000000 		.4byte	.LFB41
 6509 0ad9 20000000 		.4byte	.LFE41-.LFB41
 6510 0add 01       		.uleb128 0x1
 6511 0ade 9C       		.byte	0x9c
 6512 0adf 360B0000 		.4byte	0xb36
 6513 0ae3 14       		.uleb128 0x14
 6514 0ae4 AB090000 		.4byte	.LASF73
 6515 0ae8 01       		.byte	0x1
 6516 0ae9 BB05     		.2byte	0x5bb
 6517 0aeb 19040000 		.4byte	0x419
 6518 0aef 88050000 		.4byte	.LLST35
 6519 0af3 15       		.uleb128 0x15
 6520 0af4 A40E0000 		.4byte	.LASF70
 6521 0af8 01       		.byte	0x1
 6522 0af9 BD05     		.2byte	0x5bd
 6523 0afb 1E040000 		.4byte	0x41e
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 222


 6524 0aff B4050000 		.4byte	.LLST36
 6525 0b03 15       		.uleb128 0x15
 6526 0b04 4E020000 		.4byte	.LASF98
 6527 0b08 01       		.byte	0x1
 6528 0b09 BE05     		.2byte	0x5be
 6529 0b0b 35010000 		.4byte	0x135
 6530 0b0f C7050000 		.4byte	.LLST37
 6531 0b13 15       		.uleb128 0x15
 6532 0b14 5A030000 		.4byte	.LASF100
 6533 0b18 01       		.byte	0x1
 6534 0b19 BE05     		.2byte	0x5be
 6535 0b1b 35010000 		.4byte	0x135
 6536 0b1f E5050000 		.4byte	.LLST38
 6537 0b23 18       		.uleb128 0x18
 6538 0b24 08000000 		.4byte	.LVL118
 6539 0b28 C4200000 		.4byte	0x20c4
 6540 0b2c 18       		.uleb128 0x18
 6541 0b2d 16000000 		.4byte	.LVL121
 6542 0b31 CF200000 		.4byte	0x20cf
 6543 0b35 00       		.byte	0
 6544 0b36 22       		.uleb128 0x22
 6545 0b37 53090000 		.4byte	.LASF102
 6546 0b3b 01       		.byte	0x1
 6547 0b3c E305     		.2byte	0x5e3
 6548 0b3e 00000000 		.4byte	.LFB42
 6549 0b42 DC000000 		.4byte	.LFE42-.LFB42
 6550 0b46 01       		.uleb128 0x1
 6551 0b47 9C       		.byte	0x9c
 6552 0b48 FA0B0000 		.4byte	0xbfa
 6553 0b4c 14       		.uleb128 0x14
 6554 0b4d AB090000 		.4byte	.LASF73
 6555 0b51 01       		.byte	0x1
 6556 0b52 E305     		.2byte	0x5e3
 6557 0b54 34020000 		.4byte	0x234
 6558 0b58 F8050000 		.4byte	.LLST39
 6559 0b5c 14       		.uleb128 0x14
 6560 0b5d 6F080000 		.4byte	.LASF103
 6561 0b61 01       		.byte	0x1
 6562 0b62 E405     		.2byte	0x5e4
 6563 0b64 35010000 		.4byte	0x135
 6564 0b68 16060000 		.4byte	.LLST40
 6565 0b6c 15       		.uleb128 0x15
 6566 0b6d A40E0000 		.4byte	.LASF70
 6567 0b71 01       		.byte	0x1
 6568 0b72 E605     		.2byte	0x5e6
 6569 0b74 C6040000 		.4byte	0x4c6
 6570 0b78 41060000 		.4byte	.LLST41
 6571 0b7c 15       		.uleb128 0x15
 6572 0b7d 730F0000 		.4byte	.LASF104
 6573 0b81 01       		.byte	0x1
 6574 0b82 E705     		.2byte	0x5e7
 6575 0b84 35010000 		.4byte	0x135
 6576 0b88 54060000 		.4byte	.LLST42
 6577 0b8c 15       		.uleb128 0x15
 6578 0b8d 2C0D0000 		.4byte	.LASF105
 6579 0b91 01       		.byte	0x1
 6580 0b92 E705     		.2byte	0x5e7
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 223


 6581 0b94 35010000 		.4byte	0x135
 6582 0b98 67060000 		.4byte	.LLST43
 6583 0b9c 15       		.uleb128 0x15
 6584 0b9d B0020000 		.4byte	.LASF106
 6585 0ba1 01       		.byte	0x1
 6586 0ba2 E805     		.2byte	0x5e8
 6587 0ba4 2A010000 		.4byte	0x12a
 6588 0ba8 7A060000 		.4byte	.LLST44
 6589 0bac 1E       		.uleb128 0x1e
 6590 0bad 8A000000 		.4byte	.LBB6
 6591 0bb1 3A000000 		.4byte	.LBE6-.LBB6
 6592 0bb5 CA0B0000 		.4byte	0xbca
 6593 0bb9 15       		.uleb128 0x15
 6594 0bba 15010000 		.4byte	.LASF34
 6595 0bbe 01       		.byte	0x1
 6596 0bbf 6C06     		.2byte	0x66c
 6597 0bc1 1B070000 		.4byte	0x71b
 6598 0bc5 99060000 		.4byte	.LLST45
 6599 0bc9 00       		.byte	0
 6600 0bca 18       		.uleb128 0x18
 6601 0bcb 10000000 		.4byte	.LVL126
 6602 0bcf 6B200000 		.4byte	0x206b
 6603 0bd3 1D       		.uleb128 0x1d
 6604 0bd4 7C000000 		.4byte	.LVL134
 6605 0bd8 8C200000 		.4byte	0x208c
 6606 0bdc E70B0000 		.4byte	0xbe7
 6607 0be0 1A       		.uleb128 0x1a
 6608 0be1 01       		.uleb128 0x1
 6609 0be2 50       		.byte	0x50
 6610 0be3 02       		.uleb128 0x2
 6611 0be4 75       		.byte	0x75
 6612 0be5 00       		.sleb128 0
 6613 0be6 00       		.byte	0
 6614 0be7 18       		.uleb128 0x18
 6615 0be8 CC000000 		.4byte	.LVL137
 6616 0bec 81200000 		.4byte	0x2081
 6617 0bf0 18       		.uleb128 0x18
 6618 0bf1 D0000000 		.4byte	.LVL138
 6619 0bf5 76200000 		.4byte	0x2076
 6620 0bf9 00       		.byte	0
 6621 0bfa 22       		.uleb128 0x22
 6622 0bfb FE0E0000 		.4byte	.LASF107
 6623 0bff 01       		.byte	0x1
 6624 0c00 2107     		.2byte	0x721
 6625 0c02 00000000 		.4byte	.LFB45
 6626 0c06 8C000000 		.4byte	.LFE45-.LFB45
 6627 0c0a 01       		.uleb128 0x1
 6628 0c0b 9C       		.byte	0x9c
 6629 0c0c 920C0000 		.4byte	0xc92
 6630 0c10 14       		.uleb128 0x14
 6631 0c11 40020000 		.4byte	.LASF108
 6632 0c15 01       		.byte	0x1
 6633 0c16 2107     		.2byte	0x721
 6634 0c18 34020000 		.4byte	0x234
 6635 0c1c AC060000 		.4byte	.LLST46
 6636 0c20 15       		.uleb128 0x15
 6637 0c21 A40E0000 		.4byte	.LASF70
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 224


 6638 0c25 01       		.byte	0x1
 6639 0c26 2307     		.2byte	0x723
 6640 0c28 920C0000 		.4byte	0xc92
 6641 0c2c D8060000 		.4byte	.LLST47
 6642 0c30 1E       		.uleb128 0x1e
 6643 0c31 34000000 		.4byte	.LBB7
 6644 0c35 3A000000 		.4byte	.LBE7-.LBB7
 6645 0c39 4E0C0000 		.4byte	0xc4e
 6646 0c3d 15       		.uleb128 0x15
 6647 0c3e 15010000 		.4byte	.LASF34
 6648 0c42 01       		.byte	0x1
 6649 0c43 3507     		.2byte	0x735
 6650 0c45 1B070000 		.4byte	0x71b
 6651 0c49 04070000 		.4byte	.LLST48
 6652 0c4d 00       		.byte	0
 6653 0c4e 18       		.uleb128 0x18
 6654 0c4f 14000000 		.4byte	.LVL142
 6655 0c53 6B200000 		.4byte	0x206b
 6656 0c57 1D       		.uleb128 0x1d
 6657 0c58 1A000000 		.4byte	.LVL143
 6658 0c5c CE030000 		.4byte	0x3ce
 6659 0c60 6B0C0000 		.4byte	0xc6b
 6660 0c64 1A       		.uleb128 0x1a
 6661 0c65 01       		.uleb128 0x1
 6662 0c66 50       		.byte	0x50
 6663 0c67 02       		.uleb128 0x2
 6664 0c68 74       		.byte	0x74
 6665 0c69 00       		.sleb128 0
 6666 0c6a 00       		.byte	0
 6667 0c6b 1D       		.uleb128 0x1d
 6668 0c6c 26000000 		.4byte	.LVL144
 6669 0c70 8C200000 		.4byte	0x208c
 6670 0c74 7F0C0000 		.4byte	0xc7f
 6671 0c78 1A       		.uleb128 0x1a
 6672 0c79 01       		.uleb128 0x1
 6673 0c7a 50       		.byte	0x50
 6674 0c7b 02       		.uleb128 0x2
 6675 0c7c 75       		.byte	0x75
 6676 0c7d 00       		.sleb128 0
 6677 0c7e 00       		.byte	0
 6678 0c7f 18       		.uleb128 0x18
 6679 0c80 7E000000 		.4byte	.LVL147
 6680 0c84 81200000 		.4byte	0x2081
 6681 0c88 18       		.uleb128 0x18
 6682 0c89 82000000 		.4byte	.LVL148
 6683 0c8d 76200000 		.4byte	0x2076
 6684 0c91 00       		.byte	0
 6685 0c92 07       		.uleb128 0x7
 6686 0c93 C6040000 		.4byte	0x4c6
 6687 0c97 21       		.uleb128 0x21
 6688 0c98 38040000 		.4byte	.LASF109
 6689 0c9c 01       		.byte	0x1
 6690 0c9d 5707     		.2byte	0x757
 6691 0c9f 2A010000 		.4byte	0x12a
 6692 0ca3 00000000 		.4byte	.LFB46
 6693 0ca7 B0000000 		.4byte	.LFE46-.LFB46
 6694 0cab 01       		.uleb128 0x1
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 225


 6695 0cac 9C       		.byte	0x9c
 6696 0cad 6F0D0000 		.4byte	0xd6f
 6697 0cb1 14       		.uleb128 0x14
 6698 0cb2 40020000 		.4byte	.LASF108
 6699 0cb6 01       		.byte	0x1
 6700 0cb7 5707     		.2byte	0x757
 6701 0cb9 34020000 		.4byte	0x234
 6702 0cbd 17070000 		.4byte	.LLST49
 6703 0cc1 15       		.uleb128 0x15
 6704 0cc2 B0020000 		.4byte	.LASF106
 6705 0cc6 01       		.byte	0x1
 6706 0cc7 5907     		.2byte	0x759
 6707 0cc9 2A010000 		.4byte	0x12a
 6708 0ccd 43070000 		.4byte	.LLST50
 6709 0cd1 15       		.uleb128 0x15
 6710 0cd2 A40E0000 		.4byte	.LASF70
 6711 0cd6 01       		.byte	0x1
 6712 0cd7 5A07     		.2byte	0x75a
 6713 0cd9 920C0000 		.4byte	0xc92
 6714 0cdd 9C070000 		.4byte	.LLST51
 6715 0ce1 15       		.uleb128 0x15
 6716 0ce2 75020000 		.4byte	.LASF110
 6717 0ce6 01       		.byte	0x1
 6718 0ce7 5B07     		.2byte	0x75b
 6719 0ce9 35010000 		.4byte	0x135
 6720 0ced C8070000 		.4byte	.LLST52
 6721 0cf1 1E       		.uleb128 0x1e
 6722 0cf2 4C000000 		.4byte	.LBB8
 6723 0cf6 3A000000 		.4byte	.LBE8-.LBB8
 6724 0cfa 0F0D0000 		.4byte	0xd0f
 6725 0cfe 15       		.uleb128 0x15
 6726 0cff 15010000 		.4byte	.LASF34
 6727 0d03 01       		.byte	0x1
 6728 0d04 8B07     		.2byte	0x78b
 6729 0d06 1B070000 		.4byte	0x71b
 6730 0d0a E7070000 		.4byte	.LLST53
 6731 0d0e 00       		.byte	0
 6732 0d0f 18       		.uleb128 0x18
 6733 0d10 0A000000 		.4byte	.LVL152
 6734 0d14 C4200000 		.4byte	0x20c4
 6735 0d18 1D       		.uleb128 0x1d
 6736 0d19 12000000 		.4byte	.LVL155
 6737 0d1d CE030000 		.4byte	0x3ce
 6738 0d21 2C0D0000 		.4byte	0xd2c
 6739 0d25 1A       		.uleb128 0x1a
 6740 0d26 01       		.uleb128 0x1
 6741 0d27 50       		.byte	0x50
 6742 0d28 02       		.uleb128 0x2
 6743 0d29 74       		.byte	0x74
 6744 0d2a 00       		.sleb128 0
 6745 0d2b 00       		.byte	0
 6746 0d2c 1D       		.uleb128 0x1d
 6747 0d2d 3E000000 		.4byte	.LVL159
 6748 0d31 8C200000 		.4byte	0x208c
 6749 0d35 400D0000 		.4byte	0xd40
 6750 0d39 1A       		.uleb128 0x1a
 6751 0d3a 01       		.uleb128 0x1
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 226


 6752 0d3b 50       		.byte	0x50
 6753 0d3c 02       		.uleb128 0x2
 6754 0d3d 77       		.byte	0x77
 6755 0d3e 00       		.sleb128 0
 6756 0d3f 00       		.byte	0
 6757 0d40 1D       		.uleb128 0x1d
 6758 0d41 94000000 		.4byte	.LVL163
 6759 0d45 B8200000 		.4byte	0x20b8
 6760 0d49 5D0D0000 		.4byte	0xd5d
 6761 0d4d 1A       		.uleb128 0x1a
 6762 0d4e 01       		.uleb128 0x1
 6763 0d4f 50       		.byte	0x50
 6764 0d50 05       		.uleb128 0x5
 6765 0d51 03       		.byte	0x3
 6766 0d52 14000000 		.4byte	.LANCHOR0+20
 6767 0d56 1A       		.uleb128 0x1a
 6768 0d57 01       		.uleb128 0x1
 6769 0d58 51       		.byte	0x51
 6770 0d59 02       		.uleb128 0x2
 6771 0d5a 74       		.byte	0x74
 6772 0d5b 18       		.sleb128 24
 6773 0d5c 00       		.byte	0
 6774 0d5d 19       		.uleb128 0x19
 6775 0d5e A0000000 		.4byte	.LVL165
 6776 0d62 CF200000 		.4byte	0x20cf
 6777 0d66 1A       		.uleb128 0x1a
 6778 0d67 01       		.uleb128 0x1
 6779 0d68 50       		.byte	0x50
 6780 0d69 03       		.uleb128 0x3
 6781 0d6a 91       		.byte	0x91
 6782 0d6b 64       		.sleb128 -28
 6783 0d6c 06       		.byte	0x6
 6784 0d6d 00       		.byte	0
 6785 0d6e 00       		.byte	0
 6786 0d6f 22       		.uleb128 0x22
 6787 0d70 2A0C0000 		.4byte	.LASF111
 6788 0d74 01       		.byte	0x1
 6789 0d75 A207     		.2byte	0x7a2
 6790 0d77 00000000 		.4byte	.LFB47
 6791 0d7b 50000000 		.4byte	.LFE47-.LFB47
 6792 0d7f 01       		.uleb128 0x1
 6793 0d80 9C       		.byte	0x9c
 6794 0d81 DA0D0000 		.4byte	0xdda
 6795 0d85 15       		.uleb128 0x15
 6796 0d86 AD0B0000 		.4byte	.LASF69
 6797 0d8a 01       		.byte	0x1
 6798 0d8b A407     		.2byte	0x7a4
 6799 0d8d 2A010000 		.4byte	0x12a
 6800 0d91 FA070000 		.4byte	.LLST54
 6801 0d95 1D       		.uleb128 0x1d
 6802 0d96 18000000 		.4byte	.LVL168
 6803 0d9a 51080000 		.4byte	0x851
 6804 0d9e D00D0000 		.4byte	0xdd0
 6805 0da2 1A       		.uleb128 0x1a
 6806 0da3 01       		.uleb128 0x1
 6807 0da4 50       		.byte	0x50
 6808 0da5 05       		.uleb128 0x5
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 227


 6809 0da6 03       		.byte	0x3
 6810 0da7 00000000 		.4byte	prvIdleTask
 6811 0dab 1A       		.uleb128 0x1a
 6812 0dac 01       		.uleb128 0x1
 6813 0dad 51       		.byte	0x51
 6814 0dae 05       		.uleb128 0x5
 6815 0daf 03       		.byte	0x3
 6816 0db0 00000000 		.4byte	.LC29
 6817 0db4 1A       		.uleb128 0x1a
 6818 0db5 01       		.uleb128 0x1
 6819 0db6 52       		.byte	0x52
 6820 0db7 02       		.uleb128 0x2
 6821 0db8 08       		.byte	0x8
 6822 0db9 64       		.byte	0x64
 6823 0dba 1A       		.uleb128 0x1a
 6824 0dbb 01       		.uleb128 0x1
 6825 0dbc 53       		.byte	0x53
 6826 0dbd 01       		.uleb128 0x1
 6827 0dbe 30       		.byte	0x30
 6828 0dbf 1A       		.uleb128 0x1a
 6829 0dc0 02       		.uleb128 0x2
 6830 0dc1 7D       		.byte	0x7d
 6831 0dc2 00       		.sleb128 0
 6832 0dc3 01       		.uleb128 0x1
 6833 0dc4 30       		.byte	0x30
 6834 0dc5 1A       		.uleb128 0x1a
 6835 0dc6 02       		.uleb128 0x2
 6836 0dc7 7D       		.byte	0x7d
 6837 0dc8 04       		.sleb128 4
 6838 0dc9 05       		.uleb128 0x5
 6839 0dca 03       		.byte	0x3
 6840 0dcb F8000000 		.4byte	.LANCHOR1+120
 6841 0dcf 00       		.byte	0
 6842 0dd0 18       		.uleb128 0x18
 6843 0dd1 34000000 		.4byte	.LVL169
 6844 0dd5 DA200000 		.4byte	0x20da
 6845 0dd9 00       		.byte	0
 6846 0dda 22       		.uleb128 0x22
 6847 0ddb 6B050000 		.4byte	.LASF112
 6848 0ddf 01       		.byte	0x1
 6849 0de0 1F08     		.2byte	0x81f
 6850 0de2 00000000 		.4byte	.LFB48
 6851 0de6 14000000 		.4byte	.LFE48-.LFB48
 6852 0dea 01       		.uleb128 0x1
 6853 0deb 9C       		.byte	0x9c
 6854 0dec FA0D0000 		.4byte	0xdfa
 6855 0df0 18       		.uleb128 0x18
 6856 0df1 0E000000 		.4byte	.LVL170
 6857 0df5 E5200000 		.4byte	0x20e5
 6858 0df9 00       		.byte	0
 6859 0dfa 23       		.uleb128 0x23
 6860 0dfb 5D040000 		.4byte	.LASF154
 6861 0dff 01       		.byte	0x1
 6862 0e00 2A08     		.2byte	0x82a
 6863 0e02 00000000 		.4byte	.LFB49
 6864 0e06 10000000 		.4byte	.LFE49-.LFB49
 6865 0e0a 01       		.uleb128 0x1
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 228


 6866 0e0b 9C       		.byte	0x9c
 6867 0e0c 21       		.uleb128 0x21
 6868 0e0d D40A0000 		.4byte	.LASF113
 6869 0e11 01       		.byte	0x1
 6870 0e12 EE08     		.2byte	0x8ee
 6871 0e14 40010000 		.4byte	0x140
 6872 0e18 00000000 		.4byte	.LFB51
 6873 0e1c 0C000000 		.4byte	.LFE51-.LFB51
 6874 0e20 01       		.uleb128 0x1
 6875 0e21 9C       		.byte	0x9c
 6876 0e22 350E0000 		.4byte	0xe35
 6877 0e26 24       		.uleb128 0x24
 6878 0e27 230C0000 		.4byte	.LASF114
 6879 0e2b 01       		.byte	0x1
 6880 0e2c F008     		.2byte	0x8f0
 6881 0e2e 40010000 		.4byte	0x140
 6882 0e32 01       		.uleb128 0x1
 6883 0e33 50       		.byte	0x50
 6884 0e34 00       		.byte	0
 6885 0e35 21       		.uleb128 0x21
 6886 0e36 41030000 		.4byte	.LASF115
 6887 0e3a 01       		.byte	0x1
 6888 0e3b FD08     		.2byte	0x8fd
 6889 0e3d 40010000 		.4byte	0x140
 6890 0e41 00000000 		.4byte	.LFB52
 6891 0e45 0C000000 		.4byte	.LFE52-.LFB52
 6892 0e49 01       		.uleb128 0x1
 6893 0e4a 9C       		.byte	0x9c
 6894 0e4b 6B0E0000 		.4byte	0xe6b
 6895 0e4f 24       		.uleb128 0x24
 6896 0e50 AD0B0000 		.4byte	.LASF69
 6897 0e54 01       		.byte	0x1
 6898 0e55 FF08     		.2byte	0x8ff
 6899 0e57 40010000 		.4byte	0x140
 6900 0e5b 01       		.uleb128 0x1
 6901 0e5c 50       		.byte	0x50
 6902 0e5d 25       		.uleb128 0x25
 6903 0e5e 75020000 		.4byte	.LASF110
 6904 0e62 01       		.byte	0x1
 6905 0e63 0009     		.2byte	0x900
 6906 0e65 35010000 		.4byte	0x135
 6907 0e69 00       		.byte	0
 6908 0e6a 00       		.byte	0
 6909 0e6b 26       		.uleb128 0x26
 6910 0e6c 57020000 		.4byte	.LASF168
 6911 0e70 01       		.byte	0x1
 6912 0e71 1C09     		.2byte	0x91c
 6913 0e73 35010000 		.4byte	0x135
 6914 0e77 00000000 		.4byte	.LFB53
 6915 0e7b 0C000000 		.4byte	.LFE53-.LFB53
 6916 0e7f 01       		.uleb128 0x1
 6917 0e80 9C       		.byte	0x9c
 6918 0e81 21       		.uleb128 0x21
 6919 0e82 150C0000 		.4byte	.LASF116
 6920 0e86 01       		.byte	0x1
 6921 0e87 2409     		.2byte	0x924
 6922 0e89 A7000000 		.4byte	0xa7
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 229


 6923 0e8d 00000000 		.4byte	.LFB54
 6924 0e91 10000000 		.4byte	.LFE54-.LFB54
 6925 0e95 01       		.uleb128 0x1
 6926 0e96 9C       		.byte	0x9c
 6927 0e97 BC0E0000 		.4byte	0xebc
 6928 0e9b 14       		.uleb128 0x14
 6929 0e9c 85090000 		.4byte	.LASF117
 6930 0ea0 01       		.byte	0x1
 6931 0ea1 2409     		.2byte	0x924
 6932 0ea3 34020000 		.4byte	0x234
 6933 0ea7 0D080000 		.4byte	.LLST55
 6934 0eab 15       		.uleb128 0x15
 6935 0eac A40E0000 		.4byte	.LASF70
 6936 0eb0 01       		.byte	0x1
 6937 0eb1 2609     		.2byte	0x926
 6938 0eb3 C6040000 		.4byte	0x4c6
 6939 0eb7 20080000 		.4byte	.LLST56
 6940 0ebb 00       		.byte	0
 6941 0ebc 21       		.uleb128 0x21
 6942 0ebd 89040000 		.4byte	.LASF118
 6943 0ec1 01       		.byte	0x1
 6944 0ec2 A00A     		.2byte	0xaa0
 6945 0ec4 2A010000 		.4byte	0x12a
 6946 0ec8 00000000 		.4byte	.LFB56
 6947 0ecc 5C010000 		.4byte	.LFE56-.LFB56
 6948 0ed0 01       		.uleb128 0x1
 6949 0ed1 9C       		.byte	0x9c
 6950 0ed2 9A0F0000 		.4byte	0xf9a
 6951 0ed6 15       		.uleb128 0x15
 6952 0ed7 A40E0000 		.4byte	.LASF70
 6953 0edb 01       		.byte	0x1
 6954 0edc A20A     		.2byte	0xaa2
 6955 0ede C6040000 		.4byte	0x4c6
 6956 0ee2 40080000 		.4byte	.LLST57
 6957 0ee6 15       		.uleb128 0x15
 6958 0ee7 9F0A0000 		.4byte	.LASF26
 6959 0eeb 01       		.byte	0x1
 6960 0eec A30A     		.2byte	0xaa3
 6961 0eee 40010000 		.4byte	0x140
 6962 0ef2 5E080000 		.4byte	.LLST58
 6963 0ef6 15       		.uleb128 0x15
 6964 0ef7 FD0A0000 		.4byte	.LASF119
 6965 0efb 01       		.byte	0x1
 6966 0efc A40A     		.2byte	0xaa4
 6967 0efe 2A010000 		.4byte	0x12a
 6968 0f02 7D080000 		.4byte	.LLST59
 6969 0f06 27       		.uleb128 0x27
 6970 0f07 00000000 		.4byte	.Ldebug_ranges0+0
 6971 0f0b 15       		.uleb128 0x15
 6972 0f0c 8F050000 		.4byte	.LASF93
 6973 0f10 01       		.byte	0x1
 6974 0f11 AF0A     		.2byte	0xaaf
 6975 0f13 4C080000 		.4byte	0x84c
 6976 0f17 CD080000 		.4byte	.LLST60
 6977 0f1b 1E       		.uleb128 0x1e
 6978 0f1c 1A000000 		.4byte	.LBB10
 6979 0f20 14000000 		.4byte	.LBE10-.LBB10
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 230


 6980 0f24 420F0000 		.4byte	0xf42
 6981 0f28 15       		.uleb128 0x15
 6982 0f29 6B0C0000 		.4byte	.LASF120
 6983 0f2d 01       		.byte	0x1
 6984 0f2e B70A     		.2byte	0xab7
 6985 0f30 9A0F0000 		.4byte	0xf9a
 6986 0f34 EB080000 		.4byte	.LLST61
 6987 0f38 18       		.uleb128 0x18
 6988 0f39 2E000000 		.4byte	.LVL180
 6989 0f3d 74040000 		.4byte	0x474
 6990 0f41 00       		.byte	0
 6991 0f42 1E       		.uleb128 0x1e
 6992 0f43 6E000000 		.4byte	.LBB11
 6993 0f47 24000000 		.4byte	.LBE11-.LBB11
 6994 0f4b 600F0000 		.4byte	0xf60
 6995 0f4f 15       		.uleb128 0x15
 6996 0f50 2E0F0000 		.4byte	.LASF121
 6997 0f54 01       		.byte	0x1
 6998 0f55 E90A     		.2byte	0xae9
 6999 0f57 A00F0000 		.4byte	0xfa0
 7000 0f5b FE080000 		.4byte	.LLST62
 7001 0f5f 00       		.byte	0
 7002 0f60 1E       		.uleb128 0x1e
 7003 0f61 98000000 		.4byte	.LBB12
 7004 0f65 24000000 		.4byte	.LBE12-.LBB12
 7005 0f69 7E0F0000 		.4byte	0xf7e
 7006 0f6d 15       		.uleb128 0x15
 7007 0f6e 2E0F0000 		.4byte	.LASF121
 7008 0f72 01       		.byte	0x1
 7009 0f73 EF0A     		.2byte	0xaef
 7010 0f75 A00F0000 		.4byte	0xfa0
 7011 0f79 11090000 		.4byte	.LLST63
 7012 0f7d 00       		.byte	0
 7013 0f7e 1F       		.uleb128 0x1f
 7014 0f7f CA000000 		.4byte	.LBB13
 7015 0f83 3A000000 		.4byte	.LBE13-.LBB13
 7016 0f87 15       		.uleb128 0x15
 7017 0f88 15010000 		.4byte	.LASF34
 7018 0f8c 01       		.byte	0x1
 7019 0f8d F80A     		.2byte	0xaf8
 7020 0f8f 1B070000 		.4byte	0x71b
 7021 0f93 24090000 		.4byte	.LLST64
 7022 0f97 00       		.byte	0
 7023 0f98 00       		.byte	0
 7024 0f99 00       		.byte	0
 7025 0f9a 06       		.uleb128 0x6
 7026 0f9b 04       		.byte	0x4
 7027 0f9c 29020000 		.4byte	0x229
 7028 0fa0 07       		.uleb128 0x7
 7029 0fa1 9A0F0000 		.4byte	0xf9a
 7030 0fa5 21       		.uleb128 0x21
 7031 0fa6 B30A0000 		.4byte	.LASF122
 7032 0faa 01       		.byte	0x1
 7033 0fab 7E08     		.2byte	0x87e
 7034 0fad 2A010000 		.4byte	0x12a
 7035 0fb1 00000000 		.4byte	.LFB50
 7036 0fb5 2C010000 		.4byte	.LFE50-.LFB50
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 231


 7037 0fb9 01       		.uleb128 0x1
 7038 0fba 9C       		.byte	0x9c
 7039 0fbb 85100000 		.4byte	0x1085
 7040 0fbf 15       		.uleb128 0x15
 7041 0fc0 A40E0000 		.4byte	.LASF70
 7042 0fc4 01       		.byte	0x1
 7043 0fc5 8008     		.2byte	0x880
 7044 0fc7 C6040000 		.4byte	0x4c6
 7045 0fcb 37090000 		.4byte	.LLST65
 7046 0fcf 15       		.uleb128 0x15
 7047 0fd0 A20D0000 		.4byte	.LASF123
 7048 0fd4 01       		.byte	0x1
 7049 0fd5 8108     		.2byte	0x881
 7050 0fd7 2A010000 		.4byte	0x12a
 7051 0fdb 84090000 		.4byte	.LLST66
 7052 0fdf 1E       		.uleb128 0x1e
 7053 0fe0 26000000 		.4byte	.LBB16
 7054 0fe4 26000000 		.4byte	.LBE16-.LBB16
 7055 0fe8 FD0F0000 		.4byte	0xffd
 7056 0fec 15       		.uleb128 0x15
 7057 0fed 2E0F0000 		.4byte	.LASF121
 7058 0ff1 01       		.byte	0x1
 7059 0ff2 9908     		.2byte	0x899
 7060 0ff4 A00F0000 		.4byte	0xfa0
 7061 0ff8 C6090000 		.4byte	.LLST67
 7062 0ffc 00       		.byte	0
 7063 0ffd 1E       		.uleb128 0x1e
 7064 0ffe 4C000000 		.4byte	.LBB17
 7065 1002 24000000 		.4byte	.LBE17-.LBB17
 7066 1006 1B100000 		.4byte	0x101b
 7067 100a 15       		.uleb128 0x15
 7068 100b 2E0F0000 		.4byte	.LASF121
 7069 100f 01       		.byte	0x1
 7070 1010 9B08     		.2byte	0x89b
 7071 1012 A00F0000 		.4byte	0xfa0
 7072 1016 D9090000 		.4byte	.LLST68
 7073 101a 00       		.byte	0
 7074 101b 1E       		.uleb128 0x1e
 7075 101c 7E000000 		.4byte	.LBB18
 7076 1020 3A000000 		.4byte	.LBE18-.LBB18
 7077 1024 39100000 		.4byte	0x1039
 7078 1028 15       		.uleb128 0x15
 7079 1029 15010000 		.4byte	.LASF34
 7080 102d 01       		.byte	0x1
 7081 102e 9C08     		.2byte	0x89c
 7082 1030 1B070000 		.4byte	0x71b
 7083 1034 EC090000 		.4byte	.LLST69
 7084 1038 00       		.byte	0
 7085 1039 1E       		.uleb128 0x1e
 7086 103a DE000000 		.4byte	.LBB19
 7087 103e 22000000 		.4byte	.LBE19-.LBB19
 7088 1042 60100000 		.4byte	0x1060
 7089 1046 15       		.uleb128 0x15
 7090 1047 5E010000 		.4byte	.LASF124
 7091 104b 01       		.byte	0x1
 7092 104c BA08     		.2byte	0x8ba
 7093 104e 40010000 		.4byte	0x140
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 232


 7094 1052 FF090000 		.4byte	.LLST70
 7095 1056 18       		.uleb128 0x18
 7096 1057 EA000000 		.4byte	.LVL216
 7097 105b BC0E0000 		.4byte	0xebc
 7098 105f 00       		.byte	0
 7099 1060 18       		.uleb128 0x18
 7100 1061 06000000 		.4byte	.LVL203
 7101 1065 6B200000 		.4byte	0x206b
 7102 1069 18       		.uleb128 0x18
 7103 106a DE000000 		.4byte	.LVL214
 7104 106e 74040000 		.4byte	0x474
 7105 1072 18       		.uleb128 0x18
 7106 1073 0C010000 		.4byte	.LVL219
 7107 1077 81200000 		.4byte	0x2081
 7108 107b 18       		.uleb128 0x18
 7109 107c 1A010000 		.4byte	.LVL224
 7110 1080 76200000 		.4byte	0x2076
 7111 1084 00       		.byte	0
 7112 1085 21       		.uleb128 0x21
 7113 1086 0D0B0000 		.4byte	.LASF125
 7114 108a 01       		.byte	0x1
 7115 108b BE04     		.2byte	0x4be
 7116 108d 2A010000 		.4byte	0x12a
 7117 1091 00000000 		.4byte	.LFB38
 7118 1095 60000000 		.4byte	.LFE38-.LFB38
 7119 1099 01       		.uleb128 0x1
 7120 109a 9C       		.byte	0x9c
 7121 109b 34110000 		.4byte	0x1134
 7122 109f 14       		.uleb128 0x14
 7123 10a0 7B0B0000 		.4byte	.LASF126
 7124 10a4 01       		.byte	0x1
 7125 10a5 BE04     		.2byte	0x4be
 7126 10a7 3A110000 		.4byte	0x113a
 7127 10ab 1D0A0000 		.4byte	.LLST71
 7128 10af 14       		.uleb128 0x14
 7129 10b0 5B0E0000 		.4byte	.LASF127
 7130 10b4 01       		.byte	0x1
 7131 10b5 BF04     		.2byte	0x4bf
 7132 10b7 4C080000 		.4byte	0x84c
 7133 10bb 490A0000 		.4byte	.LLST72
 7134 10bf 15       		.uleb128 0x15
 7135 10c0 890E0000 		.4byte	.LASF92
 7136 10c4 01       		.byte	0x1
 7137 10c5 C104     		.2byte	0x4c1
 7138 10c7 40010000 		.4byte	0x140
 7139 10cb F20A0000 		.4byte	.LLST73
 7140 10cf 15       		.uleb128 0x15
 7141 10d0 A20D0000 		.4byte	.LASF123
 7142 10d4 01       		.byte	0x1
 7143 10d5 C204     		.2byte	0x4c2
 7144 10d7 2A010000 		.4byte	0x12a
 7145 10db 110B0000 		.4byte	.LLST74
 7146 10df 15       		.uleb128 0x15
 7147 10e0 FB060000 		.4byte	.LASF128
 7148 10e4 01       		.byte	0x1
 7149 10e5 C204     		.2byte	0x4c2
 7150 10e7 2A010000 		.4byte	0x12a
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 233


 7151 10eb 240B0000 		.4byte	.LLST75
 7152 10ef 28       		.uleb128 0x28
 7153 10f0 20000000 		.4byte	.Ldebug_ranges0+0x20
 7154 10f4 18110000 		.4byte	0x1118
 7155 10f8 15       		.uleb128 0x15
 7156 10f9 8F050000 		.4byte	.LASF93
 7157 10fd 01       		.byte	0x1
 7158 10fe CC04     		.2byte	0x4cc
 7159 1100 4C080000 		.4byte	0x84c
 7160 1104 4E0B0000 		.4byte	.LLST76
 7161 1108 19       		.uleb128 0x19
 7162 1109 4A000000 		.4byte	.LVL244
 7163 110d B7070000 		.4byte	0x7b7
 7164 1111 1A       		.uleb128 0x1a
 7165 1112 01       		.uleb128 0x1
 7166 1113 51       		.byte	0x51
 7167 1114 01       		.uleb128 0x1
 7168 1115 30       		.byte	0x30
 7169 1116 00       		.byte	0
 7170 1117 00       		.byte	0
 7171 1118 18       		.uleb128 0x18
 7172 1119 0A000000 		.4byte	.LVL228
 7173 111d FA0D0000 		.4byte	0xdfa
 7174 1121 18       		.uleb128 0x18
 7175 1122 4E000000 		.4byte	.LVL245
 7176 1126 A50F0000 		.4byte	0xfa5
 7177 112a 18       		.uleb128 0x18
 7178 112b 56000000 		.4byte	.LVL246
 7179 112f 81200000 		.4byte	0x2081
 7180 1133 00       		.byte	0
 7181 1134 06       		.uleb128 0x6
 7182 1135 04       		.byte	0x4
 7183 1136 40010000 		.4byte	0x140
 7184 113a 07       		.uleb128 0x7
 7185 113b 34110000 		.4byte	0x1134
 7186 113f 22       		.uleb128 0x22
 7187 1140 F8050000 		.4byte	.LASF129
 7188 1144 01       		.byte	0x1
 7189 1145 1505     		.2byte	0x515
 7190 1147 00000000 		.4byte	.LFB39
 7191 114b 24000000 		.4byte	.LFE39-.LFB39
 7192 114f 01       		.uleb128 0x1
 7193 1150 9C       		.byte	0x9c
 7194 1151 AA110000 		.4byte	0x11aa
 7195 1155 14       		.uleb128 0x14
 7196 1156 C1080000 		.4byte	.LASF130
 7197 115a 01       		.byte	0x1
 7198 115b 1505     		.2byte	0x515
 7199 115d 4C080000 		.4byte	0x84c
 7200 1161 610B0000 		.4byte	.LLST77
 7201 1165 15       		.uleb128 0x15
 7202 1166 A20D0000 		.4byte	.LASF123
 7203 116a 01       		.byte	0x1
 7204 116b 1705     		.2byte	0x517
 7205 116d 2A010000 		.4byte	0x12a
 7206 1171 A30B0000 		.4byte	.LLST78
 7207 1175 18       		.uleb128 0x18
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 234


 7208 1176 0A000000 		.4byte	.LVL251
 7209 117a FA0D0000 		.4byte	0xdfa
 7210 117e 1D       		.uleb128 0x1d
 7211 117f 12000000 		.4byte	.LVL252
 7212 1183 B7070000 		.4byte	0x7b7
 7213 1187 97110000 		.4byte	0x1197
 7214 118b 1A       		.uleb128 0x1a
 7215 118c 01       		.uleb128 0x1
 7216 118d 50       		.byte	0x50
 7217 118e 02       		.uleb128 0x2
 7218 118f 74       		.byte	0x74
 7219 1190 00       		.sleb128 0
 7220 1191 1A       		.uleb128 0x1a
 7221 1192 01       		.uleb128 0x1
 7222 1193 51       		.byte	0x51
 7223 1194 01       		.uleb128 0x1
 7224 1195 30       		.byte	0x30
 7225 1196 00       		.byte	0
 7226 1197 18       		.uleb128 0x18
 7227 1198 16000000 		.4byte	.LVL253
 7228 119c A50F0000 		.4byte	0xfa5
 7229 11a0 18       		.uleb128 0x18
 7230 11a1 22000000 		.4byte	.LVL256
 7231 11a5 81200000 		.4byte	0x2081
 7232 11a9 00       		.byte	0
 7233 11aa 21       		.uleb128 0x21
 7234 11ab 21020000 		.4byte	.LASF131
 7235 11af 01       		.byte	0x1
 7236 11b0 380A     		.2byte	0xa38
 7237 11b2 2A010000 		.4byte	0x12a
 7238 11b6 00000000 		.4byte	.LFB55
 7239 11ba 24000000 		.4byte	.LFE55-.LFB55
 7240 11be 01       		.uleb128 0x1
 7241 11bf 9C       		.byte	0x9c
 7242 11c0 07120000 		.4byte	0x1207
 7243 11c4 14       		.uleb128 0x14
 7244 11c5 F40D0000 		.4byte	.LASF132
 7245 11c9 01       		.byte	0x1
 7246 11ca 380A     		.2byte	0xa38
 7247 11cc 40010000 		.4byte	0x140
 7248 11d0 D90B0000 		.4byte	.LLST79
 7249 11d4 24       		.uleb128 0x24
 7250 11d5 9D070000 		.4byte	.LASF133
 7251 11d9 01       		.byte	0x1
 7252 11da 3A0A     		.2byte	0xa3a
 7253 11dc 2A010000 		.4byte	0x12a
 7254 11e0 01       		.uleb128 0x1
 7255 11e1 50       		.byte	0x50
 7256 11e2 18       		.uleb128 0x18
 7257 11e3 08000000 		.4byte	.LVL259
 7258 11e7 FA0D0000 		.4byte	0xdfa
 7259 11eb 18       		.uleb128 0x18
 7260 11ec 0C000000 		.4byte	.LVL260
 7261 11f0 6B200000 		.4byte	0x206b
 7262 11f4 18       		.uleb128 0x18
 7263 11f5 18000000 		.4byte	.LVL262
 7264 11f9 76200000 		.4byte	0x2076
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 235


 7265 11fd 18       		.uleb128 0x18
 7266 11fe 1C000000 		.4byte	.LVL263
 7267 1202 A50F0000 		.4byte	0xfa5
 7268 1206 00       		.byte	0
 7269 1207 22       		.uleb128 0x22
 7270 1208 FA090000 		.4byte	.LASF134
 7271 120c 01       		.byte	0x1
 7272 120d C10B     		.2byte	0xbc1
 7273 120f 00000000 		.4byte	.LFB57
 7274 1213 AC000000 		.4byte	.LFE57-.LFB57
 7275 1217 01       		.uleb128 0x1
 7276 1218 9C       		.byte	0x9c
 7277 1219 89120000 		.4byte	0x1289
 7278 121d 1E       		.uleb128 0x1e
 7279 121e 18000000 		.4byte	.LBB23
 7280 1222 2C000000 		.4byte	.LBE23-.LBB23
 7281 1226 54120000 		.4byte	0x1254
 7282 122a 15       		.uleb128 0x15
 7283 122b 540C0000 		.4byte	.LASF135
 7284 122f 01       		.byte	0x1
 7285 1230 EB0B     		.2byte	0xbeb
 7286 1232 8F120000 		.4byte	0x128f
 7287 1236 050C0000 		.4byte	.LLST80
 7288 123a 15       		.uleb128 0x15
 7289 123b 36080000 		.4byte	.LASF136
 7290 123f 01       		.byte	0x1
 7291 1240 EB0B     		.2byte	0xbeb
 7292 1242 E5050000 		.4byte	0x5e5
 7293 1246 180C0000 		.4byte	.LLST81
 7294 124a 18       		.uleb128 0x18
 7295 124b 44000000 		.4byte	.LVL266
 7296 124f F0200000 		.4byte	0x20f0
 7297 1253 00       		.byte	0
 7298 1254 1F       		.uleb128 0x1f
 7299 1255 44000000 		.4byte	.LBB24
 7300 1259 5A000000 		.4byte	.LBE24-.LBB24
 7301 125d 15       		.uleb128 0x15
 7302 125e 000D0000 		.4byte	.LASF137
 7303 1262 01       		.byte	0x1
 7304 1263 F60B     		.2byte	0xbf6
 7305 1265 35010000 		.4byte	0x135
 7306 1269 300C0000 		.4byte	.LLST82
 7307 126d 1F       		.uleb128 0x1f
 7308 126e 5C000000 		.4byte	.LBB25
 7309 1272 40000000 		.4byte	.LBE25-.LBB25
 7310 1276 15       		.uleb128 0x15
 7311 1277 4C000000 		.4byte	.LASF138
 7312 127b 01       		.byte	0x1
 7313 127c F60B     		.2byte	0xbf6
 7314 127e A00F0000 		.4byte	0xfa0
 7315 1282 430C0000 		.4byte	.LLST83
 7316 1286 00       		.byte	0
 7317 1287 00       		.byte	0
 7318 1288 00       		.byte	0
 7319 1289 06       		.uleb128 0x6
 7320 128a 04       		.byte	0x4
 7321 128b E5050000 		.4byte	0x5e5
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 236


 7322 128f 07       		.uleb128 0x7
 7323 1290 89120000 		.4byte	0x1289
 7324 1294 22       		.uleb128 0x22
 7325 1295 7A0D0000 		.4byte	.LASF139
 7326 1299 01       		.byte	0x1
 7327 129a 8906     		.2byte	0x689
 7328 129c 00000000 		.4byte	.LFB43
 7329 12a0 9C000000 		.4byte	.LFE43-.LFB43
 7330 12a4 01       		.uleb128 0x1
 7331 12a5 9C       		.byte	0x9c
 7332 12a6 6B130000 		.4byte	0x136b
 7333 12aa 14       		.uleb128 0x14
 7334 12ab 3B0B0000 		.4byte	.LASF140
 7335 12af 01       		.byte	0x1
 7336 12b0 8906     		.2byte	0x689
 7337 12b2 34020000 		.4byte	0x234
 7338 12b6 600C0000 		.4byte	.LLST84
 7339 12ba 15       		.uleb128 0x15
 7340 12bb A40E0000 		.4byte	.LASF70
 7341 12bf 01       		.byte	0x1
 7342 12c0 8B06     		.2byte	0x68b
 7343 12c2 C6040000 		.4byte	0x4c6
 7344 12c6 7E0C0000 		.4byte	.LLST85
 7345 12ca 1E       		.uleb128 0x1e
 7346 12cb 2E000000 		.4byte	.LBB26
 7347 12cf 1C000000 		.4byte	.LBE26-.LBB26
 7348 12d3 E6120000 		.4byte	0x12e6
 7349 12d7 1C       		.uleb128 0x1c
 7350 12d8 7800     		.ascii	"x\000"
 7351 12da 01       		.byte	0x1
 7352 12db AE06     		.2byte	0x6ae
 7353 12dd 2A010000 		.4byte	0x12a
 7354 12e1 9E0C0000 		.4byte	.LLST86
 7355 12e5 00       		.byte	0
 7356 12e6 18       		.uleb128 0x18
 7357 12e7 08000000 		.4byte	.LVL272
 7358 12eb 6B200000 		.4byte	0x206b
 7359 12ef 1D       		.uleb128 0x1d
 7360 12f0 18000000 		.4byte	.LVL274
 7361 12f4 8C200000 		.4byte	0x208c
 7362 12f8 03130000 		.4byte	0x1303
 7363 12fc 1A       		.uleb128 0x1a
 7364 12fd 01       		.uleb128 0x1
 7365 12fe 50       		.byte	0x50
 7366 12ff 02       		.uleb128 0x2
 7367 1300 75       		.byte	0x75
 7368 1301 00       		.sleb128 0
 7369 1302 00       		.byte	0
 7370 1303 1D       		.uleb128 0x1d
 7371 1304 26000000 		.4byte	.LVL275
 7372 1308 8C200000 		.4byte	0x208c
 7373 130c 17130000 		.4byte	0x1317
 7374 1310 1A       		.uleb128 0x1a
 7375 1311 01       		.uleb128 0x1
 7376 1312 50       		.byte	0x50
 7377 1313 02       		.uleb128 0x2
 7378 1314 74       		.byte	0x74
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 237


 7379 1315 18       		.sleb128 24
 7380 1316 00       		.byte	0
 7381 1317 1D       		.uleb128 0x1d
 7382 1318 2E000000 		.4byte	.LVL276
 7383 131c B8200000 		.4byte	0x20b8
 7384 1320 34130000 		.4byte	0x1334
 7385 1324 1A       		.uleb128 0x1a
 7386 1325 01       		.uleb128 0x1
 7387 1326 50       		.byte	0x50
 7388 1327 05       		.uleb128 0x5
 7389 1328 03       		.byte	0x3
 7390 1329 00000000 		.4byte	.LANCHOR0
 7391 132d 1A       		.uleb128 0x1a
 7392 132e 01       		.uleb128 0x1
 7393 132f 51       		.byte	0x51
 7394 1330 02       		.uleb128 0x2
 7395 1331 75       		.byte	0x75
 7396 1332 00       		.sleb128 0
 7397 1333 00       		.byte	0
 7398 1334 18       		.uleb128 0x18
 7399 1335 4E000000 		.4byte	.LVL279
 7400 1339 76200000 		.4byte	0x2076
 7401 133d 18       		.uleb128 0x18
 7402 133e 5A000000 		.4byte	.LVL280
 7403 1342 6B200000 		.4byte	0x206b
 7404 1346 18       		.uleb128 0x18
 7405 1347 5E000000 		.4byte	.LVL281
 7406 134b 74040000 		.4byte	0x474
 7407 134f 18       		.uleb128 0x18
 7408 1350 62000000 		.4byte	.LVL282
 7409 1354 76200000 		.4byte	0x2076
 7410 1358 18       		.uleb128 0x18
 7411 1359 76000000 		.4byte	.LVL283
 7412 135d 81200000 		.4byte	0x2081
 7413 1361 18       		.uleb128 0x18
 7414 1362 90000000 		.4byte	.LVL284
 7415 1366 07120000 		.4byte	0x1207
 7416 136a 00       		.byte	0
 7417 136b 22       		.uleb128 0x22
 7418 136c E2050000 		.4byte	.LASF141
 7419 1370 01       		.byte	0x1
 7420 1371 0B0C     		.2byte	0xc0b
 7421 1373 00000000 		.4byte	.LFB58
 7422 1377 1C000000 		.4byte	.LFE58-.LFB58
 7423 137b 01       		.uleb128 0x1
 7424 137c 9C       		.byte	0x9c
 7425 137d CC130000 		.4byte	0x13cc
 7426 1381 14       		.uleb128 0x14
 7427 1382 F7000000 		.4byte	.LASF142
 7428 1386 01       		.byte	0x1
 7429 1387 0B0C     		.2byte	0xc0b
 7430 1389 A00F0000 		.4byte	0xfa0
 7431 138d BD0C0000 		.4byte	.LLST87
 7432 1391 14       		.uleb128 0x14
 7433 1392 580D0000 		.4byte	.LASF90
 7434 1396 01       		.byte	0x1
 7435 1397 0C0C     		.2byte	0xc0c
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 238


 7436 1399 4C080000 		.4byte	0x84c
 7437 139d DE0C0000 		.4byte	.LLST88
 7438 13a1 1D       		.uleb128 0x1d
 7439 13a2 0E000000 		.4byte	.LVL289
 7440 13a6 98200000 		.4byte	0x2098
 7441 13aa B6130000 		.4byte	0x13b6
 7442 13ae 1A       		.uleb128 0x1a
 7443 13af 01       		.uleb128 0x1
 7444 13b0 50       		.byte	0x50
 7445 13b1 03       		.uleb128 0x3
 7446 13b2 F3       		.byte	0xf3
 7447 13b3 01       		.uleb128 0x1
 7448 13b4 50       		.byte	0x50
 7449 13b5 00       		.byte	0
 7450 13b6 19       		.uleb128 0x19
 7451 13b7 16000000 		.4byte	.LVL290
 7452 13bb B7070000 		.4byte	0x7b7
 7453 13bf 1A       		.uleb128 0x1a
 7454 13c0 01       		.uleb128 0x1
 7455 13c1 50       		.byte	0x50
 7456 13c2 02       		.uleb128 0x2
 7457 13c3 74       		.byte	0x74
 7458 13c4 00       		.sleb128 0
 7459 13c5 1A       		.uleb128 0x1a
 7460 13c6 01       		.uleb128 0x1
 7461 13c7 51       		.byte	0x51
 7462 13c8 01       		.uleb128 0x1
 7463 13c9 31       		.byte	0x31
 7464 13ca 00       		.byte	0
 7465 13cb 00       		.byte	0
 7466 13cc 22       		.uleb128 0x22
 7467 13cd 9E0C0000 		.4byte	.LASF143
 7468 13d1 01       		.byte	0x1
 7469 13d2 240C     		.2byte	0xc24
 7470 13d4 00000000 		.4byte	.LFB59
 7471 13d8 40000000 		.4byte	.LFE59-.LFB59
 7472 13dc 01       		.uleb128 0x1
 7473 13dd 9C       		.byte	0x9c
 7474 13de 47140000 		.4byte	0x1447
 7475 13e2 14       		.uleb128 0x14
 7476 13e3 F7000000 		.4byte	.LASF142
 7477 13e7 01       		.byte	0x1
 7478 13e8 240C     		.2byte	0xc24
 7479 13ea 9A0F0000 		.4byte	0xf9a
 7480 13ee 0A0D0000 		.4byte	.LLST89
 7481 13f2 14       		.uleb128 0x14
 7482 13f3 9F0A0000 		.4byte	.LASF26
 7483 13f7 01       		.byte	0x1
 7484 13f8 250C     		.2byte	0xc25
 7485 13fa 4C080000 		.4byte	0x84c
 7486 13fe 2B0D0000 		.4byte	.LLST90
 7487 1402 14       		.uleb128 0x14
 7488 1403 580D0000 		.4byte	.LASF90
 7489 1407 01       		.byte	0x1
 7490 1408 260C     		.2byte	0xc26
 7491 140a 4C080000 		.4byte	0x84c
 7492 140e 4C0D0000 		.4byte	.LLST91
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 239


 7493 1412 1E       		.uleb128 0x1e
 7494 1413 0E000000 		.4byte	.LBB27
 7495 1417 24000000 		.4byte	.LBE27-.LBB27
 7496 141b 30140000 		.4byte	0x1430
 7497 141f 15       		.uleb128 0x15
 7498 1420 15010000 		.4byte	.LASF34
 7499 1424 01       		.byte	0x1
 7500 1425 380C     		.2byte	0xc38
 7501 1427 1B070000 		.4byte	0x71b
 7502 142b 6D0D0000 		.4byte	.LLST92
 7503 142f 00       		.byte	0
 7504 1430 19       		.uleb128 0x19
 7505 1431 3A000000 		.4byte	.LVL297
 7506 1435 B7070000 		.4byte	0x7b7
 7507 1439 1A       		.uleb128 0x1a
 7508 143a 01       		.uleb128 0x1
 7509 143b 50       		.byte	0x50
 7510 143c 03       		.uleb128 0x3
 7511 143d F3       		.byte	0xf3
 7512 143e 01       		.uleb128 0x1
 7513 143f 52       		.byte	0x52
 7514 1440 1A       		.uleb128 0x1a
 7515 1441 01       		.uleb128 0x1
 7516 1442 51       		.byte	0x51
 7517 1443 01       		.uleb128 0x1
 7518 1444 31       		.byte	0x31
 7519 1445 00       		.byte	0
 7520 1446 00       		.byte	0
 7521 1447 21       		.uleb128 0x21
 7522 1448 79060000 		.4byte	.LASF144
 7523 144c 01       		.byte	0x1
 7524 144d 610C     		.2byte	0xc61
 7525 144f 2A010000 		.4byte	0x12a
 7526 1453 00000000 		.4byte	.LFB60
 7527 1457 E0000000 		.4byte	.LFE60-.LFB60
 7528 145b 01       		.uleb128 0x1
 7529 145c 9C       		.byte	0x9c
 7530 145d 06150000 		.4byte	0x1506
 7531 1461 14       		.uleb128 0x14
 7532 1462 F7000000 		.4byte	.LASF142
 7533 1466 01       		.byte	0x1
 7534 1467 610C     		.2byte	0xc61
 7535 1469 11150000 		.4byte	0x1511
 7536 146d 800D0000 		.4byte	.LLST93
 7537 1471 15       		.uleb128 0x15
 7538 1472 D8020000 		.4byte	.LASF145
 7539 1476 01       		.byte	0x1
 7540 1477 630C     		.2byte	0xc63
 7541 1479 C6040000 		.4byte	0x4c6
 7542 147d A10D0000 		.4byte	.LLST94
 7543 1481 15       		.uleb128 0x15
 7544 1482 AD0B0000 		.4byte	.LASF69
 7545 1486 01       		.byte	0x1
 7546 1487 640C     		.2byte	0xc64
 7547 1489 2A010000 		.4byte	0x12a
 7548 148d B40D0000 		.4byte	.LLST95
 7549 1491 1E       		.uleb128 0x1e
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 240


 7550 1492 06000000 		.4byte	.LBB28
 7551 1496 26000000 		.4byte	.LBE28-.LBB28
 7552 149a AF140000 		.4byte	0x14af
 7553 149e 15       		.uleb128 0x15
 7554 149f 2E0F0000 		.4byte	.LASF121
 7555 14a3 01       		.byte	0x1
 7556 14a4 750C     		.2byte	0xc75
 7557 14a6 A00F0000 		.4byte	0xfa0
 7558 14aa D30D0000 		.4byte	.LLST96
 7559 14ae 00       		.byte	0
 7560 14af 1E       		.uleb128 0x1e
 7561 14b0 34000000 		.4byte	.LBB29
 7562 14b4 24000000 		.4byte	.LBE29-.LBB29
 7563 14b8 CD140000 		.4byte	0x14cd
 7564 14bc 15       		.uleb128 0x15
 7565 14bd 2E0F0000 		.4byte	.LASF121
 7566 14c1 01       		.byte	0x1
 7567 14c2 790C     		.2byte	0xc79
 7568 14c4 A00F0000 		.4byte	0xfa0
 7569 14c8 E60D0000 		.4byte	.LLST97
 7570 14cc 00       		.byte	0
 7571 14cd 1E       		.uleb128 0x1e
 7572 14ce 66000000 		.4byte	.LBB30
 7573 14d2 3A000000 		.4byte	.LBE30-.LBB30
 7574 14d6 EB140000 		.4byte	0x14eb
 7575 14da 15       		.uleb128 0x15
 7576 14db 15010000 		.4byte	.LASF34
 7577 14df 01       		.byte	0x1
 7578 14e0 7A0C     		.2byte	0xc7a
 7579 14e2 1B070000 		.4byte	0x71b
 7580 14e6 F90D0000 		.4byte	.LLST98
 7581 14ea 00       		.byte	0
 7582 14eb 1F       		.uleb128 0x1f
 7583 14ec A2000000 		.4byte	.LBB31
 7584 14f0 1C000000 		.4byte	.LBE31-.LBB31
 7585 14f4 15       		.uleb128 0x15
 7586 14f5 15010000 		.4byte	.LASF34
 7587 14f9 01       		.byte	0x1
 7588 14fa 8E0C     		.2byte	0xc8e
 7589 14fc 1B070000 		.4byte	0x71b
 7590 1500 0C0E0000 		.4byte	.LLST99
 7591 1504 00       		.byte	0
 7592 1505 00       		.byte	0
 7593 1506 06       		.uleb128 0x6
 7594 1507 04       		.byte	0x4
 7595 1508 0C150000 		.4byte	0x150c
 7596 150c 07       		.uleb128 0x7
 7597 150d 29020000 		.4byte	0x229
 7598 1511 07       		.uleb128 0x7
 7599 1512 06150000 		.4byte	0x1506
 7600 1516 22       		.uleb128 0x22
 7601 1517 31060000 		.4byte	.LASF146
 7602 151b 01       		.byte	0x1
 7603 151c A50C     		.2byte	0xca5
 7604 151e 00000000 		.4byte	.LFB61
 7605 1522 B8000000 		.4byte	.LFE61-.LFB61
 7606 1526 01       		.uleb128 0x1
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 241


 7607 1527 9C       		.byte	0x9c
 7608 1528 B3150000 		.4byte	0x15b3
 7609 152c 14       		.uleb128 0x14
 7610 152d 350F0000 		.4byte	.LASF147
 7611 1531 01       		.byte	0x1
 7612 1532 A50C     		.2byte	0xca5
 7613 1534 23020000 		.4byte	0x223
 7614 1538 1F0E0000 		.4byte	.LLST100
 7615 153c 14       		.uleb128 0x14
 7616 153d 9F0A0000 		.4byte	.LASF26
 7617 1541 01       		.byte	0x1
 7618 1542 A60C     		.2byte	0xca6
 7619 1544 4C080000 		.4byte	0x84c
 7620 1548 400E0000 		.4byte	.LLST101
 7621 154c 15       		.uleb128 0x15
 7622 154d D8020000 		.4byte	.LASF145
 7623 1551 01       		.byte	0x1
 7624 1552 A80C     		.2byte	0xca8
 7625 1554 C6040000 		.4byte	0x4c6
 7626 1558 610E0000 		.4byte	.LLST102
 7627 155c 1E       		.uleb128 0x1e
 7628 155d 0C000000 		.4byte	.LBB32
 7629 1561 22000000 		.4byte	.LBE32-.LBB32
 7630 1565 7A150000 		.4byte	0x157a
 7631 1569 15       		.uleb128 0x15
 7632 156a 2E0F0000 		.4byte	.LASF121
 7633 156e 01       		.byte	0x1
 7634 156f B50C     		.2byte	0xcb5
 7635 1571 A00F0000 		.4byte	0xfa0
 7636 1575 740E0000 		.4byte	.LLST103
 7637 1579 00       		.byte	0
 7638 157a 1E       		.uleb128 0x1e
 7639 157b 2E000000 		.4byte	.LBB33
 7640 157f 24000000 		.4byte	.LBE33-.LBB33
 7641 1583 98150000 		.4byte	0x1598
 7642 1587 15       		.uleb128 0x15
 7643 1588 2E0F0000 		.4byte	.LASF121
 7644 158c 01       		.byte	0x1
 7645 158d C80C     		.2byte	0xcc8
 7646 158f A00F0000 		.4byte	0xfa0
 7647 1593 870E0000 		.4byte	.LLST104
 7648 1597 00       		.byte	0
 7649 1598 1F       		.uleb128 0x1f
 7650 1599 60000000 		.4byte	.LBB34
 7651 159d 3A000000 		.4byte	.LBE34-.LBB34
 7652 15a1 15       		.uleb128 0x15
 7653 15a2 15010000 		.4byte	.LASF34
 7654 15a6 01       		.byte	0x1
 7655 15a7 C90C     		.2byte	0xcc9
 7656 15a9 1B070000 		.4byte	0x71b
 7657 15ad 9A0E0000 		.4byte	.LLST105
 7658 15b1 00       		.byte	0
 7659 15b2 00       		.byte	0
 7660 15b3 22       		.uleb128 0x22
 7661 15b4 9F010000 		.4byte	.LASF148
 7662 15b8 01       		.byte	0x1
 7663 15b9 D60C     		.2byte	0xcd6
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 242


 7664 15bb 00000000 		.4byte	.LFB62
 7665 15bf 1C000000 		.4byte	.LFE62-.LFB62
 7666 15c3 01       		.uleb128 0x1
 7667 15c4 9C       		.byte	0x9c
 7668 15c5 EC150000 		.4byte	0x15ec
 7669 15c9 14       		.uleb128 0x14
 7670 15ca B7080000 		.4byte	.LASF149
 7671 15ce 01       		.byte	0x1
 7672 15cf D60C     		.2byte	0xcd6
 7673 15d1 F2150000 		.4byte	0x15f2
 7674 15d5 AD0E0000 		.4byte	.LLST106
 7675 15d9 18       		.uleb128 0x18
 7676 15da 08000000 		.4byte	.LVL324
 7677 15de 6B200000 		.4byte	0x206b
 7678 15e2 18       		.uleb128 0x18
 7679 15e3 16000000 		.4byte	.LVL325
 7680 15e7 76200000 		.4byte	0x2076
 7681 15eb 00       		.byte	0
 7682 15ec 06       		.uleb128 0x6
 7683 15ed 04       		.byte	0x4
 7684 15ee 2F030000 		.4byte	0x32f
 7685 15f2 07       		.uleb128 0x7
 7686 15f3 EC150000 		.4byte	0x15ec
 7687 15f7 22       		.uleb128 0x22
 7688 15f8 FA080000 		.4byte	.LASF150
 7689 15fc 01       		.byte	0x1
 7690 15fd E20C     		.2byte	0xce2
 7691 15ff 00000000 		.4byte	.LFB63
 7692 1603 10000000 		.4byte	.LFE63-.LFB63
 7693 1607 01       		.uleb128 0x1
 7694 1608 9C       		.byte	0x9c
 7695 1609 1C160000 		.4byte	0x161c
 7696 160d 1B       		.uleb128 0x1b
 7697 160e B7080000 		.4byte	.LASF149
 7698 1612 01       		.byte	0x1
 7699 1613 E20C     		.2byte	0xce2
 7700 1615 F2150000 		.4byte	0x15f2
 7701 1619 01       		.uleb128 0x1
 7702 161a 50       		.byte	0x50
 7703 161b 00       		.byte	0
 7704 161c 21       		.uleb128 0x21
 7705 161d 4A0B0000 		.4byte	.LASF151
 7706 1621 01       		.byte	0x1
 7707 1622 EA0C     		.2byte	0xcea
 7708 1624 2A010000 		.4byte	0x12a
 7709 1628 00000000 		.4byte	.LFB64
 7710 162c 58000000 		.4byte	.LFE64-.LFB64
 7711 1630 01       		.uleb128 0x1
 7712 1631 9C       		.byte	0x9c
 7713 1632 B7160000 		.4byte	0x16b7
 7714 1636 14       		.uleb128 0x14
 7715 1637 B7080000 		.4byte	.LASF149
 7716 163b 01       		.byte	0x1
 7717 163c EA0C     		.2byte	0xcea
 7718 163e F2150000 		.4byte	0x15f2
 7719 1642 D90E0000 		.4byte	.LLST107
 7720 1646 14       		.uleb128 0x14
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 243


 7721 1647 E60C0000 		.4byte	.LASF152
 7722 164b 01       		.byte	0x1
 7723 164c EB0C     		.2byte	0xceb
 7724 164e 3A110000 		.4byte	0x113a
 7725 1652 500F0000 		.4byte	.LLST108
 7726 1656 15       		.uleb128 0x15
 7727 1657 AD0B0000 		.4byte	.LASF69
 7728 165b 01       		.byte	0x1
 7729 165c ED0C     		.2byte	0xced
 7730 165e 2A010000 		.4byte	0x12a
 7731 1662 7C0F0000 		.4byte	.LLST109
 7732 1666 1E       		.uleb128 0x1e
 7733 1667 0A000000 		.4byte	.LBB35
 7734 166b 40000000 		.4byte	.LBE35-.LBB35
 7735 166f A4160000 		.4byte	0x16a4
 7736 1673 15       		.uleb128 0x15
 7737 1674 8F050000 		.4byte	.LASF93
 7738 1678 01       		.byte	0x1
 7739 1679 F50C     		.2byte	0xcf5
 7740 167b 4C080000 		.4byte	0x84c
 7741 167f BE0F0000 		.4byte	.LLST110
 7742 1683 15       		.uleb128 0x15
 7743 1684 06030000 		.4byte	.LASF153
 7744 1688 01       		.byte	0x1
 7745 1689 F60C     		.2byte	0xcf6
 7746 168b 4C080000 		.4byte	0x84c
 7747 168f DC0F0000 		.4byte	.LLST111
 7748 1693 19       		.uleb128 0x19
 7749 1694 3C000000 		.4byte	.LVL336
 7750 1698 F7150000 		.4byte	0x15f7
 7751 169c 1A       		.uleb128 0x1a
 7752 169d 01       		.uleb128 0x1
 7753 169e 50       		.byte	0x50
 7754 169f 02       		.uleb128 0x2
 7755 16a0 74       		.byte	0x74
 7756 16a1 00       		.sleb128 0
 7757 16a2 00       		.byte	0
 7758 16a3 00       		.byte	0
 7759 16a4 18       		.uleb128 0x18
 7760 16a5 0A000000 		.4byte	.LVL329
 7761 16a9 6B200000 		.4byte	0x206b
 7762 16ad 18       		.uleb128 0x18
 7763 16ae 4E000000 		.4byte	.LVL343
 7764 16b2 76200000 		.4byte	0x2076
 7765 16b6 00       		.byte	0
 7766 16b7 23       		.uleb128 0x23
 7767 16b8 BE0B0000 		.4byte	.LASF155
 7768 16bc 01       		.byte	0x1
 7769 16bd 2B0D     		.2byte	0xd2b
 7770 16bf 00000000 		.4byte	.LFB65
 7771 16c3 0C000000 		.4byte	.LFE65-.LFB65
 7772 16c7 01       		.uleb128 0x1
 7773 16c8 9C       		.byte	0x9c
 7774 16c9 21       		.uleb128 0x21
 7775 16ca 6D040000 		.4byte	.LASF156
 7776 16ce 01       		.byte	0x1
 7777 16cf 4E0F     		.2byte	0xf4e
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 244


 7778 16d1 35010000 		.4byte	0x135
 7779 16d5 00000000 		.4byte	.LFB70
 7780 16d9 18000000 		.4byte	.LFE70-.LFB70
 7781 16dd 01       		.uleb128 0x1
 7782 16de 9C       		.byte	0x9c
 7783 16df 2B170000 		.4byte	0x172b
 7784 16e3 14       		.uleb128 0x14
 7785 16e4 AB090000 		.4byte	.LASF73
 7786 16e8 01       		.byte	0x1
 7787 16e9 4E0F     		.2byte	0xf4e
 7788 16eb 34020000 		.4byte	0x234
 7789 16ef 0A100000 		.4byte	.LLST112
 7790 16f3 15       		.uleb128 0x15
 7791 16f4 A40E0000 		.4byte	.LASF70
 7792 16f8 01       		.byte	0x1
 7793 16f9 500F     		.2byte	0xf50
 7794 16fb C6040000 		.4byte	0x4c6
 7795 16ff 1D100000 		.4byte	.LLST113
 7796 1703 15       		.uleb128 0x15
 7797 1704 F60B0000 		.4byte	.LASF157
 7798 1708 01       		.byte	0x1
 7799 1709 510F     		.2byte	0xf51
 7800 170b 4B010000 		.4byte	0x14b
 7801 170f 30100000 		.4byte	.LLST114
 7802 1713 24       		.uleb128 0x24
 7803 1714 4E020000 		.4byte	.LASF98
 7804 1718 01       		.byte	0x1
 7805 1719 520F     		.2byte	0xf52
 7806 171b 35010000 		.4byte	0x135
 7807 171f 01       		.uleb128 0x1
 7808 1720 50       		.byte	0x50
 7809 1721 18       		.uleb128 0x18
 7810 1722 10000000 		.4byte	.LVL349
 7811 1726 2E040000 		.4byte	0x42e
 7812 172a 00       		.byte	0
 7813 172b 21       		.uleb128 0x21
 7814 172c B20D0000 		.4byte	.LASF158
 7815 1730 01       		.byte	0x1
 7816 1731 B60F     		.2byte	0xfb6
 7817 1733 34020000 		.4byte	0x234
 7818 1737 00000000 		.4byte	.LFB73
 7819 173b 0C000000 		.4byte	.LFE73-.LFB73
 7820 173f 01       		.uleb128 0x1
 7821 1740 9C       		.byte	0x9c
 7822 1741 54170000 		.4byte	0x1754
 7823 1745 24       		.uleb128 0x24
 7824 1746 AD0B0000 		.4byte	.LASF69
 7825 174a 01       		.byte	0x1
 7826 174b B80F     		.2byte	0xfb8
 7827 174d 34020000 		.4byte	0x234
 7828 1751 01       		.uleb128 0x1
 7829 1752 50       		.byte	0x50
 7830 1753 00       		.byte	0
 7831 1754 21       		.uleb128 0x21
 7832 1755 E10B0000 		.4byte	.LASF159
 7833 1759 01       		.byte	0x1
 7834 175a E30F     		.2byte	0xfe3
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 245


 7835 175c 2A010000 		.4byte	0x12a
 7836 1760 00000000 		.4byte	.LFB74
 7837 1764 BC000000 		.4byte	.LFE74-.LFB74
 7838 1768 01       		.uleb128 0x1
 7839 1769 9C       		.byte	0x9c
 7840 176a CD170000 		.4byte	0x17cd
 7841 176e 14       		.uleb128 0x14
 7842 176f E30E0000 		.4byte	.LASF160
 7843 1773 01       		.byte	0x1
 7844 1774 E30F     		.2byte	0xfe3
 7845 1776 19040000 		.4byte	0x419
 7846 177a 43100000 		.4byte	.LLST115
 7847 177e 15       		.uleb128 0x15
 7848 177f 040C0000 		.4byte	.LASF161
 7849 1783 01       		.byte	0x1
 7850 1784 E50F     		.2byte	0xfe5
 7851 1786 920C0000 		.4byte	0xc92
 7852 178a C7100000 		.4byte	.LLST116
 7853 178e 15       		.uleb128 0x15
 7854 178f AD0B0000 		.4byte	.LASF69
 7855 1793 01       		.byte	0x1
 7856 1794 E60F     		.2byte	0xfe6
 7857 1796 2A010000 		.4byte	0x12a
 7858 179a 4B110000 		.4byte	.LLST117
 7859 179e 1E       		.uleb128 0x1e
 7860 179f 50000000 		.4byte	.LBB36
 7861 17a3 3A000000 		.4byte	.LBE36-.LBB36
 7862 17a7 BC170000 		.4byte	0x17bc
 7863 17ab 15       		.uleb128 0x15
 7864 17ac 15010000 		.4byte	.LASF34
 7865 17b0 01       		.byte	0x1
 7866 17b1 1010     		.2byte	0x1010
 7867 17b3 1B070000 		.4byte	0x71b
 7868 17b7 6A110000 		.4byte	.LLST118
 7869 17bb 00       		.byte	0
 7870 17bc 19       		.uleb128 0x19
 7871 17bd 3E000000 		.4byte	.LVL354
 7872 17c1 8C200000 		.4byte	0x208c
 7873 17c5 1A       		.uleb128 0x1a
 7874 17c6 01       		.uleb128 0x1
 7875 17c7 50       		.byte	0x50
 7876 17c8 02       		.uleb128 0x2
 7877 17c9 75       		.byte	0x75
 7878 17ca 00       		.sleb128 0
 7879 17cb 00       		.byte	0
 7880 17cc 00       		.byte	0
 7881 17cd 21       		.uleb128 0x21
 7882 17ce 61060000 		.4byte	.LASF162
 7883 17d2 01       		.byte	0x1
 7884 17d3 3D10     		.2byte	0x103d
 7885 17d5 2A010000 		.4byte	0x12a
 7886 17d9 00000000 		.4byte	.LFB75
 7887 17dd 88000000 		.4byte	.LFE75-.LFB75
 7888 17e1 01       		.uleb128 0x1
 7889 17e2 9C       		.byte	0x9c
 7890 17e3 46180000 		.4byte	0x1846
 7891 17e7 14       		.uleb128 0x14
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 246


 7892 17e8 E30E0000 		.4byte	.LASF160
 7893 17ec 01       		.byte	0x1
 7894 17ed 3D10     		.2byte	0x103d
 7895 17ef 19040000 		.4byte	0x419
 7896 17f3 7D110000 		.4byte	.LLST119
 7897 17f7 15       		.uleb128 0x15
 7898 17f8 A40E0000 		.4byte	.LASF70
 7899 17fc 01       		.byte	0x1
 7900 17fd 3F10     		.2byte	0x103f
 7901 17ff 920C0000 		.4byte	0xc92
 7902 1803 EB110000 		.4byte	.LLST120
 7903 1807 15       		.uleb128 0x15
 7904 1808 AD0B0000 		.4byte	.LASF69
 7905 180c 01       		.byte	0x1
 7906 180d 4010     		.2byte	0x1040
 7907 180f 2A010000 		.4byte	0x12a
 7908 1813 59120000 		.4byte	.LLST121
 7909 1817 1E       		.uleb128 0x1e
 7910 1818 36000000 		.4byte	.LBB37
 7911 181c 3A000000 		.4byte	.LBE37-.LBB37
 7912 1820 35180000 		.4byte	0x1835
 7913 1824 15       		.uleb128 0x15
 7914 1825 15010000 		.4byte	.LASF34
 7915 1829 01       		.byte	0x1
 7916 182a 6A10     		.2byte	0x106a
 7917 182c 1B070000 		.4byte	0x71b
 7918 1830 90120000 		.4byte	.LLST122
 7919 1834 00       		.byte	0
 7920 1835 19       		.uleb128 0x19
 7921 1836 20000000 		.4byte	.LVL369
 7922 183a 8C200000 		.4byte	0x208c
 7923 183e 1A       		.uleb128 0x1a
 7924 183f 01       		.uleb128 0x1
 7925 1840 50       		.byte	0x50
 7926 1841 02       		.uleb128 0x2
 7927 1842 75       		.byte	0x75
 7928 1843 00       		.sleb128 0
 7929 1844 00       		.byte	0
 7930 1845 00       		.byte	0
 7931 1846 22       		.uleb128 0x22
 7932 1847 14040000 		.4byte	.LASF163
 7933 184b 01       		.byte	0x1
 7934 184c 8D10     		.2byte	0x108d
 7935 184e 00000000 		.4byte	.LFB76
 7936 1852 94000000 		.4byte	.LFE76-.LFB76
 7937 1856 01       		.uleb128 0x1
 7938 1857 9C       		.byte	0x9c
 7939 1858 E8180000 		.4byte	0x18e8
 7940 185c 14       		.uleb128 0x14
 7941 185d E30E0000 		.4byte	.LASF160
 7942 1861 01       		.byte	0x1
 7943 1862 8D10     		.2byte	0x108d
 7944 1864 19040000 		.4byte	0x419
 7945 1868 A3120000 		.4byte	.LLST123
 7946 186c 14       		.uleb128 0x14
 7947 186d 390A0000 		.4byte	.LASF164
 7948 1871 01       		.byte	0x1
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 247


 7949 1872 8E10     		.2byte	0x108e
 7950 1874 35010000 		.4byte	0x135
 7951 1878 CF120000 		.4byte	.LLST124
 7952 187c 15       		.uleb128 0x15
 7953 187d A40E0000 		.4byte	.LASF70
 7954 1881 01       		.byte	0x1
 7955 1882 9010     		.2byte	0x1090
 7956 1884 920C0000 		.4byte	0xc92
 7957 1888 F0120000 		.4byte	.LLST125
 7958 188c 15       		.uleb128 0x15
 7959 188d 2C0D0000 		.4byte	.LASF105
 7960 1891 01       		.byte	0x1
 7961 1892 9110     		.2byte	0x1091
 7962 1894 35010000 		.4byte	0x135
 7963 1898 1C130000 		.4byte	.LLST126
 7964 189c 15       		.uleb128 0x15
 7965 189d EA090000 		.4byte	.LASF165
 7966 18a1 01       		.byte	0x1
 7967 18a2 9110     		.2byte	0x1091
 7968 18a4 35010000 		.4byte	0x135
 7969 18a8 2F130000 		.4byte	.LLST127
 7970 18ac 25       		.uleb128 0x25
 7971 18ad 77000000 		.4byte	.LASF166
 7972 18b1 01       		.byte	0x1
 7973 18b2 9210     		.2byte	0x1092
 7974 18b4 E8180000 		.4byte	0x18e8
 7975 18b8 01       		.byte	0x1
 7976 18b9 1E       		.uleb128 0x1e
 7977 18ba 50000000 		.4byte	.LBB38
 7978 18be 3A000000 		.4byte	.LBE38-.LBB38
 7979 18c2 D7180000 		.4byte	0x18d7
 7980 18c6 15       		.uleb128 0x15
 7981 18c7 15010000 		.4byte	.LASF34
 7982 18cb 01       		.byte	0x1
 7983 18cc DB10     		.2byte	0x10db
 7984 18ce 1B070000 		.4byte	0x71b
 7985 18d2 5A130000 		.4byte	.LLST128
 7986 18d6 00       		.byte	0
 7987 18d7 19       		.uleb128 0x19
 7988 18d8 42000000 		.4byte	.LVL388
 7989 18dc 8C200000 		.4byte	0x208c
 7990 18e0 1A       		.uleb128 0x1a
 7991 18e1 01       		.uleb128 0x1
 7992 18e2 50       		.byte	0x50
 7993 18e3 02       		.uleb128 0x2
 7994 18e4 75       		.byte	0x75
 7995 18e5 00       		.sleb128 0
 7996 18e6 00       		.byte	0
 7997 18e7 00       		.byte	0
 7998 18e8 07       		.uleb128 0x7
 7999 18e9 35010000 		.4byte	0x135
 8000 18ed 21       		.uleb128 0x21
 8001 18ee 39090000 		.4byte	.LASF167
 8002 18f2 01       		.byte	0x1
 8003 18f3 3212     		.2byte	0x1232
 8004 18f5 40010000 		.4byte	0x140
 8005 18f9 00000000 		.4byte	.LFB77
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 248


 8006 18fd 18000000 		.4byte	.LFE77-.LFB77
 8007 1901 01       		.uleb128 0x1
 8008 1902 9C       		.byte	0x9c
 8009 1903 16190000 		.4byte	0x1916
 8010 1907 24       		.uleb128 0x24
 8011 1908 4E020000 		.4byte	.LASF98
 8012 190c 01       		.byte	0x1
 8013 190d 3412     		.2byte	0x1234
 8014 190f 40010000 		.4byte	0x140
 8015 1913 01       		.uleb128 0x1
 8016 1914 50       		.byte	0x50
 8017 1915 00       		.byte	0
 8018 1916 26       		.uleb128 0x26
 8019 1917 03060000 		.4byte	.LASF169
 8020 191b 01       		.byte	0x1
 8021 191c 4212     		.2byte	0x1242
 8022 191e 34020000 		.4byte	0x234
 8023 1922 00000000 		.4byte	.LFB78
 8024 1926 1C000000 		.4byte	.LFE78-.LFB78
 8025 192a 01       		.uleb128 0x1
 8026 192b 9C       		.byte	0x9c
 8027 192c 21       		.uleb128 0x21
 8028 192d 1D070000 		.4byte	.LASF170
 8029 1931 01       		.byte	0x1
 8030 1932 5312     		.2byte	0x1253
 8031 1934 D5000000 		.4byte	0xd5
 8032 1938 00000000 		.4byte	.LFB79
 8033 193c 8C000000 		.4byte	.LFE79-.LFB79
 8034 1940 01       		.uleb128 0x1
 8035 1941 9C       		.byte	0x9c
 8036 1942 CD190000 		.4byte	0x19cd
 8037 1946 14       		.uleb128 0x14
 8038 1947 D80C0000 		.4byte	.LASF171
 8039 194b 01       		.byte	0x1
 8040 194c 5312     		.2byte	0x1253
 8041 194e 35010000 		.4byte	0x135
 8042 1952 6D130000 		.4byte	.LLST129
 8043 1956 14       		.uleb128 0x14
 8044 1957 F4020000 		.4byte	.LASF172
 8045 195b 01       		.byte	0x1
 8046 195c 5412     		.2byte	0x1254
 8047 195e 2A010000 		.4byte	0x12a
 8048 1962 99130000 		.4byte	.LLST130
 8049 1966 14       		.uleb128 0x14
 8050 1967 580D0000 		.4byte	.LASF90
 8051 196b 01       		.byte	0x1
 8052 196c 5512     		.2byte	0x1255
 8053 196e 40010000 		.4byte	0x140
 8054 1972 C5130000 		.4byte	.LLST131
 8055 1976 15       		.uleb128 0x15
 8056 1977 F4070000 		.4byte	.LASF173
 8057 197b 01       		.byte	0x1
 8058 197c 5712     		.2byte	0x1257
 8059 197e D5000000 		.4byte	0xd5
 8060 1982 F1130000 		.4byte	.LLST132
 8061 1986 18       		.uleb128 0x18
 8062 1987 0C000000 		.4byte	.LVL394
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 249


 8063 198b 6B200000 		.4byte	0x206b
 8064 198f 1D       		.uleb128 0x1d
 8065 1990 34000000 		.4byte	.LVL395
 8066 1994 B7070000 		.4byte	0x7b7
 8067 1998 A8190000 		.4byte	0x19a8
 8068 199c 1A       		.uleb128 0x1a
 8069 199d 01       		.uleb128 0x1
 8070 199e 50       		.byte	0x50
 8071 199f 02       		.uleb128 0x2
 8072 19a0 76       		.byte	0x76
 8073 19a1 00       		.sleb128 0
 8074 19a2 1A       		.uleb128 0x1a
 8075 19a3 01       		.uleb128 0x1
 8076 19a4 51       		.byte	0x51
 8077 19a5 01       		.uleb128 0x1
 8078 19a6 31       		.byte	0x31
 8079 19a7 00       		.byte	0
 8080 19a8 18       		.uleb128 0x18
 8081 19a9 38000000 		.4byte	.LVL396
 8082 19ad 81200000 		.4byte	0x2081
 8083 19b1 18       		.uleb128 0x18
 8084 19b2 3C000000 		.4byte	.LVL397
 8085 19b6 76200000 		.4byte	0x2076
 8086 19ba 18       		.uleb128 0x18
 8087 19bb 40000000 		.4byte	.LVL398
 8088 19bf 6B200000 		.4byte	0x206b
 8089 19c3 18       		.uleb128 0x18
 8090 19c4 82000000 		.4byte	.LVL401
 8091 19c8 76200000 		.4byte	0x2076
 8092 19cc 00       		.byte	0
 8093 19cd 21       		.uleb128 0x21
 8094 19ce D5060000 		.4byte	.LASF174
 8095 19d2 01       		.byte	0x1
 8096 19d3 9B12     		.2byte	0x129b
 8097 19d5 2A010000 		.4byte	0x12a
 8098 19d9 00000000 		.4byte	.LFB80
 8099 19dd A0000000 		.4byte	.LFE80-.LFB80
 8100 19e1 01       		.uleb128 0x1
 8101 19e2 9C       		.byte	0x9c
 8102 19e3 8E1A0000 		.4byte	0x1a8e
 8103 19e7 14       		.uleb128 0x14
 8104 19e8 D80C0000 		.4byte	.LASF171
 8105 19ec 01       		.byte	0x1
 8106 19ed 9B12     		.2byte	0x129b
 8107 19ef 35010000 		.4byte	0x135
 8108 19f3 0F140000 		.4byte	.LLST133
 8109 19f7 14       		.uleb128 0x14
 8110 19f8 70030000 		.4byte	.LASF175
 8111 19fc 01       		.byte	0x1
 8112 19fd 9C12     		.2byte	0x129c
 8113 19ff D5000000 		.4byte	0xd5
 8114 1a03 3B140000 		.4byte	.LLST134
 8115 1a07 14       		.uleb128 0x14
 8116 1a08 8A000000 		.4byte	.LASF176
 8117 1a0c 01       		.byte	0x1
 8118 1a0d 9D12     		.2byte	0x129d
 8119 1a0f D5000000 		.4byte	0xd5
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 250


 8120 1a13 67140000 		.4byte	.LLST135
 8121 1a17 14       		.uleb128 0x14
 8122 1a18 980B0000 		.4byte	.LASF177
 8123 1a1c 01       		.byte	0x1
 8124 1a1d 9E12     		.2byte	0x129e
 8125 1a1f 8E1A0000 		.4byte	0x1a8e
 8126 1a23 AC140000 		.4byte	.LLST136
 8127 1a27 1B       		.uleb128 0x1b
 8128 1a28 580D0000 		.4byte	.LASF90
 8129 1a2c 01       		.byte	0x1
 8130 1a2d 9F12     		.2byte	0x129f
 8131 1a2f 40010000 		.4byte	0x140
 8132 1a33 02       		.uleb128 0x2
 8133 1a34 91       		.byte	0x91
 8134 1a35 00       		.sleb128 0
 8135 1a36 15       		.uleb128 0x15
 8136 1a37 AD0B0000 		.4byte	.LASF69
 8137 1a3b 01       		.byte	0x1
 8138 1a3c A112     		.2byte	0x12a1
 8139 1a3e 2A010000 		.4byte	0x12a
 8140 1a42 D8140000 		.4byte	.LLST137
 8141 1a46 18       		.uleb128 0x18
 8142 1a47 0E000000 		.4byte	.LVL405
 8143 1a4b 6B200000 		.4byte	0x206b
 8144 1a4f 1D       		.uleb128 0x1d
 8145 1a50 44000000 		.4byte	.LVL406
 8146 1a54 B7070000 		.4byte	0x7b7
 8147 1a58 691A0000 		.4byte	0x1a69
 8148 1a5c 1A       		.uleb128 0x1a
 8149 1a5d 01       		.uleb128 0x1
 8150 1a5e 50       		.byte	0x50
 8151 1a5f 03       		.uleb128 0x3
 8152 1a60 91       		.byte	0x91
 8153 1a61 00       		.sleb128 0
 8154 1a62 06       		.byte	0x6
 8155 1a63 1A       		.uleb128 0x1a
 8156 1a64 01       		.uleb128 0x1
 8157 1a65 51       		.byte	0x51
 8158 1a66 01       		.uleb128 0x1
 8159 1a67 31       		.byte	0x31
 8160 1a68 00       		.byte	0
 8161 1a69 18       		.uleb128 0x18
 8162 1a6a 48000000 		.4byte	.LVL407
 8163 1a6e 81200000 		.4byte	0x2081
 8164 1a72 18       		.uleb128 0x18
 8165 1a73 4C000000 		.4byte	.LVL408
 8166 1a77 76200000 		.4byte	0x2076
 8167 1a7b 18       		.uleb128 0x18
 8168 1a7c 50000000 		.4byte	.LVL409
 8169 1a80 6B200000 		.4byte	0x206b
 8170 1a84 18       		.uleb128 0x18
 8171 1a85 96000000 		.4byte	.LVL415
 8172 1a89 76200000 		.4byte	0x2076
 8173 1a8d 00       		.byte	0
 8174 1a8e 06       		.uleb128 0x6
 8175 1a8f 04       		.byte	0x4
 8176 1a90 D5000000 		.4byte	0xd5
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 251


 8177 1a94 21       		.uleb128 0x21
 8178 1a95 BF020000 		.4byte	.LASF178
 8179 1a99 01       		.byte	0x1
 8180 1a9a F112     		.2byte	0x12f1
 8181 1a9c 2A010000 		.4byte	0x12a
 8182 1aa0 00000000 		.4byte	.LFB81
 8183 1aa4 14010000 		.4byte	.LFE81-.LFB81
 8184 1aa8 01       		.uleb128 0x1
 8185 1aa9 9C       		.byte	0x9c
 8186 1aaa 851B0000 		.4byte	0x1b85
 8187 1aae 14       		.uleb128 0x14
 8188 1aaf 9D090000 		.4byte	.LASF179
 8189 1ab3 01       		.byte	0x1
 8190 1ab4 F112     		.2byte	0x12f1
 8191 1ab6 34020000 		.4byte	0x234
 8192 1aba 02150000 		.4byte	.LLST138
 8193 1abe 14       		.uleb128 0x14
 8194 1abf 480D0000 		.4byte	.LASF180
 8195 1ac3 01       		.byte	0x1
 8196 1ac4 F212     		.2byte	0x12f2
 8197 1ac6 35010000 		.4byte	0x135
 8198 1aca 2E150000 		.4byte	.LLST139
 8199 1ace 14       		.uleb128 0x14
 8200 1acf 330B0000 		.4byte	.LASF181
 8201 1ad3 01       		.byte	0x1
 8202 1ad4 F312     		.2byte	0x12f3
 8203 1ad6 D5000000 		.4byte	0xd5
 8204 1ada 0B160000 		.4byte	.LLST140
 8205 1ade 14       		.uleb128 0x14
 8206 1adf 31090000 		.4byte	.LASF182
 8207 1ae3 01       		.byte	0x1
 8208 1ae4 F412     		.2byte	0x12f4
 8209 1ae6 FF020000 		.4byte	0x2ff
 8210 1aea 2A160000 		.4byte	.LLST141
 8211 1aee 1B       		.uleb128 0x1b
 8212 1aef 93080000 		.4byte	.LASF183
 8213 1af3 01       		.byte	0x1
 8214 1af4 F512     		.2byte	0x12f5
 8215 1af6 8E1A0000 		.4byte	0x1a8e
 8216 1afa 02       		.uleb128 0x2
 8217 1afb 91       		.byte	0x91
 8218 1afc 00       		.sleb128 0
 8219 1afd 15       		.uleb128 0x15
 8220 1afe A40E0000 		.4byte	.LASF70
 8221 1b02 01       		.byte	0x1
 8222 1b03 F712     		.2byte	0x12f7
 8223 1b05 C6040000 		.4byte	0x4c6
 8224 1b09 4B160000 		.4byte	.LLST142
 8225 1b0d 15       		.uleb128 0x15
 8226 1b0e AD0B0000 		.4byte	.LASF69
 8227 1b12 01       		.byte	0x1
 8228 1b13 F812     		.2byte	0x12f8
 8229 1b15 2A010000 		.4byte	0x12a
 8230 1b19 77160000 		.4byte	.LLST143
 8231 1b1d 15       		.uleb128 0x15
 8232 1b1e 89010000 		.4byte	.LASF184
 8233 1b22 01       		.byte	0x1
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 252


 8234 1b23 F912     		.2byte	0x12f9
 8235 1b25 BF000000 		.4byte	0xbf
 8236 1b29 A1160000 		.4byte	.LLST144
 8237 1b2d 1E       		.uleb128 0x1e
 8238 1b2e 86000000 		.4byte	.LBB39
 8239 1b32 24000000 		.4byte	.LBE39-.LBB39
 8240 1b36 4B1B0000 		.4byte	0x1b4b
 8241 1b3a 15       		.uleb128 0x15
 8242 1b3b 2E0F0000 		.4byte	.LASF121
 8243 1b3f 01       		.byte	0x1
 8244 1b40 3C13     		.2byte	0x133c
 8245 1b42 A00F0000 		.4byte	0xfa0
 8246 1b46 B4160000 		.4byte	.LLST145
 8247 1b4a 00       		.byte	0
 8248 1b4b 1E       		.uleb128 0x1e
 8249 1b4c B8000000 		.4byte	.LBB40
 8250 1b50 38000000 		.4byte	.LBE40-.LBB40
 8251 1b54 691B0000 		.4byte	0x1b69
 8252 1b58 15       		.uleb128 0x15
 8253 1b59 15010000 		.4byte	.LASF34
 8254 1b5d 01       		.byte	0x1
 8255 1b5e 3D13     		.2byte	0x133d
 8256 1b60 1B070000 		.4byte	0x71b
 8257 1b64 C7160000 		.4byte	.LLST146
 8258 1b68 00       		.byte	0
 8259 1b69 18       		.uleb128 0x18
 8260 1b6a 12000000 		.4byte	.LVL421
 8261 1b6e 6B200000 		.4byte	0x206b
 8262 1b72 18       		.uleb128 0x18
 8263 1b73 00010000 		.4byte	.LVL443
 8264 1b77 81200000 		.4byte	0x2081
 8265 1b7b 18       		.uleb128 0x18
 8266 1b7c 04010000 		.4byte	.LVL444
 8267 1b80 76200000 		.4byte	0x2076
 8268 1b84 00       		.byte	0
 8269 1b85 21       		.uleb128 0x21
 8270 1b86 B4010000 		.4byte	.LASF185
 8271 1b8a 01       		.byte	0x1
 8272 1b8b 6C13     		.2byte	0x136c
 8273 1b8d 2A010000 		.4byte	0x12a
 8274 1b91 00000000 		.4byte	.LFB82
 8275 1b95 50010000 		.4byte	.LFE82-.LFB82
 8276 1b99 01       		.uleb128 0x1
 8277 1b9a 9C       		.byte	0x9c
 8278 1b9b AA1C0000 		.4byte	0x1caa
 8279 1b9f 14       		.uleb128 0x14
 8280 1ba0 9D090000 		.4byte	.LASF179
 8281 1ba4 01       		.byte	0x1
 8282 1ba5 6C13     		.2byte	0x136c
 8283 1ba7 34020000 		.4byte	0x234
 8284 1bab DA160000 		.4byte	.LLST147
 8285 1baf 14       		.uleb128 0x14
 8286 1bb0 480D0000 		.4byte	.LASF180
 8287 1bb4 01       		.byte	0x1
 8288 1bb5 6D13     		.2byte	0x136d
 8289 1bb7 35010000 		.4byte	0x135
 8290 1bbb 06170000 		.4byte	.LLST148
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 253


 8291 1bbf 14       		.uleb128 0x14
 8292 1bc0 330B0000 		.4byte	.LASF181
 8293 1bc4 01       		.byte	0x1
 8294 1bc5 6E13     		.2byte	0x136e
 8295 1bc7 D5000000 		.4byte	0xd5
 8296 1bcb E3170000 		.4byte	.LLST149
 8297 1bcf 14       		.uleb128 0x14
 8298 1bd0 31090000 		.4byte	.LASF182
 8299 1bd4 01       		.byte	0x1
 8300 1bd5 6F13     		.2byte	0x136f
 8301 1bd7 FF020000 		.4byte	0x2ff
 8302 1bdb 02180000 		.4byte	.LLST150
 8303 1bdf 1B       		.uleb128 0x1b
 8304 1be0 93080000 		.4byte	.LASF183
 8305 1be4 01       		.byte	0x1
 8306 1be5 7013     		.2byte	0x1370
 8307 1be7 8E1A0000 		.4byte	0x1a8e
 8308 1beb 02       		.uleb128 0x2
 8309 1bec 91       		.byte	0x91
 8310 1bed 00       		.sleb128 0
 8311 1bee 1B       		.uleb128 0x1b
 8312 1bef B3000000 		.4byte	.LASF186
 8313 1bf3 01       		.byte	0x1
 8314 1bf4 7113     		.2byte	0x1371
 8315 1bf6 AA1C0000 		.4byte	0x1caa
 8316 1bfa 02       		.uleb128 0x2
 8317 1bfb 91       		.byte	0x91
 8318 1bfc 04       		.sleb128 4
 8319 1bfd 15       		.uleb128 0x15
 8320 1bfe A40E0000 		.4byte	.LASF70
 8321 1c02 01       		.byte	0x1
 8322 1c03 7313     		.2byte	0x1373
 8323 1c05 C6040000 		.4byte	0x4c6
 8324 1c09 23180000 		.4byte	.LLST151
 8325 1c0d 15       		.uleb128 0x15
 8326 1c0e 89010000 		.4byte	.LASF184
 8327 1c12 01       		.byte	0x1
 8328 1c13 7413     		.2byte	0x1374
 8329 1c15 BF000000 		.4byte	0xbf
 8330 1c19 4F180000 		.4byte	.LLST152
 8331 1c1d 15       		.uleb128 0x15
 8332 1c1e AD0B0000 		.4byte	.LASF69
 8333 1c22 01       		.byte	0x1
 8334 1c23 7513     		.2byte	0x1375
 8335 1c25 2A010000 		.4byte	0x12a
 8336 1c29 6D180000 		.4byte	.LLST153
 8337 1c2d 15       		.uleb128 0x15
 8338 1c2e 75020000 		.4byte	.LASF110
 8339 1c32 01       		.byte	0x1
 8340 1c33 7613     		.2byte	0x1376
 8341 1c35 35010000 		.4byte	0x135
 8342 1c39 97180000 		.4byte	.LLST154
 8343 1c3d 1E       		.uleb128 0x1e
 8344 1c3e 8E000000 		.4byte	.LBB41
 8345 1c42 24000000 		.4byte	.LBE41-.LBB41
 8346 1c46 5B1C0000 		.4byte	0x1c5b
 8347 1c4a 15       		.uleb128 0x15
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 254


 8348 1c4b 2E0F0000 		.4byte	.LASF121
 8349 1c4f 01       		.byte	0x1
 8350 1c50 CF13     		.2byte	0x13cf
 8351 1c52 A00F0000 		.4byte	0xfa0
 8352 1c56 AA180000 		.4byte	.LLST155
 8353 1c5a 00       		.byte	0
 8354 1c5b 1E       		.uleb128 0x1e
 8355 1c5c C0000000 		.4byte	.LBB42
 8356 1c60 3C000000 		.4byte	.LBE42-.LBB42
 8357 1c64 791C0000 		.4byte	0x1c79
 8358 1c68 15       		.uleb128 0x15
 8359 1c69 15010000 		.4byte	.LASF34
 8360 1c6d 01       		.byte	0x1
 8361 1c6e D013     		.2byte	0x13d0
 8362 1c70 1B070000 		.4byte	0x71b
 8363 1c74 BD180000 		.4byte	.LLST156
 8364 1c78 00       		.byte	0
 8365 1c79 1E       		.uleb128 0x1e
 8366 1c7a FE000000 		.4byte	.LBB43
 8367 1c7e 20000000 		.4byte	.LBE43-.LBB43
 8368 1c82 971C0000 		.4byte	0x1c97
 8369 1c86 15       		.uleb128 0x15
 8370 1c87 15010000 		.4byte	.LASF34
 8371 1c8b 01       		.byte	0x1
 8372 1c8c D613     		.2byte	0x13d6
 8373 1c8e 1B070000 		.4byte	0x71b
 8374 1c92 D0180000 		.4byte	.LLST157
 8375 1c96 00       		.byte	0
 8376 1c97 18       		.uleb128 0x18
 8377 1c98 12000000 		.4byte	.LVL449
 8378 1c9c C4200000 		.4byte	0x20c4
 8379 1ca0 18       		.uleb128 0x18
 8380 1ca1 40010000 		.4byte	.LVL474
 8381 1ca5 CF200000 		.4byte	0x20cf
 8382 1ca9 00       		.byte	0
 8383 1caa 06       		.uleb128 0x6
 8384 1cab 04       		.byte	0x4
 8385 1cac 2A010000 		.4byte	0x12a
 8386 1cb0 22       		.uleb128 0x22
 8387 1cb1 720C0000 		.4byte	.LASF187
 8388 1cb5 01       		.byte	0x1
 8389 1cb6 F713     		.2byte	0x13f7
 8390 1cb8 00000000 		.4byte	.LFB83
 8391 1cbc E4000000 		.4byte	.LFE83-.LFB83
 8392 1cc0 01       		.uleb128 0x1
 8393 1cc1 9C       		.byte	0x9c
 8394 1cc2 931D0000 		.4byte	0x1d93
 8395 1cc6 14       		.uleb128 0x14
 8396 1cc7 9D090000 		.4byte	.LASF179
 8397 1ccb 01       		.byte	0x1
 8398 1ccc F713     		.2byte	0x13f7
 8399 1cce 34020000 		.4byte	0x234
 8400 1cd2 E3180000 		.4byte	.LLST158
 8401 1cd6 14       		.uleb128 0x14
 8402 1cd7 480D0000 		.4byte	.LASF180
 8403 1cdb 01       		.byte	0x1
 8404 1cdc F813     		.2byte	0x13f8
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 255


 8405 1cde 35010000 		.4byte	0x135
 8406 1ce2 0F190000 		.4byte	.LLST159
 8407 1ce6 14       		.uleb128 0x14
 8408 1ce7 B3000000 		.4byte	.LASF186
 8409 1ceb 01       		.byte	0x1
 8410 1cec F913     		.2byte	0x13f9
 8411 1cee AA1C0000 		.4byte	0x1caa
 8412 1cf2 48190000 		.4byte	.LLST160
 8413 1cf6 15       		.uleb128 0x15
 8414 1cf7 A40E0000 		.4byte	.LASF70
 8415 1cfb 01       		.byte	0x1
 8416 1cfc FB13     		.2byte	0x13fb
 8417 1cfe C6040000 		.4byte	0x4c6
 8418 1d02 74190000 		.4byte	.LLST161
 8419 1d06 15       		.uleb128 0x15
 8420 1d07 89010000 		.4byte	.LASF184
 8421 1d0b 01       		.byte	0x1
 8422 1d0c FC13     		.2byte	0x13fc
 8423 1d0e BF000000 		.4byte	0xbf
 8424 1d12 A0190000 		.4byte	.LLST162
 8425 1d16 15       		.uleb128 0x15
 8426 1d17 75020000 		.4byte	.LASF110
 8427 1d1b 01       		.byte	0x1
 8428 1d1c FD13     		.2byte	0x13fd
 8429 1d1e 35010000 		.4byte	0x135
 8430 1d22 BE190000 		.4byte	.LLST163
 8431 1d26 1E       		.uleb128 0x1e
 8432 1d27 2C000000 		.4byte	.LBB44
 8433 1d2b 24000000 		.4byte	.LBE44-.LBB44
 8434 1d2f 441D0000 		.4byte	0x1d44
 8435 1d33 15       		.uleb128 0x15
 8436 1d34 2E0F0000 		.4byte	.LASF121
 8437 1d38 01       		.byte	0x1
 8438 1d39 2A14     		.2byte	0x142a
 8439 1d3b A00F0000 		.4byte	0xfa0
 8440 1d3f D1190000 		.4byte	.LLST164
 8441 1d43 00       		.byte	0
 8442 1d44 1E       		.uleb128 0x1e
 8443 1d45 5E000000 		.4byte	.LBB45
 8444 1d49 3C000000 		.4byte	.LBE45-.LBB45
 8445 1d4d 621D0000 		.4byte	0x1d62
 8446 1d51 15       		.uleb128 0x15
 8447 1d52 15010000 		.4byte	.LASF34
 8448 1d56 01       		.byte	0x1
 8449 1d57 2B14     		.2byte	0x142b
 8450 1d59 1B070000 		.4byte	0x71b
 8451 1d5d E4190000 		.4byte	.LLST165
 8452 1d61 00       		.byte	0
 8453 1d62 1E       		.uleb128 0x1e
 8454 1d63 9C000000 		.4byte	.LBB46
 8455 1d67 20000000 		.4byte	.LBE46-.LBB46
 8456 1d6b 801D0000 		.4byte	0x1d80
 8457 1d6f 15       		.uleb128 0x15
 8458 1d70 15010000 		.4byte	.LASF34
 8459 1d74 01       		.byte	0x1
 8460 1d75 3114     		.2byte	0x1431
 8461 1d77 1B070000 		.4byte	0x71b
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 256


 8462 1d7b F7190000 		.4byte	.LLST166
 8463 1d7f 00       		.byte	0
 8464 1d80 18       		.uleb128 0x18
 8465 1d81 0C000000 		.4byte	.LVL479
 8466 1d85 C4200000 		.4byte	0x20c4
 8467 1d89 18       		.uleb128 0x18
 8468 1d8a DA000000 		.4byte	.LVL491
 8469 1d8e CF200000 		.4byte	0x20cf
 8470 1d92 00       		.byte	0
 8471 1d93 21       		.uleb128 0x21
 8472 1d94 AA0E0000 		.4byte	.LASF188
 8473 1d98 01       		.byte	0x1
 8474 1d99 5014     		.2byte	0x1450
 8475 1d9b 2A010000 		.4byte	0x12a
 8476 1d9f 00000000 		.4byte	.LFB84
 8477 1da3 38000000 		.4byte	.LFE84-.LFB84
 8478 1da7 01       		.uleb128 0x1
 8479 1da8 9C       		.byte	0x9c
 8480 1da9 001E0000 		.4byte	0x1e00
 8481 1dad 14       		.uleb128 0x14
 8482 1dae AB090000 		.4byte	.LASF73
 8483 1db2 01       		.byte	0x1
 8484 1db3 5014     		.2byte	0x1450
 8485 1db5 34020000 		.4byte	0x234
 8486 1db9 0A1A0000 		.4byte	.LLST167
 8487 1dbd 14       		.uleb128 0x14
 8488 1dbe EC060000 		.4byte	.LASF189
 8489 1dc2 01       		.byte	0x1
 8490 1dc3 5114     		.2byte	0x1451
 8491 1dc5 35010000 		.4byte	0x135
 8492 1dc9 1D1A0000 		.4byte	.LLST168
 8493 1dcd 15       		.uleb128 0x15
 8494 1dce A40E0000 		.4byte	.LASF70
 8495 1dd2 01       		.byte	0x1
 8496 1dd3 5314     		.2byte	0x1453
 8497 1dd5 C6040000 		.4byte	0x4c6
 8498 1dd9 621A0000 		.4byte	.LLST169
 8499 1ddd 15       		.uleb128 0x15
 8500 1dde AD0B0000 		.4byte	.LASF69
 8501 1de2 01       		.byte	0x1
 8502 1de3 5414     		.2byte	0x1454
 8503 1de5 2A010000 		.4byte	0x12a
 8504 1de9 751A0000 		.4byte	.LLST170
 8505 1ded 18       		.uleb128 0x18
 8506 1dee 12000000 		.4byte	.LVL496
 8507 1df2 6B200000 		.4byte	0x206b
 8508 1df6 18       		.uleb128 0x18
 8509 1df7 2E000000 		.4byte	.LVL501
 8510 1dfb 76200000 		.4byte	0x2076
 8511 1dff 00       		.byte	0
 8512 1e00 21       		.uleb128 0x21
 8513 1e01 FD070000 		.4byte	.LASF190
 8514 1e05 01       		.byte	0x1
 8515 1e06 7214     		.2byte	0x1472
 8516 1e08 D5000000 		.4byte	0xd5
 8517 1e0c 00000000 		.4byte	.LFB85
 8518 1e10 30000000 		.4byte	.LFE85-.LFB85
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 257


 8519 1e14 01       		.uleb128 0x1
 8520 1e15 9C       		.byte	0x9c
 8521 1e16 7D1E0000 		.4byte	0x1e7d
 8522 1e1a 14       		.uleb128 0x14
 8523 1e1b AB090000 		.4byte	.LASF73
 8524 1e1f 01       		.byte	0x1
 8525 1e20 7214     		.2byte	0x1472
 8526 1e22 34020000 		.4byte	0x234
 8527 1e26 9F1A0000 		.4byte	.LLST171
 8528 1e2a 14       		.uleb128 0x14
 8529 1e2b EC060000 		.4byte	.LASF189
 8530 1e2f 01       		.byte	0x1
 8531 1e30 7314     		.2byte	0x1473
 8532 1e32 35010000 		.4byte	0x135
 8533 1e36 B21A0000 		.4byte	.LLST172
 8534 1e3a 14       		.uleb128 0x14
 8535 1e3b 33010000 		.4byte	.LASF191
 8536 1e3f 01       		.byte	0x1
 8537 1e40 7414     		.2byte	0x1474
 8538 1e42 D5000000 		.4byte	0xd5
 8539 1e46 DE1A0000 		.4byte	.LLST173
 8540 1e4a 15       		.uleb128 0x15
 8541 1e4b A40E0000 		.4byte	.LASF70
 8542 1e4f 01       		.byte	0x1
 8543 1e50 7614     		.2byte	0x1476
 8544 1e52 C6040000 		.4byte	0x4c6
 8545 1e56 0A1B0000 		.4byte	.LLST174
 8546 1e5a 15       		.uleb128 0x15
 8547 1e5b F4070000 		.4byte	.LASF173
 8548 1e5f 01       		.byte	0x1
 8549 1e60 7714     		.2byte	0x1477
 8550 1e62 D5000000 		.4byte	0xd5
 8551 1e66 1D1B0000 		.4byte	.LLST175
 8552 1e6a 18       		.uleb128 0x18
 8553 1e6b 14000000 		.4byte	.LVL506
 8554 1e6f 6B200000 		.4byte	0x206b
 8555 1e73 18       		.uleb128 0x18
 8556 1e74 26000000 		.4byte	.LVL508
 8557 1e78 76200000 		.4byte	0x2076
 8558 1e7c 00       		.byte	0
 8559 1e7d 08       		.uleb128 0x8
 8560 1e7e 29020000 		.4byte	0x229
 8561 1e82 8D1E0000 		.4byte	0x1e8d
 8562 1e86 09       		.uleb128 0x9
 8563 1e87 9E000000 		.4byte	0x9e
 8564 1e8b 04       		.byte	0x4
 8565 1e8c 00       		.byte	0
 8566 1e8d 24       		.uleb128 0x24
 8567 1e8e 77010000 		.4byte	.LASF192
 8568 1e92 01       		.byte	0x1
 8569 1e93 4F01     		.2byte	0x14f
 8570 1e95 7D1E0000 		.4byte	0x1e7d
 8571 1e99 05       		.uleb128 0x5
 8572 1e9a 03       		.byte	0x3
 8573 1e9b 30000000 		.4byte	pxReadyTasksLists
 8574 1e9f 24       		.uleb128 0x24
 8575 1ea0 DB010000 		.4byte	.LASF193
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 258


 8576 1ea4 01       		.byte	0x1
 8577 1ea5 5001     		.2byte	0x150
 8578 1ea7 29020000 		.4byte	0x229
 8579 1eab 05       		.uleb128 0x5
 8580 1eac 03       		.byte	0x3
 8581 1ead 94000000 		.4byte	xDelayedTaskList1
 8582 1eb1 24       		.uleb128 0x24
 8583 1eb2 ED010000 		.4byte	.LASF194
 8584 1eb6 01       		.byte	0x1
 8585 1eb7 5101     		.2byte	0x151
 8586 1eb9 29020000 		.4byte	0x229
 8587 1ebd 05       		.uleb128 0x5
 8588 1ebe 03       		.byte	0x3
 8589 1ebf A8000000 		.4byte	xDelayedTaskList2
 8590 1ec3 24       		.uleb128 0x24
 8591 1ec4 C20A0000 		.4byte	.LASF195
 8592 1ec8 01       		.byte	0x1
 8593 1ec9 5201     		.2byte	0x152
 8594 1ecb D51E0000 		.4byte	0x1ed5
 8595 1ecf 05       		.uleb128 0x5
 8596 1ed0 03       		.byte	0x3
 8597 1ed1 28000000 		.4byte	pxDelayedTaskList
 8598 1ed5 0A       		.uleb128 0xa
 8599 1ed6 9A0F0000 		.4byte	0xf9a
 8600 1eda 24       		.uleb128 0x24
 8601 1edb C8050000 		.4byte	.LASF196
 8602 1edf 01       		.byte	0x1
 8603 1ee0 5301     		.2byte	0x153
 8604 1ee2 D51E0000 		.4byte	0x1ed5
 8605 1ee6 05       		.uleb128 0x5
 8606 1ee7 03       		.byte	0x3
 8607 1ee8 D0000000 		.4byte	pxOverflowDelayedTaskList
 8608 1eec 24       		.uleb128 0x24
 8609 1eed 85030000 		.4byte	.LASF197
 8610 1ef1 01       		.byte	0x1
 8611 1ef2 5401     		.2byte	0x154
 8612 1ef4 29020000 		.4byte	0x229
 8613 1ef8 05       		.uleb128 0x5
 8614 1ef9 03       		.byte	0x3
 8615 1efa 14000000 		.4byte	xPendingReadyList
 8616 1efe 24       		.uleb128 0x24
 8617 1eff F0030000 		.4byte	.LASF198
 8618 1f03 01       		.byte	0x1
 8619 1f04 5801     		.2byte	0x158
 8620 1f06 29020000 		.4byte	0x229
 8621 1f0a 05       		.uleb128 0x5
 8622 1f0b 03       		.byte	0x3
 8623 1f0c BC000000 		.4byte	xTasksWaitingTermination
 8624 1f10 24       		.uleb128 0x24
 8625 1f11 41010000 		.4byte	.LASF199
 8626 1f15 01       		.byte	0x1
 8627 1f16 5901     		.2byte	0x159
 8628 1f18 1E020000 		.4byte	0x21e
 8629 1f1c 05       		.uleb128 0x5
 8630 1f1d 03       		.byte	0x3
 8631 1f1e E8000000 		.4byte	uxDeletedTasksWaitingCleanUp
 8632 1f22 24       		.uleb128 0x24
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 259


 8633 1f23 AE050000 		.4byte	.LASF200
 8634 1f27 01       		.byte	0x1
 8635 1f28 5F01     		.2byte	0x15f
 8636 1f2a 29020000 		.4byte	0x229
 8637 1f2e 05       		.uleb128 0x5
 8638 1f2f 03       		.byte	0x3
 8639 1f30 00000000 		.4byte	xSuspendedTaskList
 8640 1f34 24       		.uleb128 0x24
 8641 1f35 440E0000 		.4byte	.LASF201
 8642 1f39 01       		.byte	0x1
 8643 1f3a 6A01     		.2byte	0x16a
 8644 1f3c 1E020000 		.4byte	0x21e
 8645 1f40 05       		.uleb128 0x5
 8646 1f41 03       		.byte	0x3
 8647 1f42 D4000000 		.4byte	uxCurrentNumberOfTasks
 8648 1f46 24       		.uleb128 0x24
 8649 1f47 5A050000 		.4byte	.LASF202
 8650 1f4b 01       		.byte	0x1
 8651 1f4c 6B01     		.2byte	0x16b
 8652 1f4e 581F0000 		.4byte	0x1f58
 8653 1f52 05       		.uleb128 0x5
 8654 1f53 03       		.byte	0x3
 8655 1f54 EC000000 		.4byte	xTickCount
 8656 1f58 0A       		.uleb128 0xa
 8657 1f59 40010000 		.4byte	0x140
 8658 1f5d 24       		.uleb128 0x24
 8659 1f5e D7000000 		.4byte	.LASF203
 8660 1f62 01       		.byte	0x1
 8661 1f63 6C01     		.2byte	0x16c
 8662 1f65 1E020000 		.4byte	0x21e
 8663 1f69 05       		.uleb128 0x5
 8664 1f6a 03       		.byte	0x3
 8665 1f6b E4000000 		.4byte	uxTopReadyPriority
 8666 1f6f 24       		.uleb128 0x24
 8667 1f70 03010000 		.4byte	.LASF204
 8668 1f74 01       		.byte	0x1
 8669 1f75 6D01     		.2byte	0x16d
 8670 1f77 811F0000 		.4byte	0x1f81
 8671 1f7b 05       		.uleb128 0x5
 8672 1f7c 03       		.byte	0x3
 8673 1f7d DC000000 		.4byte	xSchedulerRunning
 8674 1f81 0A       		.uleb128 0xa
 8675 1f82 2A010000 		.4byte	0x12a
 8676 1f86 24       		.uleb128 0x24
 8677 1f87 CC0D0000 		.4byte	.LASF205
 8678 1f8b 01       		.byte	0x1
 8679 1f8c 6E01     		.2byte	0x16e
 8680 1f8e 581F0000 		.4byte	0x1f58
 8681 1f92 05       		.uleb128 0x5
 8682 1f93 03       		.byte	0x3
 8683 1f94 00010000 		.4byte	xPendedTicks
 8684 1f98 24       		.uleb128 0x24
 8685 1f99 890F0000 		.4byte	.LASF206
 8686 1f9d 01       		.byte	0x1
 8687 1f9e 6F01     		.2byte	0x16f
 8688 1fa0 811F0000 		.4byte	0x1f81
 8689 1fa4 05       		.uleb128 0x5
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 260


 8690 1fa5 03       		.byte	0x3
 8691 1fa6 F4000000 		.4byte	xYieldPending
 8692 1faa 24       		.uleb128 0x24
 8693 1fab 0D0A0000 		.4byte	.LASF207
 8694 1faf 01       		.byte	0x1
 8695 1fb0 7001     		.2byte	0x170
 8696 1fb2 811F0000 		.4byte	0x1f81
 8697 1fb6 05       		.uleb128 0x5
 8698 1fb7 03       		.byte	0x3
 8699 1fb8 FC000000 		.4byte	xNumOfOverflows
 8700 1fbc 24       		.uleb128 0x24
 8701 1fbd 17090000 		.4byte	.LASF208
 8702 1fc1 01       		.byte	0x1
 8703 1fc2 7101     		.2byte	0x171
 8704 1fc4 35010000 		.4byte	0x135
 8705 1fc8 05       		.uleb128 0x5
 8706 1fc9 03       		.byte	0x3
 8707 1fca E0000000 		.4byte	uxTaskNumber
 8708 1fce 24       		.uleb128 0x24
 8709 1fcf BB070000 		.4byte	.LASF209
 8710 1fd3 01       		.byte	0x1
 8711 1fd4 7201     		.2byte	0x172
 8712 1fd6 581F0000 		.4byte	0x1f58
 8713 1fda 05       		.uleb128 0x5
 8714 1fdb 03       		.byte	0x3
 8715 1fdc 2C000000 		.4byte	xNextTaskUnblockTime
 8716 1fe0 24       		.uleb128 0x24
 8717 1fe1 290A0000 		.4byte	.LASF210
 8718 1fe5 01       		.byte	0x1
 8719 1fe6 7301     		.2byte	0x173
 8720 1fe8 34020000 		.4byte	0x234
 8721 1fec 05       		.uleb128 0x5
 8722 1fed 03       		.byte	0x3
 8723 1fee F8000000 		.4byte	xIdleTaskHandle
 8724 1ff2 24       		.uleb128 0x24
 8725 1ff3 CE0E0000 		.4byte	.LASF211
 8726 1ff7 01       		.byte	0x1
 8727 1ff8 8201     		.2byte	0x182
 8728 1ffa 1E020000 		.4byte	0x21e
 8729 1ffe 05       		.uleb128 0x5
 8730 1fff 03       		.byte	0x3
 8731 2000 F0000000 		.4byte	uxSchedulerSuspended
 8732 2004 29       		.uleb128 0x29
 8733 2005 2C0E0000 		.4byte	.LASF212
 8734 2009 01       		.byte	0x1
 8735 200a 4901     		.2byte	0x149
 8736 200c 16200000 		.4byte	0x2016
 8737 2010 05       		.uleb128 0x5
 8738 2011 03       		.byte	0x3
 8739 2012 00000000 		.4byte	pxCurrentTCB
 8740 2016 0A       		.uleb128 0xa
 8741 2017 C6040000 		.4byte	0x4c6
 8742 201b 29       		.uleb128 0x29
 8743 201c 4B040000 		.4byte	.LASF213
 8744 2020 01       		.byte	0x1
 8745 2021 7801     		.2byte	0x178
 8746 2023 2D200000 		.4byte	0x202d
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 261


 8747 2027 05       		.uleb128 0x5
 8748 2028 03       		.byte	0x3
 8749 2029 00000000 		.4byte	uxTopUsedPriority
 8750 202d 0A       		.uleb128 0xa
 8751 202e E8180000 		.4byte	0x18e8
 8752 2032 2A       		.uleb128 0x2a
 8753 2033 710B0000 		.4byte	.LASF214
 8754 2037 710B0000 		.4byte	.LASF214
 8755 203b 09       		.byte	0x9
 8756 203c B2       		.byte	0xb2
 8757 203d 2A       		.uleb128 0x2a
 8758 203e B0080000 		.4byte	.LASF215
 8759 2042 B0080000 		.4byte	.LASF215
 8760 2046 0A       		.byte	0xa
 8761 2047 19       		.byte	0x19
 8762 2048 2B       		.uleb128 0x2b
 8763 2049 7E0A0000 		.4byte	.LASF216
 8764 204d 7E0A0000 		.4byte	.LASF216
 8765 2051 07       		.byte	0x7
 8766 2052 BC01     		.2byte	0x1bc
 8767 2054 2A       		.uleb128 0x2a
 8768 2055 D0070000 		.4byte	.LASF217
 8769 2059 D0070000 		.4byte	.LASF217
 8770 205d 09       		.byte	0x9
 8771 205e 7F       		.byte	0x7f
 8772 205f 2B       		.uleb128 0x2b
 8773 2060 C80C0000 		.4byte	.LASF218
 8774 2064 C80C0000 		.4byte	.LASF218
 8775 2068 07       		.byte	0x7
 8776 2069 B101     		.2byte	0x1b1
 8777 206b 2A       		.uleb128 0x2a
 8778 206c 0E020000 		.4byte	.LASF219
 8779 2070 0E020000 		.4byte	.LASF219
 8780 2074 06       		.byte	0x6
 8781 2075 5D       		.byte	0x5d
 8782 2076 2A       		.uleb128 0x2a
 8783 2077 1B000000 		.4byte	.LASF220
 8784 207b 1B000000 		.4byte	.LASF220
 8785 207f 06       		.byte	0x6
 8786 2080 5E       		.byte	0x5e
 8787 2081 2A       		.uleb128 0x2a
 8788 2082 58000000 		.4byte	.LASF221
 8789 2086 58000000 		.4byte	.LASF221
 8790 208a 06       		.byte	0x6
 8791 208b 53       		.byte	0x53
 8792 208c 2B       		.uleb128 0x2b
 8793 208d A3020000 		.4byte	.LASF222
 8794 2091 A3020000 		.4byte	.LASF222
 8795 2095 07       		.byte	0x7
 8796 2096 EF01     		.2byte	0x1ef
 8797 2098 2B       		.uleb128 0x2b
 8798 2099 F40C0000 		.4byte	.LASF223
 8799 209d F40C0000 		.4byte	.LASF223
 8800 20a1 07       		.byte	0x7
 8801 20a2 C901     		.2byte	0x1c9
 8802 20a4 2A       		.uleb128 0x2a
 8803 20a5 0A0F0000 		.4byte	.LASF224
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 262


 8804 20a9 0A0F0000 		.4byte	.LASF224
 8805 20ad 09       		.byte	0x9
 8806 20ae AF       		.byte	0xaf
 8807 20af 2C       		.uleb128 0x2c
 8808 20b0 B0080000 		.4byte	.LASF215
 8809 20b4 B0080000 		.4byte	.LASF215
 8810 20b8 2B       		.uleb128 0x2b
 8811 20b9 9F050000 		.4byte	.LASF225
 8812 20bd 9F050000 		.4byte	.LASF225
 8813 20c1 07       		.byte	0x7
 8814 20c2 DF01     		.2byte	0x1df
 8815 20c4 2A       		.uleb128 0x2a
 8816 20c5 64090000 		.4byte	.LASF226
 8817 20c9 64090000 		.4byte	.LASF226
 8818 20cd 06       		.byte	0x6
 8819 20ce 5F       		.byte	0x5f
 8820 20cf 2A       		.uleb128 0x2a
 8821 20d0 870D0000 		.4byte	.LASF227
 8822 20d4 870D0000 		.4byte	.LASF227
 8823 20d8 06       		.byte	0x6
 8824 20d9 60       		.byte	0x60
 8825 20da 2A       		.uleb128 0x2a
 8826 20db 2D000000 		.4byte	.LASF228
 8827 20df 2D000000 		.4byte	.LASF228
 8828 20e3 09       		.byte	0x9
 8829 20e4 D0       		.byte	0xd0
 8830 20e5 2A       		.uleb128 0x2a
 8831 20e6 5F0B0000 		.4byte	.LASF229
 8832 20ea 5F0B0000 		.4byte	.LASF229
 8833 20ee 09       		.byte	0x9
 8834 20ef D7       		.byte	0xd7
 8835 20f0 2B       		.uleb128 0x2b
 8836 20f1 560A0000 		.4byte	.LASF230
 8837 20f5 560A0000 		.4byte	.LASF230
 8838 20f9 08       		.byte	0x8
 8839 20fa 6F06     		.2byte	0x66f
 8840 20fc 00       		.byte	0
 8841              		.section	.debug_abbrev,"",%progbits
 8842              	.Ldebug_abbrev0:
 8843 0000 01       		.uleb128 0x1
 8844 0001 11       		.uleb128 0x11
 8845 0002 01       		.byte	0x1
 8846 0003 25       		.uleb128 0x25
 8847 0004 0E       		.uleb128 0xe
 8848 0005 13       		.uleb128 0x13
 8849 0006 0B       		.uleb128 0xb
 8850 0007 03       		.uleb128 0x3
 8851 0008 0E       		.uleb128 0xe
 8852 0009 1B       		.uleb128 0x1b
 8853 000a 0E       		.uleb128 0xe
 8854 000b 55       		.uleb128 0x55
 8855 000c 17       		.uleb128 0x17
 8856 000d 11       		.uleb128 0x11
 8857 000e 01       		.uleb128 0x1
 8858 000f 10       		.uleb128 0x10
 8859 0010 17       		.uleb128 0x17
 8860 0011 00       		.byte	0
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 263


 8861 0012 00       		.byte	0
 8862 0013 02       		.uleb128 0x2
 8863 0014 16       		.uleb128 0x16
 8864 0015 00       		.byte	0
 8865 0016 03       		.uleb128 0x3
 8866 0017 0E       		.uleb128 0xe
 8867 0018 3A       		.uleb128 0x3a
 8868 0019 0B       		.uleb128 0xb
 8869 001a 3B       		.uleb128 0x3b
 8870 001b 0B       		.uleb128 0xb
 8871 001c 49       		.uleb128 0x49
 8872 001d 13       		.uleb128 0x13
 8873 001e 00       		.byte	0
 8874 001f 00       		.byte	0
 8875 0020 03       		.uleb128 0x3
 8876 0021 24       		.uleb128 0x24
 8877 0022 00       		.byte	0
 8878 0023 0B       		.uleb128 0xb
 8879 0024 0B       		.uleb128 0xb
 8880 0025 3E       		.uleb128 0x3e
 8881 0026 0B       		.uleb128 0xb
 8882 0027 03       		.uleb128 0x3
 8883 0028 0E       		.uleb128 0xe
 8884 0029 00       		.byte	0
 8885 002a 00       		.byte	0
 8886 002b 04       		.uleb128 0x4
 8887 002c 24       		.uleb128 0x24
 8888 002d 00       		.byte	0
 8889 002e 0B       		.uleb128 0xb
 8890 002f 0B       		.uleb128 0xb
 8891 0030 3E       		.uleb128 0x3e
 8892 0031 0B       		.uleb128 0xb
 8893 0032 03       		.uleb128 0x3
 8894 0033 08       		.uleb128 0x8
 8895 0034 00       		.byte	0
 8896 0035 00       		.byte	0
 8897 0036 05       		.uleb128 0x5
 8898 0037 0F       		.uleb128 0xf
 8899 0038 00       		.byte	0
 8900 0039 0B       		.uleb128 0xb
 8901 003a 0B       		.uleb128 0xb
 8902 003b 00       		.byte	0
 8903 003c 00       		.byte	0
 8904 003d 06       		.uleb128 0x6
 8905 003e 0F       		.uleb128 0xf
 8906 003f 00       		.byte	0
 8907 0040 0B       		.uleb128 0xb
 8908 0041 0B       		.uleb128 0xb
 8909 0042 49       		.uleb128 0x49
 8910 0043 13       		.uleb128 0x13
 8911 0044 00       		.byte	0
 8912 0045 00       		.byte	0
 8913 0046 07       		.uleb128 0x7
 8914 0047 26       		.uleb128 0x26
 8915 0048 00       		.byte	0
 8916 0049 49       		.uleb128 0x49
 8917 004a 13       		.uleb128 0x13
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 264


 8918 004b 00       		.byte	0
 8919 004c 00       		.byte	0
 8920 004d 08       		.uleb128 0x8
 8921 004e 01       		.uleb128 0x1
 8922 004f 01       		.byte	0x1
 8923 0050 49       		.uleb128 0x49
 8924 0051 13       		.uleb128 0x13
 8925 0052 01       		.uleb128 0x1
 8926 0053 13       		.uleb128 0x13
 8927 0054 00       		.byte	0
 8928 0055 00       		.byte	0
 8929 0056 09       		.uleb128 0x9
 8930 0057 21       		.uleb128 0x21
 8931 0058 00       		.byte	0
 8932 0059 49       		.uleb128 0x49
 8933 005a 13       		.uleb128 0x13
 8934 005b 2F       		.uleb128 0x2f
 8935 005c 0B       		.uleb128 0xb
 8936 005d 00       		.byte	0
 8937 005e 00       		.byte	0
 8938 005f 0A       		.uleb128 0xa
 8939 0060 35       		.uleb128 0x35
 8940 0061 00       		.byte	0
 8941 0062 49       		.uleb128 0x49
 8942 0063 13       		.uleb128 0x13
 8943 0064 00       		.byte	0
 8944 0065 00       		.byte	0
 8945 0066 0B       		.uleb128 0xb
 8946 0067 15       		.uleb128 0x15
 8947 0068 01       		.byte	0x1
 8948 0069 27       		.uleb128 0x27
 8949 006a 19       		.uleb128 0x19
 8950 006b 01       		.uleb128 0x1
 8951 006c 13       		.uleb128 0x13
 8952 006d 00       		.byte	0
 8953 006e 00       		.byte	0
 8954 006f 0C       		.uleb128 0xc
 8955 0070 05       		.uleb128 0x5
 8956 0071 00       		.byte	0
 8957 0072 49       		.uleb128 0x49
 8958 0073 13       		.uleb128 0x13
 8959 0074 00       		.byte	0
 8960 0075 00       		.byte	0
 8961 0076 0D       		.uleb128 0xd
 8962 0077 13       		.uleb128 0x13
 8963 0078 01       		.byte	0x1
 8964 0079 03       		.uleb128 0x3
 8965 007a 0E       		.uleb128 0xe
 8966 007b 0B       		.uleb128 0xb
 8967 007c 0B       		.uleb128 0xb
 8968 007d 3A       		.uleb128 0x3a
 8969 007e 0B       		.uleb128 0xb
 8970 007f 3B       		.uleb128 0x3b
 8971 0080 0B       		.uleb128 0xb
 8972 0081 01       		.uleb128 0x1
 8973 0082 13       		.uleb128 0x13
 8974 0083 00       		.byte	0
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 265


 8975 0084 00       		.byte	0
 8976 0085 0E       		.uleb128 0xe
 8977 0086 0D       		.uleb128 0xd
 8978 0087 00       		.byte	0
 8979 0088 03       		.uleb128 0x3
 8980 0089 0E       		.uleb128 0xe
 8981 008a 3A       		.uleb128 0x3a
 8982 008b 0B       		.uleb128 0xb
 8983 008c 3B       		.uleb128 0x3b
 8984 008d 0B       		.uleb128 0xb
 8985 008e 49       		.uleb128 0x49
 8986 008f 13       		.uleb128 0x13
 8987 0090 38       		.uleb128 0x38
 8988 0091 0B       		.uleb128 0xb
 8989 0092 00       		.byte	0
 8990 0093 00       		.byte	0
 8991 0094 0F       		.uleb128 0xf
 8992 0095 0D       		.uleb128 0xd
 8993 0096 00       		.byte	0
 8994 0097 03       		.uleb128 0x3
 8995 0098 0E       		.uleb128 0xe
 8996 0099 3A       		.uleb128 0x3a
 8997 009a 0B       		.uleb128 0xb
 8998 009b 3B       		.uleb128 0x3b
 8999 009c 05       		.uleb128 0x5
 9000 009d 49       		.uleb128 0x49
 9001 009e 13       		.uleb128 0x13
 9002 009f 38       		.uleb128 0x38
 9003 00a0 0B       		.uleb128 0xb
 9004 00a1 00       		.byte	0
 9005 00a2 00       		.byte	0
 9006 00a3 10       		.uleb128 0x10
 9007 00a4 04       		.uleb128 0x4
 9008 00a5 01       		.byte	0x1
 9009 00a6 0B       		.uleb128 0xb
 9010 00a7 0B       		.uleb128 0xb
 9011 00a8 49       		.uleb128 0x49
 9012 00a9 13       		.uleb128 0x13
 9013 00aa 3A       		.uleb128 0x3a
 9014 00ab 0B       		.uleb128 0xb
 9015 00ac 3B       		.uleb128 0x3b
 9016 00ad 0B       		.uleb128 0xb
 9017 00ae 01       		.uleb128 0x1
 9018 00af 13       		.uleb128 0x13
 9019 00b0 00       		.byte	0
 9020 00b1 00       		.byte	0
 9021 00b2 11       		.uleb128 0x11
 9022 00b3 28       		.uleb128 0x28
 9023 00b4 00       		.byte	0
 9024 00b5 03       		.uleb128 0x3
 9025 00b6 0E       		.uleb128 0xe
 9026 00b7 1C       		.uleb128 0x1c
 9027 00b8 0B       		.uleb128 0xb
 9028 00b9 00       		.byte	0
 9029 00ba 00       		.byte	0
 9030 00bb 12       		.uleb128 0x12
 9031 00bc 16       		.uleb128 0x16
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 266


 9032 00bd 00       		.byte	0
 9033 00be 03       		.uleb128 0x3
 9034 00bf 0E       		.uleb128 0xe
 9035 00c0 3A       		.uleb128 0x3a
 9036 00c1 0B       		.uleb128 0xb
 9037 00c2 3B       		.uleb128 0x3b
 9038 00c3 05       		.uleb128 0x5
 9039 00c4 49       		.uleb128 0x49
 9040 00c5 13       		.uleb128 0x13
 9041 00c6 00       		.byte	0
 9042 00c7 00       		.byte	0
 9043 00c8 13       		.uleb128 0x13
 9044 00c9 2E       		.uleb128 0x2e
 9045 00ca 01       		.byte	0x1
 9046 00cb 03       		.uleb128 0x3
 9047 00cc 0E       		.uleb128 0xe
 9048 00cd 3A       		.uleb128 0x3a
 9049 00ce 0B       		.uleb128 0xb
 9050 00cf 3B       		.uleb128 0x3b
 9051 00d0 05       		.uleb128 0x5
 9052 00d1 27       		.uleb128 0x27
 9053 00d2 19       		.uleb128 0x19
 9054 00d3 49       		.uleb128 0x49
 9055 00d4 13       		.uleb128 0x13
 9056 00d5 11       		.uleb128 0x11
 9057 00d6 01       		.uleb128 0x1
 9058 00d7 12       		.uleb128 0x12
 9059 00d8 06       		.uleb128 0x6
 9060 00d9 40       		.uleb128 0x40
 9061 00da 18       		.uleb128 0x18
 9062 00db 9742     		.uleb128 0x2117
 9063 00dd 19       		.uleb128 0x19
 9064 00de 01       		.uleb128 0x1
 9065 00df 13       		.uleb128 0x13
 9066 00e0 00       		.byte	0
 9067 00e1 00       		.byte	0
 9068 00e2 14       		.uleb128 0x14
 9069 00e3 05       		.uleb128 0x5
 9070 00e4 00       		.byte	0
 9071 00e5 03       		.uleb128 0x3
 9072 00e6 0E       		.uleb128 0xe
 9073 00e7 3A       		.uleb128 0x3a
 9074 00e8 0B       		.uleb128 0xb
 9075 00e9 3B       		.uleb128 0x3b
 9076 00ea 05       		.uleb128 0x5
 9077 00eb 49       		.uleb128 0x49
 9078 00ec 13       		.uleb128 0x13
 9079 00ed 02       		.uleb128 0x2
 9080 00ee 17       		.uleb128 0x17
 9081 00ef 00       		.byte	0
 9082 00f0 00       		.byte	0
 9083 00f1 15       		.uleb128 0x15
 9084 00f2 34       		.uleb128 0x34
 9085 00f3 00       		.byte	0
 9086 00f4 03       		.uleb128 0x3
 9087 00f5 0E       		.uleb128 0xe
 9088 00f6 3A       		.uleb128 0x3a
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 267


 9089 00f7 0B       		.uleb128 0xb
 9090 00f8 3B       		.uleb128 0x3b
 9091 00f9 05       		.uleb128 0x5
 9092 00fa 49       		.uleb128 0x49
 9093 00fb 13       		.uleb128 0x13
 9094 00fc 02       		.uleb128 0x2
 9095 00fd 17       		.uleb128 0x17
 9096 00fe 00       		.byte	0
 9097 00ff 00       		.byte	0
 9098 0100 16       		.uleb128 0x16
 9099 0101 2E       		.uleb128 0x2e
 9100 0102 00       		.byte	0
 9101 0103 03       		.uleb128 0x3
 9102 0104 0E       		.uleb128 0xe
 9103 0105 3A       		.uleb128 0x3a
 9104 0106 0B       		.uleb128 0xb
 9105 0107 3B       		.uleb128 0x3b
 9106 0108 05       		.uleb128 0x5
 9107 0109 27       		.uleb128 0x27
 9108 010a 19       		.uleb128 0x19
 9109 010b 11       		.uleb128 0x11
 9110 010c 01       		.uleb128 0x1
 9111 010d 12       		.uleb128 0x12
 9112 010e 06       		.uleb128 0x6
 9113 010f 40       		.uleb128 0x40
 9114 0110 18       		.uleb128 0x18
 9115 0111 9742     		.uleb128 0x2117
 9116 0113 19       		.uleb128 0x19
 9117 0114 00       		.byte	0
 9118 0115 00       		.byte	0
 9119 0116 17       		.uleb128 0x17
 9120 0117 2E       		.uleb128 0x2e
 9121 0118 01       		.byte	0x1
 9122 0119 03       		.uleb128 0x3
 9123 011a 0E       		.uleb128 0xe
 9124 011b 3A       		.uleb128 0x3a
 9125 011c 0B       		.uleb128 0xb
 9126 011d 3B       		.uleb128 0x3b
 9127 011e 05       		.uleb128 0x5
 9128 011f 27       		.uleb128 0x27
 9129 0120 19       		.uleb128 0x19
 9130 0121 11       		.uleb128 0x11
 9131 0122 01       		.uleb128 0x1
 9132 0123 12       		.uleb128 0x12
 9133 0124 06       		.uleb128 0x6
 9134 0125 40       		.uleb128 0x40
 9135 0126 18       		.uleb128 0x18
 9136 0127 9742     		.uleb128 0x2117
 9137 0129 19       		.uleb128 0x19
 9138 012a 01       		.uleb128 0x1
 9139 012b 13       		.uleb128 0x13
 9140 012c 00       		.byte	0
 9141 012d 00       		.byte	0
 9142 012e 18       		.uleb128 0x18
 9143 012f 898201   		.uleb128 0x4109
 9144 0132 00       		.byte	0
 9145 0133 11       		.uleb128 0x11
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 268


 9146 0134 01       		.uleb128 0x1
 9147 0135 31       		.uleb128 0x31
 9148 0136 13       		.uleb128 0x13
 9149 0137 00       		.byte	0
 9150 0138 00       		.byte	0
 9151 0139 19       		.uleb128 0x19
 9152 013a 898201   		.uleb128 0x4109
 9153 013d 01       		.byte	0x1
 9154 013e 11       		.uleb128 0x11
 9155 013f 01       		.uleb128 0x1
 9156 0140 31       		.uleb128 0x31
 9157 0141 13       		.uleb128 0x13
 9158 0142 00       		.byte	0
 9159 0143 00       		.byte	0
 9160 0144 1A       		.uleb128 0x1a
 9161 0145 8A8201   		.uleb128 0x410a
 9162 0148 00       		.byte	0
 9163 0149 02       		.uleb128 0x2
 9164 014a 18       		.uleb128 0x18
 9165 014b 9142     		.uleb128 0x2111
 9166 014d 18       		.uleb128 0x18
 9167 014e 00       		.byte	0
 9168 014f 00       		.byte	0
 9169 0150 1B       		.uleb128 0x1b
 9170 0151 05       		.uleb128 0x5
 9171 0152 00       		.byte	0
 9172 0153 03       		.uleb128 0x3
 9173 0154 0E       		.uleb128 0xe
 9174 0155 3A       		.uleb128 0x3a
 9175 0156 0B       		.uleb128 0xb
 9176 0157 3B       		.uleb128 0x3b
 9177 0158 05       		.uleb128 0x5
 9178 0159 49       		.uleb128 0x49
 9179 015a 13       		.uleb128 0x13
 9180 015b 02       		.uleb128 0x2
 9181 015c 18       		.uleb128 0x18
 9182 015d 00       		.byte	0
 9183 015e 00       		.byte	0
 9184 015f 1C       		.uleb128 0x1c
 9185 0160 34       		.uleb128 0x34
 9186 0161 00       		.byte	0
 9187 0162 03       		.uleb128 0x3
 9188 0163 08       		.uleb128 0x8
 9189 0164 3A       		.uleb128 0x3a
 9190 0165 0B       		.uleb128 0xb
 9191 0166 3B       		.uleb128 0x3b
 9192 0167 05       		.uleb128 0x5
 9193 0168 49       		.uleb128 0x49
 9194 0169 13       		.uleb128 0x13
 9195 016a 02       		.uleb128 0x2
 9196 016b 17       		.uleb128 0x17
 9197 016c 00       		.byte	0
 9198 016d 00       		.byte	0
 9199 016e 1D       		.uleb128 0x1d
 9200 016f 898201   		.uleb128 0x4109
 9201 0172 01       		.byte	0x1
 9202 0173 11       		.uleb128 0x11
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 269


 9203 0174 01       		.uleb128 0x1
 9204 0175 31       		.uleb128 0x31
 9205 0176 13       		.uleb128 0x13
 9206 0177 01       		.uleb128 0x1
 9207 0178 13       		.uleb128 0x13
 9208 0179 00       		.byte	0
 9209 017a 00       		.byte	0
 9210 017b 1E       		.uleb128 0x1e
 9211 017c 0B       		.uleb128 0xb
 9212 017d 01       		.byte	0x1
 9213 017e 11       		.uleb128 0x11
 9214 017f 01       		.uleb128 0x1
 9215 0180 12       		.uleb128 0x12
 9216 0181 06       		.uleb128 0x6
 9217 0182 01       		.uleb128 0x1
 9218 0183 13       		.uleb128 0x13
 9219 0184 00       		.byte	0
 9220 0185 00       		.byte	0
 9221 0186 1F       		.uleb128 0x1f
 9222 0187 0B       		.uleb128 0xb
 9223 0188 01       		.byte	0x1
 9224 0189 11       		.uleb128 0x11
 9225 018a 01       		.uleb128 0x1
 9226 018b 12       		.uleb128 0x12
 9227 018c 06       		.uleb128 0x6
 9228 018d 00       		.byte	0
 9229 018e 00       		.byte	0
 9230 018f 20       		.uleb128 0x20
 9231 0190 2E       		.uleb128 0x2e
 9232 0191 01       		.byte	0x1
 9233 0192 03       		.uleb128 0x3
 9234 0193 0E       		.uleb128 0xe
 9235 0194 3A       		.uleb128 0x3a
 9236 0195 0B       		.uleb128 0xb
 9237 0196 3B       		.uleb128 0x3b
 9238 0197 05       		.uleb128 0x5
 9239 0198 27       		.uleb128 0x27
 9240 0199 19       		.uleb128 0x19
 9241 019a 8701     		.uleb128 0x87
 9242 019c 19       		.uleb128 0x19
 9243 019d 11       		.uleb128 0x11
 9244 019e 01       		.uleb128 0x1
 9245 019f 12       		.uleb128 0x12
 9246 01a0 06       		.uleb128 0x6
 9247 01a1 40       		.uleb128 0x40
 9248 01a2 18       		.uleb128 0x18
 9249 01a3 9742     		.uleb128 0x2117
 9250 01a5 19       		.uleb128 0x19
 9251 01a6 01       		.uleb128 0x1
 9252 01a7 13       		.uleb128 0x13
 9253 01a8 00       		.byte	0
 9254 01a9 00       		.byte	0
 9255 01aa 21       		.uleb128 0x21
 9256 01ab 2E       		.uleb128 0x2e
 9257 01ac 01       		.byte	0x1
 9258 01ad 3F       		.uleb128 0x3f
 9259 01ae 19       		.uleb128 0x19
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 270


 9260 01af 03       		.uleb128 0x3
 9261 01b0 0E       		.uleb128 0xe
 9262 01b1 3A       		.uleb128 0x3a
 9263 01b2 0B       		.uleb128 0xb
 9264 01b3 3B       		.uleb128 0x3b
 9265 01b4 05       		.uleb128 0x5
 9266 01b5 27       		.uleb128 0x27
 9267 01b6 19       		.uleb128 0x19
 9268 01b7 49       		.uleb128 0x49
 9269 01b8 13       		.uleb128 0x13
 9270 01b9 11       		.uleb128 0x11
 9271 01ba 01       		.uleb128 0x1
 9272 01bb 12       		.uleb128 0x12
 9273 01bc 06       		.uleb128 0x6
 9274 01bd 40       		.uleb128 0x40
 9275 01be 18       		.uleb128 0x18
 9276 01bf 9742     		.uleb128 0x2117
 9277 01c1 19       		.uleb128 0x19
 9278 01c2 01       		.uleb128 0x1
 9279 01c3 13       		.uleb128 0x13
 9280 01c4 00       		.byte	0
 9281 01c5 00       		.byte	0
 9282 01c6 22       		.uleb128 0x22
 9283 01c7 2E       		.uleb128 0x2e
 9284 01c8 01       		.byte	0x1
 9285 01c9 3F       		.uleb128 0x3f
 9286 01ca 19       		.uleb128 0x19
 9287 01cb 03       		.uleb128 0x3
 9288 01cc 0E       		.uleb128 0xe
 9289 01cd 3A       		.uleb128 0x3a
 9290 01ce 0B       		.uleb128 0xb
 9291 01cf 3B       		.uleb128 0x3b
 9292 01d0 05       		.uleb128 0x5
 9293 01d1 27       		.uleb128 0x27
 9294 01d2 19       		.uleb128 0x19
 9295 01d3 11       		.uleb128 0x11
 9296 01d4 01       		.uleb128 0x1
 9297 01d5 12       		.uleb128 0x12
 9298 01d6 06       		.uleb128 0x6
 9299 01d7 40       		.uleb128 0x40
 9300 01d8 18       		.uleb128 0x18
 9301 01d9 9742     		.uleb128 0x2117
 9302 01db 19       		.uleb128 0x19
 9303 01dc 01       		.uleb128 0x1
 9304 01dd 13       		.uleb128 0x13
 9305 01de 00       		.byte	0
 9306 01df 00       		.byte	0
 9307 01e0 23       		.uleb128 0x23
 9308 01e1 2E       		.uleb128 0x2e
 9309 01e2 00       		.byte	0
 9310 01e3 3F       		.uleb128 0x3f
 9311 01e4 19       		.uleb128 0x19
 9312 01e5 03       		.uleb128 0x3
 9313 01e6 0E       		.uleb128 0xe
 9314 01e7 3A       		.uleb128 0x3a
 9315 01e8 0B       		.uleb128 0xb
 9316 01e9 3B       		.uleb128 0x3b
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 271


 9317 01ea 05       		.uleb128 0x5
 9318 01eb 27       		.uleb128 0x27
 9319 01ec 19       		.uleb128 0x19
 9320 01ed 11       		.uleb128 0x11
 9321 01ee 01       		.uleb128 0x1
 9322 01ef 12       		.uleb128 0x12
 9323 01f0 06       		.uleb128 0x6
 9324 01f1 40       		.uleb128 0x40
 9325 01f2 18       		.uleb128 0x18
 9326 01f3 9742     		.uleb128 0x2117
 9327 01f5 19       		.uleb128 0x19
 9328 01f6 00       		.byte	0
 9329 01f7 00       		.byte	0
 9330 01f8 24       		.uleb128 0x24
 9331 01f9 34       		.uleb128 0x34
 9332 01fa 00       		.byte	0
 9333 01fb 03       		.uleb128 0x3
 9334 01fc 0E       		.uleb128 0xe
 9335 01fd 3A       		.uleb128 0x3a
 9336 01fe 0B       		.uleb128 0xb
 9337 01ff 3B       		.uleb128 0x3b
 9338 0200 05       		.uleb128 0x5
 9339 0201 49       		.uleb128 0x49
 9340 0202 13       		.uleb128 0x13
 9341 0203 02       		.uleb128 0x2
 9342 0204 18       		.uleb128 0x18
 9343 0205 00       		.byte	0
 9344 0206 00       		.byte	0
 9345 0207 25       		.uleb128 0x25
 9346 0208 34       		.uleb128 0x34
 9347 0209 00       		.byte	0
 9348 020a 03       		.uleb128 0x3
 9349 020b 0E       		.uleb128 0xe
 9350 020c 3A       		.uleb128 0x3a
 9351 020d 0B       		.uleb128 0xb
 9352 020e 3B       		.uleb128 0x3b
 9353 020f 05       		.uleb128 0x5
 9354 0210 49       		.uleb128 0x49
 9355 0211 13       		.uleb128 0x13
 9356 0212 1C       		.uleb128 0x1c
 9357 0213 0B       		.uleb128 0xb
 9358 0214 00       		.byte	0
 9359 0215 00       		.byte	0
 9360 0216 26       		.uleb128 0x26
 9361 0217 2E       		.uleb128 0x2e
 9362 0218 00       		.byte	0
 9363 0219 3F       		.uleb128 0x3f
 9364 021a 19       		.uleb128 0x19
 9365 021b 03       		.uleb128 0x3
 9366 021c 0E       		.uleb128 0xe
 9367 021d 3A       		.uleb128 0x3a
 9368 021e 0B       		.uleb128 0xb
 9369 021f 3B       		.uleb128 0x3b
 9370 0220 05       		.uleb128 0x5
 9371 0221 27       		.uleb128 0x27
 9372 0222 19       		.uleb128 0x19
 9373 0223 49       		.uleb128 0x49
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 272


 9374 0224 13       		.uleb128 0x13
 9375 0225 11       		.uleb128 0x11
 9376 0226 01       		.uleb128 0x1
 9377 0227 12       		.uleb128 0x12
 9378 0228 06       		.uleb128 0x6
 9379 0229 40       		.uleb128 0x40
 9380 022a 18       		.uleb128 0x18
 9381 022b 9742     		.uleb128 0x2117
 9382 022d 19       		.uleb128 0x19
 9383 022e 00       		.byte	0
 9384 022f 00       		.byte	0
 9385 0230 27       		.uleb128 0x27
 9386 0231 0B       		.uleb128 0xb
 9387 0232 01       		.byte	0x1
 9388 0233 55       		.uleb128 0x55
 9389 0234 17       		.uleb128 0x17
 9390 0235 00       		.byte	0
 9391 0236 00       		.byte	0
 9392 0237 28       		.uleb128 0x28
 9393 0238 0B       		.uleb128 0xb
 9394 0239 01       		.byte	0x1
 9395 023a 55       		.uleb128 0x55
 9396 023b 17       		.uleb128 0x17
 9397 023c 01       		.uleb128 0x1
 9398 023d 13       		.uleb128 0x13
 9399 023e 00       		.byte	0
 9400 023f 00       		.byte	0
 9401 0240 29       		.uleb128 0x29
 9402 0241 34       		.uleb128 0x34
 9403 0242 00       		.byte	0
 9404 0243 03       		.uleb128 0x3
 9405 0244 0E       		.uleb128 0xe
 9406 0245 3A       		.uleb128 0x3a
 9407 0246 0B       		.uleb128 0xb
 9408 0247 3B       		.uleb128 0x3b
 9409 0248 05       		.uleb128 0x5
 9410 0249 49       		.uleb128 0x49
 9411 024a 13       		.uleb128 0x13
 9412 024b 3F       		.uleb128 0x3f
 9413 024c 19       		.uleb128 0x19
 9414 024d 02       		.uleb128 0x2
 9415 024e 18       		.uleb128 0x18
 9416 024f 00       		.byte	0
 9417 0250 00       		.byte	0
 9418 0251 2A       		.uleb128 0x2a
 9419 0252 2E       		.uleb128 0x2e
 9420 0253 00       		.byte	0
 9421 0254 3F       		.uleb128 0x3f
 9422 0255 19       		.uleb128 0x19
 9423 0256 3C       		.uleb128 0x3c
 9424 0257 19       		.uleb128 0x19
 9425 0258 6E       		.uleb128 0x6e
 9426 0259 0E       		.uleb128 0xe
 9427 025a 03       		.uleb128 0x3
 9428 025b 0E       		.uleb128 0xe
 9429 025c 3A       		.uleb128 0x3a
 9430 025d 0B       		.uleb128 0xb
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 273


 9431 025e 3B       		.uleb128 0x3b
 9432 025f 0B       		.uleb128 0xb
 9433 0260 00       		.byte	0
 9434 0261 00       		.byte	0
 9435 0262 2B       		.uleb128 0x2b
 9436 0263 2E       		.uleb128 0x2e
 9437 0264 00       		.byte	0
 9438 0265 3F       		.uleb128 0x3f
 9439 0266 19       		.uleb128 0x19
 9440 0267 3C       		.uleb128 0x3c
 9441 0268 19       		.uleb128 0x19
 9442 0269 6E       		.uleb128 0x6e
 9443 026a 0E       		.uleb128 0xe
 9444 026b 03       		.uleb128 0x3
 9445 026c 0E       		.uleb128 0xe
 9446 026d 3A       		.uleb128 0x3a
 9447 026e 0B       		.uleb128 0xb
 9448 026f 3B       		.uleb128 0x3b
 9449 0270 05       		.uleb128 0x5
 9450 0271 00       		.byte	0
 9451 0272 00       		.byte	0
 9452 0273 2C       		.uleb128 0x2c
 9453 0274 2E       		.uleb128 0x2e
 9454 0275 00       		.byte	0
 9455 0276 3F       		.uleb128 0x3f
 9456 0277 19       		.uleb128 0x19
 9457 0278 3C       		.uleb128 0x3c
 9458 0279 19       		.uleb128 0x19
 9459 027a 6E       		.uleb128 0x6e
 9460 027b 0E       		.uleb128 0xe
 9461 027c 03       		.uleb128 0x3
 9462 027d 0E       		.uleb128 0xe
 9463 027e 00       		.byte	0
 9464 027f 00       		.byte	0
 9465 0280 00       		.byte	0
 9466              		.section	.debug_loc,"",%progbits
 9467              	.Ldebug_loc0:
 9468              	.LLST0:
 9469 0000 00000000 		.4byte	.LVL0
 9470 0004 16000000 		.4byte	.LVL1
 9471 0008 0100     		.2byte	0x1
 9472 000a 50       		.byte	0x50
 9473 000b 16000000 		.4byte	.LVL1
 9474 000f 18000000 		.4byte	.LVL2
 9475 0013 0400     		.2byte	0x4
 9476 0015 F3       		.byte	0xf3
 9477 0016 01       		.uleb128 0x1
 9478 0017 50       		.byte	0x50
 9479 0018 9F       		.byte	0x9f
 9480 0019 18000000 		.4byte	.LVL2
 9481 001d 1A000000 		.4byte	.LVL3
 9482 0021 0100     		.2byte	0x1
 9483 0023 50       		.byte	0x50
 9484 0024 1A000000 		.4byte	.LVL3
 9485 0028 1C000000 		.4byte	.LVL4
 9486 002c 0400     		.2byte	0x4
 9487 002e F3       		.byte	0xf3
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 274


 9488 002f 01       		.uleb128 0x1
 9489 0030 50       		.byte	0x50
 9490 0031 9F       		.byte	0x9f
 9491 0032 1C000000 		.4byte	.LVL4
 9492 0036 1E000000 		.4byte	.LVL5
 9493 003a 0100     		.2byte	0x1
 9494 003c 50       		.byte	0x50
 9495 003d 1E000000 		.4byte	.LVL5
 9496 0041 20000000 		.4byte	.LVL6
 9497 0045 0400     		.2byte	0x4
 9498 0047 F3       		.byte	0xf3
 9499 0048 01       		.uleb128 0x1
 9500 0049 50       		.byte	0x50
 9501 004a 9F       		.byte	0x9f
 9502 004b 20000000 		.4byte	.LVL6
 9503 004f 22000000 		.4byte	.LVL7
 9504 0053 0100     		.2byte	0x1
 9505 0055 50       		.byte	0x50
 9506 0056 22000000 		.4byte	.LVL7
 9507 005a 28000000 		.4byte	.LFE44
 9508 005e 0400     		.2byte	0x4
 9509 0060 F3       		.byte	0xf3
 9510 0061 01       		.uleb128 0x1
 9511 0062 50       		.byte	0x50
 9512 0063 9F       		.byte	0x9f
 9513 0064 00000000 		.4byte	0
 9514 0068 00000000 		.4byte	0
 9515              	.LLST1:
 9516 006c 00000000 		.4byte	.LVL0
 9517 0070 22000000 		.4byte	.LVL7
 9518 0074 0200     		.2byte	0x2
 9519 0076 30       		.byte	0x30
 9520 0077 9F       		.byte	0x9f
 9521 0078 22000000 		.4byte	.LVL7
 9522 007c 28000000 		.4byte	.LFE44
 9523 0080 0100     		.2byte	0x1
 9524 0082 50       		.byte	0x50
 9525 0083 00000000 		.4byte	0
 9526 0087 00000000 		.4byte	0
 9527              	.LLST2:
 9528 008b 00000000 		.4byte	.LVL0
 9529 008f 16000000 		.4byte	.LVL1
 9530 0093 0100     		.2byte	0x1
 9531 0095 50       		.byte	0x50
 9532 0096 16000000 		.4byte	.LVL1
 9533 009a 18000000 		.4byte	.LVL2
 9534 009e 0400     		.2byte	0x4
 9535 00a0 F3       		.byte	0xf3
 9536 00a1 01       		.uleb128 0x1
 9537 00a2 50       		.byte	0x50
 9538 00a3 9F       		.byte	0x9f
 9539 00a4 18000000 		.4byte	.LVL2
 9540 00a8 1A000000 		.4byte	.LVL3
 9541 00ac 0100     		.2byte	0x1
 9542 00ae 50       		.byte	0x50
 9543 00af 1A000000 		.4byte	.LVL3
 9544 00b3 1C000000 		.4byte	.LVL4
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 275


 9545 00b7 0400     		.2byte	0x4
 9546 00b9 F3       		.byte	0xf3
 9547 00ba 01       		.uleb128 0x1
 9548 00bb 50       		.byte	0x50
 9549 00bc 9F       		.byte	0x9f
 9550 00bd 1C000000 		.4byte	.LVL4
 9551 00c1 1E000000 		.4byte	.LVL5
 9552 00c5 0100     		.2byte	0x1
 9553 00c7 50       		.byte	0x50
 9554 00c8 1E000000 		.4byte	.LVL5
 9555 00cc 20000000 		.4byte	.LVL6
 9556 00d0 0400     		.2byte	0x4
 9557 00d2 F3       		.byte	0xf3
 9558 00d3 01       		.uleb128 0x1
 9559 00d4 50       		.byte	0x50
 9560 00d5 9F       		.byte	0x9f
 9561 00d6 20000000 		.4byte	.LVL6
 9562 00da 22000000 		.4byte	.LVL7
 9563 00de 0100     		.2byte	0x1
 9564 00e0 50       		.byte	0x50
 9565 00e1 22000000 		.4byte	.LVL7
 9566 00e5 28000000 		.4byte	.LFE44
 9567 00e9 0400     		.2byte	0x4
 9568 00eb F3       		.byte	0xf3
 9569 00ec 01       		.uleb128 0x1
 9570 00ed 50       		.byte	0x50
 9571 00ee 9F       		.byte	0x9f
 9572 00ef 00000000 		.4byte	0
 9573 00f3 00000000 		.4byte	0
 9574              	.LLST3:
 9575 00f7 00000000 		.4byte	.LVL8
 9576 00fb 06000000 		.4byte	.LVL10
 9577 00ff 0100     		.2byte	0x1
 9578 0101 50       		.byte	0x50
 9579 0102 06000000 		.4byte	.LVL10
 9580 0106 12000000 		.4byte	.LVL13
 9581 010a 0100     		.2byte	0x1
 9582 010c 50       		.byte	0x50
 9583 010d 00000000 		.4byte	0
 9584 0111 00000000 		.4byte	0
 9585              	.LLST4:
 9586 0115 00000000 		.4byte	.LVL8
 9587 0119 04000000 		.4byte	.LVL9
 9588 011d 0200     		.2byte	0x2
 9589 011f 30       		.byte	0x30
 9590 0120 9F       		.byte	0x9f
 9591 0121 04000000 		.4byte	.LVL9
 9592 0125 14000000 		.4byte	.LFE69
 9593 0129 0100     		.2byte	0x1
 9594 012b 53       		.byte	0x53
 9595 012c 00000000 		.4byte	0
 9596 0130 00000000 		.4byte	0
 9597              	.LLST5:
 9598 0134 00000000 		.4byte	.LVL14
 9599 0138 06000000 		.4byte	.LVL15
 9600 013c 0100     		.2byte	0x1
 9601 013e 50       		.byte	0x50
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 276


 9602 013f 06000000 		.4byte	.LVL15
 9603 0143 10000000 		.4byte	.LVL18
 9604 0147 0100     		.2byte	0x1
 9605 0149 54       		.byte	0x54
 9606 014a 10000000 		.4byte	.LVL18
 9607 014e 12000000 		.4byte	.LFE71
 9608 0152 0400     		.2byte	0x4
 9609 0154 F3       		.byte	0xf3
 9610 0155 01       		.uleb128 0x1
 9611 0156 50       		.byte	0x50
 9612 0157 9F       		.byte	0x9f
 9613 0158 00000000 		.4byte	0
 9614 015c 00000000 		.4byte	0
 9615              	.LLST6:
 9616 0160 00000000 		.4byte	.LVL19
 9617 0164 16000000 		.4byte	.LVL22
 9618 0168 0100     		.2byte	0x1
 9619 016a 50       		.byte	0x50
 9620 016b 16000000 		.4byte	.LVL22
 9621 016f 8A000000 		.4byte	.LVL37
 9622 0173 0200     		.2byte	0x2
 9623 0175 7D       		.byte	0x7d
 9624 0176 00       		.sleb128 0
 9625 0177 8A000000 		.4byte	.LVL37
 9626 017b 90000000 		.4byte	.LFE35
 9627 017f 0200     		.2byte	0x2
 9628 0181 91       		.byte	0x91
 9629 0182 60       		.sleb128 -32
 9630 0183 00000000 		.4byte	0
 9631 0187 00000000 		.4byte	0
 9632              	.LLST7:
 9633 018b 00000000 		.4byte	.LVL19
 9634 018f 14000000 		.4byte	.LVL21
 9635 0193 0100     		.2byte	0x1
 9636 0195 51       		.byte	0x51
 9637 0196 14000000 		.4byte	.LVL21
 9638 019a 8A000000 		.4byte	.LVL38
 9639 019e 0100     		.2byte	0x1
 9640 01a0 55       		.byte	0x55
 9641 01a1 8A000000 		.4byte	.LVL38
 9642 01a5 90000000 		.4byte	.LFE35
 9643 01a9 0400     		.2byte	0x4
 9644 01ab F3       		.byte	0xf3
 9645 01ac 01       		.uleb128 0x1
 9646 01ad 51       		.byte	0x51
 9647 01ae 9F       		.byte	0x9f
 9648 01af 00000000 		.4byte	0
 9649 01b3 00000000 		.4byte	0
 9650              	.LLST8:
 9651 01b7 00000000 		.4byte	.LVL19
 9652 01bb 12000000 		.4byte	.LVL20
 9653 01bf 0100     		.2byte	0x1
 9654 01c1 52       		.byte	0x52
 9655 01c2 12000000 		.4byte	.LVL20
 9656 01c6 2C000000 		.4byte	.LVL26
 9657 01ca 0100     		.2byte	0x1
 9658 01cc 57       		.byte	0x57
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 277


 9659 01cd 2C000000 		.4byte	.LVL26
 9660 01d1 90000000 		.4byte	.LFE35
 9661 01d5 0400     		.2byte	0x4
 9662 01d7 F3       		.byte	0xf3
 9663 01d8 01       		.uleb128 0x1
 9664 01d9 52       		.byte	0x52
 9665 01da 9F       		.byte	0x9f
 9666 01db 00000000 		.4byte	0
 9667 01df 00000000 		.4byte	0
 9668              	.LLST9:
 9669 01e3 00000000 		.4byte	.LVL19
 9670 01e7 19000000 		.4byte	.LVL23-1
 9671 01eb 0100     		.2byte	0x1
 9672 01ed 53       		.byte	0x53
 9673 01ee 19000000 		.4byte	.LVL23-1
 9674 01f2 90000000 		.4byte	.LFE35
 9675 01f6 0200     		.2byte	0x2
 9676 01f8 91       		.byte	0x91
 9677 01f9 64       		.sleb128 -28
 9678 01fa 00000000 		.4byte	0
 9679 01fe 00000000 		.4byte	0
 9680              	.LLST10:
 9681 0202 00000000 		.4byte	.LVL19
 9682 0206 58000000 		.4byte	.LVL32
 9683 020a 0200     		.2byte	0x2
 9684 020c 91       		.byte	0x91
 9685 020d 00       		.sleb128 0
 9686 020e 58000000 		.4byte	.LVL32
 9687 0212 70000000 		.4byte	.LVL35
 9688 0216 0100     		.2byte	0x1
 9689 0218 54       		.byte	0x54
 9690 0219 00000000 		.4byte	0
 9691 021d 00000000 		.4byte	0
 9692              	.LLST11:
 9693 0221 26000000 		.4byte	.LVL24
 9694 0225 2A000000 		.4byte	.LVL25
 9695 0229 0100     		.2byte	0x1
 9696 022b 53       		.byte	0x53
 9697 022c 2A000000 		.4byte	.LVL25
 9698 0230 2C000000 		.4byte	.LVL26
 9699 0234 0C00     		.2byte	0xc
 9700 0236 77       		.byte	0x77
 9701 0237 FFFFFFFF 		.sleb128 1073741823
 9701      03
 9702 023c 32       		.byte	0x32
 9703 023d 24       		.byte	0x24
 9704 023e 7C       		.byte	0x7c
 9705 023f 00       		.sleb128 0
 9706 0240 22       		.byte	0x22
 9707 0241 9F       		.byte	0x9f
 9708 0242 2C000000 		.4byte	.LVL26
 9709 0246 32000000 		.4byte	.LVL27
 9710 024a 0100     		.2byte	0x1
 9711 024c 53       		.byte	0x53
 9712 024d 32000000 		.4byte	.LVL27
 9713 0251 46000000 		.4byte	.LVL29
 9714 0255 0100     		.2byte	0x1
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 278


 9715 0257 57       		.byte	0x57
 9716 0258 46000000 		.4byte	.LVL29
 9717 025c 48000000 		.4byte	.LVL30
 9718 0260 0100     		.2byte	0x1
 9719 0262 53       		.byte	0x53
 9720 0263 48000000 		.4byte	.LVL30
 9721 0267 8A000000 		.4byte	.LVL39
 9722 026b 0100     		.2byte	0x1
 9723 026d 57       		.byte	0x57
 9724 026e 00000000 		.4byte	0
 9725 0272 00000000 		.4byte	0
 9726              	.LLST12:
 9727 0276 32000000 		.4byte	.LVL27
 9728 027a 46000000 		.4byte	.LVL29
 9729 027e 0100     		.2byte	0x1
 9730 0280 53       		.byte	0x53
 9731 0281 48000000 		.4byte	.LVL30
 9732 0285 50000000 		.4byte	.LVL31
 9733 0289 0100     		.2byte	0x1
 9734 028b 53       		.byte	0x53
 9735 028c 00000000 		.4byte	0
 9736 0290 00000000 		.4byte	0
 9737              	.LLST13:
 9738 0294 02000000 		.4byte	.LVL40
 9739 0298 06000000 		.4byte	.LVL41
 9740 029c 0200     		.2byte	0x2
 9741 029e 30       		.byte	0x30
 9742 029f 9F       		.byte	0x9f
 9743 02a0 06000000 		.4byte	.LVL41
 9744 02a4 1E000000 		.4byte	.LVL44
 9745 02a8 0100     		.2byte	0x1
 9746 02aa 54       		.byte	0x54
 9747 02ab 00000000 		.4byte	0
 9748 02af 00000000 		.4byte	0
 9749              	.LLST14:
 9750 02b3 00000000 		.4byte	.LVL50
 9751 02b7 07000000 		.4byte	.LVL51-1
 9752 02bb 0100     		.2byte	0x1
 9753 02bd 50       		.byte	0x50
 9754 02be 07000000 		.4byte	.LVL51-1
 9755 02c2 AA000000 		.4byte	.LVL57
 9756 02c6 0100     		.2byte	0x1
 9757 02c8 54       		.byte	0x54
 9758 02c9 AA000000 		.4byte	.LVL57
 9759 02cd B4000000 		.4byte	.LFE36
 9760 02d1 0400     		.2byte	0x4
 9761 02d3 F3       		.byte	0xf3
 9762 02d4 01       		.uleb128 0x1
 9763 02d5 50       		.byte	0x50
 9764 02d6 9F       		.byte	0x9f
 9765 02d7 00000000 		.4byte	0
 9766 02db 00000000 		.4byte	0
 9767              	.LLST15:
 9768 02df 5E000000 		.4byte	.LVL53
 9769 02e3 6E000000 		.4byte	.LVL54
 9770 02e7 0100     		.2byte	0x1
 9771 02e9 53       		.byte	0x53
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 279


 9772 02ea 00000000 		.4byte	0
 9773 02ee 00000000 		.4byte	0
 9774              	.LLST16:
 9775 02f2 0E000000 		.4byte	.LVL59
 9776 02f6 2A000000 		.4byte	.LVL62
 9777 02fa 0100     		.2byte	0x1
 9778 02fc 55       		.byte	0x55
 9779 02fd 00000000 		.4byte	0
 9780 0301 00000000 		.4byte	0
 9781              	.LLST17:
 9782 0305 00000000 		.4byte	.LVL63
 9783 0309 02000000 		.4byte	.LVL64
 9784 030d 0100     		.2byte	0x1
 9785 030f 50       		.byte	0x50
 9786 0310 02000000 		.4byte	.LVL64
 9787 0314 08000000 		.4byte	.LFE66
 9788 0318 0400     		.2byte	0x4
 9789 031a F3       		.byte	0xf3
 9790 031b 01       		.uleb128 0x1
 9791 031c 50       		.byte	0x50
 9792 031d 9F       		.byte	0x9f
 9793 031e 00000000 		.4byte	0
 9794 0322 00000000 		.4byte	0
 9795              	.LLST18:
 9796 0326 00000000 		.4byte	.LVL66
 9797 032a 0C000000 		.4byte	.LVL68
 9798 032e 0100     		.2byte	0x1
 9799 0330 50       		.byte	0x50
 9800 0331 0C000000 		.4byte	.LVL68
 9801 0335 28000000 		.4byte	.LVL71
 9802 0339 0100     		.2byte	0x1
 9803 033b 54       		.byte	0x54
 9804 033c 28000000 		.4byte	.LVL71
 9805 0340 44000000 		.4byte	.LVL72
 9806 0344 0400     		.2byte	0x4
 9807 0346 F3       		.byte	0xf3
 9808 0347 01       		.uleb128 0x1
 9809 0348 50       		.byte	0x50
 9810 0349 9F       		.byte	0x9f
 9811 034a 44000000 		.4byte	.LVL72
 9812 034e 46000000 		.4byte	.LVL73
 9813 0352 0100     		.2byte	0x1
 9814 0354 54       		.byte	0x54
 9815 0355 46000000 		.4byte	.LVL73
 9816 0359 80000000 		.4byte	.LFE86
 9817 035d 0400     		.2byte	0x4
 9818 035f F3       		.byte	0xf3
 9819 0360 01       		.uleb128 0x1
 9820 0361 50       		.byte	0x50
 9821 0362 9F       		.byte	0x9f
 9822 0363 00000000 		.4byte	0
 9823 0367 00000000 		.4byte	0
 9824              	.LLST19:
 9825 036b 00000000 		.4byte	.LVL66
 9826 036f 11000000 		.4byte	.LVL69-1
 9827 0373 0100     		.2byte	0x1
 9828 0375 51       		.byte	0x51
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 280


 9829 0376 11000000 		.4byte	.LVL69-1
 9830 037a 60000000 		.4byte	.LVL75
 9831 037e 0100     		.2byte	0x1
 9832 0380 55       		.byte	0x55
 9833 0381 60000000 		.4byte	.LVL75
 9834 0385 80000000 		.4byte	.LFE86
 9835 0389 0400     		.2byte	0x4
 9836 038b F3       		.byte	0xf3
 9837 038c 01       		.uleb128 0x1
 9838 038d 51       		.byte	0x51
 9839 038e 9F       		.byte	0x9f
 9840 038f 00000000 		.4byte	0
 9841 0393 00000000 		.4byte	0
 9842              	.LLST20:
 9843 0397 46000000 		.4byte	.LVL73
 9844 039b 76000000 		.4byte	.LVL77
 9845 039f 0100     		.2byte	0x1
 9846 03a1 54       		.byte	0x54
 9847 03a2 00000000 		.4byte	0
 9848 03a6 00000000 		.4byte	0
 9849              	.LLST21:
 9850 03aa 0A000000 		.4byte	.LVL67
 9851 03ae 76000000 		.4byte	.LVL78
 9852 03b2 0100     		.2byte	0x1
 9853 03b4 56       		.byte	0x56
 9854 03b5 00000000 		.4byte	0
 9855 03b9 00000000 		.4byte	0
 9856              	.LLST22:
 9857 03bd 1E000000 		.4byte	.LVL70
 9858 03c1 44000000 		.4byte	.LVL72
 9859 03c5 0100     		.2byte	0x1
 9860 03c7 51       		.byte	0x51
 9861 03c8 00000000 		.4byte	0
 9862 03cc 00000000 		.4byte	0
 9863              	.LLST23:
 9864 03d0 00000000 		.4byte	.LVL79
 9865 03d4 0E000000 		.4byte	.LVL80
 9866 03d8 0100     		.2byte	0x1
 9867 03da 50       		.byte	0x50
 9868 03db 0E000000 		.4byte	.LVL80
 9869 03df 66000000 		.4byte	.LFE34
 9870 03e3 0200     		.2byte	0x2
 9871 03e5 91       		.byte	0x91
 9872 03e6 60       		.sleb128 -32
 9873 03e7 00000000 		.4byte	0
 9874 03eb 00000000 		.4byte	0
 9875              	.LLST24:
 9876 03ef 00000000 		.4byte	.LVL79
 9877 03f3 11000000 		.4byte	.LVL81-1
 9878 03f7 0100     		.2byte	0x1
 9879 03f9 51       		.byte	0x51
 9880 03fa 11000000 		.4byte	.LVL81-1
 9881 03fe 66000000 		.4byte	.LFE34
 9882 0402 0200     		.2byte	0x2
 9883 0404 91       		.byte	0x91
 9884 0405 64       		.sleb128 -28
 9885 0406 00000000 		.4byte	0
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 281


 9886 040a 00000000 		.4byte	0
 9887              	.LLST25:
 9888 040e 00000000 		.4byte	.LVL79
 9889 0412 11000000 		.4byte	.LVL81-1
 9890 0416 0100     		.2byte	0x1
 9891 0418 52       		.byte	0x52
 9892 0419 11000000 		.4byte	.LVL81-1
 9893 041d 66000000 		.4byte	.LFE34
 9894 0421 0400     		.2byte	0x4
 9895 0423 F3       		.byte	0xf3
 9896 0424 01       		.uleb128 0x1
 9897 0425 52       		.byte	0x52
 9898 0426 9F       		.byte	0x9f
 9899 0427 00000000 		.4byte	0
 9900 042b 00000000 		.4byte	0
 9901              	.LLST26:
 9902 042f 00000000 		.4byte	.LVL79
 9903 0433 11000000 		.4byte	.LVL81-1
 9904 0437 0100     		.2byte	0x1
 9905 0439 53       		.byte	0x53
 9906 043a 11000000 		.4byte	.LVL81-1
 9907 043e 64000000 		.4byte	.LVL98
 9908 0442 0100     		.2byte	0x1
 9909 0444 57       		.byte	0x57
 9910 0445 64000000 		.4byte	.LVL98
 9911 0449 66000000 		.4byte	.LFE34
 9912 044d 0400     		.2byte	0x4
 9913 044f F3       		.byte	0xf3
 9914 0450 01       		.uleb128 0x1
 9915 0451 53       		.byte	0x53
 9916 0452 9F       		.byte	0x9f
 9917 0453 00000000 		.4byte	0
 9918 0457 00000000 		.4byte	0
 9919              	.LLST27:
 9920 045b 1E000000 		.4byte	.LVL85
 9921 045f 27000000 		.4byte	.LVL86-1
 9922 0463 0100     		.2byte	0x1
 9923 0465 50       		.byte	0x50
 9924 0466 27000000 		.4byte	.LVL86-1
 9925 046a 2C000000 		.4byte	.LVL87
 9926 046e 0100     		.2byte	0x1
 9927 0470 55       		.byte	0x55
 9928 0471 2C000000 		.4byte	.LVL87
 9929 0475 2E000000 		.4byte	.LVL88
 9930 0479 0100     		.2byte	0x1
 9931 047b 50       		.byte	0x50
 9932 047c 2E000000 		.4byte	.LVL88
 9933 0480 34000000 		.4byte	.LVL90
 9934 0484 0100     		.2byte	0x1
 9935 0486 55       		.byte	0x55
 9936 0487 36000000 		.4byte	.LVL91
 9937 048b 64000000 		.4byte	.LVL96
 9938 048f 0100     		.2byte	0x1
 9939 0491 55       		.byte	0x55
 9940 0492 00000000 		.4byte	0
 9941 0496 00000000 		.4byte	0
 9942              	.LLST28:
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 282


 9943 049a 5A000000 		.4byte	.LVL93
 9944 049e 5E000000 		.4byte	.LVL94
 9945 04a2 0200     		.2byte	0x2
 9946 04a4 31       		.byte	0x31
 9947 04a5 9F       		.byte	0x9f
 9948 04a6 62000000 		.4byte	.LVL95
 9949 04aa 66000000 		.4byte	.LFE34
 9950 04ae 0100     		.2byte	0x1
 9951 04b0 50       		.byte	0x50
 9952 04b1 00000000 		.4byte	0
 9953 04b5 00000000 		.4byte	0
 9954              	.LLST29:
 9955 04b9 14000000 		.4byte	.LVL82
 9956 04bd 18000000 		.4byte	.LVL83
 9957 04c1 0100     		.2byte	0x1
 9958 04c3 50       		.byte	0x50
 9959 04c4 18000000 		.4byte	.LVL83
 9960 04c8 34000000 		.4byte	.LVL90
 9961 04cc 0100     		.2byte	0x1
 9962 04ce 56       		.byte	0x56
 9963 04cf 34000000 		.4byte	.LVL90
 9964 04d3 36000000 		.4byte	.LVL91
 9965 04d7 0100     		.2byte	0x1
 9966 04d9 50       		.byte	0x50
 9967 04da 36000000 		.4byte	.LVL91
 9968 04de 64000000 		.4byte	.LVL97
 9969 04e2 0100     		.2byte	0x1
 9970 04e4 56       		.byte	0x56
 9971 04e5 00000000 		.4byte	0
 9972 04e9 00000000 		.4byte	0
 9973              	.LLST30:
 9974 04ed 00000000 		.4byte	.LVL99
 9975 04f1 07000000 		.4byte	.LVL100-1
 9976 04f5 0100     		.2byte	0x1
 9977 04f7 50       		.byte	0x50
 9978 04f8 07000000 		.4byte	.LVL100-1
 9979 04fc 10000000 		.4byte	.LVL101
 9980 0500 0100     		.2byte	0x1
 9981 0502 54       		.byte	0x54
 9982 0503 00000000 		.4byte	0
 9983 0507 00000000 		.4byte	0
 9984              	.LLST31:
 9985 050b 10000000 		.4byte	.LVL101
 9986 050f 7A000000 		.4byte	.LVL109
 9987 0513 0100     		.2byte	0x1
 9988 0515 54       		.byte	0x54
 9989 0516 7A000000 		.4byte	.LVL109
 9990 051a 7A000000 		.4byte	.LVL110
 9991 051e 0300     		.2byte	0x3
 9992 0520 75       		.byte	0x75
 9993 0521 7C       		.sleb128 -4
 9994 0522 9F       		.byte	0x9f
 9995 0523 00000000 		.4byte	0
 9996 0527 00000000 		.4byte	0
 9997              	.LLST32:
 9998 052b 00000000 		.4byte	.LVL111
 9999 052f 07000000 		.4byte	.LVL112-1
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 283


 10000 0533 0100     		.2byte	0x1
 10001 0535 50       		.byte	0x50
 10002 0536 07000000 		.4byte	.LVL112-1
 10003 053a 10000000 		.4byte	.LVL113
 10004 053e 0100     		.2byte	0x1
 10005 0540 54       		.byte	0x54
 10006 0541 10000000 		.4byte	.LVL113
 10007 0545 20000000 		.4byte	.LFE40
 10008 0549 0400     		.2byte	0x4
 10009 054b F3       		.byte	0xf3
 10010 054c 01       		.uleb128 0x1
 10011 054d 50       		.byte	0x50
 10012 054e 9F       		.byte	0x9f
 10013 054f 00000000 		.4byte	0
 10014 0553 00000000 		.4byte	0
 10015              	.LLST33:
 10016 0557 10000000 		.4byte	.LVL113
 10017 055b 12000000 		.4byte	.LVL114
 10018 055f 0100     		.2byte	0x1
 10019 0561 54       		.byte	0x54
 10020 0562 00000000 		.4byte	0
 10021 0566 00000000 		.4byte	0
 10022              	.LLST34:
 10023 056a 12000000 		.4byte	.LVL114
 10024 056e 18000000 		.4byte	.LVL116
 10025 0572 0100     		.2byte	0x1
 10026 0574 54       		.byte	0x54
 10027 0575 18000000 		.4byte	.LVL116
 10028 0579 20000000 		.4byte	.LFE40
 10029 057d 0100     		.2byte	0x1
 10030 057f 50       		.byte	0x50
 10031 0580 00000000 		.4byte	0
 10032 0584 00000000 		.4byte	0
 10033              	.LLST35:
 10034 0588 00000000 		.4byte	.LVL117
 10035 058c 07000000 		.4byte	.LVL118-1
 10036 0590 0100     		.2byte	0x1
 10037 0592 50       		.byte	0x50
 10038 0593 07000000 		.4byte	.LVL118-1
 10039 0597 10000000 		.4byte	.LVL119
 10040 059b 0100     		.2byte	0x1
 10041 059d 54       		.byte	0x54
 10042 059e 10000000 		.4byte	.LVL119
 10043 05a2 20000000 		.4byte	.LFE41
 10044 05a6 0400     		.2byte	0x4
 10045 05a8 F3       		.byte	0xf3
 10046 05a9 01       		.uleb128 0x1
 10047 05aa 50       		.byte	0x50
 10048 05ab 9F       		.byte	0x9f
 10049 05ac 00000000 		.4byte	0
 10050 05b0 00000000 		.4byte	0
 10051              	.LLST36:
 10052 05b4 10000000 		.4byte	.LVL119
 10053 05b8 12000000 		.4byte	.LVL120
 10054 05bc 0100     		.2byte	0x1
 10055 05be 54       		.byte	0x54
 10056 05bf 00000000 		.4byte	0
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 284


 10057 05c3 00000000 		.4byte	0
 10058              	.LLST37:
 10059 05c7 12000000 		.4byte	.LVL120
 10060 05cb 18000000 		.4byte	.LVL122
 10061 05cf 0100     		.2byte	0x1
 10062 05d1 54       		.byte	0x54
 10063 05d2 18000000 		.4byte	.LVL122
 10064 05d6 20000000 		.4byte	.LFE41
 10065 05da 0100     		.2byte	0x1
 10066 05dc 50       		.byte	0x50
 10067 05dd 00000000 		.4byte	0
 10068 05e1 00000000 		.4byte	0
 10069              	.LLST38:
 10070 05e5 08000000 		.4byte	.LVL118
 10071 05e9 15000000 		.4byte	.LVL121-1
 10072 05ed 0100     		.2byte	0x1
 10073 05ef 50       		.byte	0x50
 10074 05f0 00000000 		.4byte	0
 10075 05f4 00000000 		.4byte	0
 10076              	.LLST39:
 10077 05f8 00000000 		.4byte	.LVL123
 10078 05fc 0F000000 		.4byte	.LVL126-1
 10079 0600 0100     		.2byte	0x1
 10080 0602 50       		.byte	0x50
 10081 0603 0F000000 		.4byte	.LVL126-1
 10082 0607 18000000 		.4byte	.LVL127
 10083 060b 0100     		.2byte	0x1
 10084 060d 54       		.byte	0x54
 10085 060e 00000000 		.4byte	0
 10086 0612 00000000 		.4byte	0
 10087              	.LLST40:
 10088 0616 00000000 		.4byte	.LVL123
 10089 061a 0C000000 		.4byte	.LVL125
 10090 061e 0100     		.2byte	0x1
 10091 0620 51       		.byte	0x51
 10092 0621 0C000000 		.4byte	.LVL125
 10093 0625 60000000 		.4byte	.LVL132
 10094 0629 0100     		.2byte	0x1
 10095 062b 55       		.byte	0x55
 10096 062c 60000000 		.4byte	.LVL132
 10097 0630 7B000000 		.4byte	.LVL134-1
 10098 0634 0300     		.2byte	0x3
 10099 0636 74       		.byte	0x74
 10100 0637 C000     		.sleb128 64
 10101 0639 00000000 		.4byte	0
 10102 063d 00000000 		.4byte	0
 10103              	.LLST41:
 10104 0641 18000000 		.4byte	.LVL127
 10105 0645 D0000000 		.4byte	.LVL139
 10106 0649 0100     		.2byte	0x1
 10107 064b 54       		.byte	0x54
 10108 064c 00000000 		.4byte	0
 10109 0650 00000000 		.4byte	0
 10110              	.LLST42:
 10111 0654 1A000000 		.4byte	.LVL128
 10112 0658 58000000 		.4byte	.LVL131
 10113 065c 0100     		.2byte	0x1
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 285


 10114 065e 52       		.byte	0x52
 10115 065f 00000000 		.4byte	0
 10116 0663 00000000 		.4byte	0
 10117              	.LLST43:
 10118 0667 4E000000 		.4byte	.LVL130
 10119 066b 66000000 		.4byte	.LVL133
 10120 066f 0100     		.2byte	0x1
 10121 0671 53       		.byte	0x53
 10122 0672 00000000 		.4byte	0
 10123 0676 00000000 		.4byte	0
 10124              	.LLST44:
 10125 067a 06000000 		.4byte	.LVL124
 10126 067e 4C000000 		.4byte	.LVL129
 10127 0682 0200     		.2byte	0x2
 10128 0684 30       		.byte	0x30
 10129 0685 9F       		.byte	0x9f
 10130 0686 4C000000 		.4byte	.LVL129
 10131 068a CC000000 		.4byte	.LVL137
 10132 068e 0100     		.2byte	0x1
 10133 0690 56       		.byte	0x56
 10134 0691 00000000 		.4byte	0
 10135 0695 00000000 		.4byte	0
 10136              	.LLST45:
 10137 0699 96000000 		.4byte	.LVL135
 10138 069d A4000000 		.4byte	.LVL136
 10139 06a1 0100     		.2byte	0x1
 10140 06a3 53       		.byte	0x53
 10141 06a4 00000000 		.4byte	0
 10142 06a8 00000000 		.4byte	0
 10143              	.LLST46:
 10144 06ac 00000000 		.4byte	.LVL140
 10145 06b0 13000000 		.4byte	.LVL142-1
 10146 06b4 0100     		.2byte	0x1
 10147 06b6 50       		.byte	0x50
 10148 06b7 13000000 		.4byte	.LVL142-1
 10149 06bb 82000000 		.4byte	.LVL149
 10150 06bf 0100     		.2byte	0x1
 10151 06c1 54       		.byte	0x54
 10152 06c2 82000000 		.4byte	.LVL149
 10153 06c6 8C000000 		.4byte	.LFE45
 10154 06ca 0400     		.2byte	0x4
 10155 06cc F3       		.byte	0xf3
 10156 06cd 01       		.uleb128 0x1
 10157 06ce 50       		.byte	0x50
 10158 06cf 9F       		.byte	0x9f
 10159 06d0 00000000 		.4byte	0
 10160 06d4 00000000 		.4byte	0
 10161              	.LLST47:
 10162 06d8 04000000 		.4byte	.LVL141
 10163 06dc 13000000 		.4byte	.LVL142-1
 10164 06e0 0100     		.2byte	0x1
 10165 06e2 50       		.byte	0x50
 10166 06e3 13000000 		.4byte	.LVL142-1
 10167 06e7 82000000 		.4byte	.LVL149
 10168 06eb 0100     		.2byte	0x1
 10169 06ed 54       		.byte	0x54
 10170 06ee 82000000 		.4byte	.LVL149
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 286


 10171 06f2 8C000000 		.4byte	.LFE45
 10172 06f6 0400     		.2byte	0x4
 10173 06f8 F3       		.byte	0xf3
 10174 06f9 01       		.uleb128 0x1
 10175 06fa 50       		.byte	0x50
 10176 06fb 9F       		.byte	0x9f
 10177 06fc 00000000 		.4byte	0
 10178 0700 00000000 		.4byte	0
 10179              	.LLST48:
 10180 0704 40000000 		.4byte	.LVL145
 10181 0708 4E000000 		.4byte	.LVL146
 10182 070c 0100     		.2byte	0x1
 10183 070e 53       		.byte	0x53
 10184 070f 00000000 		.4byte	0
 10185 0713 00000000 		.4byte	0
 10186              	.LLST49:
 10187 0717 00000000 		.4byte	.LVL150
 10188 071b 09000000 		.4byte	.LVL152-1
 10189 071f 0100     		.2byte	0x1
 10190 0721 50       		.byte	0x50
 10191 0722 09000000 		.4byte	.LVL152-1
 10192 0726 A4000000 		.4byte	.LVL166
 10193 072a 0100     		.2byte	0x1
 10194 072c 54       		.byte	0x54
 10195 072d A4000000 		.4byte	.LVL166
 10196 0731 B0000000 		.4byte	.LFE46
 10197 0735 0400     		.2byte	0x4
 10198 0737 F3       		.byte	0xf3
 10199 0738 01       		.uleb128 0x1
 10200 0739 50       		.byte	0x50
 10201 073a 9F       		.byte	0x9f
 10202 073b 00000000 		.4byte	0
 10203 073f 00000000 		.4byte	0
 10204              	.LLST50:
 10205 0743 06000000 		.4byte	.LVL151
 10206 0747 2A000000 		.4byte	.LVL156
 10207 074b 0200     		.2byte	0x2
 10208 074d 30       		.byte	0x30
 10209 074e 9F       		.byte	0x9f
 10210 074f 2A000000 		.4byte	.LVL156
 10211 0753 34000000 		.4byte	.LVL157
 10212 0757 0200     		.2byte	0x2
 10213 0759 31       		.byte	0x31
 10214 075a 9F       		.byte	0x9f
 10215 075b 34000000 		.4byte	.LVL157
 10216 075f 36000000 		.4byte	.LVL158
 10217 0763 0200     		.2byte	0x2
 10218 0765 30       		.byte	0x30
 10219 0766 9F       		.byte	0x9f
 10220 0767 36000000 		.4byte	.LVL158
 10221 076b 88000000 		.4byte	.LVL162
 10222 076f 0100     		.2byte	0x1
 10223 0771 56       		.byte	0x56
 10224 0772 88000000 		.4byte	.LVL162
 10225 0776 9A000000 		.4byte	.LVL164
 10226 077a 0200     		.2byte	0x2
 10227 077c 30       		.byte	0x30
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 287


 10228 077d 9F       		.byte	0x9f
 10229 077e 9A000000 		.4byte	.LVL164
 10230 0782 A4000000 		.4byte	.LVL167
 10231 0786 0100     		.2byte	0x1
 10232 0788 56       		.byte	0x56
 10233 0789 A4000000 		.4byte	.LVL167
 10234 078d B0000000 		.4byte	.LFE46
 10235 0791 0100     		.2byte	0x1
 10236 0793 50       		.byte	0x50
 10237 0794 00000000 		.4byte	0
 10238 0798 00000000 		.4byte	0
 10239              	.LLST51:
 10240 079c 06000000 		.4byte	.LVL151
 10241 07a0 09000000 		.4byte	.LVL152-1
 10242 07a4 0100     		.2byte	0x1
 10243 07a6 50       		.byte	0x50
 10244 07a7 09000000 		.4byte	.LVL152-1
 10245 07ab A4000000 		.4byte	.LVL166
 10246 07af 0100     		.2byte	0x1
 10247 07b1 54       		.byte	0x54
 10248 07b2 A4000000 		.4byte	.LVL166
 10249 07b6 B0000000 		.4byte	.LFE46
 10250 07ba 0400     		.2byte	0x4
 10251 07bc F3       		.byte	0xf3
 10252 07bd 01       		.uleb128 0x1
 10253 07be 50       		.byte	0x50
 10254 07bf 9F       		.byte	0x9f
 10255 07c0 00000000 		.4byte	0
 10256 07c4 00000000 		.4byte	0
 10257              	.LLST52:
 10258 07c8 0C000000 		.4byte	.LVL153
 10259 07cc 0E000000 		.4byte	.LVL154
 10260 07d0 0100     		.2byte	0x1
 10261 07d2 50       		.byte	0x50
 10262 07d3 0E000000 		.4byte	.LVL154
 10263 07d7 B0000000 		.4byte	.LFE46
 10264 07db 0200     		.2byte	0x2
 10265 07dd 91       		.byte	0x91
 10266 07de 64       		.sleb128 -28
 10267 07df 00000000 		.4byte	0
 10268 07e3 00000000 		.4byte	0
 10269              	.LLST53:
 10270 07e7 58000000 		.4byte	.LVL160
 10271 07eb 66000000 		.4byte	.LVL161
 10272 07ef 0100     		.2byte	0x1
 10273 07f1 53       		.byte	0x53
 10274 07f2 00000000 		.4byte	0
 10275 07f6 00000000 		.4byte	0
 10276              	.LLST54:
 10277 07fa 18000000 		.4byte	.LVL168
 10278 07fe 33000000 		.4byte	.LVL169-1
 10279 0802 0100     		.2byte	0x1
 10280 0804 50       		.byte	0x50
 10281 0805 00000000 		.4byte	0
 10282 0809 00000000 		.4byte	0
 10283              	.LLST55:
 10284 080d 00000000 		.4byte	.LVL174
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 288


 10285 0811 08000000 		.4byte	.LVL175
 10286 0815 0100     		.2byte	0x1
 10287 0817 50       		.byte	0x50
 10288 0818 00000000 		.4byte	0
 10289 081c 00000000 		.4byte	0
 10290              	.LLST56:
 10291 0820 08000000 		.4byte	.LVL175
 10292 0824 0A000000 		.4byte	.LVL176
 10293 0828 0100     		.2byte	0x1
 10294 082a 50       		.byte	0x50
 10295 082b 0A000000 		.4byte	.LVL176
 10296 082f 10000000 		.4byte	.LFE54
 10297 0833 0300     		.2byte	0x3
 10298 0835 70       		.byte	0x70
 10299 0836 4C       		.sleb128 -52
 10300 0837 9F       		.byte	0x9f
 10301 0838 00000000 		.4byte	0
 10302 083c 00000000 		.4byte	0
 10303              	.LLST57:
 10304 0840 62000000 		.4byte	.LVL185
 10305 0844 6A000000 		.4byte	.LVL187
 10306 0848 0100     		.2byte	0x1
 10307 084a 53       		.byte	0x53
 10308 084b 6E000000 		.4byte	.LVL188
 10309 084f 08010000 		.4byte	.LVL196
 10310 0853 0100     		.2byte	0x1
 10311 0855 53       		.byte	0x53
 10312 0856 00000000 		.4byte	0
 10313 085a 00000000 		.4byte	0
 10314              	.LLST58:
 10315 085e 64000000 		.4byte	.LVL186
 10316 0862 70000000 		.4byte	.LVL189
 10317 0866 0100     		.2byte	0x1
 10318 0868 52       		.byte	0x52
 10319 0869 70000000 		.4byte	.LVL189
 10320 086d 76000000 		.4byte	.LVL190
 10321 0871 0200     		.2byte	0x2
 10322 0873 73       		.byte	0x73
 10323 0874 04       		.sleb128 4
 10324 0875 00000000 		.4byte	0
 10325 0879 00000000 		.4byte	0
 10326              	.LLST59:
 10327 087d 04000000 		.4byte	.LVL177
 10328 0881 3C000000 		.4byte	.LVL181
 10329 0885 0200     		.2byte	0x2
 10330 0887 30       		.byte	0x30
 10331 0888 9F       		.byte	0x9f
 10332 0889 3C000000 		.4byte	.LVL181
 10333 088d 40000000 		.4byte	.LVL182
 10334 0891 0200     		.2byte	0x2
 10335 0893 91       		.byte	0x91
 10336 0894 64       		.sleb128 -28
 10337 0895 42000000 		.4byte	.LVL183
 10338 0899 46000000 		.4byte	.LVL184
 10339 089d 0200     		.2byte	0x2
 10340 089f 30       		.byte	0x30
 10341 08a0 9F       		.byte	0x9f
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 289


 10342 08a1 46000000 		.4byte	.LVL184
 10343 08a5 36010000 		.4byte	.LVL199
 10344 08a9 0200     		.2byte	0x2
 10345 08ab 91       		.byte	0x91
 10346 08ac 64       		.sleb128 -28
 10347 08ad 36010000 		.4byte	.LVL199
 10348 08b1 44010000 		.4byte	.LVL200
 10349 08b5 0200     		.2byte	0x2
 10350 08b7 30       		.byte	0x30
 10351 08b8 9F       		.byte	0x9f
 10352 08b9 44010000 		.4byte	.LVL200
 10353 08bd 5C010000 		.4byte	.LFE56
 10354 08c1 0200     		.2byte	0x2
 10355 08c3 91       		.byte	0x91
 10356 08c4 64       		.sleb128 -28
 10357 08c5 00000000 		.4byte	0
 10358 08c9 00000000 		.4byte	0
 10359              	.LLST60:
 10360 08cd 14000000 		.4byte	.LVL178
 10361 08d1 36010000 		.4byte	.LVL199
 10362 08d5 0100     		.2byte	0x1
 10363 08d7 54       		.byte	0x54
 10364 08d8 44010000 		.4byte	.LVL200
 10365 08dc 48010000 		.4byte	.LVL201
 10366 08e0 0100     		.2byte	0x1
 10367 08e2 54       		.byte	0x54
 10368 08e3 00000000 		.4byte	0
 10369 08e7 00000000 		.4byte	0
 10370              	.LLST61:
 10371 08eb 1E000000 		.4byte	.LVL179
 10372 08ef 2D000000 		.4byte	.LVL180-1
 10373 08f3 0100     		.2byte	0x1
 10374 08f5 51       		.byte	0x51
 10375 08f6 00000000 		.4byte	0
 10376 08fa 00000000 		.4byte	0
 10377              	.LLST62:
 10378 08fe 70000000 		.4byte	.LVL189
 10379 0902 94000000 		.4byte	.LVL191
 10380 0906 0100     		.2byte	0x1
 10381 0908 52       		.byte	0x52
 10382 0909 00000000 		.4byte	0
 10383 090d 00000000 		.4byte	0
 10384              	.LLST63:
 10385 0911 98000000 		.4byte	.LVL192
 10386 0915 BC000000 		.4byte	.LVL193
 10387 0919 0100     		.2byte	0x1
 10388 091b 52       		.byte	0x52
 10389 091c 00000000 		.4byte	0
 10390 0920 00000000 		.4byte	0
 10391              	.LLST64:
 10392 0924 D6000000 		.4byte	.LVL194
 10393 0928 E4000000 		.4byte	.LVL195
 10394 092c 0100     		.2byte	0x1
 10395 092e 52       		.byte	0x52
 10396 092f 00000000 		.4byte	0
 10397 0933 00000000 		.4byte	0
 10398              	.LLST65:
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 290


 10399 0937 02000000 		.4byte	.LVL202
 10400 093b 20000000 		.4byte	.LVL204
 10401 093f 0200     		.2byte	0x2
 10402 0941 30       		.byte	0x30
 10403 0942 9F       		.byte	0x9f
 10404 0943 20000000 		.4byte	.LVL204
 10405 0947 22000000 		.4byte	.LVL205
 10406 094b 0100     		.2byte	0x1
 10407 094d 53       		.byte	0x53
 10408 094e 26000000 		.4byte	.LVL206
 10409 0952 CC000000 		.4byte	.LVL212
 10410 0956 0100     		.2byte	0x1
 10411 0958 53       		.byte	0x53
 10412 0959 CC000000 		.4byte	.LVL212
 10413 095d CE000000 		.4byte	.LVL213
 10414 0961 0200     		.2byte	0x2
 10415 0963 30       		.byte	0x30
 10416 0964 9F       		.byte	0x9f
 10417 0965 CE000000 		.4byte	.LVL213
 10418 0969 DD000000 		.4byte	.LVL214-1
 10419 096d 0100     		.2byte	0x1
 10420 096f 53       		.byte	0x53
 10421 0970 10010000 		.4byte	.LVL221
 10422 0974 14010000 		.4byte	.LVL222
 10423 0978 0200     		.2byte	0x2
 10424 097a 30       		.byte	0x30
 10425 097b 9F       		.byte	0x9f
 10426 097c 00000000 		.4byte	0
 10427 0980 00000000 		.4byte	0
 10428              	.LLST66:
 10429 0984 02000000 		.4byte	.LVL202
 10430 0988 08010000 		.4byte	.LVL218
 10431 098c 0200     		.2byte	0x2
 10432 098e 30       		.byte	0x30
 10433 098f 9F       		.byte	0x9f
 10434 0990 08010000 		.4byte	.LVL218
 10435 0994 10010000 		.4byte	.LVL221
 10436 0998 0200     		.2byte	0x2
 10437 099a 31       		.byte	0x31
 10438 099b 9F       		.byte	0x9f
 10439 099c 10010000 		.4byte	.LVL221
 10440 09a0 16010000 		.4byte	.LVL223
 10441 09a4 0200     		.2byte	0x2
 10442 09a6 30       		.byte	0x30
 10443 09a7 9F       		.byte	0x9f
 10444 09a8 16010000 		.4byte	.LVL223
 10445 09ac 1C010000 		.4byte	.LVL225
 10446 09b0 0100     		.2byte	0x1
 10447 09b2 54       		.byte	0x54
 10448 09b3 1C010000 		.4byte	.LVL225
 10449 09b7 2C010000 		.4byte	.LFE50
 10450 09bb 0100     		.2byte	0x1
 10451 09bd 50       		.byte	0x50
 10452 09be 00000000 		.4byte	0
 10453 09c2 00000000 		.4byte	0
 10454              	.LLST67:
 10455 09c6 28000000 		.4byte	.LVL207
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 291


 10456 09ca 4E000000 		.4byte	.LVL208
 10457 09ce 0100     		.2byte	0x1
 10458 09d0 52       		.byte	0x52
 10459 09d1 00000000 		.4byte	0
 10460 09d5 00000000 		.4byte	0
 10461              	.LLST68:
 10462 09d9 4E000000 		.4byte	.LVL208
 10463 09dd 72000000 		.4byte	.LVL209
 10464 09e1 0100     		.2byte	0x1
 10465 09e3 52       		.byte	0x52
 10466 09e4 00000000 		.4byte	0
 10467 09e8 00000000 		.4byte	0
 10468              	.LLST69:
 10469 09ec 8A000000 		.4byte	.LVL210
 10470 09f0 98000000 		.4byte	.LVL211
 10471 09f4 0100     		.2byte	0x1
 10472 09f6 52       		.byte	0x52
 10473 09f7 00000000 		.4byte	0
 10474 09fb 00000000 		.4byte	0
 10475              	.LLST70:
 10476 09ff E2000000 		.4byte	.LVL215
 10477 0a03 0E010000 		.4byte	.LVL220
 10478 0a07 0100     		.2byte	0x1
 10479 0a09 54       		.byte	0x54
 10480 0a0a 14010000 		.4byte	.LVL222
 10481 0a0e 16010000 		.4byte	.LVL223
 10482 0a12 0100     		.2byte	0x1
 10483 0a14 54       		.byte	0x54
 10484 0a15 00000000 		.4byte	0
 10485 0a19 00000000 		.4byte	0
 10486              	.LLST71:
 10487 0a1d 00000000 		.4byte	.LVL226
 10488 0a21 09000000 		.4byte	.LVL228-1
 10489 0a25 0100     		.2byte	0x1
 10490 0a27 50       		.byte	0x50
 10491 0a28 09000000 		.4byte	.LVL228-1
 10492 0a2c 58000000 		.4byte	.LVL248
 10493 0a30 0100     		.2byte	0x1
 10494 0a32 55       		.byte	0x55
 10495 0a33 58000000 		.4byte	.LVL248
 10496 0a37 60000000 		.4byte	.LFE38
 10497 0a3b 0400     		.2byte	0x4
 10498 0a3d F3       		.byte	0xf3
 10499 0a3e 01       		.uleb128 0x1
 10500 0a3f 50       		.byte	0x50
 10501 0a40 9F       		.byte	0x9f
 10502 0a41 00000000 		.4byte	0
 10503 0a45 00000000 		.4byte	0
 10504              	.LLST72:
 10505 0a49 00000000 		.4byte	.LVL226
 10506 0a4d 09000000 		.4byte	.LVL228-1
 10507 0a51 0100     		.2byte	0x1
 10508 0a53 51       		.byte	0x51
 10509 0a54 09000000 		.4byte	.LVL228-1
 10510 0a58 20000000 		.4byte	.LVL231
 10511 0a5c 0100     		.2byte	0x1
 10512 0a5e 54       		.byte	0x54
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 292


 10513 0a5f 20000000 		.4byte	.LVL231
 10514 0a63 22000000 		.4byte	.LVL232
 10515 0a67 0400     		.2byte	0x4
 10516 0a69 F3       		.byte	0xf3
 10517 0a6a 01       		.uleb128 0x1
 10518 0a6b 51       		.byte	0x51
 10519 0a6c 9F       		.byte	0x9f
 10520 0a6d 22000000 		.4byte	.LVL232
 10521 0a71 2C000000 		.4byte	.LVL233
 10522 0a75 0100     		.2byte	0x1
 10523 0a77 54       		.byte	0x54
 10524 0a78 2C000000 		.4byte	.LVL233
 10525 0a7c 2E000000 		.4byte	.LVL234
 10526 0a80 0400     		.2byte	0x4
 10527 0a82 F3       		.byte	0xf3
 10528 0a83 01       		.uleb128 0x1
 10529 0a84 51       		.byte	0x51
 10530 0a85 9F       		.byte	0x9f
 10531 0a86 2E000000 		.4byte	.LVL234
 10532 0a8a 30000000 		.4byte	.LVL235
 10533 0a8e 0100     		.2byte	0x1
 10534 0a90 54       		.byte	0x54
 10535 0a91 30000000 		.4byte	.LVL235
 10536 0a95 32000000 		.4byte	.LVL236
 10537 0a99 0400     		.2byte	0x4
 10538 0a9b F3       		.byte	0xf3
 10539 0a9c 01       		.uleb128 0x1
 10540 0a9d 51       		.byte	0x51
 10541 0a9e 9F       		.byte	0x9f
 10542 0a9f 32000000 		.4byte	.LVL236
 10543 0aa3 34000000 		.4byte	.LVL237
 10544 0aa7 0100     		.2byte	0x1
 10545 0aa9 54       		.byte	0x54
 10546 0aaa 34000000 		.4byte	.LVL237
 10547 0aae 36000000 		.4byte	.LVL238
 10548 0ab2 0400     		.2byte	0x4
 10549 0ab4 F3       		.byte	0xf3
 10550 0ab5 01       		.uleb128 0x1
 10551 0ab6 51       		.byte	0x51
 10552 0ab7 9F       		.byte	0x9f
 10553 0ab8 36000000 		.4byte	.LVL238
 10554 0abc 38000000 		.4byte	.LVL239
 10555 0ac0 0100     		.2byte	0x1
 10556 0ac2 54       		.byte	0x54
 10557 0ac3 38000000 		.4byte	.LVL239
 10558 0ac7 3A000000 		.4byte	.LVL240
 10559 0acb 0400     		.2byte	0x4
 10560 0acd F3       		.byte	0xf3
 10561 0ace 01       		.uleb128 0x1
 10562 0acf 51       		.byte	0x51
 10563 0ad0 9F       		.byte	0x9f
 10564 0ad1 3A000000 		.4byte	.LVL240
 10565 0ad5 3C000000 		.4byte	.LVL241
 10566 0ad9 0100     		.2byte	0x1
 10567 0adb 54       		.byte	0x54
 10568 0adc 3C000000 		.4byte	.LVL241
 10569 0ae0 60000000 		.4byte	.LFE38
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 293


 10570 0ae4 0400     		.2byte	0x4
 10571 0ae6 F3       		.byte	0xf3
 10572 0ae7 01       		.uleb128 0x1
 10573 0ae8 51       		.byte	0x51
 10574 0ae9 9F       		.byte	0x9f
 10575 0aea 00000000 		.4byte	0
 10576 0aee 00000000 		.4byte	0
 10577              	.LLST73:
 10578 0af2 12000000 		.4byte	.LVL230
 10579 0af6 46000000 		.4byte	.LVL243
 10580 0afa 0100     		.2byte	0x1
 10581 0afc 51       		.byte	0x51
 10582 0afd 46000000 		.4byte	.LVL243
 10583 0b01 49000000 		.4byte	.LVL244-1
 10584 0b05 0200     		.2byte	0x2
 10585 0b07 75       		.byte	0x75
 10586 0b08 00       		.sleb128 0
 10587 0b09 00000000 		.4byte	0
 10588 0b0d 00000000 		.4byte	0
 10589              	.LLST74:
 10590 0b11 4E000000 		.4byte	.LVL245
 10591 0b15 55000000 		.4byte	.LVL246-1
 10592 0b19 0100     		.2byte	0x1
 10593 0b1b 50       		.byte	0x50
 10594 0b1c 00000000 		.4byte	0
 10595 0b20 00000000 		.4byte	0
 10596              	.LLST75:
 10597 0b24 06000000 		.4byte	.LVL227
 10598 0b28 3C000000 		.4byte	.LVL241
 10599 0b2c 0200     		.2byte	0x2
 10600 0b2e 30       		.byte	0x30
 10601 0b2f 9F       		.byte	0x9f
 10602 0b30 3C000000 		.4byte	.LVL241
 10603 0b34 58000000 		.4byte	.LVL247
 10604 0b38 0100     		.2byte	0x1
 10605 0b3a 54       		.byte	0x54
 10606 0b3b 58000000 		.4byte	.LVL247
 10607 0b3f 60000000 		.4byte	.LFE38
 10608 0b43 0100     		.2byte	0x1
 10609 0b45 50       		.byte	0x50
 10610 0b46 00000000 		.4byte	0
 10611 0b4a 00000000 		.4byte	0
 10612              	.LLST76:
 10613 0b4e 0E000000 		.4byte	.LVL229
 10614 0b52 44000000 		.4byte	.LVL242
 10615 0b56 0100     		.2byte	0x1
 10616 0b58 50       		.byte	0x50
 10617 0b59 00000000 		.4byte	0
 10618 0b5d 00000000 		.4byte	0
 10619              	.LLST77:
 10620 0b61 00000000 		.4byte	.LVL249
 10621 0b65 09000000 		.4byte	.LVL251-1
 10622 0b69 0100     		.2byte	0x1
 10623 0b6b 50       		.byte	0x50
 10624 0b6c 09000000 		.4byte	.LVL251-1
 10625 0b70 18000000 		.4byte	.LVL254
 10626 0b74 0100     		.2byte	0x1
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 294


 10627 0b76 54       		.byte	0x54
 10628 0b77 18000000 		.4byte	.LVL254
 10629 0b7b 1A000000 		.4byte	.LVL255
 10630 0b7f 0100     		.2byte	0x1
 10631 0b81 50       		.byte	0x50
 10632 0b82 1A000000 		.4byte	.LVL255
 10633 0b86 22000000 		.4byte	.LVL257
 10634 0b8a 0100     		.2byte	0x1
 10635 0b8c 54       		.byte	0x54
 10636 0b8d 22000000 		.4byte	.LVL257
 10637 0b91 24000000 		.4byte	.LFE39
 10638 0b95 0400     		.2byte	0x4
 10639 0b97 F3       		.byte	0xf3
 10640 0b98 01       		.uleb128 0x1
 10641 0b99 50       		.byte	0x50
 10642 0b9a 9F       		.byte	0x9f
 10643 0b9b 00000000 		.4byte	0
 10644 0b9f 00000000 		.4byte	0
 10645              	.LLST78:
 10646 0ba3 04000000 		.4byte	.LVL250
 10647 0ba7 16000000 		.4byte	.LVL253
 10648 0bab 0200     		.2byte	0x2
 10649 0bad 30       		.byte	0x30
 10650 0bae 9F       		.byte	0x9f
 10651 0baf 16000000 		.4byte	.LVL253
 10652 0bb3 18000000 		.4byte	.LVL254
 10653 0bb7 0100     		.2byte	0x1
 10654 0bb9 50       		.byte	0x50
 10655 0bba 18000000 		.4byte	.LVL254
 10656 0bbe 1A000000 		.4byte	.LVL255
 10657 0bc2 0200     		.2byte	0x2
 10658 0bc4 30       		.byte	0x30
 10659 0bc5 9F       		.byte	0x9f
 10660 0bc6 1A000000 		.4byte	.LVL255
 10661 0bca 21000000 		.4byte	.LVL256-1
 10662 0bce 0100     		.2byte	0x1
 10663 0bd0 50       		.byte	0x50
 10664 0bd1 00000000 		.4byte	0
 10665 0bd5 00000000 		.4byte	0
 10666              	.LLST79:
 10667 0bd9 00000000 		.4byte	.LVL258
 10668 0bdd 07000000 		.4byte	.LVL259-1
 10669 0be1 0100     		.2byte	0x1
 10670 0be3 50       		.byte	0x50
 10671 0be4 07000000 		.4byte	.LVL259-1
 10672 0be8 12000000 		.4byte	.LVL261
 10673 0bec 0100     		.2byte	0x1
 10674 0bee 54       		.byte	0x54
 10675 0bef 12000000 		.4byte	.LVL261
 10676 0bf3 24000000 		.4byte	.LFE55
 10677 0bf7 0400     		.2byte	0x4
 10678 0bf9 F3       		.byte	0xf3
 10679 0bfa 01       		.uleb128 0x1
 10680 0bfb 50       		.byte	0x50
 10681 0bfc 9F       		.byte	0x9f
 10682 0bfd 00000000 		.4byte	0
 10683 0c01 00000000 		.4byte	0
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 295


 10684              	.LLST80:
 10685 0c05 1C000000 		.4byte	.LVL264
 10686 0c09 34000000 		.4byte	.LVL265
 10687 0c0d 0100     		.2byte	0x1
 10688 0c0f 53       		.byte	0x53
 10689 0c10 00000000 		.4byte	0
 10690 0c14 00000000 		.4byte	0
 10691              	.LLST81:
 10692 0c18 1C000000 		.4byte	.LVL264
 10693 0c1c 9E000000 		.4byte	.LVL270
 10694 0c20 0600     		.2byte	0x6
 10695 0c22 9E       		.byte	0x9e
 10696 0c23 04       		.uleb128 0x4
 10697 0c24 A5A5A5A5 		.4byte	0xa5a5a5a5
 10698 0c28 00000000 		.4byte	0
 10699 0c2c 00000000 		.4byte	0
 10700              	.LLST82:
 10701 0c30 48000000 		.4byte	.LVL267
 10702 0c34 9E000000 		.4byte	.LVL270
 10703 0c38 0100     		.2byte	0x1
 10704 0c3a 53       		.byte	0x53
 10705 0c3b 00000000 		.4byte	0
 10706 0c3f 00000000 		.4byte	0
 10707              	.LLST83:
 10708 0c43 5C000000 		.4byte	.LVL269
 10709 0c47 9E000000 		.4byte	.LVL270
 10710 0c4b 0B00     		.2byte	0xb
 10711 0c4d 73       		.byte	0x73
 10712 0c4e 00       		.sleb128 0
 10713 0c4f 44       		.byte	0x44
 10714 0c50 1E       		.byte	0x1e
 10715 0c51 03       		.byte	0x3
 10716 0c52 30000000 		.4byte	pxReadyTasksLists
 10717 0c56 22       		.byte	0x22
 10718 0c57 9F       		.byte	0x9f
 10719 0c58 00000000 		.4byte	0
 10720 0c5c 00000000 		.4byte	0
 10721              	.LLST84:
 10722 0c60 00000000 		.4byte	.LVL271
 10723 0c64 07000000 		.4byte	.LVL272-1
 10724 0c68 0100     		.2byte	0x1
 10725 0c6a 50       		.byte	0x50
 10726 0c6b 07000000 		.4byte	.LVL272-1
 10727 0c6f 10000000 		.4byte	.LVL273
 10728 0c73 0100     		.2byte	0x1
 10729 0c75 54       		.byte	0x54
 10730 0c76 00000000 		.4byte	0
 10731 0c7a 00000000 		.4byte	0
 10732              	.LLST85:
 10733 0c7e 10000000 		.4byte	.LVL273
 10734 0c82 90000000 		.4byte	.LVL285
 10735 0c86 0100     		.2byte	0x1
 10736 0c88 54       		.byte	0x54
 10737 0c89 90000000 		.4byte	.LVL285
 10738 0c8d 90000000 		.4byte	.LVL286
 10739 0c91 0300     		.2byte	0x3
 10740 0c93 75       		.byte	0x75
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 296


 10741 0c94 7C       		.sleb128 -4
 10742 0c95 9F       		.byte	0x9f
 10743 0c96 00000000 		.4byte	0
 10744 0c9a 00000000 		.4byte	0
 10745              	.LLST86:
 10746 0c9e 2E000000 		.4byte	.LVL276
 10747 0ca2 32000000 		.4byte	.LVL277
 10748 0ca6 0200     		.2byte	0x2
 10749 0ca8 30       		.byte	0x30
 10750 0ca9 9F       		.byte	0x9f
 10751 0caa 32000000 		.4byte	.LVL277
 10752 0cae 4D000000 		.4byte	.LVL279-1
 10753 0cb2 0100     		.2byte	0x1
 10754 0cb4 53       		.byte	0x53
 10755 0cb5 00000000 		.4byte	0
 10756 0cb9 00000000 		.4byte	0
 10757              	.LLST87:
 10758 0cbd 00000000 		.4byte	.LVL287
 10759 0cc1 0D000000 		.4byte	.LVL289-1
 10760 0cc5 0100     		.2byte	0x1
 10761 0cc7 50       		.byte	0x50
 10762 0cc8 0D000000 		.4byte	.LVL289-1
 10763 0ccc 1C000000 		.4byte	.LFE58
 10764 0cd0 0400     		.2byte	0x4
 10765 0cd2 F3       		.byte	0xf3
 10766 0cd3 01       		.uleb128 0x1
 10767 0cd4 50       		.byte	0x50
 10768 0cd5 9F       		.byte	0x9f
 10769 0cd6 00000000 		.4byte	0
 10770 0cda 00000000 		.4byte	0
 10771              	.LLST88:
 10772 0cde 00000000 		.4byte	.LVL287
 10773 0ce2 08000000 		.4byte	.LVL288
 10774 0ce6 0100     		.2byte	0x1
 10775 0ce8 51       		.byte	0x51
 10776 0ce9 08000000 		.4byte	.LVL288
 10777 0ced 16000000 		.4byte	.LVL291
 10778 0cf1 0100     		.2byte	0x1
 10779 0cf3 54       		.byte	0x54
 10780 0cf4 16000000 		.4byte	.LVL291
 10781 0cf8 1C000000 		.4byte	.LFE58
 10782 0cfc 0400     		.2byte	0x4
 10783 0cfe F3       		.byte	0xf3
 10784 0cff 01       		.uleb128 0x1
 10785 0d00 51       		.byte	0x51
 10786 0d01 9F       		.byte	0x9f
 10787 0d02 00000000 		.4byte	0
 10788 0d06 00000000 		.4byte	0
 10789              	.LLST89:
 10790 0d0a 00000000 		.4byte	.LVL292
 10791 0d0e 36000000 		.4byte	.LVL296
 10792 0d12 0100     		.2byte	0x1
 10793 0d14 50       		.byte	0x50
 10794 0d15 36000000 		.4byte	.LVL296
 10795 0d19 40000000 		.4byte	.LFE59
 10796 0d1d 0400     		.2byte	0x4
 10797 0d1f F3       		.byte	0xf3
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 297


 10798 0d20 01       		.uleb128 0x1
 10799 0d21 50       		.byte	0x50
 10800 0d22 9F       		.byte	0x9f
 10801 0d23 00000000 		.4byte	0
 10802 0d27 00000000 		.4byte	0
 10803              	.LLST90:
 10804 0d2b 00000000 		.4byte	.LVL292
 10805 0d2f 0C000000 		.4byte	.LVL293
 10806 0d33 0100     		.2byte	0x1
 10807 0d35 51       		.byte	0x51
 10808 0d36 0C000000 		.4byte	.LVL293
 10809 0d3a 40000000 		.4byte	.LFE59
 10810 0d3e 0400     		.2byte	0x4
 10811 0d40 F3       		.byte	0xf3
 10812 0d41 01       		.uleb128 0x1
 10813 0d42 51       		.byte	0x51
 10814 0d43 9F       		.byte	0x9f
 10815 0d44 00000000 		.4byte	0
 10816 0d48 00000000 		.4byte	0
 10817              	.LLST91:
 10818 0d4c 00000000 		.4byte	.LVL292
 10819 0d50 39000000 		.4byte	.LVL297-1
 10820 0d54 0100     		.2byte	0x1
 10821 0d56 52       		.byte	0x52
 10822 0d57 39000000 		.4byte	.LVL297-1
 10823 0d5b 40000000 		.4byte	.LFE59
 10824 0d5f 0400     		.2byte	0x4
 10825 0d61 F3       		.byte	0xf3
 10826 0d62 01       		.uleb128 0x1
 10827 0d63 52       		.byte	0x52
 10828 0d64 9F       		.byte	0x9f
 10829 0d65 00000000 		.4byte	0
 10830 0d69 00000000 		.4byte	0
 10831              	.LLST92:
 10832 0d6d 10000000 		.4byte	.LVL294
 10833 0d71 34000000 		.4byte	.LVL295
 10834 0d75 0100     		.2byte	0x1
 10835 0d77 51       		.byte	0x51
 10836 0d78 00000000 		.4byte	0
 10837 0d7c 00000000 		.4byte	0
 10838              	.LLST93:
 10839 0d80 00000000 		.4byte	.LVL298
 10840 0d84 0C000000 		.4byte	.LVL301
 10841 0d88 0100     		.2byte	0x1
 10842 0d8a 50       		.byte	0x50
 10843 0d8b 0C000000 		.4byte	.LVL301
 10844 0d8f E0000000 		.4byte	.LFE60
 10845 0d93 0400     		.2byte	0x4
 10846 0d95 F3       		.byte	0xf3
 10847 0d96 01       		.uleb128 0x1
 10848 0d97 50       		.byte	0x50
 10849 0d98 9F       		.byte	0x9f
 10850 0d99 00000000 		.4byte	0
 10851 0d9d 00000000 		.4byte	0
 10852              	.LLST94:
 10853 0da1 06000000 		.4byte	.LVL299
 10854 0da5 C2000000 		.4byte	.LVL309
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 298


 10855 0da9 0100     		.2byte	0x1
 10856 0dab 53       		.byte	0x53
 10857 0dac 00000000 		.4byte	0
 10858 0db0 00000000 		.4byte	0
 10859              	.LLST95:
 10860 0db4 CA000000 		.4byte	.LVL310
 10861 0db8 D4000000 		.4byte	.LVL311
 10862 0dbc 0200     		.2byte	0x2
 10863 0dbe 31       		.byte	0x31
 10864 0dbf 9F       		.byte	0x9f
 10865 0dc0 D6000000 		.4byte	.LVL312
 10866 0dc4 E0000000 		.4byte	.LFE60
 10867 0dc8 0100     		.2byte	0x1
 10868 0dca 50       		.byte	0x50
 10869 0dcb 00000000 		.4byte	0
 10870 0dcf 00000000 		.4byte	0
 10871              	.LLST96:
 10872 0dd3 08000000 		.4byte	.LVL300
 10873 0dd7 2E000000 		.4byte	.LVL302
 10874 0ddb 0100     		.2byte	0x1
 10875 0ddd 52       		.byte	0x52
 10876 0dde 00000000 		.4byte	0
 10877 0de2 00000000 		.4byte	0
 10878              	.LLST97:
 10879 0de6 36000000 		.4byte	.LVL303
 10880 0dea 5A000000 		.4byte	.LVL304
 10881 0dee 0100     		.2byte	0x1
 10882 0df0 52       		.byte	0x52
 10883 0df1 00000000 		.4byte	0
 10884 0df5 00000000 		.4byte	0
 10885              	.LLST98:
 10886 0df9 72000000 		.4byte	.LVL305
 10887 0dfd 80000000 		.4byte	.LVL306
 10888 0e01 0100     		.2byte	0x1
 10889 0e03 52       		.byte	0x52
 10890 0e04 00000000 		.4byte	0
 10891 0e08 00000000 		.4byte	0
 10892              	.LLST99:
 10893 0e0c A6000000 		.4byte	.LVL307
 10894 0e10 B4000000 		.4byte	.LVL308
 10895 0e14 0100     		.2byte	0x1
 10896 0e16 51       		.byte	0x51
 10897 0e17 00000000 		.4byte	0
 10898 0e1b 00000000 		.4byte	0
 10899              	.LLST100:
 10900 0e1f 00000000 		.4byte	.LVL313
 10901 0e23 34000000 		.4byte	.LVL318
 10902 0e27 0100     		.2byte	0x1
 10903 0e29 50       		.byte	0x50
 10904 0e2a 34000000 		.4byte	.LVL318
 10905 0e2e B8000000 		.4byte	.LFE61
 10906 0e32 0400     		.2byte	0x4
 10907 0e34 F3       		.byte	0xf3
 10908 0e35 01       		.uleb128 0x1
 10909 0e36 50       		.byte	0x50
 10910 0e37 9F       		.byte	0x9f
 10911 0e38 00000000 		.4byte	0
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 299


 10912 0e3c 00000000 		.4byte	0
 10913              	.LLST101:
 10914 0e40 00000000 		.4byte	.LVL313
 10915 0e44 08000000 		.4byte	.LVL314
 10916 0e48 0100     		.2byte	0x1
 10917 0e4a 51       		.byte	0x51
 10918 0e4b 08000000 		.4byte	.LVL314
 10919 0e4f B8000000 		.4byte	.LFE61
 10920 0e53 0400     		.2byte	0x4
 10921 0e55 F3       		.byte	0xf3
 10922 0e56 01       		.uleb128 0x1
 10923 0e57 51       		.byte	0x51
 10924 0e58 9F       		.byte	0x9f
 10925 0e59 00000000 		.4byte	0
 10926 0e5d 00000000 		.4byte	0
 10927              	.LLST102:
 10928 0e61 0C000000 		.4byte	.LVL315
 10929 0e65 9E000000 		.4byte	.LVL322
 10930 0e69 0100     		.2byte	0x1
 10931 0e6b 53       		.byte	0x53
 10932 0e6c 00000000 		.4byte	0
 10933 0e70 00000000 		.4byte	0
 10934              	.LLST103:
 10935 0e74 0E000000 		.4byte	.LVL316
 10936 0e78 30000000 		.4byte	.LVL317
 10937 0e7c 0100     		.2byte	0x1
 10938 0e7e 52       		.byte	0x52
 10939 0e7f 00000000 		.4byte	0
 10940 0e83 00000000 		.4byte	0
 10941              	.LLST104:
 10942 0e87 30000000 		.4byte	.LVL317
 10943 0e8b 54000000 		.4byte	.LVL319
 10944 0e8f 0100     		.2byte	0x1
 10945 0e91 52       		.byte	0x52
 10946 0e92 00000000 		.4byte	0
 10947 0e96 00000000 		.4byte	0
 10948              	.LLST105:
 10949 0e9a 6C000000 		.4byte	.LVL320
 10950 0e9e 7A000000 		.4byte	.LVL321
 10951 0ea2 0100     		.2byte	0x1
 10952 0ea4 52       		.byte	0x52
 10953 0ea5 00000000 		.4byte	0
 10954 0ea9 00000000 		.4byte	0
 10955              	.LLST106:
 10956 0ead 00000000 		.4byte	.LVL323
 10957 0eb1 07000000 		.4byte	.LVL324-1
 10958 0eb5 0100     		.2byte	0x1
 10959 0eb7 50       		.byte	0x50
 10960 0eb8 07000000 		.4byte	.LVL324-1
 10961 0ebc 16000000 		.4byte	.LVL326
 10962 0ec0 0100     		.2byte	0x1
 10963 0ec2 54       		.byte	0x54
 10964 0ec3 16000000 		.4byte	.LVL326
 10965 0ec7 1C000000 		.4byte	.LFE62
 10966 0ecb 0400     		.2byte	0x4
 10967 0ecd F3       		.byte	0xf3
 10968 0ece 01       		.uleb128 0x1
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 300


 10969 0ecf 50       		.byte	0x50
 10970 0ed0 9F       		.byte	0x9f
 10971 0ed1 00000000 		.4byte	0
 10972 0ed5 00000000 		.4byte	0
 10973              	.LLST107:
 10974 0ed9 00000000 		.4byte	.LVL328
 10975 0edd 09000000 		.4byte	.LVL329-1
 10976 0ee1 0100     		.2byte	0x1
 10977 0ee3 50       		.byte	0x50
 10978 0ee4 09000000 		.4byte	.LVL329-1
 10979 0ee8 2C000000 		.4byte	.LVL333
 10980 0eec 0100     		.2byte	0x1
 10981 0eee 54       		.byte	0x54
 10982 0eef 2C000000 		.4byte	.LVL333
 10983 0ef3 2E000000 		.4byte	.LVL334
 10984 0ef7 0400     		.2byte	0x4
 10985 0ef9 F3       		.byte	0xf3
 10986 0efa 01       		.uleb128 0x1
 10987 0efb 50       		.byte	0x50
 10988 0efc 9F       		.byte	0x9f
 10989 0efd 2E000000 		.4byte	.LVL334
 10990 0f01 3E000000 		.4byte	.LVL337
 10991 0f05 0100     		.2byte	0x1
 10992 0f07 54       		.byte	0x54
 10993 0f08 3E000000 		.4byte	.LVL337
 10994 0f0c 40000000 		.4byte	.LVL338
 10995 0f10 0400     		.2byte	0x4
 10996 0f12 F3       		.byte	0xf3
 10997 0f13 01       		.uleb128 0x1
 10998 0f14 50       		.byte	0x50
 10999 0f15 9F       		.byte	0x9f
 11000 0f16 40000000 		.4byte	.LVL338
 11001 0f1a 46000000 		.4byte	.LVL340
 11002 0f1e 0100     		.2byte	0x1
 11003 0f20 54       		.byte	0x54
 11004 0f21 46000000 		.4byte	.LVL340
 11005 0f25 48000000 		.4byte	.LVL341
 11006 0f29 0400     		.2byte	0x4
 11007 0f2b F3       		.byte	0xf3
 11008 0f2c 01       		.uleb128 0x1
 11009 0f2d 50       		.byte	0x50
 11010 0f2e 9F       		.byte	0x9f
 11011 0f2f 48000000 		.4byte	.LVL341
 11012 0f33 4A000000 		.4byte	.LVL342
 11013 0f37 0100     		.2byte	0x1
 11014 0f39 54       		.byte	0x54
 11015 0f3a 4A000000 		.4byte	.LVL342
 11016 0f3e 58000000 		.4byte	.LFE64
 11017 0f42 0400     		.2byte	0x4
 11018 0f44 F3       		.byte	0xf3
 11019 0f45 01       		.uleb128 0x1
 11020 0f46 50       		.byte	0x50
 11021 0f47 9F       		.byte	0x9f
 11022 0f48 00000000 		.4byte	0
 11023 0f4c 00000000 		.4byte	0
 11024              	.LLST108:
 11025 0f50 00000000 		.4byte	.LVL328
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 301


 11026 0f54 09000000 		.4byte	.LVL329-1
 11027 0f58 0100     		.2byte	0x1
 11028 0f5a 51       		.byte	0x51
 11029 0f5b 09000000 		.4byte	.LVL329-1
 11030 0f5f 50000000 		.4byte	.LVL345
 11031 0f63 0100     		.2byte	0x1
 11032 0f65 55       		.byte	0x55
 11033 0f66 50000000 		.4byte	.LVL345
 11034 0f6a 58000000 		.4byte	.LFE64
 11035 0f6e 0400     		.2byte	0x4
 11036 0f70 F3       		.byte	0xf3
 11037 0f71 01       		.uleb128 0x1
 11038 0f72 51       		.byte	0x51
 11039 0f73 9F       		.byte	0x9f
 11040 0f74 00000000 		.4byte	0
 11041 0f78 00000000 		.4byte	0
 11042              	.LLST109:
 11043 0f7c 26000000 		.4byte	.LVL332
 11044 0f80 2E000000 		.4byte	.LVL334
 11045 0f84 0200     		.2byte	0x2
 11046 0f86 31       		.byte	0x31
 11047 0f87 9F       		.byte	0x9f
 11048 0f88 3C000000 		.4byte	.LVL336
 11049 0f8c 40000000 		.4byte	.LVL338
 11050 0f90 0200     		.2byte	0x2
 11051 0f92 30       		.byte	0x30
 11052 0f93 9F       		.byte	0x9f
 11053 0f94 44000000 		.4byte	.LVL339
 11054 0f98 48000000 		.4byte	.LVL341
 11055 0f9c 0200     		.2byte	0x2
 11056 0f9e 31       		.byte	0x31
 11057 0f9f 9F       		.byte	0x9f
 11058 0fa0 4A000000 		.4byte	.LVL342
 11059 0fa4 50000000 		.4byte	.LVL344
 11060 0fa8 0100     		.2byte	0x1
 11061 0faa 54       		.byte	0x54
 11062 0fab 50000000 		.4byte	.LVL344
 11063 0faf 58000000 		.4byte	.LFE64
 11064 0fb3 0100     		.2byte	0x1
 11065 0fb5 50       		.byte	0x50
 11066 0fb6 00000000 		.4byte	0
 11067 0fba 00000000 		.4byte	0
 11068              	.LLST110:
 11069 0fbe 0E000000 		.4byte	.LVL330
 11070 0fc2 3B000000 		.4byte	.LVL336-1
 11071 0fc6 0100     		.2byte	0x1
 11072 0fc8 51       		.byte	0x51
 11073 0fc9 40000000 		.4byte	.LVL338
 11074 0fcd 4A000000 		.4byte	.LVL342
 11075 0fd1 0100     		.2byte	0x1
 11076 0fd3 51       		.byte	0x51
 11077 0fd4 00000000 		.4byte	0
 11078 0fd8 00000000 		.4byte	0
 11079              	.LLST111:
 11080 0fdc 12000000 		.4byte	.LVL331
 11081 0fe0 38000000 		.4byte	.LVL335
 11082 0fe4 0100     		.2byte	0x1
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 302


 11083 0fe6 50       		.byte	0x50
 11084 0fe7 38000000 		.4byte	.LVL335
 11085 0feb 3B000000 		.4byte	.LVL336-1
 11086 0fef 0600     		.2byte	0x6
 11087 0ff1 71       		.byte	0x71
 11088 0ff2 00       		.sleb128 0
 11089 0ff3 72       		.byte	0x72
 11090 0ff4 00       		.sleb128 0
 11091 0ff5 1C       		.byte	0x1c
 11092 0ff6 9F       		.byte	0x9f
 11093 0ff7 40000000 		.4byte	.LVL338
 11094 0ffb 4A000000 		.4byte	.LVL342
 11095 0fff 0100     		.2byte	0x1
 11096 1001 50       		.byte	0x50
 11097 1002 00000000 		.4byte	0
 11098 1006 00000000 		.4byte	0
 11099              	.LLST112:
 11100 100a 00000000 		.4byte	.LVL346
 11101 100e 0A000000 		.4byte	.LVL347
 11102 1012 0100     		.2byte	0x1
 11103 1014 50       		.byte	0x50
 11104 1015 00000000 		.4byte	0
 11105 1019 00000000 		.4byte	0
 11106              	.LLST113:
 11107 101d 0A000000 		.4byte	.LVL347
 11108 1021 0C000000 		.4byte	.LVL348
 11109 1025 0100     		.2byte	0x1
 11110 1027 50       		.byte	0x50
 11111 1028 00000000 		.4byte	0
 11112 102c 00000000 		.4byte	0
 11113              	.LLST114:
 11114 1030 0C000000 		.4byte	.LVL348
 11115 1034 0F000000 		.4byte	.LVL349-1
 11116 1038 0100     		.2byte	0x1
 11117 103a 50       		.byte	0x50
 11118 103b 00000000 		.4byte	0
 11119 103f 00000000 		.4byte	0
 11120              	.LLST115:
 11121 1043 00000000 		.4byte	.LVL351
 11122 1047 3A000000 		.4byte	.LVL353
 11123 104b 0100     		.2byte	0x1
 11124 104d 50       		.byte	0x50
 11125 104e 3A000000 		.4byte	.LVL353
 11126 1052 8E000000 		.4byte	.LVL357
 11127 1056 0100     		.2byte	0x1
 11128 1058 54       		.byte	0x54
 11129 1059 8E000000 		.4byte	.LVL357
 11130 105d 98000000 		.4byte	.LVL358
 11131 1061 0100     		.2byte	0x1
 11132 1063 50       		.byte	0x50
 11133 1064 98000000 		.4byte	.LVL358
 11134 1068 9A000000 		.4byte	.LVL359
 11135 106c 0100     		.2byte	0x1
 11136 106e 54       		.byte	0x54
 11137 106f 9A000000 		.4byte	.LVL359
 11138 1073 A8000000 		.4byte	.LVL360
 11139 1077 0100     		.2byte	0x1
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 303


 11140 1079 50       		.byte	0x50
 11141 107a A8000000 		.4byte	.LVL360
 11142 107e AA000000 		.4byte	.LVL361
 11143 1082 0100     		.2byte	0x1
 11144 1084 54       		.byte	0x54
 11145 1085 AA000000 		.4byte	.LVL361
 11146 1089 AC000000 		.4byte	.LVL362
 11147 108d 0100     		.2byte	0x1
 11148 108f 50       		.byte	0x50
 11149 1090 AC000000 		.4byte	.LVL362
 11150 1094 AE000000 		.4byte	.LVL363
 11151 1098 0100     		.2byte	0x1
 11152 109a 54       		.byte	0x54
 11153 109b AE000000 		.4byte	.LVL363
 11154 109f B0000000 		.4byte	.LVL364
 11155 10a3 0100     		.2byte	0x1
 11156 10a5 50       		.byte	0x50
 11157 10a6 B0000000 		.4byte	.LVL364
 11158 10aa B0000000 		.4byte	.LVL365
 11159 10ae 0100     		.2byte	0x1
 11160 10b0 54       		.byte	0x54
 11161 10b1 B0000000 		.4byte	.LVL365
 11162 10b5 BC000000 		.4byte	.LFE74
 11163 10b9 0400     		.2byte	0x4
 11164 10bb F3       		.byte	0xf3
 11165 10bc 01       		.uleb128 0x1
 11166 10bd 50       		.byte	0x50
 11167 10be 9F       		.byte	0x9f
 11168 10bf 00000000 		.4byte	0
 11169 10c3 00000000 		.4byte	0
 11170              	.LLST116:
 11171 10c7 04000000 		.4byte	.LVL352
 11172 10cb 3A000000 		.4byte	.LVL353
 11173 10cf 0100     		.2byte	0x1
 11174 10d1 50       		.byte	0x50
 11175 10d2 3A000000 		.4byte	.LVL353
 11176 10d6 8E000000 		.4byte	.LVL357
 11177 10da 0100     		.2byte	0x1
 11178 10dc 54       		.byte	0x54
 11179 10dd 8E000000 		.4byte	.LVL357
 11180 10e1 98000000 		.4byte	.LVL358
 11181 10e5 0100     		.2byte	0x1
 11182 10e7 50       		.byte	0x50
 11183 10e8 98000000 		.4byte	.LVL358
 11184 10ec 9A000000 		.4byte	.LVL359
 11185 10f0 0100     		.2byte	0x1
 11186 10f2 54       		.byte	0x54
 11187 10f3 9A000000 		.4byte	.LVL359
 11188 10f7 A8000000 		.4byte	.LVL360
 11189 10fb 0100     		.2byte	0x1
 11190 10fd 50       		.byte	0x50
 11191 10fe A8000000 		.4byte	.LVL360
 11192 1102 AA000000 		.4byte	.LVL361
 11193 1106 0100     		.2byte	0x1
 11194 1108 54       		.byte	0x54
 11195 1109 AA000000 		.4byte	.LVL361
 11196 110d AC000000 		.4byte	.LVL362
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 304


 11197 1111 0100     		.2byte	0x1
 11198 1113 50       		.byte	0x50
 11199 1114 AC000000 		.4byte	.LVL362
 11200 1118 AE000000 		.4byte	.LVL363
 11201 111c 0100     		.2byte	0x1
 11202 111e 54       		.byte	0x54
 11203 111f AE000000 		.4byte	.LVL363
 11204 1123 B0000000 		.4byte	.LVL364
 11205 1127 0100     		.2byte	0x1
 11206 1129 50       		.byte	0x50
 11207 112a B0000000 		.4byte	.LVL364
 11208 112e B0000000 		.4byte	.LVL365
 11209 1132 0100     		.2byte	0x1
 11210 1134 54       		.byte	0x54
 11211 1135 B0000000 		.4byte	.LVL365
 11212 1139 BC000000 		.4byte	.LFE74
 11213 113d 0400     		.2byte	0x4
 11214 113f F3       		.byte	0xf3
 11215 1140 01       		.uleb128 0x1
 11216 1141 50       		.byte	0x50
 11217 1142 9F       		.byte	0x9f
 11218 1143 00000000 		.4byte	0
 11219 1147 00000000 		.4byte	0
 11220              	.LLST117:
 11221 114b 04000000 		.4byte	.LVL352
 11222 114f B0000000 		.4byte	.LVL364
 11223 1153 0200     		.2byte	0x2
 11224 1155 30       		.byte	0x30
 11225 1156 9F       		.byte	0x9f
 11226 1157 B0000000 		.4byte	.LVL364
 11227 115b BC000000 		.4byte	.LFE74
 11228 115f 0100     		.2byte	0x1
 11229 1161 50       		.byte	0x50
 11230 1162 00000000 		.4byte	0
 11231 1166 00000000 		.4byte	0
 11232              	.LLST118:
 11233 116a 5C000000 		.4byte	.LVL355
 11234 116e 6A000000 		.4byte	.LVL356
 11235 1172 0100     		.2byte	0x1
 11236 1174 53       		.byte	0x53
 11237 1175 00000000 		.4byte	0
 11238 1179 00000000 		.4byte	0
 11239              	.LLST119:
 11240 117d 00000000 		.4byte	.LVL366
 11241 1181 1C000000 		.4byte	.LVL368
 11242 1185 0100     		.2byte	0x1
 11243 1187 50       		.byte	0x50
 11244 1188 1C000000 		.4byte	.LVL368
 11245 118c 74000000 		.4byte	.LVL373
 11246 1190 0100     		.2byte	0x1
 11247 1192 54       		.byte	0x54
 11248 1193 74000000 		.4byte	.LVL373
 11249 1197 76000000 		.4byte	.LVL374
 11250 119b 0100     		.2byte	0x1
 11251 119d 50       		.byte	0x50
 11252 119e 76000000 		.4byte	.LVL374
 11253 11a2 78000000 		.4byte	.LVL375
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 305


 11254 11a6 0100     		.2byte	0x1
 11255 11a8 54       		.byte	0x54
 11256 11a9 78000000 		.4byte	.LVL375
 11257 11ad 7A000000 		.4byte	.LVL376
 11258 11b1 0100     		.2byte	0x1
 11259 11b3 50       		.byte	0x50
 11260 11b4 7A000000 		.4byte	.LVL376
 11261 11b8 7C000000 		.4byte	.LVL377
 11262 11bc 0100     		.2byte	0x1
 11263 11be 54       		.byte	0x54
 11264 11bf 7C000000 		.4byte	.LVL377
 11265 11c3 7E000000 		.4byte	.LVL378
 11266 11c7 0100     		.2byte	0x1
 11267 11c9 50       		.byte	0x50
 11268 11ca 7E000000 		.4byte	.LVL378
 11269 11ce 7E000000 		.4byte	.LVL379
 11270 11d2 0100     		.2byte	0x1
 11271 11d4 54       		.byte	0x54
 11272 11d5 7E000000 		.4byte	.LVL379
 11273 11d9 88000000 		.4byte	.LFE75
 11274 11dd 0400     		.2byte	0x4
 11275 11df F3       		.byte	0xf3
 11276 11e0 01       		.uleb128 0x1
 11277 11e1 50       		.byte	0x50
 11278 11e2 9F       		.byte	0x9f
 11279 11e3 00000000 		.4byte	0
 11280 11e7 00000000 		.4byte	0
 11281              	.LLST120:
 11282 11eb 04000000 		.4byte	.LVL367
 11283 11ef 1C000000 		.4byte	.LVL368
 11284 11f3 0100     		.2byte	0x1
 11285 11f5 50       		.byte	0x50
 11286 11f6 1C000000 		.4byte	.LVL368
 11287 11fa 74000000 		.4byte	.LVL373
 11288 11fe 0100     		.2byte	0x1
 11289 1200 54       		.byte	0x54
 11290 1201 74000000 		.4byte	.LVL373
 11291 1205 76000000 		.4byte	.LVL374
 11292 1209 0100     		.2byte	0x1
 11293 120b 50       		.byte	0x50
 11294 120c 76000000 		.4byte	.LVL374
 11295 1210 78000000 		.4byte	.LVL375
 11296 1214 0100     		.2byte	0x1
 11297 1216 54       		.byte	0x54
 11298 1217 78000000 		.4byte	.LVL375
 11299 121b 7A000000 		.4byte	.LVL376
 11300 121f 0100     		.2byte	0x1
 11301 1221 50       		.byte	0x50
 11302 1222 7A000000 		.4byte	.LVL376
 11303 1226 7C000000 		.4byte	.LVL377
 11304 122a 0100     		.2byte	0x1
 11305 122c 54       		.byte	0x54
 11306 122d 7C000000 		.4byte	.LVL377
 11307 1231 7E000000 		.4byte	.LVL378
 11308 1235 0100     		.2byte	0x1
 11309 1237 50       		.byte	0x50
 11310 1238 7E000000 		.4byte	.LVL378
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 306


 11311 123c 7E000000 		.4byte	.LVL379
 11312 1240 0100     		.2byte	0x1
 11313 1242 54       		.byte	0x54
 11314 1243 7E000000 		.4byte	.LVL379
 11315 1247 88000000 		.4byte	.LFE75
 11316 124b 0400     		.2byte	0x4
 11317 124d F3       		.byte	0xf3
 11318 124e 01       		.uleb128 0x1
 11319 124f 50       		.byte	0x50
 11320 1250 9F       		.byte	0x9f
 11321 1251 00000000 		.4byte	0
 11322 1255 00000000 		.4byte	0
 11323              	.LLST121:
 11324 1259 04000000 		.4byte	.LVL367
 11325 125d 70000000 		.4byte	.LVL372
 11326 1261 0200     		.2byte	0x2
 11327 1263 30       		.byte	0x30
 11328 1264 9F       		.byte	0x9f
 11329 1265 70000000 		.4byte	.LVL372
 11330 1269 74000000 		.4byte	.LVL373
 11331 126d 0200     		.2byte	0x2
 11332 126f 31       		.byte	0x31
 11333 1270 9F       		.byte	0x9f
 11334 1271 74000000 		.4byte	.LVL373
 11335 1275 7E000000 		.4byte	.LVL378
 11336 1279 0200     		.2byte	0x2
 11337 127b 30       		.byte	0x30
 11338 127c 9F       		.byte	0x9f
 11339 127d 7E000000 		.4byte	.LVL378
 11340 1281 88000000 		.4byte	.LFE75
 11341 1285 0100     		.2byte	0x1
 11342 1287 50       		.byte	0x50
 11343 1288 00000000 		.4byte	0
 11344 128c 00000000 		.4byte	0
 11345              	.LLST122:
 11346 1290 42000000 		.4byte	.LVL370
 11347 1294 50000000 		.4byte	.LVL371
 11348 1298 0100     		.2byte	0x1
 11349 129a 53       		.byte	0x53
 11350 129b 00000000 		.4byte	0
 11351 129f 00000000 		.4byte	0
 11352              	.LLST123:
 11353 12a3 00000000 		.4byte	.LVL380
 11354 12a7 3E000000 		.4byte	.LVL387
 11355 12ab 0100     		.2byte	0x1
 11356 12ad 50       		.byte	0x50
 11357 12ae 3E000000 		.4byte	.LVL387
 11358 12b2 8A000000 		.4byte	.LVL391
 11359 12b6 0100     		.2byte	0x1
 11360 12b8 54       		.byte	0x54
 11361 12b9 8A000000 		.4byte	.LVL391
 11362 12bd 94000000 		.4byte	.LFE76
 11363 12c1 0400     		.2byte	0x4
 11364 12c3 F3       		.byte	0xf3
 11365 12c4 01       		.uleb128 0x1
 11366 12c5 50       		.byte	0x50
 11367 12c6 9F       		.byte	0x9f
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 307


 11368 12c7 00000000 		.4byte	0
 11369 12cb 00000000 		.4byte	0
 11370              	.LLST124:
 11371 12cf 00000000 		.4byte	.LVL380
 11372 12d3 16000000 		.4byte	.LVL383
 11373 12d7 0100     		.2byte	0x1
 11374 12d9 51       		.byte	0x51
 11375 12da 16000000 		.4byte	.LVL383
 11376 12de 94000000 		.4byte	.LFE76
 11377 12e2 0400     		.2byte	0x4
 11378 12e4 F3       		.byte	0xf3
 11379 12e5 01       		.uleb128 0x1
 11380 12e6 51       		.byte	0x51
 11381 12e7 9F       		.byte	0x9f
 11382 12e8 00000000 		.4byte	0
 11383 12ec 00000000 		.4byte	0
 11384              	.LLST125:
 11385 12f0 04000000 		.4byte	.LVL381
 11386 12f4 3E000000 		.4byte	.LVL387
 11387 12f8 0100     		.2byte	0x1
 11388 12fa 50       		.byte	0x50
 11389 12fb 3E000000 		.4byte	.LVL387
 11390 12ff 8A000000 		.4byte	.LVL391
 11391 1303 0100     		.2byte	0x1
 11392 1305 54       		.byte	0x54
 11393 1306 8A000000 		.4byte	.LVL391
 11394 130a 94000000 		.4byte	.LFE76
 11395 130e 0400     		.2byte	0x4
 11396 1310 F3       		.byte	0xf3
 11397 1311 01       		.uleb128 0x1
 11398 1312 50       		.byte	0x50
 11399 1313 9F       		.byte	0x9f
 11400 1314 00000000 		.4byte	0
 11401 1318 00000000 		.4byte	0
 11402              	.LLST126:
 11403 131c 1A000000 		.4byte	.LVL384
 11404 1320 2C000000 		.4byte	.LVL386
 11405 1324 0100     		.2byte	0x1
 11406 1326 52       		.byte	0x52
 11407 1327 00000000 		.4byte	0
 11408 132b 00000000 		.4byte	0
 11409              	.LLST127:
 11410 132f 0E000000 		.4byte	.LVL382
 11411 1333 26000000 		.4byte	.LVL385
 11412 1337 0100     		.2byte	0x1
 11413 1339 53       		.byte	0x53
 11414 133a 26000000 		.4byte	.LVL385
 11415 133e 3E000000 		.4byte	.LVL387
 11416 1342 0200     		.2byte	0x2
 11417 1344 70       		.byte	0x70
 11418 1345 2C       		.sleb128 44
 11419 1346 3E000000 		.4byte	.LVL387
 11420 134a 41000000 		.4byte	.LVL388-1
 11421 134e 0200     		.2byte	0x2
 11422 1350 74       		.byte	0x74
 11423 1351 2C       		.sleb128 44
 11424 1352 00000000 		.4byte	0
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 308


 11425 1356 00000000 		.4byte	0
 11426              	.LLST128:
 11427 135a 5C000000 		.4byte	.LVL389
 11428 135e 6A000000 		.4byte	.LVL390
 11429 1362 0100     		.2byte	0x1
 11430 1364 53       		.byte	0x53
 11431 1365 00000000 		.4byte	0
 11432 1369 00000000 		.4byte	0
 11433              	.LLST129:
 11434 136d 00000000 		.4byte	.LVL393
 11435 1371 0B000000 		.4byte	.LVL394-1
 11436 1375 0100     		.2byte	0x1
 11437 1377 50       		.byte	0x50
 11438 1378 0B000000 		.4byte	.LVL394-1
 11439 137c 78000000 		.4byte	.LVL400
 11440 1380 0100     		.2byte	0x1
 11441 1382 54       		.byte	0x54
 11442 1383 78000000 		.4byte	.LVL400
 11443 1387 8C000000 		.4byte	.LFE79
 11444 138b 0400     		.2byte	0x4
 11445 138d F3       		.byte	0xf3
 11446 138e 01       		.uleb128 0x1
 11447 138f 50       		.byte	0x50
 11448 1390 9F       		.byte	0x9f
 11449 1391 00000000 		.4byte	0
 11450 1395 00000000 		.4byte	0
 11451              	.LLST130:
 11452 1399 00000000 		.4byte	.LVL393
 11453 139d 0B000000 		.4byte	.LVL394-1
 11454 13a1 0100     		.2byte	0x1
 11455 13a3 51       		.byte	0x51
 11456 13a4 0B000000 		.4byte	.LVL394-1
 11457 13a8 84000000 		.4byte	.LVL402
 11458 13ac 0100     		.2byte	0x1
 11459 13ae 55       		.byte	0x55
 11460 13af 84000000 		.4byte	.LVL402
 11461 13b3 8C000000 		.4byte	.LFE79
 11462 13b7 0400     		.2byte	0x4
 11463 13b9 F3       		.byte	0xf3
 11464 13ba 01       		.uleb128 0x1
 11465 13bb 51       		.byte	0x51
 11466 13bc 9F       		.byte	0x9f
 11467 13bd 00000000 		.4byte	0
 11468 13c1 00000000 		.4byte	0
 11469              	.LLST131:
 11470 13c5 00000000 		.4byte	.LVL393
 11471 13c9 0B000000 		.4byte	.LVL394-1
 11472 13cd 0100     		.2byte	0x1
 11473 13cf 52       		.byte	0x52
 11474 13d0 0B000000 		.4byte	.LVL394-1
 11475 13d4 4C000000 		.4byte	.LVL399
 11476 13d8 0100     		.2byte	0x1
 11477 13da 56       		.byte	0x56
 11478 13db 4C000000 		.4byte	.LVL399
 11479 13df 8C000000 		.4byte	.LFE79
 11480 13e3 0400     		.2byte	0x4
 11481 13e5 F3       		.byte	0xf3
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 309


 11482 13e6 01       		.uleb128 0x1
 11483 13e7 52       		.byte	0x52
 11484 13e8 9F       		.byte	0x9f
 11485 13e9 00000000 		.4byte	0
 11486 13ed 00000000 		.4byte	0
 11487              	.LLST132:
 11488 13f1 4C000000 		.4byte	.LVL399
 11489 13f5 84000000 		.4byte	.LVL403
 11490 13f9 0100     		.2byte	0x1
 11491 13fb 56       		.byte	0x56
 11492 13fc 84000000 		.4byte	.LVL403
 11493 1400 8C000000 		.4byte	.LFE79
 11494 1404 0100     		.2byte	0x1
 11495 1406 50       		.byte	0x50
 11496 1407 00000000 		.4byte	0
 11497 140b 00000000 		.4byte	0
 11498              	.LLST133:
 11499 140f 00000000 		.4byte	.LVL404
 11500 1413 0D000000 		.4byte	.LVL405-1
 11501 1417 0100     		.2byte	0x1
 11502 1419 50       		.byte	0x50
 11503 141a 0D000000 		.4byte	.LVL405-1
 11504 141e 8C000000 		.4byte	.LVL414
 11505 1422 0100     		.2byte	0x1
 11506 1424 54       		.byte	0x54
 11507 1425 8C000000 		.4byte	.LVL414
 11508 1429 A0000000 		.4byte	.LFE80
 11509 142d 0400     		.2byte	0x4
 11510 142f F3       		.byte	0xf3
 11511 1430 01       		.uleb128 0x1
 11512 1431 50       		.byte	0x50
 11513 1432 9F       		.byte	0x9f
 11514 1433 00000000 		.4byte	0
 11515 1437 00000000 		.4byte	0
 11516              	.LLST134:
 11517 143b 00000000 		.4byte	.LVL404
 11518 143f 0D000000 		.4byte	.LVL405-1
 11519 1443 0100     		.2byte	0x1
 11520 1445 51       		.byte	0x51
 11521 1446 0D000000 		.4byte	.LVL405-1
 11522 144a 98000000 		.4byte	.LVL417
 11523 144e 0100     		.2byte	0x1
 11524 1450 56       		.byte	0x56
 11525 1451 98000000 		.4byte	.LVL417
 11526 1455 A0000000 		.4byte	.LFE80
 11527 1459 0400     		.2byte	0x4
 11528 145b F3       		.byte	0xf3
 11529 145c 01       		.uleb128 0x1
 11530 145d 51       		.byte	0x51
 11531 145e 9F       		.byte	0x9f
 11532 145f 00000000 		.4byte	0
 11533 1463 00000000 		.4byte	0
 11534              	.LLST135:
 11535 1467 00000000 		.4byte	.LVL404
 11536 146b 0D000000 		.4byte	.LVL405-1
 11537 146f 0100     		.2byte	0x1
 11538 1471 52       		.byte	0x52
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 310


 11539 1472 0D000000 		.4byte	.LVL405-1
 11540 1476 82000000 		.4byte	.LVL411
 11541 147a 0100     		.2byte	0x1
 11542 147c 55       		.byte	0x55
 11543 147d 82000000 		.4byte	.LVL411
 11544 1481 84000000 		.4byte	.LVL412
 11545 1485 0400     		.2byte	0x4
 11546 1487 F3       		.byte	0xf3
 11547 1488 01       		.uleb128 0x1
 11548 1489 52       		.byte	0x52
 11549 148a 9F       		.byte	0x9f
 11550 148b 84000000 		.4byte	.LVL412
 11551 148f 86000000 		.4byte	.LVL413
 11552 1493 0100     		.2byte	0x1
 11553 1495 55       		.byte	0x55
 11554 1496 86000000 		.4byte	.LVL413
 11555 149a A0000000 		.4byte	.LFE80
 11556 149e 0400     		.2byte	0x4
 11557 14a0 F3       		.byte	0xf3
 11558 14a1 01       		.uleb128 0x1
 11559 14a2 52       		.byte	0x52
 11560 14a3 9F       		.byte	0x9f
 11561 14a4 00000000 		.4byte	0
 11562 14a8 00000000 		.4byte	0
 11563              	.LLST136:
 11564 14ac 00000000 		.4byte	.LVL404
 11565 14b0 0D000000 		.4byte	.LVL405-1
 11566 14b4 0100     		.2byte	0x1
 11567 14b6 53       		.byte	0x53
 11568 14b7 0D000000 		.4byte	.LVL405-1
 11569 14bb 98000000 		.4byte	.LVL418
 11570 14bf 0100     		.2byte	0x1
 11571 14c1 57       		.byte	0x57
 11572 14c2 98000000 		.4byte	.LVL418
 11573 14c6 A0000000 		.4byte	.LFE80
 11574 14ca 0400     		.2byte	0x4
 11575 14cc F3       		.byte	0xf3
 11576 14cd 01       		.uleb128 0x1
 11577 14ce 53       		.byte	0x53
 11578 14cf 9F       		.byte	0x9f
 11579 14d0 00000000 		.4byte	0
 11580 14d4 00000000 		.4byte	0
 11581              	.LLST137:
 11582 14d8 80000000 		.4byte	.LVL410
 11583 14dc 84000000 		.4byte	.LVL412
 11584 14e0 0200     		.2byte	0x2
 11585 14e2 31       		.byte	0x31
 11586 14e3 9F       		.byte	0x9f
 11587 14e4 86000000 		.4byte	.LVL413
 11588 14e8 98000000 		.4byte	.LVL416
 11589 14ec 0100     		.2byte	0x1
 11590 14ee 55       		.byte	0x55
 11591 14ef 98000000 		.4byte	.LVL416
 11592 14f3 A0000000 		.4byte	.LFE80
 11593 14f7 0100     		.2byte	0x1
 11594 14f9 50       		.byte	0x50
 11595 14fa 00000000 		.4byte	0
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 311


 11596 14fe 00000000 		.4byte	0
 11597              	.LLST138:
 11598 1502 00000000 		.4byte	.LVL419
 11599 1506 11000000 		.4byte	.LVL421-1
 11600 150a 0100     		.2byte	0x1
 11601 150c 50       		.byte	0x50
 11602 150d 11000000 		.4byte	.LVL421-1
 11603 1511 08010000 		.4byte	.LVL445
 11604 1515 0100     		.2byte	0x1
 11605 1517 54       		.byte	0x54
 11606 1518 08010000 		.4byte	.LVL445
 11607 151c 14010000 		.4byte	.LFE81
 11608 1520 0400     		.2byte	0x4
 11609 1522 F3       		.byte	0xf3
 11610 1523 01       		.uleb128 0x1
 11611 1524 50       		.byte	0x50
 11612 1525 9F       		.byte	0x9f
 11613 1526 00000000 		.4byte	0
 11614 152a 00000000 		.4byte	0
 11615              	.LLST139:
 11616 152e 00000000 		.4byte	.LVL419
 11617 1532 11000000 		.4byte	.LVL421-1
 11618 1536 0100     		.2byte	0x1
 11619 1538 51       		.byte	0x51
 11620 1539 11000000 		.4byte	.LVL421-1
 11621 153d 44000000 		.4byte	.LVL423
 11622 1541 0100     		.2byte	0x1
 11623 1543 55       		.byte	0x55
 11624 1544 44000000 		.4byte	.LVL423
 11625 1548 46000000 		.4byte	.LVL424
 11626 154c 0300     		.2byte	0x3
 11627 154e 75       		.byte	0x75
 11628 154f 6E       		.sleb128 -18
 11629 1550 9F       		.byte	0x9f
 11630 1551 46000000 		.4byte	.LVL424
 11631 1555 52000000 		.4byte	.LVL425
 11632 1559 0400     		.2byte	0x4
 11633 155b F3       		.byte	0xf3
 11634 155c 01       		.uleb128 0x1
 11635 155d 51       		.byte	0x51
 11636 155e 9F       		.byte	0x9f
 11637 155f 52000000 		.4byte	.LVL425
 11638 1563 54000000 		.4byte	.LVL426
 11639 1567 0100     		.2byte	0x1
 11640 1569 55       		.byte	0x55
 11641 156a 54000000 		.4byte	.LVL426
 11642 156e 56000000 		.4byte	.LVL427
 11643 1572 0300     		.2byte	0x3
 11644 1574 75       		.byte	0x75
 11645 1575 6E       		.sleb128 -18
 11646 1576 9F       		.byte	0x9f
 11647 1577 56000000 		.4byte	.LVL427
 11648 157b 60000000 		.4byte	.LVL428
 11649 157f 0400     		.2byte	0x4
 11650 1581 F3       		.byte	0xf3
 11651 1582 01       		.uleb128 0x1
 11652 1583 51       		.byte	0x51
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 312


 11653 1584 9F       		.byte	0x9f
 11654 1585 60000000 		.4byte	.LVL428
 11655 1589 62000000 		.4byte	.LVL429
 11656 158d 0100     		.2byte	0x1
 11657 158f 55       		.byte	0x55
 11658 1590 62000000 		.4byte	.LVL429
 11659 1594 64000000 		.4byte	.LVL430
 11660 1598 0300     		.2byte	0x3
 11661 159a 75       		.byte	0x75
 11662 159b 6E       		.sleb128 -18
 11663 159c 9F       		.byte	0x9f
 11664 159d 64000000 		.4byte	.LVL430
 11665 15a1 6C000000 		.4byte	.LVL431
 11666 15a5 0400     		.2byte	0x4
 11667 15a7 F3       		.byte	0xf3
 11668 15a8 01       		.uleb128 0x1
 11669 15a9 51       		.byte	0x51
 11670 15aa 9F       		.byte	0x9f
 11671 15ab 6C000000 		.4byte	.LVL431
 11672 15af 72000000 		.4byte	.LVL432
 11673 15b3 0100     		.2byte	0x1
 11674 15b5 55       		.byte	0x55
 11675 15b6 72000000 		.4byte	.LVL432
 11676 15ba 74000000 		.4byte	.LVL433
 11677 15be 0300     		.2byte	0x3
 11678 15c0 75       		.byte	0x75
 11679 15c1 6E       		.sleb128 -18
 11680 15c2 9F       		.byte	0x9f
 11681 15c3 74000000 		.4byte	.LVL433
 11682 15c7 7C000000 		.4byte	.LVL434
 11683 15cb 0400     		.2byte	0x4
 11684 15cd F3       		.byte	0xf3
 11685 15ce 01       		.uleb128 0x1
 11686 15cf 51       		.byte	0x51
 11687 15d0 9F       		.byte	0x9f
 11688 15d1 7C000000 		.4byte	.LVL434
 11689 15d5 7E000000 		.4byte	.LVL435
 11690 15d9 0100     		.2byte	0x1
 11691 15db 55       		.byte	0x55
 11692 15dc 7E000000 		.4byte	.LVL435
 11693 15e0 80000000 		.4byte	.LVL436
 11694 15e4 0400     		.2byte	0x4
 11695 15e6 F3       		.byte	0xf3
 11696 15e7 01       		.uleb128 0x1
 11697 15e8 51       		.byte	0x51
 11698 15e9 9F       		.byte	0x9f
 11699 15ea 80000000 		.4byte	.LVL436
 11700 15ee 82000000 		.4byte	.LVL437
 11701 15f2 0100     		.2byte	0x1
 11702 15f4 55       		.byte	0x55
 11703 15f5 82000000 		.4byte	.LVL437
 11704 15f9 14010000 		.4byte	.LFE81
 11705 15fd 0400     		.2byte	0x4
 11706 15ff F3       		.byte	0xf3
 11707 1600 01       		.uleb128 0x1
 11708 1601 51       		.byte	0x51
 11709 1602 9F       		.byte	0x9f
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 313


 11710 1603 00000000 		.4byte	0
 11711 1607 00000000 		.4byte	0
 11712              	.LLST140:
 11713 160b 00000000 		.4byte	.LVL419
 11714 160f 11000000 		.4byte	.LVL421-1
 11715 1613 0100     		.2byte	0x1
 11716 1615 52       		.byte	0x52
 11717 1616 11000000 		.4byte	.LVL421-1
 11718 161a 14010000 		.4byte	.LFE81
 11719 161e 0200     		.2byte	0x2
 11720 1620 91       		.byte	0x91
 11721 1621 64       		.sleb128 -28
 11722 1622 00000000 		.4byte	0
 11723 1626 00000000 		.4byte	0
 11724              	.LLST141:
 11725 162a 00000000 		.4byte	.LVL419
 11726 162e 11000000 		.4byte	.LVL421-1
 11727 1632 0100     		.2byte	0x1
 11728 1634 53       		.byte	0x53
 11729 1635 11000000 		.4byte	.LVL421-1
 11730 1639 14010000 		.4byte	.LFE81
 11731 163d 0400     		.2byte	0x4
 11732 163f F3       		.byte	0xf3
 11733 1640 01       		.uleb128 0x1
 11734 1641 53       		.byte	0x53
 11735 1642 9F       		.byte	0x9f
 11736 1643 00000000 		.4byte	0
 11737 1647 00000000 		.4byte	0
 11738              	.LLST142:
 11739 164b 0E000000 		.4byte	.LVL420
 11740 164f 11000000 		.4byte	.LVL421-1
 11741 1653 0100     		.2byte	0x1
 11742 1655 50       		.byte	0x50
 11743 1656 11000000 		.4byte	.LVL421-1
 11744 165a 08010000 		.4byte	.LVL445
 11745 165e 0100     		.2byte	0x1
 11746 1660 54       		.byte	0x54
 11747 1661 08010000 		.4byte	.LVL445
 11748 1665 14010000 		.4byte	.LFE81
 11749 1669 0400     		.2byte	0x4
 11750 166b F3       		.byte	0xf3
 11751 166c 01       		.uleb128 0x1
 11752 166d 50       		.byte	0x50
 11753 166e 9F       		.byte	0x9f
 11754 166f 00000000 		.4byte	0
 11755 1673 00000000 		.4byte	0
 11756              	.LLST143:
 11757 1677 0E000000 		.4byte	.LVL420
 11758 167b 82000000 		.4byte	.LVL437
 11759 167f 0200     		.2byte	0x2
 11760 1681 31       		.byte	0x31
 11761 1682 9F       		.byte	0x9f
 11762 1683 82000000 		.4byte	.LVL437
 11763 1687 08010000 		.4byte	.LVL446
 11764 168b 0100     		.2byte	0x1
 11765 168d 55       		.byte	0x55
 11766 168e 08010000 		.4byte	.LVL446
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 314


 11767 1692 14010000 		.4byte	.LFE81
 11768 1696 0100     		.2byte	0x1
 11769 1698 50       		.byte	0x50
 11770 1699 00000000 		.4byte	0
 11771 169d 00000000 		.4byte	0
 11772              	.LLST144:
 11773 16a1 28000000 		.4byte	.LVL422
 11774 16a5 8A000000 		.4byte	.LVL439
 11775 16a9 0100     		.2byte	0x1
 11776 16ab 52       		.byte	0x52
 11777 16ac 00000000 		.4byte	0
 11778 16b0 00000000 		.4byte	0
 11779              	.LLST145:
 11780 16b4 88000000 		.4byte	.LVL438
 11781 16b8 AC000000 		.4byte	.LVL440
 11782 16bc 0100     		.2byte	0x1
 11783 16be 53       		.byte	0x53
 11784 16bf 00000000 		.4byte	0
 11785 16c3 00000000 		.4byte	0
 11786              	.LLST146:
 11787 16c7 C4000000 		.4byte	.LVL441
 11788 16cb D8000000 		.4byte	.LVL442
 11789 16cf 0100     		.2byte	0x1
 11790 16d1 53       		.byte	0x53
 11791 16d2 00000000 		.4byte	0
 11792 16d6 00000000 		.4byte	0
 11793              	.LLST147:
 11794 16da 00000000 		.4byte	.LVL447
 11795 16de 11000000 		.4byte	.LVL449-1
 11796 16e2 0100     		.2byte	0x1
 11797 16e4 50       		.byte	0x50
 11798 16e5 11000000 		.4byte	.LVL449-1
 11799 16e9 44010000 		.4byte	.LVL475
 11800 16ed 0100     		.2byte	0x1
 11801 16ef 54       		.byte	0x54
 11802 16f0 44010000 		.4byte	.LVL475
 11803 16f4 50010000 		.4byte	.LFE82
 11804 16f8 0400     		.2byte	0x4
 11805 16fa F3       		.byte	0xf3
 11806 16fb 01       		.uleb128 0x1
 11807 16fc 50       		.byte	0x50
 11808 16fd 9F       		.byte	0x9f
 11809 16fe 00000000 		.4byte	0
 11810 1702 00000000 		.4byte	0
 11811              	.LLST148:
 11812 1706 00000000 		.4byte	.LVL447
 11813 170a 11000000 		.4byte	.LVL449-1
 11814 170e 0100     		.2byte	0x1
 11815 1710 51       		.byte	0x51
 11816 1711 11000000 		.4byte	.LVL449-1
 11817 1715 44000000 		.4byte	.LVL451
 11818 1719 0100     		.2byte	0x1
 11819 171b 55       		.byte	0x55
 11820 171c 44000000 		.4byte	.LVL451
 11821 1720 46000000 		.4byte	.LVL452
 11822 1724 0300     		.2byte	0x3
 11823 1726 75       		.byte	0x75
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 315


 11824 1727 6E       		.sleb128 -18
 11825 1728 9F       		.byte	0x9f
 11826 1729 46000000 		.4byte	.LVL452
 11827 172d 52000000 		.4byte	.LVL453
 11828 1731 0400     		.2byte	0x4
 11829 1733 F3       		.byte	0xf3
 11830 1734 01       		.uleb128 0x1
 11831 1735 51       		.byte	0x51
 11832 1736 9F       		.byte	0x9f
 11833 1737 52000000 		.4byte	.LVL453
 11834 173b 54000000 		.4byte	.LVL454
 11835 173f 0100     		.2byte	0x1
 11836 1741 55       		.byte	0x55
 11837 1742 54000000 		.4byte	.LVL454
 11838 1746 56000000 		.4byte	.LVL455
 11839 174a 0300     		.2byte	0x3
 11840 174c 75       		.byte	0x75
 11841 174d 6E       		.sleb128 -18
 11842 174e 9F       		.byte	0x9f
 11843 174f 56000000 		.4byte	.LVL455
 11844 1753 60000000 		.4byte	.LVL456
 11845 1757 0400     		.2byte	0x4
 11846 1759 F3       		.byte	0xf3
 11847 175a 01       		.uleb128 0x1
 11848 175b 51       		.byte	0x51
 11849 175c 9F       		.byte	0x9f
 11850 175d 60000000 		.4byte	.LVL456
 11851 1761 62000000 		.4byte	.LVL457
 11852 1765 0100     		.2byte	0x1
 11853 1767 55       		.byte	0x55
 11854 1768 62000000 		.4byte	.LVL457
 11855 176c 64000000 		.4byte	.LVL458
 11856 1770 0300     		.2byte	0x3
 11857 1772 75       		.byte	0x75
 11858 1773 6E       		.sleb128 -18
 11859 1774 9F       		.byte	0x9f
 11860 1775 64000000 		.4byte	.LVL458
 11861 1779 6C000000 		.4byte	.LVL459
 11862 177d 0400     		.2byte	0x4
 11863 177f F3       		.byte	0xf3
 11864 1780 01       		.uleb128 0x1
 11865 1781 51       		.byte	0x51
 11866 1782 9F       		.byte	0x9f
 11867 1783 6C000000 		.4byte	.LVL459
 11868 1787 72000000 		.4byte	.LVL460
 11869 178b 0100     		.2byte	0x1
 11870 178d 55       		.byte	0x55
 11871 178e 72000000 		.4byte	.LVL460
 11872 1792 74000000 		.4byte	.LVL461
 11873 1796 0300     		.2byte	0x3
 11874 1798 75       		.byte	0x75
 11875 1799 6E       		.sleb128 -18
 11876 179a 9F       		.byte	0x9f
 11877 179b 74000000 		.4byte	.LVL461
 11878 179f 7C000000 		.4byte	.LVL462
 11879 17a3 0400     		.2byte	0x4
 11880 17a5 F3       		.byte	0xf3
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 316


 11881 17a6 01       		.uleb128 0x1
 11882 17a7 51       		.byte	0x51
 11883 17a8 9F       		.byte	0x9f
 11884 17a9 7C000000 		.4byte	.LVL462
 11885 17ad 7E000000 		.4byte	.LVL463
 11886 17b1 0100     		.2byte	0x1
 11887 17b3 55       		.byte	0x55
 11888 17b4 7E000000 		.4byte	.LVL463
 11889 17b8 80000000 		.4byte	.LVL464
 11890 17bc 0400     		.2byte	0x4
 11891 17be F3       		.byte	0xf3
 11892 17bf 01       		.uleb128 0x1
 11893 17c0 51       		.byte	0x51
 11894 17c1 9F       		.byte	0x9f
 11895 17c2 80000000 		.4byte	.LVL464
 11896 17c6 82000000 		.4byte	.LVL465
 11897 17ca 0100     		.2byte	0x1
 11898 17cc 55       		.byte	0x55
 11899 17cd 82000000 		.4byte	.LVL465
 11900 17d1 50010000 		.4byte	.LFE82
 11901 17d5 0400     		.2byte	0x4
 11902 17d7 F3       		.byte	0xf3
 11903 17d8 01       		.uleb128 0x1
 11904 17d9 51       		.byte	0x51
 11905 17da 9F       		.byte	0x9f
 11906 17db 00000000 		.4byte	0
 11907 17df 00000000 		.4byte	0
 11908              	.LLST149:
 11909 17e3 00000000 		.4byte	.LVL447
 11910 17e7 11000000 		.4byte	.LVL449-1
 11911 17eb 0100     		.2byte	0x1
 11912 17ed 52       		.byte	0x52
 11913 17ee 11000000 		.4byte	.LVL449-1
 11914 17f2 50010000 		.4byte	.LFE82
 11915 17f6 0200     		.2byte	0x2
 11916 17f8 91       		.byte	0x91
 11917 17f9 64       		.sleb128 -28
 11918 17fa 00000000 		.4byte	0
 11919 17fe 00000000 		.4byte	0
 11920              	.LLST150:
 11921 1802 00000000 		.4byte	.LVL447
 11922 1806 11000000 		.4byte	.LVL449-1
 11923 180a 0100     		.2byte	0x1
 11924 180c 53       		.byte	0x53
 11925 180d 11000000 		.4byte	.LVL449-1
 11926 1811 50010000 		.4byte	.LFE82
 11927 1815 0400     		.2byte	0x4
 11928 1817 F3       		.byte	0xf3
 11929 1818 01       		.uleb128 0x1
 11930 1819 53       		.byte	0x53
 11931 181a 9F       		.byte	0x9f
 11932 181b 00000000 		.4byte	0
 11933 181f 00000000 		.4byte	0
 11934              	.LLST151:
 11935 1823 0E000000 		.4byte	.LVL448
 11936 1827 11000000 		.4byte	.LVL449-1
 11937 182b 0100     		.2byte	0x1
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 317


 11938 182d 50       		.byte	0x50
 11939 182e 11000000 		.4byte	.LVL449-1
 11940 1832 44010000 		.4byte	.LVL475
 11941 1836 0100     		.2byte	0x1
 11942 1838 54       		.byte	0x54
 11943 1839 44010000 		.4byte	.LVL475
 11944 183d 50010000 		.4byte	.LFE82
 11945 1841 0400     		.2byte	0x4
 11946 1843 F3       		.byte	0xf3
 11947 1844 01       		.uleb128 0x1
 11948 1845 50       		.byte	0x50
 11949 1846 9F       		.byte	0x9f
 11950 1847 00000000 		.4byte	0
 11951 184b 00000000 		.4byte	0
 11952              	.LLST152:
 11953 184f 28000000 		.4byte	.LVL450
 11954 1853 92000000 		.4byte	.LVL467
 11955 1857 0100     		.2byte	0x1
 11956 1859 52       		.byte	0x52
 11957 185a FE000000 		.4byte	.LVL471
 11958 185e 02010000 		.4byte	.LVL472
 11959 1862 0100     		.2byte	0x1
 11960 1864 52       		.byte	0x52
 11961 1865 00000000 		.4byte	0
 11962 1869 00000000 		.4byte	0
 11963              	.LLST153:
 11964 186d 0E000000 		.4byte	.LVL448
 11965 1871 82000000 		.4byte	.LVL465
 11966 1875 0200     		.2byte	0x2
 11967 1877 31       		.byte	0x31
 11968 1878 9F       		.byte	0x9f
 11969 1879 82000000 		.4byte	.LVL465
 11970 187d 44010000 		.4byte	.LVL476
 11971 1881 0100     		.2byte	0x1
 11972 1883 55       		.byte	0x55
 11973 1884 44010000 		.4byte	.LVL476
 11974 1888 50010000 		.4byte	.LFE82
 11975 188c 0100     		.2byte	0x1
 11976 188e 50       		.byte	0x50
 11977 188f 00000000 		.4byte	0
 11978 1893 00000000 		.4byte	0
 11979              	.LLST154:
 11980 1897 12000000 		.4byte	.LVL449
 11981 189b 3F010000 		.4byte	.LVL474-1
 11982 189f 0100     		.2byte	0x1
 11983 18a1 50       		.byte	0x50
 11984 18a2 00000000 		.4byte	0
 11985 18a6 00000000 		.4byte	0
 11986              	.LLST155:
 11987 18aa 90000000 		.4byte	.LVL466
 11988 18ae B4000000 		.4byte	.LVL468
 11989 18b2 0100     		.2byte	0x1
 11990 18b4 53       		.byte	0x53
 11991 18b5 00000000 		.4byte	0
 11992 18b9 00000000 		.4byte	0
 11993              	.LLST156:
 11994 18bd CC000000 		.4byte	.LVL469
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 318


 11995 18c1 DA000000 		.4byte	.LVL470
 11996 18c5 0100     		.2byte	0x1
 11997 18c7 53       		.byte	0x53
 11998 18c8 00000000 		.4byte	0
 11999 18cc 00000000 		.4byte	0
 12000              	.LLST157:
 12001 18d0 02010000 		.4byte	.LVL472
 12002 18d4 14010000 		.4byte	.LVL473
 12003 18d8 0100     		.2byte	0x1
 12004 18da 52       		.byte	0x52
 12005 18db 00000000 		.4byte	0
 12006 18df 00000000 		.4byte	0
 12007              	.LLST158:
 12008 18e3 00000000 		.4byte	.LVL477
 12009 18e7 0B000000 		.4byte	.LVL479-1
 12010 18eb 0100     		.2byte	0x1
 12011 18ed 50       		.byte	0x50
 12012 18ee 0B000000 		.4byte	.LVL479-1
 12013 18f2 DA000000 		.4byte	.LVL492
 12014 18f6 0100     		.2byte	0x1
 12015 18f8 55       		.byte	0x55
 12016 18f9 DA000000 		.4byte	.LVL492
 12017 18fd E4000000 		.4byte	.LFE83
 12018 1901 0400     		.2byte	0x4
 12019 1903 F3       		.byte	0xf3
 12020 1904 01       		.uleb128 0x1
 12021 1905 50       		.byte	0x50
 12022 1906 9F       		.byte	0x9f
 12023 1907 00000000 		.4byte	0
 12024 190b 00000000 		.4byte	0
 12025              	.LLST159:
 12026 190f 00000000 		.4byte	.LVL477
 12027 1913 0B000000 		.4byte	.LVL479-1
 12028 1917 0100     		.2byte	0x1
 12029 1919 51       		.byte	0x51
 12030 191a 0B000000 		.4byte	.LVL479-1
 12031 191e 18000000 		.4byte	.LVL481
 12032 1922 0100     		.2byte	0x1
 12033 1924 54       		.byte	0x54
 12034 1925 18000000 		.4byte	.LVL481
 12035 1929 1A000000 		.4byte	.LVL482
 12036 192d 0300     		.2byte	0x3
 12037 192f 74       		.byte	0x74
 12038 1930 6E       		.sleb128 -18
 12039 1931 9F       		.byte	0x9f
 12040 1932 1A000000 		.4byte	.LVL482
 12041 1936 E4000000 		.4byte	.LFE83
 12042 193a 0400     		.2byte	0x4
 12043 193c F3       		.byte	0xf3
 12044 193d 01       		.uleb128 0x1
 12045 193e 51       		.byte	0x51
 12046 193f 9F       		.byte	0x9f
 12047 1940 00000000 		.4byte	0
 12048 1944 00000000 		.4byte	0
 12049              	.LLST160:
 12050 1948 00000000 		.4byte	.LVL477
 12051 194c 0B000000 		.4byte	.LVL479-1
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 319


 12052 1950 0100     		.2byte	0x1
 12053 1952 52       		.byte	0x52
 12054 1953 0B000000 		.4byte	.LVL479-1
 12055 1957 DA000000 		.4byte	.LVL493
 12056 195b 0100     		.2byte	0x1
 12057 195d 56       		.byte	0x56
 12058 195e DA000000 		.4byte	.LVL493
 12059 1962 E4000000 		.4byte	.LFE83
 12060 1966 0400     		.2byte	0x4
 12061 1968 F3       		.byte	0xf3
 12062 1969 01       		.uleb128 0x1
 12063 196a 52       		.byte	0x52
 12064 196b 9F       		.byte	0x9f
 12065 196c 00000000 		.4byte	0
 12066 1970 00000000 		.4byte	0
 12067              	.LLST161:
 12068 1974 08000000 		.4byte	.LVL478
 12069 1978 0B000000 		.4byte	.LVL479-1
 12070 197c 0100     		.2byte	0x1
 12071 197e 50       		.byte	0x50
 12072 197f 0B000000 		.4byte	.LVL479-1
 12073 1983 DA000000 		.4byte	.LVL492
 12074 1987 0100     		.2byte	0x1
 12075 1989 55       		.byte	0x55
 12076 198a DA000000 		.4byte	.LVL492
 12077 198e E4000000 		.4byte	.LFE83
 12078 1992 0400     		.2byte	0x4
 12079 1994 F3       		.byte	0xf3
 12080 1995 01       		.uleb128 0x1
 12081 1996 50       		.byte	0x50
 12082 1997 9F       		.byte	0x9f
 12083 1998 00000000 		.4byte	0
 12084 199c 00000000 		.4byte	0
 12085              	.LLST162:
 12086 19a0 12000000 		.4byte	.LVL480
 12087 19a4 30000000 		.4byte	.LVL484
 12088 19a8 0100     		.2byte	0x1
 12089 19aa 52       		.byte	0x52
 12090 19ab 9C000000 		.4byte	.LVL488
 12091 19af A0000000 		.4byte	.LVL489
 12092 19b3 0100     		.2byte	0x1
 12093 19b5 52       		.byte	0x52
 12094 19b6 00000000 		.4byte	0
 12095 19ba 00000000 		.4byte	0
 12096              	.LLST163:
 12097 19be 0C000000 		.4byte	.LVL479
 12098 19c2 D9000000 		.4byte	.LVL491-1
 12099 19c6 0100     		.2byte	0x1
 12100 19c8 50       		.byte	0x50
 12101 19c9 00000000 		.4byte	0
 12102 19cd 00000000 		.4byte	0
 12103              	.LLST164:
 12104 19d1 2E000000 		.4byte	.LVL483
 12105 19d5 52000000 		.4byte	.LVL485
 12106 19d9 0100     		.2byte	0x1
 12107 19db 53       		.byte	0x53
 12108 19dc 00000000 		.4byte	0
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 320


 12109 19e0 00000000 		.4byte	0
 12110              	.LLST165:
 12111 19e4 6A000000 		.4byte	.LVL486
 12112 19e8 78000000 		.4byte	.LVL487
 12113 19ec 0100     		.2byte	0x1
 12114 19ee 53       		.byte	0x53
 12115 19ef 00000000 		.4byte	0
 12116 19f3 00000000 		.4byte	0
 12117              	.LLST166:
 12118 19f7 A0000000 		.4byte	.LVL489
 12119 19fb B2000000 		.4byte	.LVL490
 12120 19ff 0100     		.2byte	0x1
 12121 1a01 52       		.byte	0x52
 12122 1a02 00000000 		.4byte	0
 12123 1a06 00000000 		.4byte	0
 12124              	.LLST167:
 12125 1a0a 00000000 		.4byte	.LVL494
 12126 1a0e 0E000000 		.4byte	.LVL495
 12127 1a12 0100     		.2byte	0x1
 12128 1a14 50       		.byte	0x50
 12129 1a15 00000000 		.4byte	0
 12130 1a19 00000000 		.4byte	0
 12131              	.LLST168:
 12132 1a1d 00000000 		.4byte	.LVL494
 12133 1a21 11000000 		.4byte	.LVL496-1
 12134 1a25 0100     		.2byte	0x1
 12135 1a27 51       		.byte	0x51
 12136 1a28 11000000 		.4byte	.LVL496-1
 12137 1a2c 1E000000 		.4byte	.LVL497
 12138 1a30 0100     		.2byte	0x1
 12139 1a32 54       		.byte	0x54
 12140 1a33 1E000000 		.4byte	.LVL497
 12141 1a37 28000000 		.4byte	.LVL499
 12142 1a3b 0400     		.2byte	0x4
 12143 1a3d F3       		.byte	0xf3
 12144 1a3e 01       		.uleb128 0x1
 12145 1a3f 51       		.byte	0x51
 12146 1a40 9F       		.byte	0x9f
 12147 1a41 28000000 		.4byte	.LVL499
 12148 1a45 2A000000 		.4byte	.LVL500
 12149 1a49 0100     		.2byte	0x1
 12150 1a4b 54       		.byte	0x54
 12151 1a4c 2A000000 		.4byte	.LVL500
 12152 1a50 38000000 		.4byte	.LFE84
 12153 1a54 0400     		.2byte	0x4
 12154 1a56 F3       		.byte	0xf3
 12155 1a57 01       		.uleb128 0x1
 12156 1a58 51       		.byte	0x51
 12157 1a59 9F       		.byte	0x9f
 12158 1a5a 00000000 		.4byte	0
 12159 1a5e 00000000 		.4byte	0
 12160              	.LLST169:
 12161 1a62 0E000000 		.4byte	.LVL495
 12162 1a66 30000000 		.4byte	.LVL503
 12163 1a6a 0100     		.2byte	0x1
 12164 1a6c 55       		.byte	0x55
 12165 1a6d 00000000 		.4byte	0
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 321


 12166 1a71 00000000 		.4byte	0
 12167              	.LLST170:
 12168 1a75 24000000 		.4byte	.LVL498
 12169 1a79 28000000 		.4byte	.LVL499
 12170 1a7d 0200     		.2byte	0x2
 12171 1a7f 31       		.byte	0x31
 12172 1a80 9F       		.byte	0x9f
 12173 1a81 2A000000 		.4byte	.LVL500
 12174 1a85 30000000 		.4byte	.LVL502
 12175 1a89 0100     		.2byte	0x1
 12176 1a8b 54       		.byte	0x54
 12177 1a8c 30000000 		.4byte	.LVL502
 12178 1a90 38000000 		.4byte	.LFE84
 12179 1a94 0100     		.2byte	0x1
 12180 1a96 50       		.byte	0x50
 12181 1a97 00000000 		.4byte	0
 12182 1a9b 00000000 		.4byte	0
 12183              	.LLST171:
 12184 1a9f 00000000 		.4byte	.LVL504
 12185 1aa3 10000000 		.4byte	.LVL505
 12186 1aa7 0100     		.2byte	0x1
 12187 1aa9 50       		.byte	0x50
 12188 1aaa 00000000 		.4byte	0
 12189 1aae 00000000 		.4byte	0
 12190              	.LLST172:
 12191 1ab2 00000000 		.4byte	.LVL504
 12192 1ab6 13000000 		.4byte	.LVL506-1
 12193 1aba 0100     		.2byte	0x1
 12194 1abc 51       		.byte	0x51
 12195 1abd 13000000 		.4byte	.LVL506-1
 12196 1ac1 1C000000 		.4byte	.LVL507
 12197 1ac5 0100     		.2byte	0x1
 12198 1ac7 54       		.byte	0x54
 12199 1ac8 1C000000 		.4byte	.LVL507
 12200 1acc 30000000 		.4byte	.LFE85
 12201 1ad0 0400     		.2byte	0x4
 12202 1ad2 F3       		.byte	0xf3
 12203 1ad3 01       		.uleb128 0x1
 12204 1ad4 51       		.byte	0x51
 12205 1ad5 9F       		.byte	0x9f
 12206 1ad6 00000000 		.4byte	0
 12207 1ada 00000000 		.4byte	0
 12208              	.LLST173:
 12209 1ade 00000000 		.4byte	.LVL504
 12210 1ae2 13000000 		.4byte	.LVL506-1
 12211 1ae6 0100     		.2byte	0x1
 12212 1ae8 52       		.byte	0x52
 12213 1ae9 13000000 		.4byte	.LVL506-1
 12214 1aed 28000000 		.4byte	.LVL511
 12215 1af1 0100     		.2byte	0x1
 12216 1af3 56       		.byte	0x56
 12217 1af4 28000000 		.4byte	.LVL511
 12218 1af8 30000000 		.4byte	.LFE85
 12219 1afc 0400     		.2byte	0x4
 12220 1afe F3       		.byte	0xf3
 12221 1aff 01       		.uleb128 0x1
 12222 1b00 52       		.byte	0x52
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 322


 12223 1b01 9F       		.byte	0x9f
 12224 1b02 00000000 		.4byte	0
 12225 1b06 00000000 		.4byte	0
 12226              	.LLST174:
 12227 1b0a 10000000 		.4byte	.LVL505
 12228 1b0e 28000000 		.4byte	.LVL510
 12229 1b12 0100     		.2byte	0x1
 12230 1b14 55       		.byte	0x55
 12231 1b15 00000000 		.4byte	0
 12232 1b19 00000000 		.4byte	0
 12233              	.LLST175:
 12234 1b1d 1C000000 		.4byte	.LVL507
 12235 1b21 28000000 		.4byte	.LVL509
 12236 1b25 0100     		.2byte	0x1
 12237 1b27 54       		.byte	0x54
 12238 1b28 28000000 		.4byte	.LVL509
 12239 1b2c 30000000 		.4byte	.LFE85
 12240 1b30 0100     		.2byte	0x1
 12241 1b32 50       		.byte	0x50
 12242 1b33 00000000 		.4byte	0
 12243 1b37 00000000 		.4byte	0
 12244              		.section	.debug_aranges,"",%progbits
 12245 0000 BC010000 		.4byte	0x1bc
 12246 0004 0200     		.2byte	0x2
 12247 0006 00000000 		.4byte	.Ldebug_info0
 12248 000a 04       		.byte	0x4
 12249 000b 00       		.byte	0
 12250 000c 0000     		.2byte	0
 12251 000e 0000     		.2byte	0
 12252 0010 00000000 		.4byte	.LFB44
 12253 0014 28000000 		.4byte	.LFE44-.LFB44
 12254 0018 00000000 		.4byte	.LFB69
 12255 001c 14000000 		.4byte	.LFE69-.LFB69
 12256 0020 00000000 		.4byte	.LFB72
 12257 0024 24000000 		.4byte	.LFE72-.LFB72
 12258 0028 00000000 		.4byte	.LFB71
 12259 002c 12000000 		.4byte	.LFE71-.LFB71
 12260 0030 00000000 		.4byte	.LFB35
 12261 0034 90000000 		.4byte	.LFE35-.LFB35
 12262 0038 00000000 		.4byte	.LFB67
 12263 003c 58000000 		.4byte	.LFE67-.LFB67
 12264 0040 00000000 		.4byte	.LFB36
 12265 0044 B4000000 		.4byte	.LFE36-.LFB36
 12266 0048 00000000 		.4byte	.LFB68
 12267 004c 38000000 		.4byte	.LFE68-.LFB68
 12268 0050 00000000 		.4byte	.LFB66
 12269 0054 08000000 		.4byte	.LFE66-.LFB66
 12270 0058 00000000 		.4byte	.LFB86
 12271 005c 80000000 		.4byte	.LFE86-.LFB86
 12272 0060 00000000 		.4byte	.LFB34
 12273 0064 66000000 		.4byte	.LFE34-.LFB34
 12274 0068 00000000 		.4byte	.LFB37
 12275 006c 80000000 		.4byte	.LFE37-.LFB37
 12276 0070 00000000 		.4byte	.LFB40
 12277 0074 20000000 		.4byte	.LFE40-.LFB40
 12278 0078 00000000 		.4byte	.LFB41
 12279 007c 20000000 		.4byte	.LFE41-.LFB41
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 323


 12280 0080 00000000 		.4byte	.LFB42
 12281 0084 DC000000 		.4byte	.LFE42-.LFB42
 12282 0088 00000000 		.4byte	.LFB45
 12283 008c 8C000000 		.4byte	.LFE45-.LFB45
 12284 0090 00000000 		.4byte	.LFB46
 12285 0094 B0000000 		.4byte	.LFE46-.LFB46
 12286 0098 00000000 		.4byte	.LFB47
 12287 009c 50000000 		.4byte	.LFE47-.LFB47
 12288 00a0 00000000 		.4byte	.LFB48
 12289 00a4 14000000 		.4byte	.LFE48-.LFB48
 12290 00a8 00000000 		.4byte	.LFB49
 12291 00ac 10000000 		.4byte	.LFE49-.LFB49
 12292 00b0 00000000 		.4byte	.LFB51
 12293 00b4 0C000000 		.4byte	.LFE51-.LFB51
 12294 00b8 00000000 		.4byte	.LFB52
 12295 00bc 0C000000 		.4byte	.LFE52-.LFB52
 12296 00c0 00000000 		.4byte	.LFB53
 12297 00c4 0C000000 		.4byte	.LFE53-.LFB53
 12298 00c8 00000000 		.4byte	.LFB54
 12299 00cc 10000000 		.4byte	.LFE54-.LFB54
 12300 00d0 00000000 		.4byte	.LFB56
 12301 00d4 5C010000 		.4byte	.LFE56-.LFB56
 12302 00d8 00000000 		.4byte	.LFB50
 12303 00dc 2C010000 		.4byte	.LFE50-.LFB50
 12304 00e0 00000000 		.4byte	.LFB38
 12305 00e4 60000000 		.4byte	.LFE38-.LFB38
 12306 00e8 00000000 		.4byte	.LFB39
 12307 00ec 24000000 		.4byte	.LFE39-.LFB39
 12308 00f0 00000000 		.4byte	.LFB55
 12309 00f4 24000000 		.4byte	.LFE55-.LFB55
 12310 00f8 00000000 		.4byte	.LFB57
 12311 00fc AC000000 		.4byte	.LFE57-.LFB57
 12312 0100 00000000 		.4byte	.LFB43
 12313 0104 9C000000 		.4byte	.LFE43-.LFB43
 12314 0108 00000000 		.4byte	.LFB58
 12315 010c 1C000000 		.4byte	.LFE58-.LFB58
 12316 0110 00000000 		.4byte	.LFB59
 12317 0114 40000000 		.4byte	.LFE59-.LFB59
 12318 0118 00000000 		.4byte	.LFB60
 12319 011c E0000000 		.4byte	.LFE60-.LFB60
 12320 0120 00000000 		.4byte	.LFB61
 12321 0124 B8000000 		.4byte	.LFE61-.LFB61
 12322 0128 00000000 		.4byte	.LFB62
 12323 012c 1C000000 		.4byte	.LFE62-.LFB62
 12324 0130 00000000 		.4byte	.LFB63
 12325 0134 10000000 		.4byte	.LFE63-.LFB63
 12326 0138 00000000 		.4byte	.LFB64
 12327 013c 58000000 		.4byte	.LFE64-.LFB64
 12328 0140 00000000 		.4byte	.LFB65
 12329 0144 0C000000 		.4byte	.LFE65-.LFB65
 12330 0148 00000000 		.4byte	.LFB70
 12331 014c 18000000 		.4byte	.LFE70-.LFB70
 12332 0150 00000000 		.4byte	.LFB73
 12333 0154 0C000000 		.4byte	.LFE73-.LFB73
 12334 0158 00000000 		.4byte	.LFB74
 12335 015c BC000000 		.4byte	.LFE74-.LFB74
 12336 0160 00000000 		.4byte	.LFB75
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 324


 12337 0164 88000000 		.4byte	.LFE75-.LFB75
 12338 0168 00000000 		.4byte	.LFB76
 12339 016c 94000000 		.4byte	.LFE76-.LFB76
 12340 0170 00000000 		.4byte	.LFB77
 12341 0174 18000000 		.4byte	.LFE77-.LFB77
 12342 0178 00000000 		.4byte	.LFB78
 12343 017c 1C000000 		.4byte	.LFE78-.LFB78
 12344 0180 00000000 		.4byte	.LFB79
 12345 0184 8C000000 		.4byte	.LFE79-.LFB79
 12346 0188 00000000 		.4byte	.LFB80
 12347 018c A0000000 		.4byte	.LFE80-.LFB80
 12348 0190 00000000 		.4byte	.LFB81
 12349 0194 14010000 		.4byte	.LFE81-.LFB81
 12350 0198 00000000 		.4byte	.LFB82
 12351 019c 50010000 		.4byte	.LFE82-.LFB82
 12352 01a0 00000000 		.4byte	.LFB83
 12353 01a4 E4000000 		.4byte	.LFE83-.LFB83
 12354 01a8 00000000 		.4byte	.LFB84
 12355 01ac 38000000 		.4byte	.LFE84-.LFB84
 12356 01b0 00000000 		.4byte	.LFB85
 12357 01b4 30000000 		.4byte	.LFE85-.LFB85
 12358 01b8 00000000 		.4byte	0
 12359 01bc 00000000 		.4byte	0
 12360              		.section	.debug_ranges,"",%progbits
 12361              	.Ldebug_ranges0:
 12362 0000 0E000000 		.4byte	.LBB9
 12363 0004 36000000 		.4byte	.LBE9
 12364 0008 3C000000 		.4byte	.LBB14
 12365 000c 36010000 		.4byte	.LBE14
 12366 0010 44010000 		.4byte	.LBB15
 12367 0014 48010000 		.4byte	.LBE15
 12368 0018 00000000 		.4byte	0
 12369 001c 00000000 		.4byte	0
 12370 0020 0A000000 		.4byte	.LBB20
 12371 0024 1E000000 		.4byte	.LBE20
 12372 0028 22000000 		.4byte	.LBB21
 12373 002c 2A000000 		.4byte	.LBE21
 12374 0030 32000000 		.4byte	.LBB22
 12375 0034 4A000000 		.4byte	.LBE22
 12376 0038 00000000 		.4byte	0
 12377 003c 00000000 		.4byte	0
 12378 0040 00000000 		.4byte	.LFB44
 12379 0044 28000000 		.4byte	.LFE44
 12380 0048 00000000 		.4byte	.LFB69
 12381 004c 14000000 		.4byte	.LFE69
 12382 0050 00000000 		.4byte	.LFB72
 12383 0054 24000000 		.4byte	.LFE72
 12384 0058 00000000 		.4byte	.LFB71
 12385 005c 12000000 		.4byte	.LFE71
 12386 0060 00000000 		.4byte	.LFB35
 12387 0064 90000000 		.4byte	.LFE35
 12388 0068 00000000 		.4byte	.LFB67
 12389 006c 58000000 		.4byte	.LFE67
 12390 0070 00000000 		.4byte	.LFB36
 12391 0074 B4000000 		.4byte	.LFE36
 12392 0078 00000000 		.4byte	.LFB68
 12393 007c 38000000 		.4byte	.LFE68
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 325


 12394 0080 00000000 		.4byte	.LFB66
 12395 0084 08000000 		.4byte	.LFE66
 12396 0088 00000000 		.4byte	.LFB86
 12397 008c 80000000 		.4byte	.LFE86
 12398 0090 00000000 		.4byte	.LFB34
 12399 0094 66000000 		.4byte	.LFE34
 12400 0098 00000000 		.4byte	.LFB37
 12401 009c 80000000 		.4byte	.LFE37
 12402 00a0 00000000 		.4byte	.LFB40
 12403 00a4 20000000 		.4byte	.LFE40
 12404 00a8 00000000 		.4byte	.LFB41
 12405 00ac 20000000 		.4byte	.LFE41
 12406 00b0 00000000 		.4byte	.LFB42
 12407 00b4 DC000000 		.4byte	.LFE42
 12408 00b8 00000000 		.4byte	.LFB45
 12409 00bc 8C000000 		.4byte	.LFE45
 12410 00c0 00000000 		.4byte	.LFB46
 12411 00c4 B0000000 		.4byte	.LFE46
 12412 00c8 00000000 		.4byte	.LFB47
 12413 00cc 50000000 		.4byte	.LFE47
 12414 00d0 00000000 		.4byte	.LFB48
 12415 00d4 14000000 		.4byte	.LFE48
 12416 00d8 00000000 		.4byte	.LFB49
 12417 00dc 10000000 		.4byte	.LFE49
 12418 00e0 00000000 		.4byte	.LFB51
 12419 00e4 0C000000 		.4byte	.LFE51
 12420 00e8 00000000 		.4byte	.LFB52
 12421 00ec 0C000000 		.4byte	.LFE52
 12422 00f0 00000000 		.4byte	.LFB53
 12423 00f4 0C000000 		.4byte	.LFE53
 12424 00f8 00000000 		.4byte	.LFB54
 12425 00fc 10000000 		.4byte	.LFE54
 12426 0100 00000000 		.4byte	.LFB56
 12427 0104 5C010000 		.4byte	.LFE56
 12428 0108 00000000 		.4byte	.LFB50
 12429 010c 2C010000 		.4byte	.LFE50
 12430 0110 00000000 		.4byte	.LFB38
 12431 0114 60000000 		.4byte	.LFE38
 12432 0118 00000000 		.4byte	.LFB39
 12433 011c 24000000 		.4byte	.LFE39
 12434 0120 00000000 		.4byte	.LFB55
 12435 0124 24000000 		.4byte	.LFE55
 12436 0128 00000000 		.4byte	.LFB57
 12437 012c AC000000 		.4byte	.LFE57
 12438 0130 00000000 		.4byte	.LFB43
 12439 0134 9C000000 		.4byte	.LFE43
 12440 0138 00000000 		.4byte	.LFB58
 12441 013c 1C000000 		.4byte	.LFE58
 12442 0140 00000000 		.4byte	.LFB59
 12443 0144 40000000 		.4byte	.LFE59
 12444 0148 00000000 		.4byte	.LFB60
 12445 014c E0000000 		.4byte	.LFE60
 12446 0150 00000000 		.4byte	.LFB61
 12447 0154 B8000000 		.4byte	.LFE61
 12448 0158 00000000 		.4byte	.LFB62
 12449 015c 1C000000 		.4byte	.LFE62
 12450 0160 00000000 		.4byte	.LFB63
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 326


 12451 0164 10000000 		.4byte	.LFE63
 12452 0168 00000000 		.4byte	.LFB64
 12453 016c 58000000 		.4byte	.LFE64
 12454 0170 00000000 		.4byte	.LFB65
 12455 0174 0C000000 		.4byte	.LFE65
 12456 0178 00000000 		.4byte	.LFB70
 12457 017c 18000000 		.4byte	.LFE70
 12458 0180 00000000 		.4byte	.LFB73
 12459 0184 0C000000 		.4byte	.LFE73
 12460 0188 00000000 		.4byte	.LFB74
 12461 018c BC000000 		.4byte	.LFE74
 12462 0190 00000000 		.4byte	.LFB75
 12463 0194 88000000 		.4byte	.LFE75
 12464 0198 00000000 		.4byte	.LFB76
 12465 019c 94000000 		.4byte	.LFE76
 12466 01a0 00000000 		.4byte	.LFB77
 12467 01a4 18000000 		.4byte	.LFE77
 12468 01a8 00000000 		.4byte	.LFB78
 12469 01ac 1C000000 		.4byte	.LFE78
 12470 01b0 00000000 		.4byte	.LFB79
 12471 01b4 8C000000 		.4byte	.LFE79
 12472 01b8 00000000 		.4byte	.LFB80
 12473 01bc A0000000 		.4byte	.LFE80
 12474 01c0 00000000 		.4byte	.LFB81
 12475 01c4 14010000 		.4byte	.LFE81
 12476 01c8 00000000 		.4byte	.LFB82
 12477 01cc 50010000 		.4byte	.LFE82
 12478 01d0 00000000 		.4byte	.LFB83
 12479 01d4 E4000000 		.4byte	.LFE83
 12480 01d8 00000000 		.4byte	.LFB84
 12481 01dc 38000000 		.4byte	.LFE84
 12482 01e0 00000000 		.4byte	.LFB85
 12483 01e4 30000000 		.4byte	.LFE85
 12484 01e8 00000000 		.4byte	0
 12485 01ec 00000000 		.4byte	0
 12486              		.section	.debug_line,"",%progbits
 12487              	.Ldebug_line0:
 12488 0000 BD0B0000 		.section	.debug_str,"MS",%progbits,1
 12488      02007302 
 12488      00000201 
 12488      FB0E0D00 
 12488      01010101 
 12489              	.LASF47:
 12490 0000 70635461 		.ascii	"pcTaskName\000"
 12490      736B4E61 
 12490      6D6500
 12491              	.LASF33:
 12492 000b 75784E75 		.ascii	"uxNumberOfItems\000"
 12492      6D626572 
 12492      4F664974 
 12492      656D7300 
 12493              	.LASF220:
 12494 001b 76506F72 		.ascii	"vPortExitCritical\000"
 12494      74457869 
 12494      74437269 
 12494      74696361 
 12494      6C00
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 327


 12495              	.LASF228:
 12496 002d 78506F72 		.ascii	"xPortStartScheduler\000"
 12496      74537461 
 12496      72745363 
 12496      68656475 
 12496      6C657200 
 12497              	.LASF45:
 12498 0041 75785072 		.ascii	"uxPriority\000"
 12498      696F7269 
 12498      747900
 12499              	.LASF138:
 12500 004c 7078436F 		.ascii	"pxConstList\000"
 12500      6E73744C 
 12500      69737400 
 12501              	.LASF221:
 12502 0058 76506F72 		.ascii	"vPortYield\000"
 12502      74596965 
 12502      6C6400
 12503              	.LASF41:
 12504 0063 74736B54 		.ascii	"tskTaskControlBlock\000"
 12504      61736B43 
 12504      6F6E7472 
 12504      6F6C426C 
 12504      6F636B00 
 12505              	.LASF166:
 12506 0077 75784F6E 		.ascii	"uxOnlyOneMutexHeld\000"
 12506      6C794F6E 
 12506      654D7574 
 12506      65784865 
 12506      6C6400
 12507              	.LASF176:
 12508 008a 756C4269 		.ascii	"ulBitsToClearOnExit\000"
 12508      7473546F 
 12508      436C6561 
 12508      724F6E45 
 12508      78697400 
 12509              	.LASF77:
 12510 009e 70727649 		.ascii	"prvInitialiseNewTask\000"
 12510      6E697469 
 12510      616C6973 
 12510      654E6577 
 12510      5461736B 
 12511              	.LASF186:
 12512 00b3 70784869 		.ascii	"pxHigherPriorityTaskWoken\000"
 12512      67686572 
 12512      5072696F 
 12512      72697479 
 12512      5461736B 
 12513              	.LASF52:
 12514 00cd 654E6F41 		.ascii	"eNoAction\000"
 12514      6374696F 
 12514      6E00
 12515              	.LASF203:
 12516 00d7 7578546F 		.ascii	"uxTopReadyPriority\000"
 12516      70526561 
 12516      64795072 
 12516      696F7269 
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 328


 12516      747900
 12517              	.LASF0:
 12518 00ea 756E7369 		.ascii	"unsigned int\000"
 12518      676E6564 
 12518      20696E74 
 12518      00
 12519              	.LASF142:
 12520 00f7 70784576 		.ascii	"pxEventList\000"
 12520      656E744C 
 12520      69737400 
 12521              	.LASF204:
 12522 0103 78536368 		.ascii	"xSchedulerRunning\000"
 12522      6564756C 
 12522      65725275 
 12522      6E6E696E 
 12522      6700
 12523              	.LASF34:
 12524 0115 7078496E 		.ascii	"pxIndex\000"
 12524      64657800 
 12525              	.LASF22:
 12526 011d 53746163 		.ascii	"StackType_t\000"
 12526      6B547970 
 12526      655F7400 
 12527              	.LASF58:
 12528 0129 7854494D 		.ascii	"xTIME_OUT\000"
 12528      455F4F55 
 12528      5400
 12529              	.LASF191:
 12530 0133 756C4269 		.ascii	"ulBitsToClear\000"
 12530      7473546F 
 12530      436C6561 
 12530      7200
 12531              	.LASF199:
 12532 0141 75784465 		.ascii	"uxDeletedTasksWaitingCleanUp\000"
 12532      6C657465 
 12532      64546173 
 12532      6B735761 
 12532      6974696E 
 12533              	.LASF124:
 12534 015e 7850656E 		.ascii	"xPendedCounts\000"
 12534      64656443 
 12534      6F756E74 
 12534      7300
 12535              	.LASF31:
 12536 016c 784C4953 		.ascii	"xLIST_ITEM\000"
 12536      545F4954 
 12536      454D00
 12537              	.LASF192:
 12538 0177 70785265 		.ascii	"pxReadyTasksLists\000"
 12538      61647954 
 12538      61736B73 
 12538      4C697374 
 12538      7300
 12539              	.LASF184:
 12540 0189 75634F72 		.ascii	"ucOriginalNotifyState\000"
 12540      6967696E 
 12540      616C4E6F 
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 329


 12540      74696679 
 12540      53746174 
 12541              	.LASF148:
 12542 019f 76546173 		.ascii	"vTaskSetTimeOutState\000"
 12542      6B536574 
 12542      54696D65 
 12542      4F757453 
 12542      74617465 
 12543              	.LASF185:
 12544 01b4 78546173 		.ascii	"xTaskGenericNotifyFromISR\000"
 12544      6B47656E 
 12544      65726963 
 12544      4E6F7469 
 12544      66794672 
 12545              	.LASF74:
 12546 01ce 70756353 		.ascii	"pucStackByte\000"
 12546      7461636B 
 12546      42797465 
 12546      00
 12547              	.LASF193:
 12548 01db 7844656C 		.ascii	"xDelayedTaskList1\000"
 12548      61796564 
 12548      5461736B 
 12548      4C697374 
 12548      3100
 12549              	.LASF194:
 12550 01ed 7844656C 		.ascii	"xDelayedTaskList2\000"
 12550      61796564 
 12550      5461736B 
 12550      4C697374 
 12550      3200
 12551              	.LASF59:
 12552 01ff 784F7665 		.ascii	"xOverflowCount\000"
 12552      72666C6F 
 12552      77436F75 
 12552      6E7400
 12553              	.LASF219:
 12554 020e 76506F72 		.ascii	"vPortEnterCritical\000"
 12554      74456E74 
 12554      65724372 
 12554      69746963 
 12554      616C00
 12555              	.LASF131:
 12556 0221 78546173 		.ascii	"xTaskCatchUpTicks\000"
 12556      6B436174 
 12556      63685570 
 12556      5469636B 
 12556      7300
 12557              	.LASF65:
 12558 0233 756C5061 		.ascii	"ulParameters\000"
 12558      72616D65 
 12558      74657273 
 12558      00
 12559              	.LASF108:
 12560 0240 78546173 		.ascii	"xTaskToResume\000"
 12560      6B546F52 
 12560      6573756D 
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 330


 12560      6500
 12561              	.LASF98:
 12562 024e 75785265 		.ascii	"uxReturn\000"
 12562      7475726E 
 12562      00
 12563              	.LASF168:
 12564 0257 75785461 		.ascii	"uxTaskGetNumberOfTasks\000"
 12564      736B4765 
 12564      744E756D 
 12564      6265724F 
 12564      66546173 
 12565              	.LASF67:
 12566 026e 74736B54 		.ascii	"tskTCB\000"
 12566      434200
 12567              	.LASF110:
 12568 0275 75785361 		.ascii	"uxSavedInterruptStatus\000"
 12568      76656449 
 12568      6E746572 
 12568      72757074 
 12568      53746174 
 12569              	.LASF18:
 12570 028c 75696E74 		.ascii	"uint32_t\000"
 12570      33325F74 
 12570      00
 12571              	.LASF51:
 12572 0295 75634E6F 		.ascii	"ucNotifyState\000"
 12572      74696679 
 12572      53746174 
 12572      6500
 12573              	.LASF222:
 12574 02a3 75784C69 		.ascii	"uxListRemove\000"
 12574      73745265 
 12574      6D6F7665 
 12574      00
 12575              	.LASF106:
 12576 02b0 78596965 		.ascii	"xYieldRequired\000"
 12576      6C645265 
 12576      71756972 
 12576      656400
 12577              	.LASF178:
 12578 02bf 78546173 		.ascii	"xTaskGenericNotify\000"
 12578      6B47656E 
 12578      65726963 
 12578      4E6F7469 
 12578      667900
 12579              	.LASF19:
 12580 02d2 666C6F61 		.ascii	"float\000"
 12580      7400
 12581              	.LASF145:
 12582 02d8 7078556E 		.ascii	"pxUnblockedTCB\000"
 12582      626C6F63 
 12582      6B656454 
 12582      434200
 12583              	.LASF94:
 12584 02e7 75735374 		.ascii	"usStackDepth\000"
 12584      61636B44 
 12584      65707468 
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 331


 12584      00
 12585              	.LASF172:
 12586 02f4 78436C65 		.ascii	"xClearCountOnExit\000"
 12586      6172436F 
 12586      756E744F 
 12586      6E457869 
 12586      7400
 12587              	.LASF153:
 12588 0306 78456C61 		.ascii	"xElapsedTime\000"
 12588      70736564 
 12588      54696D65 
 12588      00
 12589              	.LASF55:
 12590 0313 65536574 		.ascii	"eSetValueWithOverwrite\000"
 12590      56616C75 
 12590      65576974 
 12590      684F7665 
 12590      72777269 
 12591              	.LASF13:
 12592 032a 6C6F6E67 		.ascii	"long long unsigned int\000"
 12592      206C6F6E 
 12592      6720756E 
 12592      7369676E 
 12592      65642069 
 12593              	.LASF115:
 12594 0341 78546173 		.ascii	"xTaskGetTickCountFromISR\000"
 12594      6B476574 
 12594      5469636B 
 12594      436F756E 
 12594      7446726F 
 12595              	.LASF100:
 12596 035a 75785361 		.ascii	"uxSavedInterruptState\000"
 12596      76656449 
 12596      6E746572 
 12596      72757074 
 12596      53746174 
 12597              	.LASF175:
 12598 0370 756C4269 		.ascii	"ulBitsToClearOnEntry\000"
 12598      7473546F 
 12598      436C6561 
 12598      724F6E45 
 12598      6E747279 
 12599              	.LASF197:
 12600 0385 7850656E 		.ascii	"xPendingReadyList\000"
 12600      64696E67 
 12600      52656164 
 12600      794C6973 
 12600      7400
 12601              	.LASF233:
 12602 0397 433A5C55 		.ascii	"C:\\Users\\Hello Kitty\\Desktop\\MicrocontrollersLa"
 12602      73657273 
 12602      5C48656C 
 12602      6C6F204B 
 12602      69747479 
 12603 03c6 625C4C61 		.ascii	"b\\Lab 8 - FreeRTOS\\Project\\Design01.cydsn\000"
 12603      62203820 
 12603      2D204672 
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 332


 12603      65655254 
 12603      4F535C50 
 12604              	.LASF198:
 12605 03f0 78546173 		.ascii	"xTasksWaitingTermination\000"
 12605      6B735761 
 12605      6974696E 
 12605      67546572 
 12605      6D696E61 
 12606              	.LASF8:
 12607 0409 5F5F7569 		.ascii	"__uint16_t\000"
 12607      6E743136 
 12607      5F7400
 12608              	.LASF163:
 12609 0414 76546173 		.ascii	"vTaskPriorityDisinheritAfterTimeout\000"
 12609      6B507269 
 12609      6F726974 
 12609      79446973 
 12609      696E6865 
 12610              	.LASF109:
 12611 0438 78546173 		.ascii	"xTaskResumeFromISR\000"
 12611      6B526573 
 12611      756D6546 
 12611      726F6D49 
 12611      535200
 12612              	.LASF213:
 12613 044b 7578546F 		.ascii	"uxTopUsedPriority\000"
 12613      70557365 
 12613      64507269 
 12613      6F726974 
 12613      7900
 12614              	.LASF154:
 12615 045d 76546173 		.ascii	"vTaskSuspendAll\000"
 12615      6B537573 
 12615      70656E64 
 12615      416C6C00 
 12616              	.LASF156:
 12617 046d 75785461 		.ascii	"uxTaskGetStackHighWaterMark\000"
 12617      736B4765 
 12617      74537461 
 12617      636B4869 
 12617      67685761 
 12618              	.LASF118:
 12619 0489 78546173 		.ascii	"xTaskIncrementTick\000"
 12619      6B496E63 
 12619      72656D65 
 12619      6E745469 
 12619      636B00
 12620              	.LASF231:
 12621 049c 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 12621      43313120 
 12621      352E342E 
 12621      31203230 
 12621      31363036 
 12622 04cf 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -O"
 12622      20726576 
 12622      6973696F 
 12622      6E203233 
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 333


 12622      37373135 
 12623 0502 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 12623      66756E63 
 12623      74696F6E 
 12623      2D736563 
 12623      74696F6E 
 12624              	.LASF57:
 12625 052a 654E6F74 		.ascii	"eNotifyAction\000"
 12625      69667941 
 12625      6374696F 
 12625      6E00
 12626              	.LASF4:
 12627 0538 73697A65 		.ascii	"size_t\000"
 12627      5F7400
 12628              	.LASF54:
 12629 053f 65496E63 		.ascii	"eIncrement\000"
 12629      72656D65 
 12629      6E7400
 12630              	.LASF37:
 12631 054a 784D494E 		.ascii	"xMINI_LIST_ITEM\000"
 12631      495F4C49 
 12631      53545F49 
 12631      54454D00 
 12632              	.LASF202:
 12633 055a 78546963 		.ascii	"xTickCount\000"
 12633      6B436F75 
 12633      6E7400
 12634              	.LASF32:
 12635 0565 784C4953 		.ascii	"xLIST\000"
 12635      5400
 12636              	.LASF112:
 12637 056b 76546173 		.ascii	"vTaskEndScheduler\000"
 12637      6B456E64 
 12637      53636865 
 12637      64756C65 
 12637      7200
 12638              	.LASF97:
 12639 057d 75785461 		.ascii	"uxTaskPriorityGet\000"
 12639      736B5072 
 12639      696F7269 
 12639      74794765 
 12639      7400
 12640              	.LASF93:
 12641 058f 78436F6E 		.ascii	"xConstTickCount\000"
 12641      73745469 
 12641      636B436F 
 12641      756E7400 
 12642              	.LASF225:
 12643 059f 764C6973 		.ascii	"vListInsertEnd\000"
 12643      74496E73 
 12643      65727445 
 12643      6E6400
 12644              	.LASF200:
 12645 05ae 78537573 		.ascii	"xSuspendedTaskList\000"
 12645      70656E64 
 12645      65645461 
 12645      736B4C69 
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 334


 12645      737400
 12646              	.LASF79:
 12647 05c1 70634E61 		.ascii	"pcName\000"
 12647      6D6500
 12648              	.LASF196:
 12649 05c8 70784F76 		.ascii	"pxOverflowDelayedTaskList\000"
 12649      6572666C 
 12649      6F774465 
 12649      6C617965 
 12649      64546173 
 12650              	.LASF141:
 12651 05e2 76546173 		.ascii	"vTaskPlaceOnEventList\000"
 12651      6B506C61 
 12651      63654F6E 
 12651      4576656E 
 12651      744C6973 
 12652              	.LASF129:
 12653 05f8 76546173 		.ascii	"vTaskDelay\000"
 12653      6B44656C 
 12653      617900
 12654              	.LASF169:
 12655 0603 70765461 		.ascii	"pvTaskIncrementMutexHeldCount\000"
 12655      736B496E 
 12655      6372656D 
 12655      656E744D 
 12655      75746578 
 12656              	.LASF50:
 12657 0621 756C4E6F 		.ascii	"ulNotifiedValue\000"
 12657      74696669 
 12657      65645661 
 12657      6C756500 
 12658              	.LASF146:
 12659 0631 76546173 		.ascii	"vTaskRemoveFromUnorderedEventList\000"
 12659      6B52656D 
 12659      6F766546 
 12659      726F6D55 
 12659      6E6F7264 
 12660              	.LASF49:
 12661 0653 75784D75 		.ascii	"uxMutexesHeld\000"
 12661      74657865 
 12661      7348656C 
 12661      6400
 12662              	.LASF162:
 12663 0661 78546173 		.ascii	"xTaskPriorityDisinherit\000"
 12663      6B507269 
 12663      6F726974 
 12663      79446973 
 12663      696E6865 
 12664              	.LASF144:
 12665 0679 78546173 		.ascii	"xTaskRemoveFromEventList\000"
 12665      6B52656D 
 12665      6F766546 
 12665      726F6D45 
 12665      76656E74 
 12666              	.LASF15:
 12667 0692 63686172 		.ascii	"char\000"
 12667      00
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 335


 12668              	.LASF36:
 12669 0697 4C697374 		.ascii	"ListItem_t\000"
 12669      4974656D 
 12669      5F7400
 12670              	.LASF56:
 12671 06a2 65536574 		.ascii	"eSetValueWithoutOverwrite\000"
 12671      56616C75 
 12671      65576974 
 12671      686F7574 
 12671      4F766572 
 12672              	.LASF24:
 12673 06bc 55426173 		.ascii	"UBaseType_t\000"
 12673      65547970 
 12673      655F7400 
 12674              	.LASF80:
 12675 06c8 756C5374 		.ascii	"ulStackDepth\000"
 12675      61636B44 
 12675      65707468 
 12675      00
 12676              	.LASF174:
 12677 06d5 78546173 		.ascii	"xTaskGenericNotifyWait\000"
 12677      6B47656E 
 12677      65726963 
 12677      4E6F7469 
 12677      66795761 
 12678              	.LASF189:
 12679 06ec 7578496E 		.ascii	"uxIndexToClear\000"
 12679      64657854 
 12679      6F436C65 
 12679      617200
 12680              	.LASF128:
 12681 06fb 7853686F 		.ascii	"xShouldDelay\000"
 12681      756C6444 
 12681      656C6179 
 12681      00
 12682              	.LASF88:
 12683 0708 70727649 		.ascii	"prvIdleTask\000"
 12683      646C6554 
 12683      61736B00 
 12684              	.LASF35:
 12685 0714 784C6973 		.ascii	"xListEnd\000"
 12685      74456E64 
 12685      00
 12686              	.LASF170:
 12687 071d 756C5461 		.ascii	"ulTaskGenericNotifyTake\000"
 12687      736B4765 
 12687      6E657269 
 12687      634E6F74 
 12687      69667954 
 12688              	.LASF38:
 12689 0735 4D696E69 		.ascii	"MiniListItem_t\000"
 12689      4C697374 
 12689      4974656D 
 12689      5F7400
 12690              	.LASF96:
 12691 0744 78546173 		.ascii	"xTaskCreate\000"
 12691      6B437265 
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 336


 12691      61746500 
 12692              	.LASF86:
 12693 0750 70727641 		.ascii	"prvAddNewTaskToReadyList\000"
 12693      64644E65 
 12693      77546173 
 12693      6B546F52 
 12693      65616479 
 12694              	.LASF16:
 12695 0769 75696E74 		.ascii	"uint8_t\000"
 12695      385F7400 
 12696              	.LASF83:
 12697 0771 70784E65 		.ascii	"pxNewTCB\000"
 12697      77544342 
 12697      00
 12698              	.LASF232:
 12699 077a 46726565 		.ascii	"FreeRTOS\\Source\\tasks.c\000"
 12699      52544F53 
 12699      5C536F75 
 12699      7263655C 
 12699      7461736B 
 12700              	.LASF78:
 12701 0792 70785461 		.ascii	"pxTaskCode\000"
 12701      736B436F 
 12701      646500
 12702              	.LASF133:
 12703 079d 78596965 		.ascii	"xYieldOccurred\000"
 12703      6C644F63 
 12703      63757272 
 12703      656400
 12704              	.LASF66:
 12705 07ac 4D656D6F 		.ascii	"MemoryRegion_t\000"
 12705      72795265 
 12705      67696F6E 
 12705      5F7400
 12706              	.LASF209:
 12707 07bb 784E6578 		.ascii	"xNextTaskUnblockTime\000"
 12707      74546173 
 12707      6B556E62 
 12707      6C6F636B 
 12707      54696D65 
 12708              	.LASF217:
 12709 07d0 7078506F 		.ascii	"pxPortInitialiseStack\000"
 12709      7274496E 
 12709      69746961 
 12709      6C697365 
 12709      53746163 
 12710              	.LASF1:
 12711 07e6 6C6F6E67 		.ascii	"long long int\000"
 12711      206C6F6E 
 12711      6720696E 
 12711      7400
 12712              	.LASF173:
 12713 07f4 756C5265 		.ascii	"ulReturn\000"
 12713      7475726E 
 12713      00
 12714              	.LASF190:
 12715 07fd 756C5461 		.ascii	"ulTaskGenericNotifyValueClear\000"
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 337


 12715      736B4765 
 12715      6E657269 
 12715      634E6F74 
 12715      69667956 
 12716              	.LASF64:
 12717 081b 756C4C65 		.ascii	"ulLengthInBytes\000"
 12717      6E677468 
 12717      496E4279 
 12717      74657300 
 12718              	.LASF23:
 12719 082b 42617365 		.ascii	"BaseType_t\000"
 12719      54797065 
 12719      5F7400
 12720              	.LASF136:
 12721 0836 756C4368 		.ascii	"ulCheckValue\000"
 12721      65636B56 
 12721      616C7565 
 12721      00
 12722              	.LASF234:
 12723 0843 70727652 		.ascii	"prvResetNextTaskUnblockTime\000"
 12723      65736574 
 12723      4E657874 
 12723      5461736B 
 12723      556E626C 
 12724              	.LASF60:
 12725 085f 7854696D 		.ascii	"xTimeOnEntering\000"
 12725      654F6E45 
 12725      6E746572 
 12725      696E6700 
 12726              	.LASF103:
 12727 086f 75784E65 		.ascii	"uxNewPriority\000"
 12727      77507269 
 12727      6F726974 
 12727      7900
 12728              	.LASF21:
 12729 087d 5461736B 		.ascii	"TaskFunction_t\000"
 12729      46756E63 
 12729      74696F6E 
 12729      5F7400
 12730              	.LASF27:
 12731 088c 70784E65 		.ascii	"pxNext\000"
 12731      787400
 12732              	.LASF183:
 12733 0893 70756C50 		.ascii	"pulPreviousNotificationValue\000"
 12733      72657669 
 12733      6F75734E 
 12733      6F746966 
 12733      69636174 
 12734              	.LASF215:
 12735 08b0 6D656D73 		.ascii	"memset\000"
 12735      657400
 12736              	.LASF149:
 12737 08b7 70785469 		.ascii	"pxTimeOut\000"
 12737      6D654F75 
 12737      7400
 12738              	.LASF130:
 12739 08c1 78546963 		.ascii	"xTicksToDelay\000"
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 338


 12739      6B73546F 
 12739      44656C61 
 12739      7900
 12740              	.LASF99:
 12741 08cf 75785461 		.ascii	"uxTaskPriorityGetFromISR\000"
 12741      736B5072 
 12741      696F7269 
 12741      74794765 
 12741      7446726F 
 12742              	.LASF75:
 12743 08e8 756C436F 		.ascii	"ulCount\000"
 12743      756E7400 
 12744              	.LASF61:
 12745 08f0 54696D65 		.ascii	"TimeOut_t\000"
 12745      4F75745F 
 12745      7400
 12746              	.LASF150:
 12747 08fa 76546173 		.ascii	"vTaskInternalSetTimeOutState\000"
 12747      6B496E74 
 12747      65726E61 
 12747      6C536574 
 12747      54696D65 
 12748              	.LASF208:
 12749 0917 75785461 		.ascii	"uxTaskNumber\000"
 12749      736B4E75 
 12749      6D626572 
 12749      00
 12750              	.LASF40:
 12751 0924 5461736B 		.ascii	"TaskHandle_t\000"
 12751      48616E64 
 12751      6C655F74 
 12751      00
 12752              	.LASF182:
 12753 0931 65416374 		.ascii	"eAction\000"
 12753      696F6E00 
 12754              	.LASF167:
 12755 0939 75785461 		.ascii	"uxTaskResetEventItemValue\000"
 12755      736B5265 
 12755      73657445 
 12755      76656E74 
 12755      4974656D 
 12756              	.LASF102:
 12757 0953 76546173 		.ascii	"vTaskPrioritySet\000"
 12757      6B507269 
 12757      6F726974 
 12757      79536574 
 12757      00
 12758              	.LASF226:
 12759 0964 756C5365 		.ascii	"ulSetInterruptMaskFromISR\000"
 12759      74496E74 
 12759      65727275 
 12759      70744D61 
 12759      736B4672 
 12760              	.LASF39:
 12761 097e 4C697374 		.ascii	"List_t\000"
 12761      5F7400
 12762              	.LASF117:
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 339


 12763 0985 78546173 		.ascii	"xTaskToQuery\000"
 12763      6B546F51 
 12763      75657279 
 12763      00
 12764              	.LASF25:
 12765 0992 5469636B 		.ascii	"TickType_t\000"
 12765      54797065 
 12765      5F7400
 12766              	.LASF179:
 12767 099d 78546173 		.ascii	"xTaskToNotify\000"
 12767      6B546F4E 
 12767      6F746966 
 12767      7900
 12768              	.LASF73:
 12769 09ab 78546173 		.ascii	"xTask\000"
 12769      6B00
 12770              	.LASF53:
 12771 09b1 65536574 		.ascii	"eSetBits\000"
 12771      42697473 
 12771      00
 12772              	.LASF2:
 12773 09ba 6C6F6E67 		.ascii	"long double\000"
 12773      20646F75 
 12773      626C6500 
 12774              	.LASF62:
 12775 09c6 784D454D 		.ascii	"xMEMORY_REGION\000"
 12775      4F52595F 
 12775      52454749 
 12775      4F4E00
 12776              	.LASF17:
 12777 09d5 75696E74 		.ascii	"uint16_t\000"
 12777      31365F74 
 12777      00
 12778              	.LASF101:
 12779 09de 76546173 		.ascii	"vTaskDelete\000"
 12779      6B44656C 
 12779      65746500 
 12780              	.LASF165:
 12781 09ea 75785072 		.ascii	"uxPriorityToUse\000"
 12781      696F7269 
 12781      7479546F 
 12781      55736500 
 12782              	.LASF134:
 12783 09fa 76546173 		.ascii	"vTaskSwitchContext\000"
 12783      6B537769 
 12783      74636843 
 12783      6F6E7465 
 12783      787400
 12784              	.LASF207:
 12785 0a0d 784E756D 		.ascii	"xNumOfOverflows\000"
 12785      4F664F76 
 12785      6572666C 
 12785      6F777300 
 12786              	.LASF30:
 12787 0a1d 7076436F 		.ascii	"pvContainer\000"
 12787      6E746169 
 12787      6E657200 
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 340


 12788              	.LASF210:
 12789 0a29 7849646C 		.ascii	"xIdleTaskHandle\000"
 12789      65546173 
 12789      6B48616E 
 12789      646C6500 
 12790              	.LASF164:
 12791 0a39 75784869 		.ascii	"uxHighestPriorityWaitingTask\000"
 12791      67686573 
 12791      74507269 
 12791      6F726974 
 12791      79576169 
 12792              	.LASF230:
 12793 0a56 76417070 		.ascii	"vApplicationStackOverflowHook\000"
 12793      6C696361 
 12793      74696F6E 
 12793      53746163 
 12793      6B4F7665 
 12794              	.LASF7:
 12795 0a74 73686F72 		.ascii	"short int\000"
 12795      7420696E 
 12795      7400
 12796              	.LASF216:
 12797 0a7e 764C6973 		.ascii	"vListInitialiseItem\000"
 12797      74496E69 
 12797      7469616C 
 12797      69736549 
 12797      74656D00 
 12798              	.LASF81:
 12799 0a92 70765061 		.ascii	"pvParameters\000"
 12799      72616D65 
 12799      74657273 
 12799      00
 12800              	.LASF26:
 12801 0a9f 78497465 		.ascii	"xItemValue\000"
 12801      6D56616C 
 12801      756500
 12802              	.LASF10:
 12803 0aaa 6C6F6E67 		.ascii	"long int\000"
 12803      20696E74 
 12803      00
 12804              	.LASF122:
 12805 0ab3 78546173 		.ascii	"xTaskResumeAll\000"
 12805      6B526573 
 12805      756D6541 
 12805      6C6C00
 12806              	.LASF195:
 12807 0ac2 70784465 		.ascii	"pxDelayedTaskList\000"
 12807      6C617965 
 12807      64546173 
 12807      6B4C6973 
 12807      7400
 12808              	.LASF113:
 12809 0ad4 78546173 		.ascii	"xTaskGetTickCount\000"
 12809      6B476574 
 12809      5469636B 
 12809      436F756E 
 12809      7400
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 341


 12810              	.LASF71:
 12811 0ae6 70727654 		.ascii	"prvTaskIsTaskSuspended\000"
 12811      61736B49 
 12811      73546173 
 12811      6B537573 
 12811      70656E64 
 12812              	.LASF119:
 12813 0afd 78537769 		.ascii	"xSwitchRequired\000"
 12813      74636852 
 12813      65717569 
 12813      72656400 
 12814              	.LASF125:
 12815 0b0d 78546173 		.ascii	"xTaskDelayUntil\000"
 12815      6B44656C 
 12815      6179556E 
 12815      74696C00 
 12816              	.LASF46:
 12817 0b1d 70785374 		.ascii	"pxStack\000"
 12817      61636B00 
 12818              	.LASF95:
 12819 0b25 78546173 		.ascii	"xTaskToDelete\000"
 12819      6B546F44 
 12819      656C6574 
 12819      6500
 12820              	.LASF181:
 12821 0b33 756C5661 		.ascii	"ulValue\000"
 12821      6C756500 
 12822              	.LASF140:
 12823 0b3b 78546173 		.ascii	"xTaskToSuspend\000"
 12823      6B546F53 
 12823      75737065 
 12823      6E6400
 12824              	.LASF151:
 12825 0b4a 78546173 		.ascii	"xTaskCheckForTimeOut\000"
 12825      6B436865 
 12825      636B466F 
 12825      7254696D 
 12825      654F7574 
 12826              	.LASF229:
 12827 0b5f 76506F72 		.ascii	"vPortEndScheduler\000"
 12827      74456E64 
 12827      53636865 
 12827      64756C65 
 12827      7200
 12828              	.LASF214:
 12829 0b71 76506F72 		.ascii	"vPortFree\000"
 12829      74467265 
 12829      6500
 12830              	.LASF126:
 12831 0b7b 70785072 		.ascii	"pxPreviousWakeTime\000"
 12831      6576696F 
 12831      75735761 
 12831      6B655469 
 12831      6D6500
 12832              	.LASF5:
 12833 0b8e 5F5F7569 		.ascii	"__uint8_t\000"
 12833      6E74385F 
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 342


 12833      7400
 12834              	.LASF177:
 12835 0b98 70756C4E 		.ascii	"pulNotificationValue\000"
 12835      6F746966 
 12835      69636174 
 12835      696F6E56 
 12835      616C7565 
 12836              	.LASF69:
 12837 0bad 78526574 		.ascii	"xReturn\000"
 12837      75726E00 
 12838              	.LASF14:
 12839 0bb5 73697A65 		.ascii	"sizetype\000"
 12839      74797065 
 12839      00
 12840              	.LASF155:
 12841 0bbe 76546173 		.ascii	"vTaskMissedYield\000"
 12841      6B4D6973 
 12841      73656459 
 12841      69656C64 
 12841      00
 12842              	.LASF12:
 12843 0bcf 6C6F6E67 		.ascii	"long unsigned int\000"
 12843      20756E73 
 12843      69676E65 
 12843      6420696E 
 12843      7400
 12844              	.LASF159:
 12845 0be1 78546173 		.ascii	"xTaskPriorityInherit\000"
 12845      6B507269 
 12845      6F726974 
 12845      79496E68 
 12845      65726974 
 12846              	.LASF157:
 12847 0bf6 70756345 		.ascii	"pucEndOfStack\000"
 12847      6E644F66 
 12847      53746163 
 12847      6B00
 12848              	.LASF161:
 12849 0c04 70784D75 		.ascii	"pxMutexHolderTCB\000"
 12849      74657848 
 12849      6F6C6465 
 12849      72544342 
 12849      00
 12850              	.LASF116:
 12851 0c15 70635461 		.ascii	"pcTaskGetName\000"
 12851      736B4765 
 12851      744E616D 
 12851      6500
 12852              	.LASF114:
 12853 0c23 78546963 		.ascii	"xTicks\000"
 12853      6B7300
 12854              	.LASF111:
 12855 0c2a 76546173 		.ascii	"vTaskStartScheduler\000"
 12855      6B537461 
 12855      72745363 
 12855      68656475 
 12855      6C657200 
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 343


 12856              	.LASF91:
 12857 0c3e 7843616E 		.ascii	"xCanBlockIndefinitely\000"
 12857      426C6F63 
 12857      6B496E64 
 12857      6566696E 
 12857      6974656C 
 12858              	.LASF135:
 12859 0c54 70756C53 		.ascii	"pulStack\000"
 12859      7461636B 
 12859      00
 12860              	.LASF63:
 12861 0c5d 70764261 		.ascii	"pvBaseAddress\000"
 12861      73654164 
 12861      64726573 
 12861      7300
 12862              	.LASF120:
 12863 0c6b 70785465 		.ascii	"pxTemp\000"
 12863      6D7000
 12864              	.LASF187:
 12865 0c72 76546173 		.ascii	"vTaskGenericNotifyGiveFromISR\000"
 12865      6B47656E 
 12865      65726963 
 12865      4E6F7469 
 12865      66794769 
 12866              	.LASF6:
 12867 0c90 756E7369 		.ascii	"unsigned char\000"
 12867      676E6564 
 12867      20636861 
 12867      7200
 12868              	.LASF143:
 12869 0c9e 76546173 		.ascii	"vTaskPlaceOnUnorderedEventList\000"
 12869      6B506C61 
 12869      63654F6E 
 12869      556E6F72 
 12869      64657265 
 12870              	.LASF11:
 12871 0cbd 5F5F7569 		.ascii	"__uint32_t\000"
 12871      6E743332 
 12871      5F7400
 12872              	.LASF218:
 12873 0cc8 764C6973 		.ascii	"vListInitialise\000"
 12873      74496E69 
 12873      7469616C 
 12873      69736500 
 12874              	.LASF171:
 12875 0cd8 7578496E 		.ascii	"uxIndexToWait\000"
 12875      64657854 
 12875      6F576169 
 12875      7400
 12876              	.LASF152:
 12877 0ce6 70785469 		.ascii	"pxTicksToWait\000"
 12877      636B7354 
 12877      6F576169 
 12877      7400
 12878              	.LASF223:
 12879 0cf4 764C6973 		.ascii	"vListInsert\000"
 12879      74496E73 
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 344


 12879      65727400 
 12880              	.LASF137:
 12881 0d00 7578546F 		.ascii	"uxTopPriority\000"
 12881      70507269 
 12881      6F726974 
 12881      7900
 12882              	.LASF48:
 12883 0d0e 75784261 		.ascii	"uxBasePriority\000"
 12883      73655072 
 12883      696F7269 
 12883      747900
 12884              	.LASF44:
 12885 0d1d 78457665 		.ascii	"xEventListItem\000"
 12885      6E744C69 
 12885      73744974 
 12885      656D00
 12886              	.LASF105:
 12887 0d2c 75785072 		.ascii	"uxPriorityUsedOnEntry\000"
 12887      696F7269 
 12887      74795573 
 12887      65644F6E 
 12887      456E7472 
 12888              	.LASF68:
 12889 0d42 5443425F 		.ascii	"TCB_t\000"
 12889      7400
 12890              	.LASF180:
 12891 0d48 7578496E 		.ascii	"uxIndexToNotify\000"
 12891      64657854 
 12891      6F4E6F74 
 12891      69667900 
 12892              	.LASF90:
 12893 0d58 78546963 		.ascii	"xTicksToWait\000"
 12893      6B73546F 
 12893      57616974 
 12893      00
 12894              	.LASF29:
 12895 0d65 70764F77 		.ascii	"pvOwner\000"
 12895      6E657200 
 12896              	.LASF76:
 12897 0d6d 70727644 		.ascii	"prvDeleteTCB\000"
 12897      656C6574 
 12897      65544342 
 12897      00
 12898              	.LASF139:
 12899 0d7a 76546173 		.ascii	"vTaskSuspend\000"
 12899      6B537573 
 12899      70656E64 
 12899      00
 12900              	.LASF227:
 12901 0d87 76436C65 		.ascii	"vClearInterruptMaskFromISR\000"
 12901      6172496E 
 12901      74657272 
 12901      7570744D 
 12901      61736B46 
 12902              	.LASF123:
 12903 0da2 78416C72 		.ascii	"xAlreadyYielded\000"
 12903      65616479 
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 345


 12903      5969656C 
 12903      64656400 
 12904              	.LASF158:
 12905 0db2 78546173 		.ascii	"xTaskGetCurrentTaskHandle\000"
 12905      6B476574 
 12905      43757272 
 12905      656E7454 
 12905      61736B48 
 12906              	.LASF205:
 12907 0dcc 7850656E 		.ascii	"xPendedTicks\000"
 12907      64656454 
 12907      69636B73 
 12907      00
 12908              	.LASF72:
 12909 0dd9 70727654 		.ascii	"prvTaskCheckFreeStackSpace\000"
 12909      61736B43 
 12909      6865636B 
 12909      46726565 
 12909      53746163 
 12910              	.LASF132:
 12911 0df4 78546963 		.ascii	"xTicksToCatchUp\000"
 12911      6B73546F 
 12911      43617463 
 12911      68557000 
 12912              	.LASF84:
 12913 0e04 78526567 		.ascii	"xRegions\000"
 12913      696F6E73 
 12913      00
 12914              	.LASF89:
 12915 0e0d 70727641 		.ascii	"prvAddCurrentTaskToDelayedList\000"
 12915      64644375 
 12915      7272656E 
 12915      74546173 
 12915      6B546F44 
 12916              	.LASF212:
 12917 0e2c 70784375 		.ascii	"pxCurrentTCB\000"
 12917      7272656E 
 12917      74544342 
 12917      00
 12918              	.LASF28:
 12919 0e39 70785072 		.ascii	"pxPrevious\000"
 12919      6576696F 
 12919      757300
 12920              	.LASF201:
 12921 0e44 75784375 		.ascii	"uxCurrentNumberOfTasks\000"
 12921      7272656E 
 12921      744E756D 
 12921      6265724F 
 12921      66546173 
 12922              	.LASF127:
 12923 0e5b 7854696D 		.ascii	"xTimeIncrement\000"
 12923      65496E63 
 12923      72656D65 
 12923      6E7400
 12924              	.LASF3:
 12925 0e6a 7369676E 		.ascii	"signed char\000"
 12925      65642063 
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 346


 12925      68617200 
 12926              	.LASF9:
 12927 0e76 73686F72 		.ascii	"short unsigned int\000"
 12927      7420756E 
 12927      7369676E 
 12927      65642069 
 12927      6E7400
 12928              	.LASF92:
 12929 0e89 7854696D 		.ascii	"xTimeToWake\000"
 12929      65546F57 
 12929      616B6500 
 12930              	.LASF43:
 12931 0e95 78537461 		.ascii	"xStateListItem\000"
 12931      74654C69 
 12931      73744974 
 12931      656D00
 12932              	.LASF70:
 12933 0ea4 70785443 		.ascii	"pxTCB\000"
 12933      4200
 12934              	.LASF188:
 12935 0eaa 78546173 		.ascii	"xTaskGenericNotifyStateClear\000"
 12935      6B47656E 
 12935      65726963 
 12935      4E6F7469 
 12935      66795374 
 12936              	.LASF20:
 12937 0ec7 646F7562 		.ascii	"double\000"
 12937      6C6500
 12938              	.LASF211:
 12939 0ece 75785363 		.ascii	"uxSchedulerSuspended\000"
 12939      68656475 
 12939      6C657253 
 12939      75737065 
 12939      6E646564 
 12940              	.LASF160:
 12941 0ee3 70784D75 		.ascii	"pxMutexHolder\000"
 12941      74657848 
 12941      6F6C6465 
 12941      7200
 12942              	.LASF42:
 12943 0ef1 7078546F 		.ascii	"pxTopOfStack\000"
 12943      704F6653 
 12943      7461636B 
 12943      00
 12944              	.LASF107:
 12945 0efe 76546173 		.ascii	"vTaskResume\000"
 12945      6B526573 
 12945      756D6500 
 12946              	.LASF224:
 12947 0f0a 7076506F 		.ascii	"pvPortMalloc\000"
 12947      72744D61 
 12947      6C6C6F63 
 12947      00
 12948              	.LASF85:
 12949 0f17 70727649 		.ascii	"prvInitialiseTaskLists\000"
 12949      6E697469 
 12949      616C6973 
ARM GAS  C:\Users\HELLOK~1\AppData\Local\Temp\ccGbyZA4.s 			page 347


 12949      65546173 
 12949      6B4C6973 
 12950              	.LASF121:
 12951 0f2e 70784C69 		.ascii	"pxList\000"
 12951      737400
 12952              	.LASF147:
 12953 0f35 70784576 		.ascii	"pxEventListItem\000"
 12953      656E744C 
 12953      69737449 
 12953      74656D00 
 12954              	.LASF82:
 12955 0f45 70784372 		.ascii	"pxCreatedTask\000"
 12955      65617465 
 12955      64546173 
 12955      6B00
 12956              	.LASF87:
 12957 0f53 70727643 		.ascii	"prvCheckTasksWaitingTermination\000"
 12957      6865636B 
 12957      5461736B 
 12957      73576169 
 12957      74696E67 
 12958              	.LASF104:
 12959 0f73 75784375 		.ascii	"uxCurrentBasePriority\000"
 12959      7272656E 
 12959      74426173 
 12959      65507269 
 12959      6F726974 
 12960              	.LASF206:
 12961 0f89 78596965 		.ascii	"xYieldPending\000"
 12961      6C645065 
 12961      6E64696E 
 12961      6700
 12962              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
